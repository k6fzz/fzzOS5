
./bin/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <to_usermode>:
ffffffff80000000:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000003:	48 89 f4             	mov    %rsi,%rsp
ffffffff80000006:	41 bb 02 02 00 00    	mov    $0x202,%r11d
ffffffff8000000c:	0f 07                	sysret 

ffffffff8000000e <enable_sce>:
ffffffff8000000e:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff80000013:	0f 32                	rdmsr  
ffffffff80000015:	83 c8 01             	or     $0x1,%eax
ffffffff80000018:	0f 30                	wrmsr  
ffffffff8000001a:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff8000001f:	0f 32                	rdmsr  
ffffffff80000021:	ba 08 00 18 00       	mov    $0x180008,%edx
ffffffff80000026:	0f 30                	wrmsr  
ffffffff80000028:	c3                   	retq   

ffffffff80000029 <enable_sce.end>:
ffffffff80000029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80000030 <vmm_read_cr3>:
ffffffff80000030:	0f 20 d8             	mov    %cr3,%rax
ffffffff80000033:	c3                   	retq   

ffffffff80000034 <vmm_write_cr3>:
ffffffff80000034:	0f 22 df             	mov    %rdi,%cr3
ffffffff80000037:	c3                   	retq   

ffffffff80000038 <vmm_flush_tlb>:
ffffffff80000038:	0f 01 3f             	invlpg (%rdi)
ffffffff8000003b:	c3                   	retq   

ffffffff8000003c <vmm_flush_tlb.end>:
ffffffff8000003c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000040 <gdt_load>:
ffffffff80000040:	0f 01 17             	lgdt   (%rdi)
ffffffff80000043:	55                   	push   %rbp
ffffffff80000044:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000047:	6a 10                	pushq  $0x10
ffffffff80000049:	55                   	push   %rbp
ffffffff8000004a:	9c                   	pushfq 
ffffffff8000004b:	6a 08                	pushq  $0x8
ffffffff8000004d:	68 54 00 00 80       	pushq  $0xffffffff80000054
ffffffff80000052:	48 cf                	iretq  

ffffffff80000054 <gdt_load.trampoline>:
ffffffff80000054:	5d                   	pop    %rbp
ffffffff80000055:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80000059:	8e d8                	mov    %eax,%ds
ffffffff8000005b:	8e c0                	mov    %eax,%es
ffffffff8000005d:	8e e0                	mov    %eax,%fs
ffffffff8000005f:	8e e8                	mov    %eax,%gs
ffffffff80000061:	8e d0                	mov    %eax,%ss
ffffffff80000063:	66 8b 06             	mov    (%rsi),%ax
ffffffff80000066:	0f 00 d8             	ltr    %ax
ffffffff80000069:	c3                   	retq   

ffffffff8000006a <gdt_load.end>:
ffffffff8000006a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000070 <read_cr2>:
ffffffff80000070:	0f 20 d0             	mov    %cr2,%rax
ffffffff80000073:	c3                   	retq   

ffffffff80000074 <_interrupt_common>:
ffffffff80000074:	fc                   	cld    
ffffffff80000075:	50                   	push   %rax
ffffffff80000076:	53                   	push   %rbx
ffffffff80000077:	51                   	push   %rcx
ffffffff80000078:	52                   	push   %rdx
ffffffff80000079:	56                   	push   %rsi
ffffffff8000007a:	57                   	push   %rdi
ffffffff8000007b:	55                   	push   %rbp
ffffffff8000007c:	41 50                	push   %r8
ffffffff8000007e:	41 51                	push   %r9
ffffffff80000080:	41 52                	push   %r10
ffffffff80000082:	41 53                	push   %r11
ffffffff80000084:	41 54                	push   %r12
ffffffff80000086:	41 55                	push   %r13
ffffffff80000088:	41 56                	push   %r14
ffffffff8000008a:	41 57                	push   %r15
ffffffff8000008c:	48 89 e7             	mov    %rsp,%rdi
ffffffff8000008f:	e8 bc 39 00 00       	callq  ffffffff80003a50 <interrupt_handler>
ffffffff80000094:	48 89 c4             	mov    %rax,%rsp
ffffffff80000097:	41 5f                	pop    %r15
ffffffff80000099:	41 5e                	pop    %r14
ffffffff8000009b:	41 5d                	pop    %r13
ffffffff8000009d:	41 5c                	pop    %r12
ffffffff8000009f:	41 5b                	pop    %r11
ffffffff800000a1:	41 5a                	pop    %r10
ffffffff800000a3:	41 59                	pop    %r9
ffffffff800000a5:	41 58                	pop    %r8
ffffffff800000a7:	5d                   	pop    %rbp
ffffffff800000a8:	5f                   	pop    %rdi
ffffffff800000a9:	5e                   	pop    %rsi
ffffffff800000aa:	5a                   	pop    %rdx
ffffffff800000ab:	59                   	pop    %rcx
ffffffff800000ac:	5b                   	pop    %rbx
ffffffff800000ad:	58                   	pop    %rax
ffffffff800000ae:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800000b2:	48 cf                	iretq  

ffffffff800000b4 <_interrupt0>:
ffffffff800000b4:	6a 00                	pushq  $0x0
ffffffff800000b6:	6a 00                	pushq  $0x0
ffffffff800000b8:	eb ba                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000ba <_interrupt1>:
ffffffff800000ba:	6a 00                	pushq  $0x0
ffffffff800000bc:	6a 01                	pushq  $0x1
ffffffff800000be:	eb b4                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000c0 <_interrupt2>:
ffffffff800000c0:	6a 00                	pushq  $0x0
ffffffff800000c2:	6a 02                	pushq  $0x2
ffffffff800000c4:	eb ae                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000c6 <_interrupt3>:
ffffffff800000c6:	6a 00                	pushq  $0x0
ffffffff800000c8:	6a 03                	pushq  $0x3
ffffffff800000ca:	eb a8                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000cc <_interrupt4>:
ffffffff800000cc:	6a 00                	pushq  $0x0
ffffffff800000ce:	6a 04                	pushq  $0x4
ffffffff800000d0:	eb a2                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000d2 <_interrupt5>:
ffffffff800000d2:	6a 00                	pushq  $0x0
ffffffff800000d4:	6a 05                	pushq  $0x5
ffffffff800000d6:	eb 9c                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000d8 <_interrupt6>:
ffffffff800000d8:	6a 00                	pushq  $0x0
ffffffff800000da:	6a 06                	pushq  $0x6
ffffffff800000dc:	eb 96                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000de <_interrupt7>:
ffffffff800000de:	6a 00                	pushq  $0x0
ffffffff800000e0:	6a 07                	pushq  $0x7
ffffffff800000e2:	eb 90                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000e4 <_interrupt8>:
ffffffff800000e4:	6a 08                	pushq  $0x8
ffffffff800000e6:	eb 8c                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000e8 <_interrupt9>:
ffffffff800000e8:	6a 00                	pushq  $0x0
ffffffff800000ea:	6a 09                	pushq  $0x9
ffffffff800000ec:	eb 86                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000ee <_interrupt10>:
ffffffff800000ee:	6a 0a                	pushq  $0xa
ffffffff800000f0:	eb 82                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000f2 <_interrupt11>:
ffffffff800000f2:	6a 0b                	pushq  $0xb
ffffffff800000f4:	e9 7b ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800000f9 <_interrupt12>:
ffffffff800000f9:	6a 0c                	pushq  $0xc
ffffffff800000fb:	e9 74 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000100 <_interrupt13>:
ffffffff80000100:	6a 0d                	pushq  $0xd
ffffffff80000102:	e9 6d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000107 <_interrupt14>:
ffffffff80000107:	6a 0e                	pushq  $0xe
ffffffff80000109:	e9 66 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000010e <_interrupt15>:
ffffffff8000010e:	6a 00                	pushq  $0x0
ffffffff80000110:	6a 0f                	pushq  $0xf
ffffffff80000112:	e9 5d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000117 <_interrupt16>:
ffffffff80000117:	6a 00                	pushq  $0x0
ffffffff80000119:	6a 10                	pushq  $0x10
ffffffff8000011b:	e9 54 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000120 <_interrupt17>:
ffffffff80000120:	6a 11                	pushq  $0x11
ffffffff80000122:	e9 4d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000127 <_interrupt18>:
ffffffff80000127:	6a 00                	pushq  $0x0
ffffffff80000129:	6a 12                	pushq  $0x12
ffffffff8000012b:	e9 44 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000130 <_interrupt19>:
ffffffff80000130:	6a 00                	pushq  $0x0
ffffffff80000132:	6a 13                	pushq  $0x13
ffffffff80000134:	e9 3b ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000139 <_interrupt20>:
ffffffff80000139:	6a 00                	pushq  $0x0
ffffffff8000013b:	6a 14                	pushq  $0x14
ffffffff8000013d:	e9 32 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000142 <_interrupt21>:
ffffffff80000142:	6a 00                	pushq  $0x0
ffffffff80000144:	6a 15                	pushq  $0x15
ffffffff80000146:	e9 29 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000014b <_interrupt22>:
ffffffff8000014b:	6a 00                	pushq  $0x0
ffffffff8000014d:	6a 16                	pushq  $0x16
ffffffff8000014f:	e9 20 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000154 <_interrupt23>:
ffffffff80000154:	6a 00                	pushq  $0x0
ffffffff80000156:	6a 17                	pushq  $0x17
ffffffff80000158:	e9 17 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000015d <_interrupt24>:
ffffffff8000015d:	6a 00                	pushq  $0x0
ffffffff8000015f:	6a 18                	pushq  $0x18
ffffffff80000161:	e9 0e ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000166 <_interrupt25>:
ffffffff80000166:	6a 00                	pushq  $0x0
ffffffff80000168:	6a 19                	pushq  $0x19
ffffffff8000016a:	e9 05 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000016f <_interrupt26>:
ffffffff8000016f:	6a 00                	pushq  $0x0
ffffffff80000171:	6a 1a                	pushq  $0x1a
ffffffff80000173:	e9 fc fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000178 <_interrupt27>:
ffffffff80000178:	6a 00                	pushq  $0x0
ffffffff8000017a:	6a 1b                	pushq  $0x1b
ffffffff8000017c:	e9 f3 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000181 <_interrupt28>:
ffffffff80000181:	6a 00                	pushq  $0x0
ffffffff80000183:	6a 1c                	pushq  $0x1c
ffffffff80000185:	e9 ea fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000018a <_interrupt29>:
ffffffff8000018a:	6a 00                	pushq  $0x0
ffffffff8000018c:	6a 1d                	pushq  $0x1d
ffffffff8000018e:	e9 e1 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000193 <_interrupt30>:
ffffffff80000193:	6a 1e                	pushq  $0x1e
ffffffff80000195:	e9 da fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000019a <_interrupt31>:
ffffffff8000019a:	6a 00                	pushq  $0x0
ffffffff8000019c:	6a 1f                	pushq  $0x1f
ffffffff8000019e:	e9 d1 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001a3 <_interrupt32>:
ffffffff800001a3:	6a 00                	pushq  $0x0
ffffffff800001a5:	6a 20                	pushq  $0x20
ffffffff800001a7:	e9 c8 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001ac <_interrupt33>:
ffffffff800001ac:	6a 00                	pushq  $0x0
ffffffff800001ae:	6a 21                	pushq  $0x21
ffffffff800001b0:	e9 bf fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001b5 <_interrupt34>:
ffffffff800001b5:	6a 00                	pushq  $0x0
ffffffff800001b7:	6a 22                	pushq  $0x22
ffffffff800001b9:	e9 b6 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001be <_interrupt35>:
ffffffff800001be:	6a 00                	pushq  $0x0
ffffffff800001c0:	6a 23                	pushq  $0x23
ffffffff800001c2:	e9 ad fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001c7 <_interrupt36>:
ffffffff800001c7:	6a 00                	pushq  $0x0
ffffffff800001c9:	6a 24                	pushq  $0x24
ffffffff800001cb:	e9 a4 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001d0 <_interrupt37>:
ffffffff800001d0:	6a 00                	pushq  $0x0
ffffffff800001d2:	6a 25                	pushq  $0x25
ffffffff800001d4:	e9 9b fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001d9 <_interrupt38>:
ffffffff800001d9:	6a 00                	pushq  $0x0
ffffffff800001db:	6a 26                	pushq  $0x26
ffffffff800001dd:	e9 92 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001e2 <_interrupt39>:
ffffffff800001e2:	6a 00                	pushq  $0x0
ffffffff800001e4:	6a 27                	pushq  $0x27
ffffffff800001e6:	e9 89 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001eb <_interrupt40>:
ffffffff800001eb:	6a 00                	pushq  $0x0
ffffffff800001ed:	6a 28                	pushq  $0x28
ffffffff800001ef:	e9 80 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001f4 <_interrupt41>:
ffffffff800001f4:	6a 00                	pushq  $0x0
ffffffff800001f6:	6a 29                	pushq  $0x29
ffffffff800001f8:	e9 77 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001fd <_interrupt42>:
ffffffff800001fd:	6a 00                	pushq  $0x0
ffffffff800001ff:	6a 2a                	pushq  $0x2a
ffffffff80000201:	e9 6e fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000206 <_interrupt43>:
ffffffff80000206:	6a 00                	pushq  $0x0
ffffffff80000208:	6a 2b                	pushq  $0x2b
ffffffff8000020a:	e9 65 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000020f <_interrupt44>:
ffffffff8000020f:	6a 00                	pushq  $0x0
ffffffff80000211:	6a 2c                	pushq  $0x2c
ffffffff80000213:	e9 5c fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000218 <_interrupt45>:
ffffffff80000218:	6a 00                	pushq  $0x0
ffffffff8000021a:	6a 2d                	pushq  $0x2d
ffffffff8000021c:	e9 53 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000221 <_interrupt46>:
ffffffff80000221:	6a 00                	pushq  $0x0
ffffffff80000223:	6a 2e                	pushq  $0x2e
ffffffff80000225:	e9 4a fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000022a <_interrupt47>:
ffffffff8000022a:	6a 00                	pushq  $0x0
ffffffff8000022c:	6a 2f                	pushq  $0x2f
ffffffff8000022e:	e9 41 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000233 <_interrupt127>:
ffffffff80000233:	6a 00                	pushq  $0x0
ffffffff80000235:	6a 7f                	pushq  $0x7f
ffffffff80000237:	e9 38 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000023c <_interrupt128>:
ffffffff8000023c:	6a 00                	pushq  $0x0
ffffffff8000023e:	68 80 00 00 00       	pushq  $0x80
ffffffff80000243:	e9 2c fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000248 <isr_stub_table>:
ffffffff80000248:	b4 00 00 80 ff ff ff ff ba 00 00 80 ff ff ff ff     ................
ffffffff80000258:	c0 00 00 80 ff ff ff ff c6 00 00 80 ff ff ff ff     ................
ffffffff80000268:	cc 00 00 80 ff ff ff ff d2 00 00 80 ff ff ff ff     ................
ffffffff80000278:	d8 00 00 80 ff ff ff ff de 00 00 80 ff ff ff ff     ................
ffffffff80000288:	e4 00 00 80 ff ff ff ff e8 00 00 80 ff ff ff ff     ................
ffffffff80000298:	ee 00 00 80 ff ff ff ff f2 00 00 80 ff ff ff ff     ................
ffffffff800002a8:	f9 00 00 80 ff ff ff ff 00 01 00 80 ff ff ff ff     ................
ffffffff800002b8:	07 01 00 80 ff ff ff ff 0e 01 00 80 ff ff ff ff     ................
ffffffff800002c8:	17 01 00 80 ff ff ff ff 20 01 00 80 ff ff ff ff     ........ .......
ffffffff800002d8:	27 01 00 80 ff ff ff ff 30 01 00 80 ff ff ff ff     '.......0.......
ffffffff800002e8:	39 01 00 80 ff ff ff ff 42 01 00 80 ff ff ff ff     9.......B.......
ffffffff800002f8:	4b 01 00 80 ff ff ff ff 54 01 00 80 ff ff ff ff     K.......T.......
ffffffff80000308:	5d 01 00 80 ff ff ff ff 66 01 00 80 ff ff ff ff     ].......f.......
ffffffff80000318:	6f 01 00 80 ff ff ff ff 78 01 00 80 ff ff ff ff     o.......x.......
ffffffff80000328:	81 01 00 80 ff ff ff ff 8a 01 00 80 ff ff ff ff     ................
ffffffff80000338:	93 01 00 80 ff ff ff ff 9a 01 00 80 ff ff ff ff     ................
ffffffff80000348:	a3 01 00 80 ff ff ff ff ac 01 00 80 ff ff ff ff     ................
ffffffff80000358:	b5 01 00 80 ff ff ff ff be 01 00 80 ff ff ff ff     ................
ffffffff80000368:	c7 01 00 80 ff ff ff ff d0 01 00 80 ff ff ff ff     ................
ffffffff80000378:	d9 01 00 80 ff ff ff ff e2 01 00 80 ff ff ff ff     ................
ffffffff80000388:	eb 01 00 80 ff ff ff ff f4 01 00 80 ff ff ff ff     ................
ffffffff80000398:	fd 01 00 80 ff ff ff ff 06 02 00 80 ff ff ff ff     ................
ffffffff800003a8:	0f 02 00 80 ff ff ff ff 18 02 00 80 ff ff ff ff     ................
ffffffff800003b8:	21 02 00 80 ff ff ff ff 2a 02 00 80 ff ff ff ff     !.......*.......
ffffffff800003c8:	33 02 00 80 ff ff ff ff 3c 02 00 80 ff ff ff ff     3.......<.......

ffffffff800003d8 <idt_load>:
ffffffff800003d8:	0f 01 1f             	lidt   (%rdi)
ffffffff800003db:	fb                   	sti    
ffffffff800003dc:	c3                   	retq   

ffffffff800003dd <int_test>:
ffffffff800003dd:	cd 7f                	int    $0x7f
ffffffff800003df:	c3                   	retq   

ffffffff800003e0 <user_init>:
extern void enable_sce();

void user_init()
{

}
ffffffff800003e0:	f3 c3                	repz retq 
ffffffff800003e2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800003e9:	00 00 00 00 
ffffffff800003ed:	0f 1f 00             	nopl   (%rax)

ffffffff800003f0 <user_enter>:


void user_enter(void* func, uint8_t* stack)
{

ffffffff800003f0:	f3 c3                	repz retq 
ffffffff800003f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800003f9:	00 00 00 
ffffffff800003fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000400 <outb>:
#include <stdint.h>
#include <stddef.h>

void outb(uint16_t port, uint8_t val)
{
    asm volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80000400:	89 f0                	mov    %esi,%eax
ffffffff80000402:	89 fa                	mov    %edi,%edx
ffffffff80000404:	ee                   	out    %al,(%dx)
}
ffffffff80000405:	c3                   	retq   
ffffffff80000406:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000040d:	00 00 00 

ffffffff80000410 <inb>:

uint8_t inb(uint16_t port)
{
    uint8_t ret;
    asm volatile ( "inb %1, %0"
ffffffff80000410:	89 fa                	mov    %edi,%edx
ffffffff80000412:	ec                   	in     (%dx),%al
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
}
ffffffff80000413:	c3                   	retq   
ffffffff80000414:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000041b:	00 00 00 00 
ffffffff8000041f:	90                   	nop

ffffffff80000420 <io_wait>:
    asm volatile ( "inb %1, %0"
ffffffff80000420:	e4 80                	in     $0x80,%al

void io_wait()
{
    inb(0x80);
ffffffff80000422:	c3                   	retq   
ffffffff80000423:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000042a:	00 00 00 
ffffffff8000042d:	0f 1f 00             	nopl   (%rax)

ffffffff80000430 <schedule>:
ffffffff80000430:	f3 c3                	repz retq 
ffffffff80000432:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000439:	00 00 00 00 
ffffffff8000043d:	0f 1f 00             	nopl   (%rax)

ffffffff80000440 <scheduler_init>:
}

void scheduler_init()
{

ffffffff80000440:	f3 c3                	repz retq 
ffffffff80000442:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000449:	00 00 00 
ffffffff8000044c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000450 <_start>:



    // Let's get the terminal structure tag from the bootloader.
    struct stivale2_struct_tag_terminal *term_str_tag;
    term_str_tag = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_TERMINAL_ID);
ffffffff80000450:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
        if (current_tag == NULL) {
ffffffff80000457:	48 85 c0             	test   %rax,%rax
ffffffff8000045a:	74 2c                	je     ffffffff80000488 <_start+0x38>
        if (current_tag->identifier == id) {
ffffffff8000045c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8000045f:	48 be 74 09 3b 23 c3 	movabs $0xc2b3f4c3233b0974,%rsi
ffffffff80000466:	f4 b3 c2 
ffffffff80000469:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8000046c:	0f 84 71 01 00 00    	je     ffffffff800005e3 <_start+0x193>
ffffffff80000472:	48 89 c1             	mov    %rax,%rcx
ffffffff80000475:	eb 05                	jmp    ffffffff8000047c <_start+0x2c>
ffffffff80000477:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff8000047a:	74 0f                	je     ffffffff8000048b <_start+0x3b>
        current_tag = (void *)current_tag->next;
ffffffff8000047c:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000480:	48 85 c9             	test   %rcx,%rcx
ffffffff80000483:	75 f2                	jne    ffffffff80000477 <_start+0x27>
ffffffff80000485:	0f 1f 00             	nopl   (%rax)

    // Check if the tag was actually found.
    if (term_str_tag == NULL) {
        // It wasn't found, just hang...
        for (;;) {
            asm ("hlt");
ffffffff80000488:	f4                   	hlt    
ffffffff80000489:	eb fd                	jmp    ffffffff80000488 <_start+0x38>
        }
    }

    void* term_write_ptr = (void *)term_str_tag->term_write;
    term_write = term_write_ptr;
ffffffff8000048b:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff8000048f:	48 89 0d 0a a2 00 00 	mov    %rcx,0xa20a(%rip)        # ffffffff8000a6a0 <term_write>
        if (current_tag->identifier == id) {
ffffffff80000496:	48 b9 fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rcx
ffffffff8000049d:	61 64 50 
ffffffff800004a0:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800004a3:	0f 84 6b 01 00 00    	je     ffffffff80000614 <_start+0x1c4>
ffffffff800004a9:	48 89 c1             	mov    %rax,%rcx
ffffffff800004ac:	48 be fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rsi
ffffffff800004b3:	61 64 50 
ffffffff800004b6:	eb 05                	jmp    ffffffff800004bd <_start+0x6d>
ffffffff800004b8:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800004bb:	74 1e                	je     ffffffff800004db <_start+0x8b>
        current_tag = (void *)current_tag->next;
ffffffff800004bd:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800004c1:	48 85 c9             	test   %rcx,%rcx
ffffffff800004c4:	75 f2                	jne    ffffffff800004b8 <_start+0x68>
    //printf("Terminal Initialized\n");

    //Grab the Framebuffer
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800004c6:	48 c7 05 a7 a1 00 00 	movq   $0x0,0xa1a7(%rip)        # ffffffff8000a678 <boot_info+0x18>
ffffffff800004cd:	00 00 00 00 
ffffffff800004d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (boot_info.tag_framebuffer == NULL)
    {
    //    printf("Framebuffer Not Found\n");
        for( ;; ) 
            asm("hlt");
ffffffff800004d8:	f4                   	hlt    
ffffffff800004d9:	eb fd                	jmp    ffffffff800004d8 <_start+0x88>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800004db:	48 89 0d 96 a1 00 00 	mov    %rcx,0xa196(%rip)        # ffffffff8000a678 <boot_info+0x18>
        if (current_tag->identifier == id) {
ffffffff800004e2:	48 b9 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rcx
ffffffff800004e9:	f7 87 21 
ffffffff800004ec:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800004ef:	0f 84 13 01 00 00    	je     ffffffff80000608 <_start+0x1b8>
ffffffff800004f5:	48 89 c1             	mov    %rax,%rcx
ffffffff800004f8:	48 be 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rsi
ffffffff800004ff:	f7 87 21 
        current_tag = (void *)current_tag->next;
ffffffff80000502:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000506:	48 85 c9             	test   %rcx,%rcx
ffffffff80000509:	0f 84 bc 00 00 00    	je     ffffffff800005cb <_start+0x17b>
        if (current_tag->identifier == id) {
ffffffff8000050f:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000512:	75 ee                	jne    ffffffff80000502 <_start+0xb2>
    }
    //printf("Framebuffer found at %x\n", boot_info.tag_framebuffer->framebuffer_addr);

    //Memory Map
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000514:	48 89 0d 55 a1 00 00 	mov    %rcx,0xa155(%rip)        # ffffffff8000a670 <boot_info+0x10>
        if (current_tag->identifier == id) {
ffffffff8000051b:	48 b9 f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rcx
ffffffff80000522:	78 0d 06 
ffffffff80000525:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000528:	0f 84 ce 00 00 00    	je     ffffffff800005fc <_start+0x1ac>
ffffffff8000052e:	48 89 c1             	mov    %rax,%rcx
ffffffff80000531:	48 be f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rsi
ffffffff80000538:	78 0d 06 
ffffffff8000053b:	eb 05                	jmp    ffffffff80000542 <_start+0xf2>
ffffffff8000053d:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000540:	74 09                	je     ffffffff8000054b <_start+0xfb>
        current_tag = (void *)current_tag->next;
ffffffff80000542:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000546:	48 85 c9             	test   %rcx,%rcx
ffffffff80000549:	75 f2                	jne    ffffffff8000053d <_start+0xed>
            asm("hlt");
    }
    //printf("Memory Map at %x\n", boot_info.tag_memmap);

    //Kernel Base Address
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff8000054b:	48 89 0d 0e a1 00 00 	mov    %rcx,0xa10e(%rip)        # ffffffff8000a660 <boot_info>
        if (current_tag->identifier == id) {
ffffffff80000552:	48 b9 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rcx
ffffffff80000559:	86 17 9e 
ffffffff8000055c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000055f:	0f 84 8e 00 00 00    	je     ffffffff800005f3 <_start+0x1a3>
            return NULL;
ffffffff80000565:	48 89 c1             	mov    %rax,%rcx
        if (current_tag->identifier == id) {
ffffffff80000568:	48 be 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rsi
ffffffff8000056f:	86 17 9e 
ffffffff80000572:	eb 05                	jmp    ffffffff80000579 <_start+0x129>
ffffffff80000574:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000577:	74 09                	je     ffffffff80000582 <_start+0x132>
        current_tag = (void *)current_tag->next;
ffffffff80000579:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff8000057d:	48 85 c9             	test   %rcx,%rcx
ffffffff80000580:	75 f2                	jne    ffffffff80000574 <_start+0x124>
    }
    //printf("Kernel Physical Base Address %x\n", boot_info.tag_kernel_base_address->physical_base_address);
    //printf("Kernel Virtual Base Address  %x\n", boot_info.tag_kernel_base_address->virtual_base_address);
    //printf("--------\n");

    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff80000582:	48 89 0d ff a0 00 00 	mov    %rcx,0xa0ff(%rip)        # ffffffff8000a688 <boot_info+0x28>
        if (current_tag->identifier == id) {
ffffffff80000589:	48 b9 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rcx
ffffffff80000590:	25 ed b0 
ffffffff80000593:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000596:	74 1a                	je     ffffffff800005b2 <_start+0x162>
ffffffff80000598:	48 ba 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rdx
ffffffff8000059f:	25 ed b0 
ffffffff800005a2:	eb 05                	jmp    ffffffff800005a9 <_start+0x159>
ffffffff800005a4:	48 39 10             	cmp    %rdx,(%rax)
ffffffff800005a7:	74 09                	je     ffffffff800005b2 <_start+0x162>
        current_tag = (void *)current_tag->next;
ffffffff800005a9:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff800005ad:	48 85 c0             	test   %rax,%rax
ffffffff800005b0:	75 f2                	jne    ffffffff800005a4 <_start+0x154>
{
ffffffff800005b2:	52                   	push   %rdx
    
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff800005b3:	48 89 05 de a0 00 00 	mov    %rax,0xa0de(%rip)        # ffffffff8000a698 <boot_info+0x38>

    kernel();
ffffffff800005ba:	31 c0                	xor    %eax,%eax
ffffffff800005bc:	e8 cf 32 00 00       	callq  ffffffff80003890 <kernel>
ffffffff800005c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)


    // We should never get here, but just in case...
    for (;;) {
        asm ("hlt");
ffffffff800005c8:	f4                   	hlt    
ffffffff800005c9:	eb fd                	jmp    ffffffff800005c8 <_start+0x178>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005cb:	48 c7 05 9a a0 00 00 	movq   $0x0,0xa09a(%rip)        # ffffffff8000a670 <boot_info+0x10>
ffffffff800005d2:	00 00 00 00 
ffffffff800005d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800005dd:	00 00 00 
            asm("hlt");
ffffffff800005e0:	f4                   	hlt    
ffffffff800005e1:	eb fd                	jmp    ffffffff800005e0 <_start+0x190>
    term_write = term_write_ptr;
ffffffff800005e3:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800005e7:	48 89 0d b2 a0 00 00 	mov    %rcx,0xa0b2(%rip)        # ffffffff8000a6a0 <term_write>
ffffffff800005ee:	e9 b6 fe ff ff       	jmpq   ffffffff800004a9 <_start+0x59>
    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff800005f3:	48 89 05 8e a0 00 00 	mov    %rax,0xa08e(%rip)        # ffffffff8000a688 <boot_info+0x28>
ffffffff800005fa:	eb 9c                	jmp    ffffffff80000598 <_start+0x148>
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff800005fc:	48 89 05 5d a0 00 00 	mov    %rax,0xa05d(%rip)        # ffffffff8000a660 <boot_info>
ffffffff80000603:	e9 5d ff ff ff       	jmpq   ffffffff80000565 <_start+0x115>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000608:	48 89 05 61 a0 00 00 	mov    %rax,0xa061(%rip)        # ffffffff8000a670 <boot_info+0x10>
ffffffff8000060f:	e9 1a ff ff ff       	jmpq   ffffffff8000052e <_start+0xde>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000614:	48 89 05 5d a0 00 00 	mov    %rax,0xa05d(%rip)        # ffffffff8000a678 <boot_info+0x18>
ffffffff8000061b:	e9 d5 fe ff ff       	jmpq   ffffffff800004f5 <_start+0xa5>

ffffffff80000620 <vmm_create_page_table>:
struct PageTable* kernel_cr3 = {0};

uint64_t magic = 0xdeadbeef;

struct PageTable* vmm_create_page_table()
{
ffffffff80000620:	53                   	push   %rbx
    void* page = pmm_allocpage();   //get a page
ffffffff80000621:	31 c0                	xor    %eax,%eax
ffffffff80000623:	e8 c8 10 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000628:	48 85 c0             	test   %rax,%rax
    void* page = pmm_allocpage();   //get a page
ffffffff8000062b:	48 89 c3             	mov    %rax,%rbx
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000062e:	74 0f                	je     ffffffff8000063f <vmm_create_page_table+0x1f>

    memset((uint8_t*)page, 0, 4096);    //clear the page
ffffffff80000630:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff80000635:	31 f6                	xor    %esi,%esi
ffffffff80000637:	48 89 c7             	mov    %rax,%rdi
ffffffff8000063a:	e8 f1 31 00 00       	callq  ffffffff80003830 <memset>
    return (struct PageTable*)page;
    
    //return (struct PageTable*)phys_to_hh_data((uint64_t)page);
}
ffffffff8000063f:	48 89 d8             	mov    %rbx,%rax
ffffffff80000642:	5b                   	pop    %rbx
ffffffff80000643:	c3                   	retq   
ffffffff80000644:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000064b:	00 00 00 00 
ffffffff8000064f:	90                   	nop

ffffffff80000650 <vmm_map_2Mpage>:
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
    }
}

void vmm_map_2Mpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000650:	41 57                	push   %r15
    uint64_t index2, index3, index4;
    vaddr >>= 12;
    //index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000652:	49 89 f7             	mov    %rsi,%r15
{
ffffffff80000655:	41 56                	push   %r14
ffffffff80000657:	41 55                	push   %r13
ffffffff80000659:	41 54                	push   %r12
    vaddr >>= 9;
ffffffff8000065b:	49 89 f4             	mov    %rsi,%r12
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff8000065e:	48 c1 ee 24          	shr    $0x24,%rsi
{
ffffffff80000662:	55                   	push   %rbp
ffffffff80000663:	53                   	push   %rbx
ffffffff80000664:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
    vaddr >>= 9;
ffffffff8000066a:	49 c1 ec 15          	shr    $0x15,%r12
    vaddr >>= 9;
ffffffff8000066e:	49 c1 ef 1e          	shr    $0x1e,%r15
ffffffff80000672:	4c 8d 34 37          	lea    (%rdi,%rsi,1),%r14
{
ffffffff80000676:	48 83 ec 08          	sub    $0x8,%rsp
    index2 = vaddr & 0x1ff;
ffffffff8000067a:	41 81 e4 ff 01 00 00 	and    $0x1ff,%r12d
    index3 = vaddr & 0x1ff;
ffffffff80000681:	41 81 e7 ff 01 00 00 	and    $0x1ff,%r15d
{
ffffffff80000688:	48 89 d5             	mov    %rdx,%rbp
ffffffff8000068b:	49 89 cd             	mov    %rcx,%r13
    if(pagemap->entry[index] & 1)
ffffffff8000068e:	49 8b 06             	mov    (%r14),%rax
ffffffff80000691:	a8 01                	test   $0x1,%al
ffffffff80000693:	74 5b                	je     ffffffff800006f0 <vmm_map_2Mpage+0xa0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000695:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff8000069b:	4e 8d 34 f8          	lea    (%rax,%r15,8),%r14
    if(pagemap->entry[index] & 1)
ffffffff8000069f:	49 8b 06             	mov    (%r14),%rax
ffffffff800006a2:	a8 01                	test   $0x1,%al
ffffffff800006a4:	74 2a                	je     ffffffff800006d0 <vmm_map_2Mpage+0x80>

    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);

    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff800006a6:	40 80 cd 80          	or     $0x80,%bpl
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800006aa:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff800006b0:	49 09 ed             	or     %rbp,%r13
ffffffff800006b3:	4e 89 2c e0          	mov    %r13,(%rax,%r12,8)
}
ffffffff800006b7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800006bb:	5b                   	pop    %rbx
ffffffff800006bc:	5d                   	pop    %rbp
ffffffff800006bd:	41 5c                	pop    %r12
ffffffff800006bf:	41 5d                	pop    %r13
ffffffff800006c1:	41 5e                	pop    %r14
ffffffff800006c3:	41 5f                	pop    %r15
ffffffff800006c5:	c3                   	retq   
ffffffff800006c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800006cd:	00 00 00 
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006d0:	31 c0                	xor    %eax,%eax
ffffffff800006d2:	e8 49 ff ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006d7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006da:	48 89 c3             	mov    %rax,%rbx
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006dd:	74 31                	je     ffffffff80000710 <vmm_map_2Mpage+0xc0>
        pagemap->entry[index] = newentry | flags;
ffffffff800006df:	48 89 d8             	mov    %rbx,%rax
ffffffff800006e2:	4c 09 e8             	or     %r13,%rax
ffffffff800006e5:	49 89 06             	mov    %rax,(%r14)
ffffffff800006e8:	eb bc                	jmp    ffffffff800006a6 <vmm_map_2Mpage+0x56>
ffffffff800006ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006f0:	31 c0                	xor    %eax,%eax
ffffffff800006f2:	e8 29 ff ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006f7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006fa:	48 89 c3             	mov    %rax,%rbx
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006fd:	74 21                	je     ffffffff80000720 <vmm_map_2Mpage+0xd0>
        pagemap->entry[index] = newentry | flags;
ffffffff800006ff:	48 89 d8             	mov    %rbx,%rax
ffffffff80000702:	4c 09 e8             	or     %r13,%rax
ffffffff80000705:	49 89 06             	mov    %rax,(%r14)
ffffffff80000708:	eb 8b                	jmp    ffffffff80000695 <vmm_map_2Mpage+0x45>
ffffffff8000070a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000710:	48 c7 c7 e0 4b 00 80 	mov    $0xffffffff80004be0,%rdi
ffffffff80000717:	31 c0                	xor    %eax,%eax
ffffffff80000719:	e8 82 2d 00 00       	callq  ffffffff800034a0 <printf_>
ffffffff8000071e:	eb bf                	jmp    ffffffff800006df <vmm_map_2Mpage+0x8f>
ffffffff80000720:	48 c7 c7 e0 4b 00 80 	mov    $0xffffffff80004be0,%rdi
ffffffff80000727:	31 c0                	xor    %eax,%eax
ffffffff80000729:	e8 72 2d 00 00       	callq  ffffffff800034a0 <printf_>
ffffffff8000072e:	eb cf                	jmp    ffffffff800006ff <vmm_map_2Mpage+0xaf>

ffffffff80000730 <vmm_map_4Kpage>:

void vmm_map_4Kpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000730:	41 57                	push   %r15
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000732:	49 89 f7             	mov    %rsi,%r15
{
ffffffff80000735:	41 56                	push   %r14
ffffffff80000737:	41 55                	push   %r13
ffffffff80000739:	41 54                	push   %r12
    vaddr >>= 9;
ffffffff8000073b:	49 c1 ef 1e          	shr    $0x1e,%r15
{
ffffffff8000073f:	55                   	push   %rbp
ffffffff80000740:	48 89 d5             	mov    %rdx,%rbp
ffffffff80000743:	53                   	push   %rbx
    vaddr >>= 9;
ffffffff80000744:	48 89 f2             	mov    %rsi,%rdx
    vaddr >>= 12;
ffffffff80000747:	48 89 f3             	mov    %rsi,%rbx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff8000074a:	48 c1 ee 24          	shr    $0x24,%rsi
ffffffff8000074e:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
{
ffffffff80000754:	48 83 ec 18          	sub    $0x18,%rsp
    vaddr >>= 12;
ffffffff80000758:	48 c1 eb 0c          	shr    $0xc,%rbx
ffffffff8000075c:	4c 8d 34 37          	lea    (%rdi,%rsi,1),%r14
    vaddr >>= 9;
ffffffff80000760:	48 c1 ea 15          	shr    $0x15,%rdx
    index1 = vaddr & 0x1ff;
ffffffff80000764:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
    index2 = vaddr & 0x1ff;
ffffffff8000076a:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    index3 = vaddr & 0x1ff;
ffffffff80000770:	41 81 e7 ff 01 00 00 	and    $0x1ff,%r15d
{
ffffffff80000777:	49 89 cd             	mov    %rcx,%r13
    if(pagemap->entry[index] & 1)
ffffffff8000077a:	49 8b 06             	mov    (%r14),%rax
ffffffff8000077d:	a8 01                	test   $0x1,%al
ffffffff8000077f:	0f 84 bb 00 00 00    	je     ffffffff80000840 <vmm_map_4Kpage+0x110>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000785:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff8000078b:	4e 8d 3c f8          	lea    (%rax,%r15,8),%r15
    if(pagemap->entry[index] & 1)
ffffffff8000078f:	49 8b 07             	mov    (%r15),%rax
ffffffff80000792:	a8 01                	test   $0x1,%al
ffffffff80000794:	74 7a                	je     ffffffff80000810 <vmm_map_4Kpage+0xe0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000796:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff8000079c:	48 8d 14 d0          	lea    (%rax,%rdx,8),%rdx
    if(pagemap->entry[index] & 1)
ffffffff800007a0:	48 8b 02             	mov    (%rdx),%rax
ffffffff800007a3:	a8 01                	test   $0x1,%al
ffffffff800007a5:	74 41                	je     ffffffff800007e8 <vmm_map_4Kpage+0xb8>
    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);
    PML1 = vmm_get_pagemap(PML2, index2, flags);

    PML1->entry[index1] = physical | flags;
ffffffff800007a7:	4d 89 e9             	mov    %r13,%r9
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800007aa:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax

    serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\r\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
ffffffff800007b0:	48 c7 c6 f6 4b 00 80 	mov    $0xffffffff80004bf6,%rsi
    PML1->entry[index1] = physical | flags;
ffffffff800007b7:	49 09 e9             	or     %rbp,%r9
    serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\r\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
ffffffff800007ba:	bf f8 03 00 00       	mov    $0x3f8,%edi
    PML1->entry[index1] = physical | flags;
ffffffff800007bf:	4c 89 0c d8          	mov    %r9,(%rax,%rbx,8)
    serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\r\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
ffffffff800007c3:	4c 8b 02             	mov    (%rdx),%r8
ffffffff800007c6:	31 c0                	xor    %eax,%eax
ffffffff800007c8:	49 8b 0f             	mov    (%r15),%rcx
ffffffff800007cb:	49 8b 16             	mov    (%r14),%rdx
    //serial_printf(SERIAL_PORT1, "%p, %d, %d, %d, %d, %p\r\n", virtual, index4, index3, index2, index1, physical);

    //vmm_flush_tlb((void*)virtual);

}
ffffffff800007ce:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800007d2:	5b                   	pop    %rbx
ffffffff800007d3:	5d                   	pop    %rbp
ffffffff800007d4:	41 5c                	pop    %r12
ffffffff800007d6:	41 5d                	pop    %r13
ffffffff800007d8:	41 5e                	pop    %r14
ffffffff800007da:	41 5f                	pop    %r15
    serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\r\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
ffffffff800007dc:	e9 8f 2e 00 00       	jmpq   ffffffff80003670 <serial_printf>
ffffffff800007e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007e8:	31 c0                	xor    %eax,%eax
ffffffff800007ea:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff800007ef:	e8 2c fe ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007f4:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007f7:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007fa:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff800007ff:	74 6f                	je     ffffffff80000870 <vmm_map_4Kpage+0x140>
        pagemap->entry[index] = newentry | flags;
ffffffff80000801:	4c 89 e0             	mov    %r12,%rax
ffffffff80000804:	4c 09 e8             	or     %r13,%rax
ffffffff80000807:	48 89 02             	mov    %rax,(%rdx)
ffffffff8000080a:	eb 9b                	jmp    ffffffff800007a7 <vmm_map_4Kpage+0x77>
ffffffff8000080c:	0f 1f 40 00          	nopl   0x0(%rax)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff80000810:	31 c0                	xor    %eax,%eax
ffffffff80000812:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80000817:	e8 04 fe ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff8000081c:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff8000081f:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000822:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80000827:	74 7f                	je     ffffffff800008a8 <vmm_map_4Kpage+0x178>
        pagemap->entry[index] = newentry | flags;
ffffffff80000829:	4c 89 e0             	mov    %r12,%rax
ffffffff8000082c:	4c 09 e8             	or     %r13,%rax
ffffffff8000082f:	49 89 07             	mov    %rax,(%r15)
ffffffff80000832:	e9 5f ff ff ff       	jmpq   ffffffff80000796 <vmm_map_4Kpage+0x66>
ffffffff80000837:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000083e:	00 00 
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff80000840:	31 c0                	xor    %eax,%eax
ffffffff80000842:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80000847:	e8 d4 fd ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff8000084c:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff8000084f:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000852:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80000857:	74 37                	je     ffffffff80000890 <vmm_map_4Kpage+0x160>
        pagemap->entry[index] = newentry | flags;
ffffffff80000859:	4c 89 e0             	mov    %r12,%rax
ffffffff8000085c:	4c 09 e8             	or     %r13,%rax
ffffffff8000085f:	49 89 06             	mov    %rax,(%r14)
ffffffff80000862:	e9 1e ff ff ff       	jmpq   ffffffff80000785 <vmm_map_4Kpage+0x55>
ffffffff80000867:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000086e:	00 00 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000870:	48 c7 c7 e0 4b 00 80 	mov    $0xffffffff80004be0,%rdi
ffffffff80000877:	31 c0                	xor    %eax,%eax
ffffffff80000879:	e8 22 2c 00 00       	callq  ffffffff800034a0 <printf_>
ffffffff8000087e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80000883:	e9 79 ff ff ff       	jmpq   ffffffff80000801 <vmm_map_4Kpage+0xd1>
ffffffff80000888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000088f:	00 
ffffffff80000890:	48 c7 c7 e0 4b 00 80 	mov    $0xffffffff80004be0,%rdi
ffffffff80000897:	31 c0                	xor    %eax,%eax
ffffffff80000899:	e8 02 2c 00 00       	callq  ffffffff800034a0 <printf_>
ffffffff8000089e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff800008a3:	eb b4                	jmp    ffffffff80000859 <vmm_map_4Kpage+0x129>
ffffffff800008a5:	0f 1f 00             	nopl   (%rax)
ffffffff800008a8:	48 c7 c7 e0 4b 00 80 	mov    $0xffffffff80004be0,%rdi
ffffffff800008af:	31 c0                	xor    %eax,%eax
ffffffff800008b1:	e8 ea 2b 00 00       	callq  ffffffff800034a0 <printf_>
ffffffff800008b6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff800008bb:	e9 69 ff ff ff       	jmpq   ffffffff80000829 <vmm_map_4Kpage+0xf9>

ffffffff800008c0 <vmm_pagewalk>:
uint64_t vmm_pagewalk(uint64_t vaddr, uint64_t* cr3)
{
    uint64_t* PML4 = (uint64_t*)(phys_to_hh_data((uint64_t)cr3));
    
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
ffffffff800008c0:	49 89 f8             	mov    %rdi,%r8
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff800008c3:	48 89 f9             	mov    %rdi,%rcx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff800008c6:	48 89 fa             	mov    %rdi,%rdx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff800008c9:	48 c1 ef 27          	shr    $0x27,%rdi
    index4 = vaddr & 0x1ff;
   
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff800008cd:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff800008d4:	80 ff ff 
{
ffffffff800008d7:	53                   	push   %rbx
    index4 = vaddr & 0x1ff;
ffffffff800008d8:	81 e7 ff 01 00 00    	and    $0x1ff,%edi
    vaddr >>= 9;
ffffffff800008de:	48 c1 ea 1e          	shr    $0x1e,%rdx
    vaddr >>= 9;
ffffffff800008e2:	48 c1 e9 15          	shr    $0x15,%rcx
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff800008e6:	48 8d 34 fe          	lea    (%rsi,%rdi,8),%rsi
    index3 = vaddr & 0x1ff;
ffffffff800008ea:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    index2 = vaddr & 0x1ff;
ffffffff800008f0:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
    vaddr >>= 12;
ffffffff800008f6:	49 c1 e8 0c          	shr    $0xc,%r8
    return addr - 0xFFFF800000000000;
}

static inline uint64_t phys_to_hh_data(uint64_t addr)
{
    return 0xFFFF800000000000 + addr;
ffffffff800008fa:	48 8b 1c 06          	mov    (%rsi,%rax,1),%rbx
    index1 = vaddr & 0x1ff;
ffffffff800008fe:	41 81 e0 ff 01 00 00 	and    $0x1ff,%r8d
ffffffff80000905:	48 01 c3             	add    %rax,%rbx
ffffffff80000908:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PDE = (uint64_t*)((phys_to_hh_data(PDPTE[index3]) >> 12) * 4096);
ffffffff8000090b:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff80000912:	48 8b 1c d6          	mov    (%rsi,%rdx,8),%rbx
ffffffff80000916:	48 01 c3             	add    %rax,%rbx
ffffffff80000919:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PTE = (uint64_t*)((phys_to_hh_data(PDE[index2]) >> 12) * 4096);
ffffffff8000091c:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff80000923:	48 8b 1c ce          	mov    (%rsi,%rcx,8),%rbx
ffffffff80000927:	48 01 c3             	add    %rax,%rbx
ffffffff8000092a:	48 89 de             	mov    %rbx,%rsi
    return addr - 0xFFFF800000000000;
ffffffff8000092d:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff80000934:	80 00 00 
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff80000937:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
    return 0xFFFF800000000000 + addr;
ffffffff8000093e:	4a 03 04 c6          	add    (%rsi,%r8,8),%rax

    uint64_t pageaddr = hh_data_to_phys((uint64_t)PD);
    
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff80000942:	48 89 fe             	mov    %rdi,%rsi
ffffffff80000945:	48 c7 c7 07 4c 00 80 	mov    $0xffffffff80004c07,%rdi
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff8000094c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    return addr - 0xFFFF800000000000;
ffffffff80000952:	48 01 c3             	add    %rax,%rbx
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff80000955:	31 c0                	xor    %eax,%eax
ffffffff80000957:	49 89 d9             	mov    %rbx,%r9
ffffffff8000095a:	e8 41 2b 00 00       	callq  ffffffff800034a0 <printf_>
    
    
    pageaddr >>= 12;
    pageaddr *= 4096;
ffffffff8000095f:	48 89 d8             	mov    %rbx,%rax

    return pageaddr;
}
ffffffff80000962:	5b                   	pop    %rbx
ffffffff80000963:	c3                   	retq   
ffffffff80000964:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000096b:	00 00 00 00 
ffffffff8000096f:	90                   	nop

ffffffff80000970 <vmm_PMLwalk>:

void vmm_PMLwalk(struct PageTable* pagetable)
{
ffffffff80000970:	41 57                	push   %r15
ffffffff80000972:	41 56                	push   %r14
ffffffff80000974:	48 89 fa             	mov    %rdi,%rdx
ffffffff80000977:	41 55                	push   %r13
ffffffff80000979:	41 54                	push   %r12
    struct PageTable* PML4 = pagetable;
    struct PageTable* PML3 = NULL;
    struct PageTable* PML2 = NULL;
    struct PageTable* PML1 = NULL;

    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff8000097b:	48 c7 c6 1b 4c 00 80 	mov    $0xffffffff80004c1b,%rsi
{
ffffffff80000982:	55                   	push   %rbp
ffffffff80000983:	53                   	push   %rbx
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000984:	31 c0                	xor    %eax,%eax
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
                                for(uint64_t l = 0; l < 512; l++)
                                {
                                    if(PML1->entry[l] & 0x01)
                                    {
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80000986:	48 c7 c3 5d 4c 00 80 	mov    $0xffffffff80004c5d,%rbx
{
ffffffff8000098d:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80000991:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000996:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8000099b:	e8 d0 2c 00 00       	callq  ffffffff80003670 <serial_printf>
    for(uint64_t i = 0; i < 512; i++)
ffffffff800009a0:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff800009a7:	00 00 
ffffffff800009a9:	eb 1c                	jmp    ffffffff800009c7 <vmm_PMLwalk+0x57>
ffffffff800009ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff800009b0:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff800009b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff800009bb:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff800009c1:	0f 84 17 01 00 00    	je     ffffffff80000ade <vmm_PMLwalk+0x16e>
        if(pagetable->entry[i] & 0x01)
ffffffff800009c7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff800009cc:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff800009d1:	4c 8b 04 c8          	mov    (%rax,%rcx,8),%r8
ffffffff800009d5:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff800009d9:	74 d5                	je     ffffffff800009b0 <vmm_PMLwalk+0x40>
                serial_printf(SERIAL_PORT1, "4,%p,%d,%p\r\n",pagetable, i, pagetable->entry[i]);
ffffffff800009db:	49 89 cf             	mov    %rcx,%r15
ffffffff800009de:	49 89 c6             	mov    %rax,%r14
ffffffff800009e1:	48 89 c2             	mov    %rax,%rdx
ffffffff800009e4:	48 c7 c6 36 4c 00 80 	mov    $0xffffffff80004c36,%rsi
ffffffff800009eb:	31 c0                	xor    %eax,%eax
ffffffff800009ed:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800009f2:	e8 79 2c 00 00       	callq  ffffffff80003670 <serial_printf>
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff800009f7:	4b 8b 04 fe          	mov    (%r14,%r15,8),%rax
                for(uint64_t j = 0; j < 512; j++)
ffffffff800009fb:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
ffffffff80000a02:	00 
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff80000a03:	49 89 c5             	mov    %rax,%r13
ffffffff80000a06:	49 81 e5 00 fe ff ff 	and    $0xfffffffffffffe00,%r13
ffffffff80000a0d:	eb 12                	jmp    ffffffff80000a21 <vmm_PMLwalk+0xb1>
ffffffff80000a0f:	90                   	nop
                for(uint64_t j = 0; j < 512; j++)
ffffffff80000a10:	48 83 04 24 01       	addq   $0x1,(%rsp)
ffffffff80000a15:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80000a19:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80000a1f:	74 8f                	je     ffffffff800009b0 <vmm_PMLwalk+0x40>
                    if(PML3->entry[j] & 0x01)
ffffffff80000a21:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80000a25:	4d 8b 44 c5 00       	mov    0x0(%r13,%rax,8),%r8
ffffffff80000a2a:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000a2e:	74 e0                	je     ffffffff80000a10 <vmm_PMLwalk+0xa0>
                        serial_printf(SERIAL_PORT1, "3,%p,%d,%p\r\n",PML3, j, PML3->entry[j]);
ffffffff80000a30:	49 89 c6             	mov    %rax,%r14
ffffffff80000a33:	48 89 c1             	mov    %rax,%rcx
ffffffff80000a36:	4c 89 ea             	mov    %r13,%rdx
ffffffff80000a39:	31 c0                	xor    %eax,%eax
ffffffff80000a3b:	48 c7 c6 43 4c 00 80 	mov    $0xffffffff80004c43,%rsi
ffffffff80000a42:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000a47:	e8 24 2c 00 00       	callq  ffffffff80003670 <serial_printf>
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80000a4c:	4b 8b 44 f5 00       	mov    0x0(%r13,%r14,8),%rax
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000a51:	31 ed                	xor    %ebp,%ebp
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80000a53:	49 89 c4             	mov    %rax,%r12
ffffffff80000a56:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80000a5b:	49 81 e4 00 fe ff ff 	and    $0xfffffffffffffe00,%r12
ffffffff80000a62:	eb 11                	jmp    ffffffff80000a75 <vmm_PMLwalk+0x105>
ffffffff80000a64:	0f 1f 40 00          	nopl   0x0(%rax)
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000a68:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80000a6c:	48 81 fd 00 02 00 00 	cmp    $0x200,%rbp
ffffffff80000a73:	74 9b                	je     ffffffff80000a10 <vmm_PMLwalk+0xa0>
                            if(PML2->entry[k] & 0x01)
ffffffff80000a75:	4d 8b 04 ec          	mov    (%r12,%rbp,8),%r8
ffffffff80000a79:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000a7d:	74 e9                	je     ffffffff80000a68 <vmm_PMLwalk+0xf8>
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000a7f:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000a82:	4c 89 e2             	mov    %r12,%rdx
ffffffff80000a85:	48 c7 c6 50 4c 00 80 	mov    $0xffffffff80004c50,%rsi
ffffffff80000a8c:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000a91:	31 c0                	xor    %eax,%eax
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000a93:	45 31 ff             	xor    %r15d,%r15d
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000a96:	e8 d5 2b 00 00       	callq  ffffffff80003670 <serial_printf>
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
ffffffff80000a9b:	4d 8b 74 ed 00       	mov    0x0(%r13,%rbp,8),%r14
ffffffff80000aa0:	49 81 e6 00 fe ff ff 	and    $0xfffffffffffffe00,%r14
ffffffff80000aa7:	eb 14                	jmp    ffffffff80000abd <vmm_PMLwalk+0x14d>
ffffffff80000aa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000ab0:	49 83 c7 01          	add    $0x1,%r15
ffffffff80000ab4:	49 81 ff 00 02 00 00 	cmp    $0x200,%r15
ffffffff80000abb:	74 ab                	je     ffffffff80000a68 <vmm_PMLwalk+0xf8>
                                    if(PML1->entry[l] & 0x01)
ffffffff80000abd:	4f 8b 04 fe          	mov    (%r14,%r15,8),%r8
ffffffff80000ac1:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000ac5:	74 e9                	je     ffffffff80000ab0 <vmm_PMLwalk+0x140>
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80000ac7:	4c 89 f9             	mov    %r15,%rcx
ffffffff80000aca:	4c 89 f2             	mov    %r14,%rdx
ffffffff80000acd:	48 89 de             	mov    %rbx,%rsi
ffffffff80000ad0:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000ad5:	31 c0                	xor    %eax,%eax
ffffffff80000ad7:	e8 94 2b 00 00       	callq  ffffffff80003670 <serial_printf>
ffffffff80000adc:	eb d2                	jmp    ffffffff80000ab0 <vmm_PMLwalk+0x140>
                }//PML3
            }
    }//PML4

    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
}
ffffffff80000ade:	48 83 c4 28          	add    $0x28,%rsp
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000ae2:	48 c7 c6 6a 4c 00 80 	mov    $0xffffffff80004c6a,%rsi
ffffffff80000ae9:	bf f8 03 00 00       	mov    $0x3f8,%edi
}
ffffffff80000aee:	5b                   	pop    %rbx
ffffffff80000aef:	5d                   	pop    %rbp
ffffffff80000af0:	41 5c                	pop    %r12
ffffffff80000af2:	41 5d                	pop    %r13
ffffffff80000af4:	41 5e                	pop    %r14
ffffffff80000af6:	41 5f                	pop    %r15
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000af8:	31 c0                	xor    %eax,%eax
ffffffff80000afa:	e9 71 2b 00 00       	jmpq   ffffffff80003670 <serial_printf>
ffffffff80000aff:	90                   	nop

ffffffff80000b00 <vmm_init>:

void vmm_init()
{
ffffffff80000b00:	41 55                	push   %r13
ffffffff80000b02:	41 54                	push   %r12
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000b04:	31 c0                	xor    %eax,%eax
{
ffffffff80000b06:	55                   	push   %rbp
ffffffff80000b07:	53                   	push   %rbx
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
 
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
    uint64_t kernel_virt = boot_info.tag_kernel_base_address->virtual_base_address;
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000b08:	48 c7 c3 80 fc 00 80 	mov    $0xffffffff8000fc80,%rbx
ffffffff80000b0f:	48 89 dd             	mov    %rbx,%rbp
{
ffffffff80000b12:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000b16:	48 81 ed 00 00 00 80 	sub    $0xffffffff80000000,%rbp
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000b1d:	e8 0e f5 ff ff       	callq  ffffffff80000030 <vmm_read_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000b22:	48 c7 c7 79 4c 00 80 	mov    $0xffffffff80004c79,%rdi
ffffffff80000b29:	48 89 c6             	mov    %rax,%rsi
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000b2c:	48 89 05 8d df 00 00 	mov    %rax,0xdf8d(%rip)        # ffffffff8000eac0 <kernel_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000b33:	31 c0                	xor    %eax,%eax
ffffffff80000b35:	e8 66 29 00 00       	callq  ffffffff800034a0 <printf_>
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80000b3a:	48 8b 05 1f 9b 00 00 	mov    0x9b1f(%rip),%rax        # ffffffff8000a660 <boot_info>

    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff80000b41:	48 c7 c7 10 4d 00 80 	mov    $0xffffffff80004d10,%rdi
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80000b48:	4c 8b 60 10          	mov    0x10(%rax),%r12
    uint64_t kernel_virt = boot_info.tag_kernel_base_address->virtual_base_address;
ffffffff80000b4c:	4c 8b 68 18          	mov    0x18(%rax),%r13
    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff80000b50:	31 c0                	xor    %eax,%eax
ffffffff80000b52:	4c 89 e2             	mov    %r12,%rdx
ffffffff80000b55:	4c 89 ee             	mov    %r13,%rsi
ffffffff80000b58:	e8 43 29 00 00       	callq  ffffffff800034a0 <printf_>

    printf("Kernel: %p - %p Size: %d\n", &_start_of_kernel, &_end_of_kernel, kernel_size);
ffffffff80000b5d:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000b60:	48 89 da             	mov    %rbx,%rdx
ffffffff80000b63:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000b6a:	48 c7 c7 82 4c 00 80 	mov    $0xffffffff80004c82,%rdi
ffffffff80000b71:	31 c0                	xor    %eax,%eax
ffffffff80000b73:	e8 28 29 00 00       	callq  ffffffff800034a0 <printf_>
    printf("Text:   %p - %p \n", &_start_of_text, &_end_of_text);
ffffffff80000b78:	48 c7 c2 a6 3b 00 80 	mov    $0xffffffff80003ba6,%rdx
ffffffff80000b7f:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000b86:	48 c7 c7 9c 4c 00 80 	mov    $0xffffffff80004c9c,%rdi
ffffffff80000b8d:	31 c0                	xor    %eax,%eax
ffffffff80000b8f:	e8 0c 29 00 00       	callq  ffffffff800034a0 <printf_>
    printf("Data:   %p - %p \n", &_start_of_data, &_end_of_data);
ffffffff80000b94:	48 c7 c2 60 86 00 80 	mov    $0xffffffff80008660,%rdx
ffffffff80000b9b:	48 c7 c6 7c 70 00 80 	mov    $0xffffffff8000707c,%rsi
ffffffff80000ba2:	48 c7 c7 ae 4c 00 80 	mov    $0xffffffff80004cae,%rdi
ffffffff80000ba9:	31 c0                	xor    %eax,%eax
ffffffff80000bab:	e8 f0 28 00 00       	callq  ffffffff800034a0 <printf_>
    printf("ROData: %p - %p \n", &_start_of_rodata, &_end_of_rodata);
ffffffff80000bb0:	48 c7 c2 c0 54 00 80 	mov    $0xffffffff800054c0,%rdx
ffffffff80000bb7:	48 c7 c6 e0 4b 00 80 	mov    $0xffffffff80004be0,%rsi
ffffffff80000bbe:	48 c7 c7 c0 4c 00 80 	mov    $0xffffffff80004cc0,%rdi
ffffffff80000bc5:	31 c0                	xor    %eax,%eax
ffffffff80000bc7:	e8 d4 28 00 00       	callq  ffffffff800034a0 <printf_>
    printf("BSS:    %p - %p \n", &_start_of_bss, &_end_of_bss);
ffffffff80000bcc:	48 c7 c2 80 fc 00 80 	mov    $0xffffffff8000fc80,%rdx
ffffffff80000bd3:	48 c7 c6 60 86 00 80 	mov    $0xffffffff80008660,%rsi
ffffffff80000bda:	48 c7 c7 d2 4c 00 80 	mov    $0xffffffff80004cd2,%rdi
ffffffff80000be1:	31 c0                	xor    %eax,%eax
ffffffff80000be3:	e8 b8 28 00 00       	callq  ffffffff800034a0 <printf_>

    //vmm_pagewalk((uint64_t)&_start_of_kernel, (uint64_t*)read_cr3());
    //vmm_pagewalk((uint64_t)&_end_of_kernel, (uint64_t*)read_cr3());

    //Create the Kernel PML4 table
    RootPageDirectory = vmm_create_page_table();
ffffffff80000be8:	31 c0                	xor    %eax,%eax
ffffffff80000bea:	e8 31 fa ff ff       	callq  ffffffff80000620 <vmm_create_page_table>

    printf("Root = %p\n", RootPageDirectory);
ffffffff80000bef:	48 c7 c7 e4 4c 00 80 	mov    $0xffffffff80004ce4,%rdi
    RootPageDirectory = vmm_create_page_table();
ffffffff80000bf6:	48 89 05 cb de 00 00 	mov    %rax,0xdecb(%rip)        # ffffffff8000eac8 <RootPageDirectory>
    printf("Root = %p\n", RootPageDirectory);
ffffffff80000bfd:	48 89 c6             	mov    %rax,%rsi
ffffffff80000c00:	31 c0                	xor    %eax,%eax
ffffffff80000c02:	e8 99 28 00 00       	callq  ffffffff800034a0 <printf_>

    //Map the Kernel
    //TODO - Make the pages sensitive to RO/RW
    for(uint64_t i = 0; i < kernel_size; i += 4096)
ffffffff80000c07:	48 85 ed             	test   %rbp,%rbp
ffffffff80000c0a:	74 2a                	je     ffffffff80000c36 <vmm_init+0x136>
ffffffff80000c0c:	31 db                	xor    %ebx,%ebx
ffffffff80000c0e:	66 90                	xchg   %ax,%ax
    {
        vmm_map_4Kpage(RootPageDirectory, kernel_virt + i, kernel_phys + i, PTE_PRESENT | PTE_READWRITE);
ffffffff80000c10:	48 8b 3d b1 de 00 00 	mov    0xdeb1(%rip),%rdi        # ffffffff8000eac8 <RootPageDirectory>
ffffffff80000c17:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
ffffffff80000c1b:	49 8d 74 1d 00       	lea    0x0(%r13,%rbx,1),%rsi
ffffffff80000c20:	b9 03 00 00 00       	mov    $0x3,%ecx
    for(uint64_t i = 0; i < kernel_size; i += 4096)
ffffffff80000c25:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
        vmm_map_4Kpage(RootPageDirectory, kernel_virt + i, kernel_phys + i, PTE_PRESENT | PTE_READWRITE);
ffffffff80000c2c:	e8 ff fa ff ff       	callq  ffffffff80000730 <vmm_map_4Kpage>
    for(uint64_t i = 0; i < kernel_size; i += 4096)
ffffffff80000c31:	48 39 dd             	cmp    %rbx,%rbp
ffffffff80000c34:	77 da                	ja     ffffffff80000c10 <vmm_init+0x110>
    }

    //Map Physical Memory
    printf("HHDM: %p\n", boot_info.tag_hhdm->addr);
ffffffff80000c36:	48 8b 05 5b 9a 00 00 	mov    0x9a5b(%rip),%rax        # ffffffff8000a698 <boot_info+0x38>
ffffffff80000c3d:	48 c7 c7 ef 4c 00 80 	mov    $0xffffffff80004cef,%rdi
ffffffff80000c44:	bb 00 10 00 00       	mov    $0x1000,%ebx
ffffffff80000c49:	48 8b 70 10          	mov    0x10(%rax),%rsi
ffffffff80000c4d:	31 c0                	xor    %eax,%eax
ffffffff80000c4f:	e8 4c 28 00 00       	callq  ffffffff800034a0 <printf_>
ffffffff80000c54:	0f 1f 40 00          	nopl   0x0(%rax)
    for(uint64_t i = 1; i < 261; i++)
    {   
        vmm_map_2Mpage(RootPageDirectory, boot_info.tag_hhdm->addr + (0x1000 * i), (0x1000 * i), PTE_PRESENT | PTE_READWRITE);
ffffffff80000c58:	48 8b 05 39 9a 00 00 	mov    0x9a39(%rip),%rax        # ffffffff8000a698 <boot_info+0x38>
ffffffff80000c5f:	48 8b 3d 62 de 00 00 	mov    0xde62(%rip),%rdi        # ffffffff8000eac8 <RootPageDirectory>
ffffffff80000c66:	48 89 da             	mov    %rbx,%rdx
ffffffff80000c69:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80000c6e:	48 8b 70 10          	mov    0x10(%rax),%rsi
ffffffff80000c72:	48 01 de             	add    %rbx,%rsi
ffffffff80000c75:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
ffffffff80000c7c:	e8 cf f9 ff ff       	callq  ffffffff80000650 <vmm_map_2Mpage>
    for(uint64_t i = 1; i < 261; i++)
ffffffff80000c81:	48 81 fb 00 50 10 00 	cmp    $0x105000,%rbx
ffffffff80000c88:	75 ce                	jne    ffffffff80000c58 <vmm_init+0x158>
    }

    printf("New CR3: %p -- & %p \n", (uint64_t)RootPageDirectory, &RootPageDirectory);
ffffffff80000c8a:	48 8b 35 37 de 00 00 	mov    0xde37(%rip),%rsi        # ffffffff8000eac8 <RootPageDirectory>
ffffffff80000c91:	48 c7 c7 f9 4c 00 80 	mov    $0xffffffff80004cf9,%rdi
ffffffff80000c98:	48 c7 c2 c8 ea 00 80 	mov    $0xffffffff8000eac8,%rdx
ffffffff80000c9f:	31 c0                	xor    %eax,%eax
ffffffff80000ca1:	e8 fa 27 00 00       	callq  ffffffff800034a0 <printf_>
    //vmm_write_cr3((uint64_t)RootPageDirectory);

    //serial_write(0x3F8, 'v');

    //vmm_PMLwalk(kernel_cr3);
    vmm_PMLwalk(RootPageDirectory);
ffffffff80000ca6:	48 8b 3d 1b de 00 00 	mov    0xde1b(%rip),%rdi        # ffffffff8000eac8 <RootPageDirectory>

    //cycle through page entries


    
}
ffffffff80000cad:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80000cb1:	5b                   	pop    %rbx
ffffffff80000cb2:	5d                   	pop    %rbp
ffffffff80000cb3:	41 5c                	pop    %r12
ffffffff80000cb5:	41 5d                	pop    %r13
    vmm_PMLwalk(RootPageDirectory);
ffffffff80000cb7:	e9 b4 fc ff ff       	jmpq   ffffffff80000970 <vmm_PMLwalk>
ffffffff80000cbc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000cc0 <liballoc_lock>:

extern struct PageTable* kernel_cr3;

int liballoc_lock()
{
    asm("cli");
ffffffff80000cc0:	fa                   	cli    
    return 0;
}
ffffffff80000cc1:	31 c0                	xor    %eax,%eax
ffffffff80000cc3:	c3                   	retq   
ffffffff80000cc4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000ccb:	00 00 00 00 
ffffffff80000ccf:	90                   	nop

ffffffff80000cd0 <liballoc_unlock>:


int liballoc_unlock()
{
    asm("sti");
ffffffff80000cd0:	fb                   	sti    
    return 0;
}
ffffffff80000cd1:	31 c0                	xor    %eax,%eax
ffffffff80000cd3:	c3                   	retq   
ffffffff80000cd4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000cdb:	00 00 00 00 
ffffffff80000cdf:	90                   	nop

ffffffff80000ce0 <liballoc_free>:

int liballoc_free(void* page, size_t count)
{
    
}
ffffffff80000ce0:	f3 c3                	repz retq 
ffffffff80000ce2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000ce9:	00 00 00 00 
ffffffff80000ced:	0f 1f 00             	nopl   (%rax)

ffffffff80000cf0 <liballoc_alloc>:

void* liballoc_alloc(size_t count)
{
    for(int i = 0; i < count; i++)
ffffffff80000cf0:	48 85 ff             	test   %rdi,%rdi
ffffffff80000cf3:	74 6b                	je     ffffffff80000d60 <liballoc_alloc+0x70>
{
ffffffff80000cf5:	55                   	push   %rbp
ffffffff80000cf6:	53                   	push   %rbx
ffffffff80000cf7:	89 fd                	mov    %edi,%ebp
    for(int i = 0; i < count; i++)
ffffffff80000cf9:	31 db                	xor    %ebx,%ebx
{
ffffffff80000cfb:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80000cff:	90                   	nop
    {
        vmm_map_4Kpage(kernel_cr3, ((uint64_t)kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000d00:	31 c0                	xor    %eax,%eax
    for(int i = 0; i < count; i++)
ffffffff80000d02:	83 c3 01             	add    $0x1,%ebx
        vmm_map_4Kpage(kernel_cr3, ((uint64_t)kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000d05:	e8 e6 09 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
ffffffff80000d0a:	48 8b 0d b7 99 00 00 	mov    0x99b7(%rip),%rcx        # ffffffff8000a6c8 <kernel_heap_top>
ffffffff80000d11:	48 8b 3d a8 dd 00 00 	mov    0xdda8(%rip),%rdi        # ffffffff8000eac0 <kernel_cr3>
ffffffff80000d18:	48 89 c2             	mov    %rax,%rdx
ffffffff80000d1b:	31 c0                	xor    %eax,%eax
ffffffff80000d1d:	48 8d b1 00 10 00 00 	lea    0x1000(%rcx),%rsi
ffffffff80000d24:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80000d29:	e8 02 fa ff ff       	callq  ffffffff80000730 <vmm_map_4Kpage>
        kernel_heap_top += 4096;
ffffffff80000d2e:	48 8b 05 93 99 00 00 	mov    0x9993(%rip),%rax        # ffffffff8000a6c8 <kernel_heap_top>
ffffffff80000d35:	48 05 00 80 00 00    	add    $0x8000,%rax
    for(int i = 0; i < count; i++)
ffffffff80000d3b:	39 eb                	cmp    %ebp,%ebx
        kernel_heap_top += 4096;
ffffffff80000d3d:	48 89 05 84 99 00 00 	mov    %rax,0x9984(%rip)        # ffffffff8000a6c8 <kernel_heap_top>
    for(int i = 0; i < count; i++)
ffffffff80000d44:	75 ba                	jne    ffffffff80000d00 <liballoc_alloc+0x10>
    }
    return (void*)(phys_to_hh_data((uint64_t)kernel_heap_top));
ffffffff80000d46:	48 83 c4 08          	add    $0x8,%rsp
    return 0xFFFF800000000000 + addr;
ffffffff80000d4a:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000d51:	80 ff ff 
ffffffff80000d54:	48 01 d0             	add    %rdx,%rax
ffffffff80000d57:	5b                   	pop    %rbx
ffffffff80000d58:	5d                   	pop    %rbp
ffffffff80000d59:	c3                   	retq   
ffffffff80000d5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000d60:	48 8b 05 61 99 00 00 	mov    0x9961(%rip),%rax        # ffffffff8000a6c8 <kernel_heap_top>
ffffffff80000d67:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000d6e:	80 ff ff 
ffffffff80000d71:	48 01 d0             	add    %rdx,%rax
ffffffff80000d74:	c3                   	retq   
ffffffff80000d75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000d7c:	00 00 00 
ffffffff80000d7f:	90                   	nop

ffffffff80000d80 <allocate_new_page>:
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
		st += sizeof(struct liballoc_minor);
ffffffff80000d80:	83 c7 50             	add    $0x50,%edi
{
ffffffff80000d83:	53                   	push   %rbx
ffffffff80000d84:	bb 10 00 00 00       	mov    $0x10,%ebx
ffffffff80000d89:	89 f8                	mov    %edi,%eax

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff80000d8b:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
ffffffff80000d91:	c1 e8 0c             	shr    $0xc,%eax
			st  = st / (l_pageSize);
		else
			st  = st / (l_pageSize) + 1;
ffffffff80000d94:	83 ff 01             	cmp    $0x1,%edi
ffffffff80000d97:	83 d8 ff             	sbb    $0xffffffff,%eax
ffffffff80000d9a:	83 f8 10             	cmp    $0x10,%eax
ffffffff80000d9d:	0f 43 d8             	cmovae %eax,%ebx

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80000da0:	89 df                	mov    %ebx,%edi
ffffffff80000da2:	e8 49 ff ff ff       	callq  ffffffff80000cf0 <liballoc_alloc>

		if ( maj == NULL ) 
ffffffff80000da7:	48 85 c0             	test   %rax,%rax
ffffffff80000daa:	74 34                	je     ffffffff80000de0 <allocate_new_page+0x60>
			return NULL;	// uh oh, we ran out of memory.
		}
		
		maj->prev 	= NULL;
		maj->next 	= NULL;
		maj->pages 	= st;
ffffffff80000dac:	89 58 10             	mov    %ebx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff80000daf:	c1 e3 0c             	shl    $0xc,%ebx
		maj->prev 	= NULL;
ffffffff80000db2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80000db9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80000dc0:	00 
		maj->size 	= st * l_pageSize;
ffffffff80000dc1:	89 58 14             	mov    %ebx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80000dc4:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff80000dcb:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000dd2:	00 

		l_allocated += maj->size;
ffffffff80000dd3:	48 01 1d 16 dd 00 00 	add    %rbx,0xdd16(%rip)        # ffffffff8000eaf0 <l_allocated>
		FLUSH();
		#endif
	
		
      return maj;
}
ffffffff80000dda:	5b                   	pop    %rbx
ffffffff80000ddb:	c3                   	retq   
ffffffff80000ddc:	0f 1f 40 00          	nopl   0x0(%rax)
			l_warningCount += 1;
ffffffff80000de0:	48 83 05 f8 dc 00 00 	addq   $0x1,0xdcf8(%rip)        # ffffffff8000eae0 <l_warningCount>
ffffffff80000de7:	01 
}
ffffffff80000de8:	5b                   	pop    %rbx
ffffffff80000de9:	c3                   	retq   
ffffffff80000dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000df0 <kmalloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff80000df0:	41 57                	push   %r15
ffffffff80000df2:	41 56                	push   %r14
ffffffff80000df4:	41 55                	push   %r13
ffffffff80000df6:	41 54                	push   %r12
ffffffff80000df8:	49 89 fd             	mov    %rdi,%r13
ffffffff80000dfb:	55                   	push   %rbp
ffffffff80000dfc:	53                   	push   %rbx
ffffffff80000dfd:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000e01:	eb 1a                	jmp    ffffffff80000e1d <kmalloc+0x2d>
ffffffff80000e03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80000e08:	31 c0                	xor    %eax,%eax
		return PREFIX(malloc)(1);
ffffffff80000e0a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		l_warningCount += 1;
ffffffff80000e10:	48 83 05 c8 dc 00 00 	addq   $0x1,0xdcc8(%rip)        # ffffffff8000eae0 <l_warningCount>
ffffffff80000e17:	01 
		liballoc_unlock();
ffffffff80000e18:	e8 b3 fe ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
		size += ALIGNMENT + ALIGN_INFO;
ffffffff80000e1d:	4d 8d 65 20          	lea    0x20(%r13),%r12
	liballoc_lock();
ffffffff80000e21:	31 c0                	xor    %eax,%eax
ffffffff80000e23:	e8 98 fe ff ff       	callq  ffffffff80000cc0 <liballoc_lock>
	if ( size == 0 )
ffffffff80000e28:	4d 85 e4             	test   %r12,%r12
ffffffff80000e2b:	74 db                	je     ffffffff80000e08 <kmalloc+0x18>
	}
	

	if ( l_memRoot == NULL )
ffffffff80000e2d:	48 8b 35 cc dc 00 00 	mov    0xdccc(%rip),%rsi        # ffffffff8000eb00 <l_memRoot>
ffffffff80000e34:	48 85 f6             	test   %rsi,%rsi
ffffffff80000e37:	0f 84 c3 02 00 00    	je     ffffffff80001100 <kmalloc+0x310>

	maj = l_memRoot;
	startedBet = 0;
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80000e3d:	48 8b 15 b4 dc 00 00 	mov    0xdcb4(%rip),%rdx        # ffffffff8000eaf8 <l_bestBet>
ffffffff80000e44:	49 8d 5d 48          	lea    0x48(%r13),%rbx
ffffffff80000e48:	48 85 d2             	test   %rdx,%rdx
ffffffff80000e4b:	0f 84 3f 02 00 00    	je     ffffffff80001090 <kmalloc+0x2a0>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000e51:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000e54:	8b 4a 18             	mov    0x18(%rdx),%ecx

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
		{
			maj = l_bestBet;
			startedBet = 1;
ffffffff80000e57:	41 bf 01 00 00 00    	mov    $0x1,%r15d
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000e5d:	41 89 c6             	mov    %eax,%r14d
ffffffff80000e60:	41 29 ce             	sub    %ecx,%r14d
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80000e63:	49 39 de             	cmp    %rbx,%r14
ffffffff80000e66:	0f 86 b4 01 00 00    	jbe    ffffffff80001020 <kmalloc+0x230>
		}
	}
	
	while ( maj != NULL )
	{
		diff  = maj->size - maj->usage;	
ffffffff80000e6c:	29 c8                	sub    %ecx,%eax
										// free memory in the block

		if ( bestSize < diff )
ffffffff80000e6e:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000e71:	76 0a                	jbe    ffffffff80000e7d <kmalloc+0x8d>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff80000e73:	48 89 15 7e dc 00 00 	mov    %rdx,0xdc7e(%rip)        # ffffffff8000eaf8 <l_bestBet>
ffffffff80000e7a:	49 89 c6             	mov    %rax,%r14
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000e7d:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000e80:	73 22                	jae    ffffffff80000ea4 <kmalloc+0xb4>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80000e82:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff80000e86:	48 85 c0             	test   %rax,%rax
ffffffff80000e89:	0f 84 b9 00 00 00    	je     ffffffff80000f48 <kmalloc+0x158>
ffffffff80000e8f:	48 89 c2             	mov    %rax,%rdx
ffffffff80000e92:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000e95:	8b 4a 18             	mov    0x18(%rdx),%ecx
		diff  = maj->size - maj->usage;	
ffffffff80000e98:	29 c8                	sub    %ecx,%eax
		if ( bestSize < diff )
ffffffff80000e9a:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000e9d:	77 d4                	ja     ffffffff80000e73 <kmalloc+0x83>
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000e9f:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ea2:	72 de                	jb     ffffffff80000e82 <kmalloc+0x92>
ffffffff80000ea4:	48 89 d5             	mov    %rdx,%rbp
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80000ea7:	48 8b 55 20          	mov    0x20(%rbp),%rdx
ffffffff80000eab:	48 85 d2             	test   %rdx,%rdx
ffffffff80000eae:	0f 84 7d 01 00 00    	je     ffffffff80001031 <kmalloc+0x241>
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
		diff -= (uintptr_t)maj;
ffffffff80000eb4:	48 89 d0             	mov    %rdx,%rax
ffffffff80000eb7:	48 29 e8             	sub    %rbp,%rax
		diff -= sizeof(struct liballoc_major);
ffffffff80000eba:	48 83 e8 28          	sub    $0x28,%rax

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff80000ebe:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ec1:	0f 83 62 02 00 00    	jae    ffffffff80001129 <kmalloc+0x339>
		
			// Looping within the block now...
		while ( min != NULL )
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80000ec7:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000ecb:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000ece:	48 85 c9             	test   %rcx,%rcx
ffffffff80000ed1:	74 25                	je     ffffffff80000ef8 <kmalloc+0x108>
				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
					diff -= (uintptr_t)min;
ffffffff80000ed3:	48 89 c8             	mov    %rcx,%rax
ffffffff80000ed6:	48 29 d0             	sub    %rdx,%rax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000ed9:	48 83 e8 28          	sub    $0x28,%rax
					diff -= min->size;
ffffffff80000edd:	48 29 f0             	sub    %rsi,%rax
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000ee0:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ee3:	0f 83 b7 00 00 00    	jae    ffffffff80000fa0 <kmalloc+0x1b0>
ffffffff80000ee9:	48 89 ca             	mov    %rcx,%rdx
				if ( min->next == NULL )
ffffffff80000eec:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000ef0:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000ef3:	48 85 c9             	test   %rcx,%rcx
ffffffff80000ef6:	75 db                	jne    ffffffff80000ed3 <kmalloc+0xe3>
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80000ef8:	8b 45 14             	mov    0x14(%rbp),%eax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000efb:	48 8d 44 05 d8       	lea    -0x28(%rbp,%rax,1),%rax
ffffffff80000f00:	48 29 d0             	sub    %rdx,%rax
					diff -= min->size; 
ffffffff80000f03:	48 29 f0             	sub    %rsi,%rax
					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000f06:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000f09:	0f 83 99 01 00 00    	jae    ffffffff800010a8 <kmalloc+0x2b8>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff80000f0f:	48 8b 55 08          	mov    0x8(%rbp),%rdx
ffffffff80000f13:	48 85 d2             	test   %rdx,%rdx
ffffffff80000f16:	0f 85 76 ff ff ff    	jne    ffffffff80000e92 <kmalloc+0xa2>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff80000f1c:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000f20:	74 5e                	je     ffffffff80000f80 <kmalloc+0x190>
				startedBet = 0;
				continue;
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000f22:	44 89 e7             	mov    %r12d,%edi
ffffffff80000f25:	e8 56 fe ff ff       	callq  ffffffff80000d80 <allocate_new_page>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000f2a:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000f2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80000f30:	48 89 45 08          	mov    %rax,0x8(%rbp)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000f34:	0f 84 e1 01 00 00    	je     ffffffff8000111b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000f3a:	48 89 28             	mov    %rbp,(%rax)
ffffffff80000f3d:	e9 50 ff ff ff       	jmpq   ffffffff80000e92 <kmalloc+0xa2>
ffffffff80000f42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80000f48:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000f4c:	74 32                	je     ffffffff80000f80 <kmalloc+0x190>
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000f4e:	44 89 e7             	mov    %r12d,%edi
ffffffff80000f51:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80000f56:	e8 25 fe ff ff       	callq  ffffffff80000d80 <allocate_new_page>
ffffffff80000f5b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000f60:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000f63:	48 89 c5             	mov    %rax,%rbp
ffffffff80000f66:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000f6a:	0f 84 ab 01 00 00    	je     ffffffff8000111b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000f70:	48 89 10             	mov    %rdx,(%rax)
ffffffff80000f73:	e9 2f ff ff ff       	jmpq   ffffffff80000ea7 <kmalloc+0xb7>
ffffffff80000f78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000f7f:	00 
				maj = l_memRoot;
ffffffff80000f80:	48 8b 15 79 db 00 00 	mov    0xdb79(%rip),%rdx        # ffffffff8000eb00 <l_memRoot>
	while ( maj != NULL )
ffffffff80000f87:	48 85 d2             	test   %rdx,%rdx
ffffffff80000f8a:	0f 84 8b 01 00 00    	je     ffffffff8000111b <kmalloc+0x32b>
ffffffff80000f90:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000f93:	e9 fa fe ff ff       	jmpq   ffffffff80000e92 <kmalloc+0xa2>
ffffffff80000f98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000f9f:	00 
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fa0:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
						l_inuse += size;
ffffffff80000fa4:	4c 01 25 3d db 00 00 	add    %r12,0xdb3d(%rip)        # ffffffff8000eae8 <l_inuse>
						new_min->next = min->next;
ffffffff80000fab:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
						min->next->prev = new_min;
ffffffff80000faf:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fb3:	48 8d 43 28          	lea    0x28(%rbx),%rax
						new_min->magic = LIBALLOC_MAGIC;
ffffffff80000fb7:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
						ALIGN( p );
ffffffff80000fbe:	48 83 c3 60          	add    $0x60,%rbx
						new_min->prev = min;
ffffffff80000fc2:	48 89 53 c8          	mov    %rdx,-0x38(%rbx)
						new_min->size = size;
ffffffff80000fc6:	44 89 63 e4          	mov    %r12d,-0x1c(%rbx)
						new_min->req_size = req_size;
ffffffff80000fca:	44 89 6b e8          	mov    %r13d,-0x18(%rbx)
						new_min->block = maj;
ffffffff80000fce:	48 89 6b d8          	mov    %rbp,-0x28(%rbx)
						min->next->prev = new_min;
ffffffff80000fd2:	48 89 01             	mov    %rax,(%rcx)
						min->next = new_min;
ffffffff80000fd5:	48 89 42 08          	mov    %rax,0x8(%rdx)
						ALIGN( p );
ffffffff80000fd9:	48 89 da             	mov    %rbx,%rdx
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000fdc:	41 8d 44 24 28       	lea    0x28(%r12),%eax
ffffffff80000fe1:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80000fe4:	83 e2 0f             	and    $0xf,%edx
ffffffff80000fe7:	0f 84 93 00 00 00    	je     ffffffff80001080 <kmalloc+0x290>
ffffffff80000fed:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000ff2:	48 29 d0             	sub    %rdx,%rax
ffffffff80000ff5:	48 01 c3             	add    %rax,%rbx
ffffffff80000ff8:	83 c0 10             	add    $0x10,%eax
ffffffff80000ffb:	88 43 f0             	mov    %al,-0x10(%rbx)
						liballoc_unlock();		// release the lock
ffffffff80000ffe:	31 c0                	xor    %eax,%eax
ffffffff80001000:	e8 cb fc ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
}
ffffffff80001005:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001009:	48 89 d8             	mov    %rbx,%rax
ffffffff8000100c:	5b                   	pop    %rbx
ffffffff8000100d:	5d                   	pop    %rbp
ffffffff8000100e:	41 5c                	pop    %r12
ffffffff80001010:	41 5d                	pop    %r13
ffffffff80001012:	41 5e                	pop    %r14
ffffffff80001014:	41 5f                	pop    %r15
ffffffff80001016:	c3                   	retq   
ffffffff80001017:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000101e:	00 00 
ffffffff80001020:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80001023:	8b 4e 18             	mov    0x18(%rsi),%ecx
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80001026:	48 89 f2             	mov    %rsi,%rdx
	startedBet = 0;
ffffffff80001029:	45 31 ff             	xor    %r15d,%r15d
ffffffff8000102c:	e9 3b fe ff ff       	jmpq   ffffffff80000e6c <kmalloc+0x7c>
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001031:	48 8d 45 28          	lea    0x28(%rbp),%rax
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80001035:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 		= NULL;
ffffffff8000103c:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80001043:	00 
			maj->first->next 		= NULL;
ffffffff80001044:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff8000104b:	00 
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff8000104c:	48 89 45 20          	mov    %rax,0x20(%rbp)
			ALIGN( p );
ffffffff80001050:	48 8d 5d 60          	lea    0x60(%rbp),%rbx
			maj->first->block 	= maj;
ffffffff80001054:	48 89 6d 38          	mov    %rbp,0x38(%rbp)
			maj->first->size 	= size;
ffffffff80001058:	44 89 65 44          	mov    %r12d,0x44(%rbp)
			maj->first->req_size 	= req_size;
ffffffff8000105c:	44 89 6d 48          	mov    %r13d,0x48(%rbp)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80001060:	41 8d 44 24 28       	lea    0x28(%r12),%eax
			l_inuse += size;
ffffffff80001065:	4c 01 25 7c da 00 00 	add    %r12,0xda7c(%rip)        # ffffffff8000eae8 <l_inuse>
			ALIGN( p );
ffffffff8000106c:	48 89 da             	mov    %rbx,%rdx
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff8000106f:	01 45 18             	add    %eax,0x18(%rbp)
			ALIGN( p );
ffffffff80001072:	83 e2 0f             	and    $0xf,%edx
ffffffff80001075:	0f 85 72 ff ff ff    	jne    ffffffff80000fed <kmalloc+0x1fd>
ffffffff8000107b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
						ALIGN( p );
ffffffff80001080:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001085:	e9 71 ff ff ff       	jmpq   ffffffff80000ffb <kmalloc+0x20b>
ffffffff8000108a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001090:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80001093:	8b 4e 18             	mov    0x18(%rsi),%ecx
	if ( l_bestBet != NULL )
ffffffff80001096:	48 89 f2             	mov    %rsi,%rdx
	unsigned long long bestSize = 0;
ffffffff80001099:	45 31 f6             	xor    %r14d,%r14d
	startedBet = 0;
ffffffff8000109c:	45 31 ff             	xor    %r15d,%r15d
ffffffff8000109f:	e9 c8 fd ff ff       	jmpq   ffffffff80000e6c <kmalloc+0x7c>
ffffffff800010a4:	0f 1f 40 00          	nopl   0x0(%rax)
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010a8:	48 01 d6             	add    %rdx,%rsi
						l_inuse += size;
ffffffff800010ab:	4c 01 25 36 da 00 00 	add    %r12,0xda36(%rip)        # ffffffff8000eae8 <l_inuse>
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010b2:	48 8d 46 28          	lea    0x28(%rsi),%rax
						ALIGN( p );
ffffffff800010b6:	48 8d 5e 60          	lea    0x60(%rsi),%rbx
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010ba:	48 89 42 08          	mov    %rax,0x8(%rdx)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff800010be:	41 8d 44 24 28       	lea    0x28(%r12),%eax
						min->next->prev = min;
ffffffff800010c3:	48 89 56 28          	mov    %rdx,0x28(%rsi)
						ALIGN( p );
ffffffff800010c7:	48 89 da             	mov    %rbx,%rdx
						min->next = NULL;
ffffffff800010ca:	48 c7 46 30 00 00 00 	movq   $0x0,0x30(%rsi)
ffffffff800010d1:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff800010d2:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						min->block = maj;
ffffffff800010d9:	48 89 6e 38          	mov    %rbp,0x38(%rsi)
						min->size = size;
ffffffff800010dd:	44 89 66 44          	mov    %r12d,0x44(%rsi)
						min->req_size = req_size;
ffffffff800010e1:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff800010e5:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff800010e8:	83 e2 0f             	and    $0xf,%edx
ffffffff800010eb:	0f 85 fc fe ff ff    	jne    ffffffff80000fed <kmalloc+0x1fd>
						ALIGN( p );
ffffffff800010f1:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff800010f6:	e9 00 ff ff ff       	jmpq   ffffffff80000ffb <kmalloc+0x20b>
ffffffff800010fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		l_memRoot = allocate_new_page( size );
ffffffff80001100:	44 89 e7             	mov    %r12d,%edi
ffffffff80001103:	e8 78 fc ff ff       	callq  ffffffff80000d80 <allocate_new_page>
		if ( l_memRoot == NULL )
ffffffff80001108:	48 85 c0             	test   %rax,%rax
		l_memRoot = allocate_new_page( size );
ffffffff8000110b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000110e:	48 89 05 eb d9 00 00 	mov    %rax,0xd9eb(%rip)        # ffffffff8000eb00 <l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80001115:	0f 85 22 fd ff ff    	jne    ffffffff80000e3d <kmalloc+0x4d>
		  liballoc_unlock();
ffffffff8000111b:	31 c0                	xor    %eax,%eax
		  return NULL;
ffffffff8000111d:	31 db                	xor    %ebx,%ebx
		  liballoc_unlock();
ffffffff8000111f:	e8 ac fb ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
		  return NULL;
ffffffff80001124:	e9 dc fe ff ff       	jmpq   ffffffff80001005 <kmalloc+0x215>
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001129:	48 8d 45 28          	lea    0x28(%rbp),%rax
ffffffff8000112d:	48 89 02             	mov    %rax,(%rdx)
			maj->first->prev->next = maj->first;
ffffffff80001130:	48 89 55 30          	mov    %rdx,0x30(%rbp)
			maj->first = maj->first->prev;
ffffffff80001134:	48 89 45 20          	mov    %rax,0x20(%rbp)
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80001138:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 	= NULL;
ffffffff8000113f:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80001146:	00 
ffffffff80001147:	e9 04 ff ff ff       	jmpq   ffffffff80001050 <kmalloc+0x260>
ffffffff8000114c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001150 <kfree>:
void PREFIX(free)(void *ptr)
{
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80001150:	48 85 ff             	test   %rdi,%rdi
ffffffff80001153:	0f 84 d7 00 00 00    	je     ffffffff80001230 <kfree+0xe0>
{
ffffffff80001159:	53                   	push   %rbx
		FLUSH();
		#endif
		return;
	}

	UNALIGN( ptr );
ffffffff8000115a:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff8000115f:	48 89 fb             	mov    %rdi,%rbx
ffffffff80001162:	48 29 c3             	sub    %rax,%rbx
ffffffff80001165:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80001169:	48 0f 43 df          	cmovae %rdi,%rbx

	liballoc_lock();		// lockit
ffffffff8000116d:	31 c0                	xor    %eax,%eax
ffffffff8000116f:	e8 4c fb ff ff       	callq  ffffffff80000cc0 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001174:	8b 43 f0             	mov    -0x10(%rbx),%eax
	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80001177:	48 8d 73 d8          	lea    -0x28(%rbx),%rsi
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff8000117b:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80001180:	74 2e                	je     ffffffff800011b0 <kfree+0x60>
	{
		l_errorCount += 1;

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001182:	89 c2                	mov    %eax,%edx
		l_errorCount += 1;
ffffffff80001184:	48 83 05 4c d9 00 00 	addq   $0x1,0xd94c(%rip)        # ffffffff8000ead8 <l_errorCount>
ffffffff8000118b:	01 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000118c:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
		if ( 
ffffffff80001192:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80001198:	0f 84 82 00 00 00    	je     ffffffff80001220 <kfree+0xd0>
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000119e:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff800011a2:	74 7c                	je     ffffffff80001220 <kfree+0xd0>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff800011a4:	3c de                	cmp    $0xde,%al
ffffffff800011a6:	74 78                	je     ffffffff80001220 <kfree+0xd0>
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
}
ffffffff800011a8:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff800011a9:	31 c0                	xor    %eax,%eax
ffffffff800011ab:	e9 20 fb ff ff       	jmpq   ffffffff80000cd0 <liballoc_unlock>
		maj = min->block;
ffffffff800011b0:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
		l_inuse -= min->size;
ffffffff800011b4:	8b 53 f4             	mov    -0xc(%rbx),%edx
ffffffff800011b7:	48 29 15 2a d9 00 00 	sub    %rdx,0xd92a(%rip)        # ffffffff8000eae8 <l_inuse>
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800011be:	8b 4f 18             	mov    0x18(%rdi),%ecx
ffffffff800011c1:	29 d1                	sub    %edx,%ecx
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff800011c3:	48 8b 53 e0          	mov    -0x20(%rbx),%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800011c7:	89 c8                	mov    %ecx,%eax
ffffffff800011c9:	48 8b 4b d8          	mov    -0x28(%rbx),%rcx
ffffffff800011cd:	83 e8 28             	sub    $0x28,%eax
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff800011d0:	48 85 d2             	test   %rdx,%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800011d3:	89 47 18             	mov    %eax,0x18(%rdi)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff800011d6:	c7 43 f0 ad de ad de 	movl   $0xdeaddead,-0x10(%rbx)
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff800011dd:	74 06                	je     ffffffff800011e5 <kfree+0x95>
ffffffff800011df:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff800011e2:	48 8b 0e             	mov    (%rsi),%rcx
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff800011e5:	48 85 c9             	test   %rcx,%rcx
ffffffff800011e8:	74 56                	je     ffffffff80001240 <kfree+0xf0>
ffffffff800011ea:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff800011ee:	48 8b 57 20          	mov    0x20(%rdi),%rdx
	if ( maj->first == NULL )	// Block completely unused.
ffffffff800011f2:	48 85 d2             	test   %rdx,%rdx
ffffffff800011f5:	48 8b 0d fc d8 00 00 	mov    0xd8fc(%rip),%rcx        # ffffffff8000eaf8 <l_bestBet>
ffffffff800011fc:	74 52                	je     ffffffff80001250 <kfree+0x100>
		if ( l_bestBet != NULL )
ffffffff800011fe:	48 85 c9             	test   %rcx,%rcx
ffffffff80001201:	74 a5                	je     ffffffff800011a8 <kfree+0x58>
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001203:	8b 51 14             	mov    0x14(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80001206:	8b 77 14             	mov    0x14(%rdi),%esi
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001209:	2b 51 18             	sub    0x18(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff8000120c:	29 c6                	sub    %eax,%esi
			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff8000120e:	39 f2                	cmp    %esi,%edx
ffffffff80001210:	7d 96                	jge    ffffffff800011a8 <kfree+0x58>
ffffffff80001212:	48 89 3d df d8 00 00 	mov    %rdi,0xd8df(%rip)        # ffffffff8000eaf8 <l_bestBet>
ffffffff80001219:	eb 8d                	jmp    ffffffff800011a8 <kfree+0x58>
ffffffff8000121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			l_possibleOverruns += 1;
ffffffff80001220:	48 83 05 a8 d8 00 00 	addq   $0x1,0xd8a8(%rip)        # ffffffff8000ead0 <l_possibleOverruns>
ffffffff80001227:	01 
		liballoc_unlock();		// release the lock
ffffffff80001228:	31 c0                	xor    %eax,%eax
}
ffffffff8000122a:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff8000122b:	e9 a0 fa ff ff       	jmpq   ffffffff80000cd0 <liballoc_unlock>
		l_warningCount += 1;
ffffffff80001230:	48 83 05 a8 d8 00 00 	addq   $0x1,0xd8a8(%rip)        # ffffffff8000eae0 <l_warningCount>
ffffffff80001237:	01 
ffffffff80001238:	c3                   	retq   
ffffffff80001239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80001240:	48 89 57 20          	mov    %rdx,0x20(%rdi)
ffffffff80001244:	eb ac                	jmp    ffffffff800011f2 <kfree+0xa2>
ffffffff80001246:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000124d:	00 00 00 
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001250:	48 39 3d a9 d8 00 00 	cmp    %rdi,0xd8a9(%rip)        # ffffffff8000eb00 <l_memRoot>
ffffffff80001257:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff8000125b:	74 3b                	je     ffffffff80001298 <kfree+0x148>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff8000125d:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80001260:	74 46                	je     ffffffff800012a8 <kfree+0x158>
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80001262:	48 8b 17             	mov    (%rdi),%rdx
ffffffff80001265:	48 85 d2             	test   %rdx,%rdx
ffffffff80001268:	74 08                	je     ffffffff80001272 <kfree+0x122>
ffffffff8000126a:	48 89 42 08          	mov    %rax,0x8(%rdx)
ffffffff8000126e:	48 8b 47 08          	mov    0x8(%rdi),%rax
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff80001272:	48 85 c0             	test   %rax,%rax
ffffffff80001275:	74 03                	je     ffffffff8000127a <kfree+0x12a>
ffffffff80001277:	48 89 10             	mov    %rdx,(%rax)
		liballoc_free( maj, maj->pages );
ffffffff8000127a:	8b 77 10             	mov    0x10(%rdi),%esi
		l_allocated -= maj->size;
ffffffff8000127d:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff80001280:	48 29 05 69 d8 00 00 	sub    %rax,0xd869(%rip)        # ffffffff8000eaf0 <l_allocated>
		liballoc_free( maj, maj->pages );
ffffffff80001287:	e8 54 fa ff ff       	callq  ffffffff80000ce0 <liballoc_free>
ffffffff8000128c:	e9 17 ff ff ff       	jmpq   ffffffff800011a8 <kfree+0x58>
ffffffff80001291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001298:	48 89 05 61 d8 00 00 	mov    %rax,0xd861(%rip)        # ffffffff8000eb00 <l_memRoot>
ffffffff8000129f:	eb bc                	jmp    ffffffff8000125d <kfree+0x10d>
ffffffff800012a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff800012a8:	48 c7 05 45 d8 00 00 	movq   $0x0,0xd845(%rip)        # ffffffff8000eaf8 <l_bestBet>
ffffffff800012af:	00 00 00 00 
ffffffff800012b3:	eb ad                	jmp    ffffffff80001262 <kfree+0x112>
ffffffff800012b5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800012bc:	00 00 00 00 

ffffffff800012c0 <kcalloc>:
void* PREFIX(calloc)(size_t nobj, size_t size)
{
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff800012c0:	0f af fe             	imul   %esi,%edi
{
ffffffff800012c3:	53                   	push   %rbx
       
       p = PREFIX(malloc)( real_size );
ffffffff800012c4:	48 63 df             	movslq %edi,%rbx
ffffffff800012c7:	48 89 df             	mov    %rbx,%rdi
ffffffff800012ca:	e8 21 fb ff ff       	callq  ffffffff80000df0 <kmalloc>
	for ( i = 0; i < n ; i++)
ffffffff800012cf:	48 85 db             	test   %rbx,%rbx
ffffffff800012d2:	74 1b                	je     ffffffff800012ef <kcalloc+0x2f>
ffffffff800012d4:	31 c9                	xor    %ecx,%ecx
ffffffff800012d6:	31 d2                	xor    %edx,%edx
ffffffff800012d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800012df:	00 
		((char*)s)[i] = c;
ffffffff800012e0:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
	for ( i = 0; i < n ; i++)
ffffffff800012e4:	8d 51 01             	lea    0x1(%rcx),%edx
ffffffff800012e7:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800012ea:	48 89 d1             	mov    %rdx,%rcx
ffffffff800012ed:	77 f1                	ja     ffffffff800012e0 <kcalloc+0x20>

       liballoc_memset( p, 0, real_size );

       return p;
}
ffffffff800012ef:	5b                   	pop    %rbx
ffffffff800012f0:	c3                   	retq   
ffffffff800012f1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800012f8:	00 00 00 00 
ffffffff800012fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001300 <krealloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff80001300:	41 54                	push   %r12
ffffffff80001302:	55                   	push   %rbp
ffffffff80001303:	53                   	push   %rbx
ffffffff80001304:	48 89 fb             	mov    %rdi,%rbx
ffffffff80001307:	48 83 ec 10          	sub    $0x10,%rsp
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff8000130b:	48 85 f6             	test   %rsi,%rsi
ffffffff8000130e:	0f 84 54 01 00 00    	je     ffffffff80001468 <krealloc+0x168>
		PREFIX(free)( p );
		return NULL;
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001314:	48 85 ff             	test   %rdi,%rdi
ffffffff80001317:	49 89 f4             	mov    %rsi,%r12
ffffffff8000131a:	0f 84 e0 00 00 00    	je     ffffffff80001400 <krealloc+0x100>

	// Unalign the pointer if required.
	ptr = p;
	UNALIGN(ptr);
ffffffff80001320:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80001325:	48 89 fd             	mov    %rdi,%rbp
ffffffff80001328:	48 29 c5             	sub    %rax,%rbp
ffffffff8000132b:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff8000132f:	48 0f 43 ef          	cmovae %rdi,%rbp

	liballoc_lock();		// lockit
ffffffff80001333:	31 c0                	xor    %eax,%eax
ffffffff80001335:	e8 86 f9 ff ff       	callq  ffffffff80000cc0 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff8000133a:	8b 45 f0             	mov    -0x10(%rbp),%eax
		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff8000133d:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001341:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80001346:	0f 85 c4 00 00 00    	jne    ffffffff80001410 <krealloc+0x110>
		
		// Definitely a memory block.
		
		real_size = min->req_size;

		if ( real_size >= size ) 
ffffffff8000134c:	8b 6d f8             	mov    -0x8(%rbp),%ebp
ffffffff8000134f:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80001352:	0f 83 90 00 00 00    	jae    ffffffff800013e8 <krealloc+0xe8>
			min->req_size = size;
			liballoc_unlock();
			return p;
		}

	liballoc_unlock();
ffffffff80001358:	31 c0                	xor    %eax,%eax
ffffffff8000135a:	e8 71 f9 ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff8000135f:	4c 89 e7             	mov    %r12,%rdi
ffffffff80001362:	e8 89 fa ff ff       	callq  ffffffff80000df0 <kmalloc>
  while ( n >= sizeof(unsigned int) )
ffffffff80001367:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff8000136b:	0f 86 e7 00 00 00    	jbe    ffffffff80001458 <krealloc+0x158>
ffffffff80001371:	48 83 ed 04          	sub    $0x4,%rbp
ffffffff80001375:	31 d2                	xor    %edx,%edx
ffffffff80001377:	48 89 ef             	mov    %rbp,%rdi
ffffffff8000137a:	48 c1 ef 02          	shr    $0x2,%rdi
ffffffff8000137e:	48 8d 34 bd 04 00 00 	lea    0x4(,%rdi,4),%rsi
ffffffff80001385:	00 
ffffffff80001386:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000138d:	00 00 00 
      *ldest++ = *lsrc++;
ffffffff80001390:	8b 0c 13             	mov    (%rbx,%rdx,1),%ecx
ffffffff80001393:	89 0c 10             	mov    %ecx,(%rax,%rdx,1)
ffffffff80001396:	48 83 c2 04          	add    $0x4,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff8000139a:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8000139d:	75 f1                	jne    ffffffff80001390 <krealloc+0x90>
ffffffff8000139f:	48 f7 df             	neg    %rdi
ffffffff800013a2:	4c 8d 04 13          	lea    (%rbx,%rdx,1),%r8
ffffffff800013a6:	48 01 c2             	add    %rax,%rdx
ffffffff800013a9:	48 8d 6c bd 00       	lea    0x0(%rbp,%rdi,4),%rbp
  while ( n > 0 )
ffffffff800013ae:	48 85 ed             	test   %rbp,%rbp
ffffffff800013b1:	74 14                	je     ffffffff800013c7 <krealloc+0xc7>
ffffffff800013b3:	31 c9                	xor    %ecx,%ecx
      *cdest++ = *csrc++;
ffffffff800013b5:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff800013ba:	40 88 34 0a          	mov    %sil,(%rdx,%rcx,1)
ffffffff800013be:	48 83 c1 01          	add    $0x1,%rcx
  while ( n > 0 )
ffffffff800013c2:	48 39 e9             	cmp    %rbp,%rcx
ffffffff800013c5:	75 ee                	jne    ffffffff800013b5 <krealloc+0xb5>
	liballoc_memcpy( ptr, p, real_size );
	PREFIX(free)( p );
ffffffff800013c7:	48 89 df             	mov    %rbx,%rdi
ffffffff800013ca:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff800013cf:	e8 7c fd ff ff       	callq  ffffffff80001150 <kfree>
ffffffff800013d4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax

	return ptr;
}
ffffffff800013d9:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800013dd:	5b                   	pop    %rbx
ffffffff800013de:	5d                   	pop    %rbp
ffffffff800013df:	41 5c                	pop    %r12
ffffffff800013e1:	c3                   	retq   
ffffffff800013e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			min->req_size = size;
ffffffff800013e8:	44 89 62 20          	mov    %r12d,0x20(%rdx)
			liballoc_unlock();
ffffffff800013ec:	31 c0                	xor    %eax,%eax
ffffffff800013ee:	e8 dd f8 ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
			return p;
ffffffff800013f3:	48 89 d8             	mov    %rbx,%rax
}
ffffffff800013f6:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800013fa:	5b                   	pop    %rbx
ffffffff800013fb:	5d                   	pop    %rbp
ffffffff800013fc:	41 5c                	pop    %r12
ffffffff800013fe:	c3                   	retq   
ffffffff800013ff:	90                   	nop
ffffffff80001400:	48 83 c4 10          	add    $0x10,%rsp
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001404:	48 89 f7             	mov    %rsi,%rdi
}
ffffffff80001407:	5b                   	pop    %rbx
ffffffff80001408:	5d                   	pop    %rbp
ffffffff80001409:	41 5c                	pop    %r12
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8000140b:	e9 e0 f9 ff ff       	jmpq   ffffffff80000df0 <kmalloc>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001410:	89 c2                	mov    %eax,%edx
			l_errorCount += 1;
ffffffff80001412:	48 83 05 be d6 00 00 	addq   $0x1,0xd6be(%rip)        # ffffffff8000ead8 <l_errorCount>
ffffffff80001419:	01 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000141a:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
			if ( 
ffffffff80001420:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80001426:	74 20                	je     ffffffff80001448 <krealloc+0x148>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001428:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff8000142c:	74 1a                	je     ffffffff80001448 <krealloc+0x148>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff8000142e:	3c de                	cmp    $0xde,%al
ffffffff80001430:	74 16                	je     ffffffff80001448 <krealloc+0x148>
			liballoc_unlock();		// release the lock
ffffffff80001432:	31 c0                	xor    %eax,%eax
ffffffff80001434:	e8 97 f8 ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
}
ffffffff80001439:	48 83 c4 10          	add    $0x10,%rsp
			return NULL;
ffffffff8000143d:	31 c0                	xor    %eax,%eax
}
ffffffff8000143f:	5b                   	pop    %rbx
ffffffff80001440:	5d                   	pop    %rbp
ffffffff80001441:	41 5c                	pop    %r12
ffffffff80001443:	c3                   	retq   
ffffffff80001444:	0f 1f 40 00          	nopl   0x0(%rax)
				l_possibleOverruns += 1;
ffffffff80001448:	48 83 05 80 d6 00 00 	addq   $0x1,0xd680(%rip)        # ffffffff8000ead0 <l_possibleOverruns>
ffffffff8000144f:	01 
ffffffff80001450:	eb e0                	jmp    ffffffff80001432 <krealloc+0x132>
ffffffff80001452:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80001458:	48 89 c2             	mov    %rax,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff8000145b:	49 89 d8             	mov    %rbx,%r8
ffffffff8000145e:	e9 4b ff ff ff       	jmpq   ffffffff800013ae <krealloc+0xae>
ffffffff80001463:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		PREFIX(free)( p );
ffffffff80001468:	e8 e3 fc ff ff       	callq  ffffffff80001150 <kfree>
		return NULL;
ffffffff8000146d:	31 c0                	xor    %eax,%eax
ffffffff8000146f:	eb 85                	jmp    ffffffff800013f6 <krealloc+0xf6>
ffffffff80001471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001478:	00 00 00 
ffffffff8000147b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001480 <pmm_init>:

//Initialize the Physical Memory Manager
void pmm_init()
{
    //memory map helper variables
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff80001480:	48 8b 05 e9 91 00 00 	mov    0x91e9(%rip),%rax        # ffffffff8000a670 <boot_info+0x10>
ffffffff80001487:	48 8b 35 92 d6 00 00 	mov    0xd692(%rip),%rsi        # ffffffff8000eb20 <pmm_info>
ffffffff8000148e:	4c 8b 58 10          	mov    0x10(%rax),%r11
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
    //uint8_t* type = NULL;

    //iterate through the memory map, find the largest memory segment, calculate total memory size
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001492:	4d 85 db             	test   %r11,%r11
ffffffff80001495:	0f 84 c5 00 00 00    	je     ffffffff80001560 <pmm_init+0xe0>
{
ffffffff8000149b:	41 56                	push   %r14
ffffffff8000149d:	4c 8b 05 34 92 00 00 	mov    0x9234(%rip),%r8        # ffffffff8000a6d8 <pmm_vmm_info+0x8>
ffffffff800014a4:	48 83 c0 18          	add    $0x18,%rax
ffffffff800014a8:	55                   	push   %rbp
ffffffff800014a9:	48 8b 3d 30 92 00 00 	mov    0x9230(%rip),%rdi        # ffffffff8000a6e0 <pmm_vmm_info+0x10>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014b0:	45 31 c9             	xor    %r9d,%r9d
{
ffffffff800014b3:	53                   	push   %rbx
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
ffffffff800014b4:	45 31 d2             	xor    %r10d,%r10d
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014b7:	31 db                	xor    %ebx,%ebx
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
ffffffff800014b9:	31 c9                	xor    %ecx,%ecx
ffffffff800014bb:	eb 20                	jmp    ffffffff800014dd <pmm_init+0x5d>
ffffffff800014bd:	0f 1f 00             	nopl   (%rax)
        {
            continue;
        }

        //Capture the largest segment size
        if(current_entry->length > mmap_largest_segment_size)
ffffffff800014c0:	4c 39 d2             	cmp    %r10,%rdx
ffffffff800014c3:	76 0b                	jbe    ffffffff800014d0 <pmm_init+0x50>
ffffffff800014c5:	83 fd 01             	cmp    $0x1,%ebp
ffffffff800014c8:	75 06                	jne    ffffffff800014d0 <pmm_init+0x50>
        {
            mmap_largest_segment_base = current_entry->base;
ffffffff800014ca:	48 8b 08             	mov    (%rax),%rcx
ffffffff800014cd:	49 89 d2             	mov    %rdx,%r10
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014d0:	48 83 c3 01          	add    $0x1,%rbx
ffffffff800014d4:	48 83 c0 18          	add    $0x18,%rax
ffffffff800014d8:	49 39 db             	cmp    %rbx,%r11
ffffffff800014db:	74 2b                	je     ffffffff80001508 <pmm_init+0x88>
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800014dd:	48 8b 50 08          	mov    0x8(%rax),%rdx
        if(current_entry->type == 0x1002)
ffffffff800014e1:	8b 68 10             	mov    0x10(%rax),%ebp
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800014e4:	48 01 d6             	add    %rdx,%rsi
        if(current_entry->type == 0x1002)
ffffffff800014e7:	81 fd 02 10 00 00    	cmp    $0x1002,%ebp
ffffffff800014ed:	75 d1                	jne    ffffffff800014c0 <pmm_init+0x40>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014ef:	48 83 c3 01          	add    $0x1,%rbx
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff800014f3:	4c 8b 00             	mov    (%rax),%r8
ffffffff800014f6:	48 83 c0 18          	add    $0x18,%rax
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014fa:	49 39 db             	cmp    %rbx,%r11
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800014fd:	48 89 d7             	mov    %rdx,%rdi
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff80001500:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001506:	75 d5                	jne    ffffffff800014dd <pmm_init+0x5d>
ffffffff80001508:	45 84 c9             	test   %r9b,%r9b
ffffffff8000150b:	48 89 35 0e d6 00 00 	mov    %rsi,0xd60e(%rip)        # ffffffff8000eb20 <pmm_info>
ffffffff80001512:	74 0e                	je     ffffffff80001522 <pmm_init+0xa2>
ffffffff80001514:	4c 89 05 bd 91 00 00 	mov    %r8,0x91bd(%rip)        # ffffffff8000a6d8 <pmm_vmm_info+0x8>
ffffffff8000151b:	48 89 3d be 91 00 00 	mov    %rdi,0x91be(%rip)        # ffffffff8000a6e0 <pmm_vmm_info+0x10>
            mmap_largest_segment_size = current_entry->length;
        }
    };

    //Populate the PMM state variables
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001522:	48 89 f0             	mov    %rsi,%rax
ffffffff80001525:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80001529:	48 89 05 00 d6 00 00 	mov    %rax,0xd600(%rip)        # ffffffff8000eb30 <pmm_info+0x10>
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001530:	48 89 05 f1 d5 00 00 	mov    %rax,0xd5f1(%rip)        # ffffffff8000eb28 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001537:	48 89 f0             	mov    %rsi,%rax
ffffffff8000153a:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000153e:	48 83 c0 01          	add    $0x1,%rax
    
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001542:	48 39 c2             	cmp    %rax,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001545:	48 89 05 f4 d5 00 00 	mov    %rax,0xd5f4(%rip)        # ffffffff8000eb40 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff8000154c:	73 4a                	jae    ffffffff80001598 <pmm_init+0x118>
        {
            printf("Bitmap too large");
ffffffff8000154e:	48 c7 c7 3a 4d 00 80 	mov    $0xffffffff80004d3a,%rdi
ffffffff80001555:	31 c0                	xor    %eax,%eax
ffffffff80001557:	e8 44 1f 00 00       	callq  ffffffff800034a0 <printf_>
ffffffff8000155c:	eb fe                	jmp    ffffffff8000155c <pmm_init+0xdc>
ffffffff8000155e:	66 90                	xchg   %ax,%ax
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001560:	48 89 f0             	mov    %rsi,%rax
ffffffff80001563:	48 c1 e8 0c          	shr    $0xc,%rax
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001567:	48 89 05 ba d5 00 00 	mov    %rax,0xd5ba(%rip)        # ffffffff8000eb28 <pmm_info+0x8>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff8000156e:	48 89 05 bb d5 00 00 	mov    %rax,0xd5bb(%rip)        # ffffffff8000eb30 <pmm_info+0x10>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001575:	48 89 f0             	mov    %rsi,%rax
ffffffff80001578:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000157c:	48 83 c0 01          	add    $0x1,%rax
ffffffff80001580:	48 89 05 b9 d5 00 00 	mov    %rax,0xd5b9(%rip)        # ffffffff8000eb40 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001587:	48 8b 04 25 08 00 00 	mov    0x8,%rax
ffffffff8000158e:	00 
ffffffff8000158f:	0f 0b                	ud2    
ffffffff80001591:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001598:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000159f:	80 ff ff 
            for(;;){}   //hang
        }
    
    pmm_info.bitmap = (uint8_t*)phys_to_hh_data(mmap_largest_segment_base); 

    printf("Total Memory: %d\n", (pmm_info.totalmem));
ffffffff800015a2:	48 c7 c7 4b 4d 00 80 	mov    $0xffffffff80004d4b,%rdi
ffffffff800015a9:	48 01 c1             	add    %rax,%rcx
ffffffff800015ac:	31 c0                	xor    %eax,%eax
ffffffff800015ae:	48 89 0d 83 d5 00 00 	mov    %rcx,0xd583(%rip)        # ffffffff8000eb38 <pmm_info+0x18>
ffffffff800015b5:	e8 e6 1e 00 00       	callq  ffffffff800034a0 <printf_>
    printf("Total Pages: %d   Used Pages: %d\n", pmm_info.totalpages, pmm_info.usedpages);
ffffffff800015ba:	48 8b 15 67 d5 00 00 	mov    0xd567(%rip),%rdx        # ffffffff8000eb28 <pmm_info+0x8>
ffffffff800015c1:	48 8b 35 68 d5 00 00 	mov    0xd568(%rip),%rsi        # ffffffff8000eb30 <pmm_info+0x10>
ffffffff800015c8:	48 c7 c7 88 4d 00 80 	mov    $0xffffffff80004d88,%rdi
ffffffff800015cf:	31 c0                	xor    %eax,%eax
ffffffff800015d1:	e8 ca 1e 00 00       	callq  ffffffff800034a0 <printf_>
    printf("Bitmap Addr: %p  Bitmap Size (bytes): %d\n", pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff800015d6:	48 8b 35 5b d5 00 00 	mov    0xd55b(%rip),%rsi        # ffffffff8000eb38 <pmm_info+0x18>
ffffffff800015dd:	48 8b 15 5c d5 00 00 	mov    0xd55c(%rip),%rdx        # ffffffff8000eb40 <pmm_info+0x20>
ffffffff800015e4:	31 c0                	xor    %eax,%eax
ffffffff800015e6:	48 c7 c7 b0 4d 00 80 	mov    $0xffffffff80004db0,%rdi
ffffffff800015ed:	e8 ae 1e 00 00       	callq  ffffffff800034a0 <printf_>

    //Set all bitmap bits to 1
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff800015f2:	48 8b 05 47 d5 00 00 	mov    0xd547(%rip),%rax        # ffffffff8000eb40 <pmm_info+0x20>
        {
        pmm_info.bitmap[i] = 0xff;
ffffffff800015f9:	48 8b 35 38 d5 00 00 	mov    0xd538(%rip),%rsi        # ffffffff8000eb38 <pmm_info+0x18>
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff80001600:	48 85 c0             	test   %rax,%rax
ffffffff80001603:	74 17                	je     ffffffff8000161c <pmm_init+0x19c>
ffffffff80001605:	48 89 f2             	mov    %rsi,%rdx
ffffffff80001608:	48 01 f0             	add    %rsi,%rax
ffffffff8000160b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        pmm_info.bitmap[i] = 0xff;
ffffffff80001610:	c6 02 ff             	movb   $0xff,(%rdx)
ffffffff80001613:	48 83 c2 01          	add    $0x1,%rdx
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff80001617:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000161a:	75 f4                	jne    ffffffff80001610 <pmm_init+0x190>
ffffffff8000161c:	4c 8b 0d 05 d5 00 00 	mov    0xd505(%rip),%r9        # ffffffff8000eb28 <pmm_info+0x8>
            mmap_largest_segment_base = current_entry->base;
ffffffff80001623:	31 c9                	xor    %ecx,%ecx
    

    //printf("Number of MMAP Entries: %d\n", mmap_entries);

    //Iterate through the memory map again, unset bitmap for available memory
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001625:	31 ff                	xor    %edi,%edi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001627:	41 ba 01 00 00 00    	mov    $0x1,%r10d
            mmap_largest_segment_base = current_entry->base;
ffffffff8000162d:	4c 89 c8             	mov    %r9,%rax
ffffffff80001630:	eb 0f                	jmp    ffffffff80001641 <pmm_init+0x1c1>
ffffffff80001632:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001638:	48 83 c7 01          	add    $0x1,%rdi
ffffffff8000163c:	48 39 df             	cmp    %rbx,%rdi
ffffffff8000163f:	74 64                	je     ffffffff800016a5 <pmm_init+0x225>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];

        if(current_entry->type == 1)
ffffffff80001641:	4c 8b 05 28 90 00 00 	mov    0x9028(%rip),%r8        # ffffffff8000a670 <boot_info+0x10>
ffffffff80001648:	48 8d 14 7f          	lea    (%rdi,%rdi,2),%rdx
ffffffff8000164c:	49 8d 14 d0          	lea    (%r8,%rdx,8),%rdx
ffffffff80001650:	83 7a 28 01          	cmpl   $0x1,0x28(%rdx)
ffffffff80001654:	75 e2                	jne    ffffffff80001638 <pmm_init+0x1b8>
        {
            uint64_t pages = current_entry->length / 4096;
ffffffff80001656:	4c 8b 42 20          	mov    0x20(%rdx),%r8
            uint64_t align = current_entry->base / 4096;
ffffffff8000165a:	48 8b 52 18          	mov    0x18(%rdx),%rdx
            uint64_t pages = current_entry->length / 4096;
ffffffff8000165e:	49 c1 e8 0c          	shr    $0xc,%r8
            uint64_t align = current_entry->base / 4096;
ffffffff80001662:	48 c1 ea 0c          	shr    $0xc,%rdx
            //printf("Index: %d  Pages: %d\n", align, pages);

            for(uint64_t j = 0; j < pages; j++)
ffffffff80001666:	4d 85 c0             	test   %r8,%r8
ffffffff80001669:	74 cd                	je     ffffffff80001638 <pmm_init+0x1b8>
ffffffff8000166b:	49 8d 2c 10          	lea    (%r8,%rdx,1),%rbp
ffffffff8000166f:	90                   	nop
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001670:	89 d1                	mov    %edx,%ecx
ffffffff80001672:	45 89 d6             	mov    %r10d,%r14d
ffffffff80001675:	49 89 d3             	mov    %rdx,%r11
ffffffff80001678:	83 e1 07             	and    $0x7,%ecx
ffffffff8000167b:	49 c1 eb 03          	shr    $0x3,%r11
                //uint64_t bitindex = align % 8;
                //pmm_info.bitmap[byteindex] &= ~(1 << bitindex);
                
                bitmap_unset(pmm_info.bitmap, align);

                align++;                    //increment page index
ffffffff8000167f:	48 83 c2 01          	add    $0x1,%rdx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001683:	41 d3 e6             	shl    %cl,%r14d
ffffffff80001686:	44 89 f1             	mov    %r14d,%ecx
ffffffff80001689:	f7 d1                	not    %ecx
ffffffff8000168b:	42 20 0c 1e          	and    %cl,(%rsi,%r11,1)
            for(uint64_t j = 0; j < pages; j++)
ffffffff8000168f:	48 39 ea             	cmp    %rbp,%rdx
ffffffff80001692:	75 dc                	jne    ffffffff80001670 <pmm_init+0x1f0>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001694:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80001698:	4c 29 c0             	sub    %r8,%rax
            for(uint64_t j = 0; j < pages; j++)
ffffffff8000169b:	b9 01 00 00 00       	mov    $0x1,%ecx
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800016a0:	48 39 df             	cmp    %rbx,%rdi
ffffffff800016a3:	75 9c                	jne    ffffffff80001641 <pmm_init+0x1c1>
ffffffff800016a5:	84 c9                	test   %cl,%cl

    //Make certain the NULL page is unavailable
    bitmap_set(pmm_info.bitmap, 0);
    pmm_info.usedpages++;

    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016a7:	48 c7 c7 5d 4d 00 80 	mov    $0xffffffff80004d5d,%rdi
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800016ae:	49 0f 44 c1          	cmove  %r9,%rax
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800016b2:	80 0e 01             	orb    $0x1,(%rsi)
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016b5:	48 8b 35 74 d4 00 00 	mov    0xd474(%rip),%rsi        # ffffffff8000eb30 <pmm_info+0x10>
    pmm_info.usedpages++;
ffffffff800016bc:	48 83 c0 01          	add    $0x1,%rax
ffffffff800016c0:	48 89 05 61 d4 00 00 	mov    %rax,0xd461(%rip)        # ffffffff8000eb28 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016c7:	48 29 c6             	sub    %rax,%rsi
ffffffff800016ca:	31 c0                	xor    %eax,%eax
ffffffff800016cc:	e8 cf 1d 00 00       	callq  ffffffff800034a0 <printf_>
    printf("PMM Initialized\n");

}
ffffffff800016d1:	5b                   	pop    %rbx
ffffffff800016d2:	5d                   	pop    %rbp
ffffffff800016d3:	41 5e                	pop    %r14
    printf("PMM Initialized\n");
ffffffff800016d5:	48 c7 c7 72 4d 00 80 	mov    $0xffffffff80004d72,%rdi
ffffffff800016dc:	31 c0                	xor    %eax,%eax
ffffffff800016de:	e9 bd 1d 00 00       	jmpq   ffffffff800034a0 <printf_>
ffffffff800016e3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800016ea:	00 00 00 00 
ffffffff800016ee:	66 90                	xchg   %ax,%ax

ffffffff800016f0 <pmm_allocpage>:


void* pmm_allocpage()
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff800016f0:	48 8b 35 31 d4 00 00 	mov    0xd431(%rip),%rsi        # ffffffff8000eb28 <pmm_info+0x8>
ffffffff800016f7:	48 3b 35 32 d4 00 00 	cmp    0xd432(%rip),%rsi        # ffffffff8000eb30 <pmm_info+0x10>
ffffffff800016fe:	73 68                	jae    ffffffff80001768 <pmm_allocpage+0x78>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001700:	48 8b 3d 39 d4 00 00 	mov    0xd439(%rip),%rdi        # ffffffff8000eb40 <pmm_info+0x20>
ffffffff80001707:	4c 8b 05 2a d4 00 00 	mov    0xd42a(%rip),%r8        # ffffffff8000eb38 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff8000170e:	48 85 ff             	test   %rdi,%rdi
ffffffff80001711:	74 26                	je     ffffffff80001739 <pmm_allocpage+0x49>
ffffffff80001713:	31 c9                	xor    %ecx,%ecx
        if(bitmap[i] != 0xff)
ffffffff80001715:	41 0f b6 14 08       	movzbl (%r8,%rcx,1),%edx
ffffffff8000171a:	80 fa ff             	cmp    $0xff,%dl
ffffffff8000171d:	74 11                	je     ffffffff80001730 <pmm_allocpage+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff8000171f:	31 c0                	xor    %eax,%eax
                if(!(bitmap[i] & (1 << j)))
ffffffff80001721:	0f a3 c2             	bt     %eax,%edx
ffffffff80001724:	73 2a                	jae    ffffffff80001750 <pmm_allocpage+0x60>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001726:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000172a:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8000172e:	75 f1                	jne    ffffffff80001721 <pmm_allocpage+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001730:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80001734:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80001737:	75 dc                	jne    ffffffff80001715 <pmm_allocpage+0x25>

    pmm_info.usedpages++;
ffffffff80001739:	48 83 c6 01          	add    $0x1,%rsi
    for(uint64_t i = 0; i < size; i++)
ffffffff8000173d:	31 c0                	xor    %eax,%eax
    pmm_info.usedpages++;
ffffffff8000173f:	48 89 35 e2 d3 00 00 	mov    %rsi,0xd3e2(%rip)        # ffffffff8000eb28 <pmm_info+0x8>

    return (void*)(index * PAGE_SIZE);
ffffffff80001746:	c3                   	retq   
ffffffff80001747:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000174e:	00 00 
                    return (i * 8) + j;
ffffffff80001750:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
    pmm_info.usedpages++;
ffffffff80001754:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001758:	48 89 35 c9 d3 00 00 	mov    %rsi,0xd3c9(%rip)        # ffffffff8000eb28 <pmm_info+0x8>
ffffffff8000175f:	48 c1 e0 0c          	shl    $0xc,%rax
    return (void*)(index * PAGE_SIZE);
ffffffff80001763:	c3                   	retq   
ffffffff80001764:	0f 1f 40 00          	nopl   0x0(%rax)
        return NULL;
ffffffff80001768:	31 c0                	xor    %eax,%eax
}
ffffffff8000176a:	c3                   	retq   
ffffffff8000176b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001770 <pmm_freepage>:
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001770:	48 89 fa             	mov    %rdi,%rdx


void pmm_freepage(void* page)
{
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001773:	48 c1 ef 0c          	shr    $0xc,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001777:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000177c:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff80001780:	48 03 15 b1 d3 00 00 	add    0xd3b1(%rip),%rdx        # ffffffff8000eb38 <pmm_info+0x18>
ffffffff80001787:	89 f9                	mov    %edi,%ecx
ffffffff80001789:	83 e1 07             	and    $0x7,%ecx
    bitmap_unset(pmm_info.bitmap, index);
    pmm_info.usedpages--;
ffffffff8000178c:	48 83 2d 94 d3 00 00 	subq   $0x1,0xd394(%rip)        # ffffffff8000eb28 <pmm_info+0x8>
ffffffff80001793:	01 
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001794:	d3 e0                	shl    %cl,%eax
ffffffff80001796:	f7 d0                	not    %eax
ffffffff80001798:	20 02                	and    %al,(%rdx)
}
ffffffff8000179a:	c3                   	retq   
ffffffff8000179b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800017a0 <pmm_allocpages>:

void* pmm_allocpages(uint64_t count)
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff800017a0:	4c 8b 15 81 d3 00 00 	mov    0xd381(%rip),%r10        # ffffffff8000eb28 <pmm_info+0x8>
ffffffff800017a7:	4c 3b 15 82 d3 00 00 	cmp    0xd382(%rip),%r10        # ffffffff8000eb30 <pmm_info+0x10>
ffffffff800017ae:	73 73                	jae    ffffffff80001823 <pmm_allocpages+0x83>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff800017b0:	48 8b 05 89 d3 00 00 	mov    0xd389(%rip),%rax        # ffffffff8000eb40 <pmm_info+0x20>
ffffffff800017b7:	4c 8b 05 7a d3 00 00 	mov    0xd37a(%rip),%r8        # ffffffff8000eb38 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff800017be:	48 85 c0             	test   %rax,%rax
ffffffff800017c1:	74 28                	je     ffffffff800017eb <pmm_allocpages+0x4b>
ffffffff800017c3:	31 f6                	xor    %esi,%esi
        if(bitmap[i] != 0xff)
ffffffff800017c5:	41 0f b6 0c 30       	movzbl (%r8,%rsi,1),%ecx
ffffffff800017ca:	80 f9 ff             	cmp    $0xff,%cl
ffffffff800017cd:	74 11                	je     ffffffff800017e0 <pmm_allocpages+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff800017cf:	31 d2                	xor    %edx,%edx
                if(!(bitmap[i] & (1 << j)))
ffffffff800017d1:	0f a3 d1             	bt     %edx,%ecx
ffffffff800017d4:	73 5a                	jae    ffffffff80001830 <pmm_allocpages+0x90>
            for(uint64_t j = 0; j < 8; j++)
ffffffff800017d6:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800017da:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff800017de:	75 f1                	jne    ffffffff800017d1 <pmm_allocpages+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff800017e0:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800017e4:	48 39 f0             	cmp    %rsi,%rax
ffffffff800017e7:	75 dc                	jne    ffffffff800017c5 <pmm_allocpages+0x25>
    return 0;
ffffffff800017e9:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff800017eb:	48 85 ff             	test   %rdi,%rdi
ffffffff800017ee:	74 50                	je     ffffffff80001840 <pmm_allocpages+0xa0>
ffffffff800017f0:	31 d2                	xor    %edx,%edx
    {
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff800017f2:	41 f6 00 01          	testb  $0x1,(%r8)
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff800017f6:	41 b9 01 00 00 00    	mov    $0x1,%r9d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff800017fc:	74 25                	je     ffffffff80001823 <pmm_allocpages+0x83>
    for(uint64_t i = 0; i < count; i++)
ffffffff800017fe:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80001802:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80001805:	74 39                	je     ffffffff80001840 <pmm_allocpages+0xa0>
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001807:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000180a:	45 89 cb             	mov    %r9d,%r11d
ffffffff8000180d:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80001811:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff80001816:	89 d1                	mov    %edx,%ecx
ffffffff80001818:	83 e1 08             	and    $0x8,%ecx
ffffffff8000181b:	41 d3 e3             	shl    %cl,%r11d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000181e:	44 85 de             	test   %r11d,%esi
ffffffff80001821:	75 db                	jne    ffffffff800017fe <pmm_allocpages+0x5e>
        return NULL;
ffffffff80001823:	31 c0                	xor    %eax,%eax
    }

    pmm_info.usedpages += count;

    return (void*)(index * PAGE_SIZE);
}
ffffffff80001825:	c3                   	retq   
ffffffff80001826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000182d:	00 00 00 
                    return (i * 8) + j;
ffffffff80001830:	48 8d 04 f2          	lea    (%rdx,%rsi,8),%rax
ffffffff80001834:	eb b5                	jmp    ffffffff800017eb <pmm_allocpages+0x4b>
ffffffff80001836:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000183d:	00 00 00 
    pmm_info.usedpages += count;
ffffffff80001840:	4c 01 d7             	add    %r10,%rdi
    return (void*)(index * PAGE_SIZE);
ffffffff80001843:	48 c1 e0 0c          	shl    $0xc,%rax
    pmm_info.usedpages += count;
ffffffff80001847:	48 89 3d da d2 00 00 	mov    %rdi,0xd2da(%rip)        # ffffffff8000eb28 <pmm_info+0x8>
    return (void*)(index * PAGE_SIZE);
ffffffff8000184e:	c3                   	retq   
ffffffff8000184f:	90                   	nop

ffffffff80001850 <pmm_freepages>:

uint64_t pmm_freepages(void* page, uint64_t count)
{
    uint64_t pg = (uint64_t)page;

    for(uint64_t i=0; i < count; i++)
ffffffff80001850:	48 85 f6             	test   %rsi,%rsi
ffffffff80001853:	74 51                	je     ffffffff800018a6 <pmm_freepages+0x56>
    bitmap_unset(pmm_info.bitmap, index);
ffffffff80001855:	4c 8b 0d dc d2 00 00 	mov    0xd2dc(%rip),%r9        # ffffffff8000eb38 <pmm_info+0x18>
ffffffff8000185c:	4c 8b 1d c5 d2 00 00 	mov    0xd2c5(%rip),%r11        # ffffffff8000eb28 <pmm_info+0x8>
    for(uint64_t i=0; i < count; i++)
ffffffff80001863:	31 d2                	xor    %edx,%edx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001865:	41 ba 01 00 00 00    	mov    $0x1,%r10d
ffffffff8000186b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001870:	48 89 f9             	mov    %rdi,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001873:	49 89 f8             	mov    %rdi,%r8
ffffffff80001876:	44 89 d0             	mov    %r10d,%eax
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001879:	48 c1 e9 0c          	shr    $0xc,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff8000187d:	49 c1 e8 0f          	shr    $0xf,%r8
    for(uint64_t i=0; i < count; i++)
ffffffff80001881:	48 83 c2 01          	add    $0x1,%rdx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001885:	83 e1 07             	and    $0x7,%ecx
    {
        pmm_freepage((void*)pg);
        pg += 0x1000;
ffffffff80001888:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff8000188f:	d3 e0                	shl    %cl,%eax
ffffffff80001891:	f7 d0                	not    %eax
ffffffff80001893:	43 20 04 01          	and    %al,(%r9,%r8,1)
    for(uint64_t i=0; i < count; i++)
ffffffff80001897:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8000189a:	75 d4                	jne    ffffffff80001870 <pmm_freepages+0x20>
ffffffff8000189c:	49 29 f3             	sub    %rsi,%r11
ffffffff8000189f:	4c 89 1d 82 d2 00 00 	mov    %r11,0xd282(%rip)        # ffffffff8000eb28 <pmm_info+0x8>
    }

    return 0;
}
ffffffff800018a6:	31 c0                	xor    %eax,%eax
ffffffff800018a8:	c3                   	retq   
ffffffff800018a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800018b0 <pmm_get_free_memory>:

uint64_t pmm_get_free_memory()
{
    return (pmm_info.totalpages - pmm_info.usedpages) * PAGE_SIZE;
ffffffff800018b0:	48 8b 05 79 d2 00 00 	mov    0xd279(%rip),%rax        # ffffffff8000eb30 <pmm_info+0x10>
ffffffff800018b7:	48 2b 05 6a d2 00 00 	sub    0xd26a(%rip),%rax        # ffffffff8000eb28 <pmm_info+0x8>
ffffffff800018be:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff800018c2:	c3                   	retq   
ffffffff800018c3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800018ca:	00 00 00 00 
ffffffff800018ce:	66 90                	xchg   %ax,%ax

ffffffff800018d0 <pmm_get_total_memory>:

uint64_t pmm_get_total_memory()
{   
    return (pmm_info.totalpages) * PAGE_SIZE;
ffffffff800018d0:	48 8b 05 59 d2 00 00 	mov    0xd259(%rip),%rax        # ffffffff8000eb30 <pmm_info+0x10>
ffffffff800018d7:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff800018db:	c3                   	retq   
ffffffff800018dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800018e0 <fb_init>:



void fb_init()
{
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff800018e0:	48 8b 15 91 8d 00 00 	mov    0x8d91(%rip),%rdx        # ffffffff8000a678 <boot_info+0x18>
ffffffff800018e7:	48 8b 42 10          	mov    0x10(%rdx),%rax
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff800018eb:	0f b7 4a 18          	movzwl 0x18(%rdx),%ecx
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff800018ef:	0f b7 72 1c          	movzwl 0x1c(%rdx),%esi
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff800018f3:	48 89 05 b6 8d 00 00 	mov    %rax,0x8db6(%rip)        # ffffffff8000a6b0 <fb_info>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff800018fa:	0f b7 42 1a          	movzwl 0x1a(%rdx),%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff800018fe:	0f b7 52 1e          	movzwl 0x1e(%rdx),%edx
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80001902:	66 89 0d b1 8d 00 00 	mov    %cx,0x8db1(%rip)        # ffffffff8000a6ba <fb_info+0xa>
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff80001909:	66 89 35 ac 8d 00 00 	mov    %si,0x8dac(%rip)        # ffffffff8000a6bc <fb_info+0xc>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80001910:	66 89 05 a1 8d 00 00 	mov    %ax,0x8da1(%rip)        # ffffffff8000a6b8 <fb_info+0x8>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001917:	0f af c1             	imul   %ecx,%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000191a:	66 89 15 9d 8d 00 00 	mov    %dx,0x8d9d(%rip)        # ffffffff8000a6be <fb_info+0xe>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001921:	89 05 99 8d 00 00    	mov    %eax,0x8d99(%rip)        # ffffffff8000a6c0 <fb_info+0x10>
    //printf("FB Base: %p", fb_info.base);
    //printf("FB Height: %d  FB Width: %d\n", fb_info.height, fb_info.width);
    //printf("FB BPP: %d   FB Pitch: %d\n", fb_info.bpp, fb_info.pitch);

    //fb_putpixel(100,100,FB_COLOR_WHITE);
}
ffffffff80001927:	c3                   	retq   
ffffffff80001928:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000192f:	00 

ffffffff80001930 <fb_putpixel>:

void fb_putpixel(uint32_t x, uint32_t y, enum fb_color col)
{
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001930:	0f b7 0d 87 8d 00 00 	movzwl 0x8d87(%rip),%ecx        # ffffffff8000a6be <fb_info+0xe>
ffffffff80001937:	0f b7 05 7e 8d 00 00 	movzwl 0x8d7e(%rip),%eax        # ffffffff8000a6bc <fb_info+0xc>
{
ffffffff8000193e:	41 89 d0             	mov    %edx,%r8d
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001941:	31 d2                	xor    %edx,%edx
ffffffff80001943:	66 c1 e9 03          	shr    $0x3,%cx
ffffffff80001947:	66 f7 f1             	div    %cx
ffffffff8000194a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8000194d:	0f af c6             	imul   %esi,%eax
ffffffff80001950:	8d 14 38             	lea    (%rax,%rdi,1),%edx
    //if(index > fb_info.max_pixels) return;
    *((uint32_t*)fb_info.base + index) = col;
ffffffff80001953:	48 8b 05 56 8d 00 00 	mov    0x8d56(%rip),%rax        # ffffffff8000a6b0 <fb_info>
ffffffff8000195a:	44 89 04 90          	mov    %r8d,(%rax,%rdx,4)
}
ffffffff8000195e:	c3                   	retq   
ffffffff8000195f:	90                   	nop

ffffffff80001960 <fb_clearscreen>:

void fb_clearscreen(enum fb_color col)
{
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80001960:	0f b7 05 51 8d 00 00 	movzwl 0x8d51(%rip),%eax        # ffffffff8000a6b8 <fb_info+0x8>
ffffffff80001967:	0f b7 15 4c 8d 00 00 	movzwl 0x8d4c(%rip),%edx        # ffffffff8000a6ba <fb_info+0xa>
ffffffff8000196e:	0f af c2             	imul   %edx,%eax
ffffffff80001971:	85 c0                	test   %eax,%eax
ffffffff80001973:	48 63 c8             	movslq %eax,%rcx
ffffffff80001976:	74 1f                	je     ffffffff80001997 <fb_clearscreen+0x37>
    {
        *((uint32_t*)fb_info.base + i) = col;
ffffffff80001978:	48 8b 15 31 8d 00 00 	mov    0x8d31(%rip),%rdx        # ffffffff8000a6b0 <fb_info>
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff8000197f:	31 c0                	xor    %eax,%eax
ffffffff80001981:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001988:	48 83 c0 01          	add    $0x1,%rax
        *((uint32_t*)fb_info.base + i) = col;
ffffffff8000198c:	89 3a                	mov    %edi,(%rdx)
ffffffff8000198e:	48 83 c2 04          	add    $0x4,%rdx
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80001992:	48 39 c8             	cmp    %rcx,%rax
ffffffff80001995:	75 f1                	jne    ffffffff80001988 <fb_clearscreen+0x28>
    }
}
ffffffff80001997:	f3 c3                	repz retq 
ffffffff80001999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800019a0 <fb_drawline>:

void fb_drawline(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, enum fb_color col)
{

ffffffff800019a0:	f3 c3                	repz retq 
ffffffff800019a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800019a9:	00 00 00 
ffffffff800019ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800019b0 <console_input>:

    //write the output buffer to screen
}

void console_input(KEY_INFO_t key)
{
ffffffff800019b0:	89 f8                	mov    %edi,%eax
ffffffff800019b2:	0f b6 fc             	movzbl %ah,%edi
    con_input_buffer.index++;
ffffffff800019b5:	48 8b 05 74 9d 00 00 	mov    0x9d74(%rip),%rax        # ffffffff8000b730 <con_input_buffer+0x10>
ffffffff800019bc:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800019c0:	48 89 15 69 9d 00 00 	mov    %rdx,0x9d69(%rip)        # ffffffff8000b730 <con_input_buffer+0x10>
    con_input_buffer.buffer[con_input_buffer.index] = key.ascii;
ffffffff800019c7:	48 8b 15 52 9d 00 00 	mov    0x9d52(%rip),%rdx        # ffffffff8000b720 <con_input_buffer>
ffffffff800019ce:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
    

    con_output_buffer.buffer[con_output_buffer.index] = key.ascii;
ffffffff800019d3:	48 8b 05 36 9d 00 00 	mov    0x9d36(%rip),%rax        # ffffffff8000b710 <con_output_buffer+0x10>
ffffffff800019da:	48 8b 15 1f 9d 00 00 	mov    0x9d1f(%rip),%rdx        # ffffffff8000b700 <con_output_buffer>
ffffffff800019e1:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
    con_output_buffer.index++;
ffffffff800019e5:	48 8b 05 24 9d 00 00 	mov    0x9d24(%rip),%rax        # ffffffff8000b710 <con_output_buffer+0x10>
ffffffff800019ec:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800019f0:	48 89 15 19 9d 00 00 	mov    %rdx,0x9d19(%rip)        # ffffffff8000b710 <con_output_buffer+0x10>
    con_output_buffer.buffer[con_output_buffer.index] = 0x00;
ffffffff800019f7:	48 8b 15 02 9d 00 00 	mov    0x9d02(%rip),%rdx        # ffffffff8000b700 <con_output_buffer>
ffffffff800019fe:	c6 44 02 01 00       	movb   $0x0,0x1(%rdx,%rax,1)
    return;
ffffffff80001a03:	c3                   	retq   
ffffffff80001a04:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001a0b:	00 00 00 00 
ffffffff80001a0f:	90                   	nop

ffffffff80001a10 <putchar>:
    switch(c)
ffffffff80001a10:	40 80 ff 0a          	cmp    $0xa,%dil
ffffffff80001a14:	0f 84 28 01 00 00    	je     ffffffff80001b42 <putchar+0x132>
ffffffff80001a1a:	40 80 ff 0d          	cmp    $0xd,%dil
ffffffff80001a1e:	0f 84 ed 00 00 00    	je     ffffffff80001b11 <putchar+0x101>
ffffffff80001a24:	40 80 ff 09          	cmp    $0x9,%dil
ffffffff80001a28:	0f 84 be 00 00 00    	je     ffffffff80001aec <putchar+0xdc>
{
ffffffff80001a2e:	41 57                	push   %r15
ffffffff80001a30:	41 56                	push   %r14
ffffffff80001a32:	89 f8                	mov    %edi,%eax
ffffffff80001a34:	41 55                	push   %r13
ffffffff80001a36:	41 54                	push   %r12
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001a38:	48 c1 e0 04          	shl    $0x4,%rax
{
ffffffff80001a3c:	55                   	push   %rbp
ffffffff80001a3d:	53                   	push   %rbx
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001a3e:	25 f0 0f 00 00       	and    $0xff0,%eax
ffffffff80001a43:	4c 8d a8 a4 71 00 80 	lea    -0x7fff8e5c(%rax),%r13
ffffffff80001a4a:	48 05 b4 71 00 80    	add    $0xffffffff800071b4,%rax
{
ffffffff80001a50:	48 83 ec 18          	sub    $0x18,%rsp
    console_drawchar(c, console_info.cursor_x, console_info.cursor_y, console_info.foreground_color, console_info.background_color);
ffffffff80001a54:	8b 0d ee 9c 00 00    	mov    0x9cee(%rip),%ecx        # ffffffff8000b748 <console_info+0x8>
ffffffff80001a5a:	0f b7 1d f1 9c 00 00 	movzwl 0x9cf1(%rip),%ebx        # ffffffff8000b752 <console_info+0x12>
ffffffff80001a61:	44 8b 25 e4 9c 00 00 	mov    0x9ce4(%rip),%r12d        # ffffffff8000b74c <console_info+0xc>
ffffffff80001a68:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80001a6d:	89 0c 24             	mov    %ecx,(%rsp)
ffffffff80001a70:	0f b7 0d d9 9c 00 00 	movzwl 0x9cd9(%rip),%ecx        # ffffffff8000b750 <console_info+0x10>
ffffffff80001a77:	8d 69 08             	lea    0x8(%rcx),%ebp
ffffffff80001a7a:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
ffffffff80001a7e:	66 90                	xchg   %ax,%ax
        row = glyph[i];
ffffffff80001a80:	45 0f b6 75 00       	movzbl 0x0(%r13),%r14d
ffffffff80001a85:	44 8b 7c 24 04       	mov    0x4(%rsp),%r15d
ffffffff80001a8a:	eb 1d                	jmp    ffffffff80001aa9 <putchar+0x99>
ffffffff80001a8c:	0f 1f 40 00          	nopl   0x0(%rax)
                fb_putpixel(x+j, y+i, background);
ffffffff80001a90:	44 89 ff             	mov    %r15d,%edi
ffffffff80001a93:	44 89 e2             	mov    %r12d,%edx
ffffffff80001a96:	89 de                	mov    %ebx,%esi
ffffffff80001a98:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff80001a9c:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, background);
ffffffff80001a9f:	e8 8c fe ff ff       	callq  ffffffff80001930 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001aa4:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001aa7:	74 1e                	je     ffffffff80001ac7 <putchar+0xb7>
            if(row & 0x80)
ffffffff80001aa9:	45 84 f6             	test   %r14b,%r14b
ffffffff80001aac:	79 e2                	jns    ffffffff80001a90 <putchar+0x80>
                fb_putpixel(x+j, y+i, foreground);
ffffffff80001aae:	8b 14 24             	mov    (%rsp),%edx
ffffffff80001ab1:	44 89 ff             	mov    %r15d,%edi
ffffffff80001ab4:	89 de                	mov    %ebx,%esi
ffffffff80001ab6:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff80001aba:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, foreground);
ffffffff80001abd:	e8 6e fe ff ff       	callq  ffffffff80001930 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001ac2:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001ac5:	75 e2                	jne    ffffffff80001aa9 <putchar+0x99>
ffffffff80001ac7:	49 83 c5 01          	add    $0x1,%r13
ffffffff80001acb:	83 c3 01             	add    $0x1,%ebx
    for (uint32_t i = 0; i < 16; i++)
ffffffff80001ace:	4c 39 6c 24 08       	cmp    %r13,0x8(%rsp)
ffffffff80001ad3:	75 ab                	jne    ffffffff80001a80 <putchar+0x70>
    console_info.cursor_x += 8;
ffffffff80001ad5:	66 83 05 73 9c 00 00 	addw   $0x8,0x9c73(%rip)        # ffffffff8000b750 <console_info+0x10>
ffffffff80001adc:	08 
}
ffffffff80001add:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001ae1:	5b                   	pop    %rbx
ffffffff80001ae2:	5d                   	pop    %rbp
ffffffff80001ae3:	41 5c                	pop    %r12
ffffffff80001ae5:	41 5d                	pop    %r13
ffffffff80001ae7:	41 5e                	pop    %r14
ffffffff80001ae9:	41 5f                	pop    %r15
ffffffff80001aeb:	c3                   	retq   
            if((console_info.cursor_x += (PSF1_FONT_WIDTH * 4)) < fb_info.width)
ffffffff80001aec:	0f b7 05 5d 9c 00 00 	movzwl 0x9c5d(%rip),%eax        # ffffffff8000b750 <console_info+0x10>
ffffffff80001af3:	0f b7 15 c0 8b 00 00 	movzwl 0x8bc0(%rip),%edx        # ffffffff8000a6ba <fb_info+0xa>
ffffffff80001afa:	8d 48 20             	lea    0x20(%rax),%ecx
ffffffff80001afd:	66 39 d1             	cmp    %dx,%cx
ffffffff80001b00:	0f 83 4f 01 00 00    	jae    ffffffff80001c55 <putchar+0x245>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001b06:	83 c0 40             	add    $0x40,%eax
ffffffff80001b09:	66 89 05 40 9c 00 00 	mov    %ax,0x9c40(%rip)        # ffffffff8000b750 <console_info+0x10>
                return;
ffffffff80001b10:	c3                   	retq   
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b11:	0f b7 05 3a 9c 00 00 	movzwl 0x9c3a(%rip),%eax        # ffffffff8000b752 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b18:	0f b7 15 99 8b 00 00 	movzwl 0x8b99(%rip),%edx        # ffffffff8000a6b8 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001b1f:	31 f6                	xor    %esi,%esi
ffffffff80001b21:	66 89 35 28 9c 00 00 	mov    %si,0x9c28(%rip)        # ffffffff8000b750 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b28:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b2b:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b2e:	66 89 05 1d 9c 00 00 	mov    %ax,0x9c1d(%rip)        # ffffffff8000b752 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b35:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001b38:	39 c1                	cmp    %eax,%ecx
ffffffff80001b3a:	0f 8e 9d 00 00 00    	jle    ffffffff80001bdd <putchar+0x1cd>
ffffffff80001b40:	f3 c3                	repz retq 
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b42:	0f b7 05 09 9c 00 00 	movzwl 0x9c09(%rip),%eax        # ffffffff8000b752 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b49:	0f b7 15 68 8b 00 00 	movzwl 0x8b68(%rip),%edx        # ffffffff8000a6b8 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001b50:	31 ff                	xor    %edi,%edi
ffffffff80001b52:	66 89 3d f7 9b 00 00 	mov    %di,0x9bf7(%rip)        # ffffffff8000b750 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b59:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b5c:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b5f:	66 89 05 ec 9b 00 00 	mov    %ax,0x9bec(%rip)        # ffffffff8000b752 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b66:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001b69:	39 c1                	cmp    %eax,%ecx
ffffffff80001b6b:	7f d3                	jg     ffffffff80001b40 <putchar+0x130>
    start_index = fb_info.width * 16 * 4;
ffffffff80001b6d:	0f b7 05 46 8b 00 00 	movzwl 0x8b46(%rip),%eax        # ffffffff8000a6ba <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001b74:	4c 8b 05 35 8b 00 00 	mov    0x8b35(%rip),%r8        # ffffffff8000a6b0 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001b7b:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001b7e:	89 c1                	mov    %eax,%ecx
ffffffff80001b80:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001b83:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001b86:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001b89:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001b8c:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001b8f:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001b92:	48 89 c7             	mov    %rax,%rdi
ffffffff80001b95:	74 20                	je     ffffffff80001bb7 <putchar+0x1a7>
ffffffff80001b97:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001b9b:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001b9f:	4c 89 c0             	mov    %r8,%rax
ffffffff80001ba2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001ba8:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001bab:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001baf:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001bb2:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001bb5:	75 f1                	jne    ffffffff80001ba8 <putchar+0x198>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001bb7:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001bbb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001bbe:	76 80                	jbe    ffffffff80001b40 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001bc0:	8b 0d 86 9b 00 00    	mov    0x9b86(%rip),%ecx        # ffffffff8000b74c <console_info+0xc>
ffffffff80001bc6:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001bca:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001bce:	66 90                	xchg   %ax,%ax
ffffffff80001bd0:	89 08                	mov    %ecx,(%rax)
ffffffff80001bd2:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001bd6:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001bd9:	75 f5                	jne    ffffffff80001bd0 <putchar+0x1c0>
ffffffff80001bdb:	f3 c3                	repz retq 
    start_index = fb_info.width * 16 * 4;
ffffffff80001bdd:	0f b7 05 d6 8a 00 00 	movzwl 0x8ad6(%rip),%eax        # ffffffff8000a6ba <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001be4:	4c 8b 05 c5 8a 00 00 	mov    0x8ac5(%rip),%r8        # ffffffff8000a6b0 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001beb:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001bee:	89 c1                	mov    %eax,%ecx
ffffffff80001bf0:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001bf3:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001bf6:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001bf9:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001bfc:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001bff:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c02:	48 89 c7             	mov    %rax,%rdi
ffffffff80001c05:	74 20                	je     ffffffff80001c27 <putchar+0x217>
ffffffff80001c07:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001c0b:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001c0f:	4c 89 c0             	mov    %r8,%rax
ffffffff80001c12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001c18:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001c1b:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001c1f:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c22:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001c25:	75 f1                	jne    ffffffff80001c18 <putchar+0x208>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c27:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001c2b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001c2e:	0f 86 0c ff ff ff    	jbe    ffffffff80001b40 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001c34:	8b 0d 12 9b 00 00    	mov    0x9b12(%rip),%ecx        # ffffffff8000b74c <console_info+0xc>
ffffffff80001c3a:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001c3e:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001c42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001c48:	89 08                	mov    %ecx,(%rax)
ffffffff80001c4a:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c4e:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001c51:	75 f5                	jne    ffffffff80001c48 <putchar+0x238>
ffffffff80001c53:	f3 c3                	repz retq 
    console_info.cursor_x = 0;
ffffffff80001c55:	31 c9                	xor    %ecx,%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001c57:	0f b7 05 f4 9a 00 00 	movzwl 0x9af4(%rip),%eax        # ffffffff8000b752 <console_info+0x12>
    console_info.cursor_x = 0;
ffffffff80001c5e:	66 89 0d eb 9a 00 00 	mov    %cx,0x9aeb(%rip)        # ffffffff8000b750 <console_info+0x10>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001c65:	0f b7 0d 4c 8a 00 00 	movzwl 0x8a4c(%rip),%ecx        # ffffffff8000a6b8 <fb_info+0x8>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001c6c:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001c6f:	8d 71 f1             	lea    -0xf(%rcx),%esi
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001c72:	66 89 05 d9 9a 00 00 	mov    %ax,0x9ad9(%rip)        # ffffffff8000b752 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001c79:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001c7c:	39 c6                	cmp    %eax,%esi
ffffffff80001c7e:	7e 0d                	jle    ffffffff80001c8d <putchar+0x27d>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001c80:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff80001c85:	66 89 05 c4 9a 00 00 	mov    %ax,0x9ac4(%rip)        # ffffffff8000b750 <console_info+0x10>
                return;
ffffffff80001c8c:	c3                   	retq   
    start_index = fb_info.width * 16 * 4;
ffffffff80001c8d:	89 d0                	mov    %edx,%eax
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001c8f:	48 8b 3d 1a 8a 00 00 	mov    0x8a1a(%rip),%rdi        # ffffffff8000a6b0 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001c96:	0f af d1             	imul   %ecx,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001c99:	c1 e0 06             	shl    $0x6,%eax
ffffffff80001c9c:	48 98                	cltq   
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001c9e:	48 63 f2             	movslq %edx,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001ca1:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001ca4:	48 29 c6             	sub    %rax,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001ca7:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001caa:	74 20                	je     ffffffff80001ccc <putchar+0x2bc>
ffffffff80001cac:	4c 8d 0c b7          	lea    (%rdi,%rsi,4),%r9
ffffffff80001cb0:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
ffffffff80001cb7:	00 
ffffffff80001cb8:	48 89 f8             	mov    %rdi,%rax
        base[i] = base[start_index + i];
ffffffff80001cbb:	44 8b 04 01          	mov    (%rcx,%rax,1),%r8d
ffffffff80001cbf:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001cc3:	44 89 40 fc          	mov    %r8d,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001cc7:	49 39 c1             	cmp    %rax,%r9
ffffffff80001cca:	75 ef                	jne    ffffffff80001cbb <putchar+0x2ab>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001ccc:	48 8d 46 01          	lea    0x1(%rsi),%rax
ffffffff80001cd0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001cd3:	76 ab                	jbe    ffffffff80001c80 <putchar+0x270>
        base[i] = console_info.background_color;
ffffffff80001cd5:	8b 0d 71 9a 00 00    	mov    0x9a71(%rip),%ecx        # ffffffff8000b74c <console_info+0xc>
ffffffff80001cdb:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
ffffffff80001cdf:	48 8d 14 97          	lea    (%rdi,%rdx,4),%rdx
ffffffff80001ce3:	89 08                	mov    %ecx,(%rax)
ffffffff80001ce5:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001ce9:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001cec:	75 f5                	jne    ffffffff80001ce3 <putchar+0x2d3>
ffffffff80001cee:	eb 90                	jmp    ffffffff80001c80 <putchar+0x270>

ffffffff80001cf0 <console_init>:
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001cf0:	0f b7 05 c1 89 00 00 	movzwl 0x89c1(%rip),%eax        # ffffffff8000a6b8 <fb_info+0x8>
    uint64_t index = y * fb_info.width;
ffffffff80001cf7:	0f b7 3d bc 89 00 00 	movzwl 0x89bc(%rip),%edi        # ffffffff8000a6ba <fb_info+0xa>
    console_info.font = (struct PSF1_FONT*)&_binary_zapl16_psf_start;
ffffffff80001cfe:	48 c7 05 4f 9a 00 00 	movq   $0xffffffff800071a0,0x9a4f(%rip)        # ffffffff8000b758 <console_info+0x18>
ffffffff80001d05:	a0 71 00 80 
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff80001d09:	c7 05 35 9a 00 00 ff 	movl   $0xffffffff,0x9a35(%rip)        # ffffffff8000b748 <console_info+0x8>
ffffffff80001d10:	ff ff ff 
    console_info.background_color = FB_COLOR_BLACK;
ffffffff80001d13:	c7 05 2f 9a 00 00 00 	movl   $0xff000000,0x9a2f(%rip)        # ffffffff8000b74c <console_info+0xc>
ffffffff80001d1a:	00 00 ff 
    console_info.cursor_x = 0;
ffffffff80001d1d:	c7 05 29 9a 00 00 00 	movl   $0x0,0x9a29(%rip)        # ffffffff8000b750 <console_info+0x10>
ffffffff80001d24:	00 00 00 
    con_output_buffer.buffer = console_buffer;
ffffffff80001d27:	48 c7 05 ce 99 00 00 	movq   $0xffffffff8000a700,0x99ce(%rip)        # ffffffff8000b700 <con_output_buffer>
ffffffff80001d2e:	00 a7 00 80 
    con_output_buffer.buffer_size = sizeof(console_buffer);
ffffffff80001d32:	48 c7 05 cb 99 00 00 	movq   $0x1000,0x99cb(%rip)        # ffffffff8000b708 <con_output_buffer+0x8>
ffffffff80001d39:	00 10 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001d3d:	89 c2                	mov    %eax,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001d3f:	66 c1 e8 02          	shr    $0x2,%ax
    con_output_buffer.index = 0;
ffffffff80001d43:	48 c7 05 c2 99 00 00 	movq   $0x0,0x99c2(%rip)        # ffffffff8000b710 <con_output_buffer+0x10>
ffffffff80001d4a:	00 00 00 00 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001d4e:	0f b7 c0             	movzwl %ax,%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001d51:	66 c1 ea 04          	shr    $0x4,%dx
    con_input_buffer.buffer = cmd_buffer;
ffffffff80001d55:	48 c7 05 c0 99 00 00 	movq   $0xffffffff8000b780,0x99c0(%rip)        # ffffffff8000b720 <con_input_buffer>
ffffffff80001d5c:	80 b7 00 80 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001d60:	8d 04 40             	lea    (%rax,%rax,2),%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001d63:	0f b7 d2             	movzwl %dx,%edx
    con_input_buffer.buffer_size = sizeof(cmd_buffer);
ffffffff80001d66:	48 c7 05 b7 99 00 00 	movq   $0x100,0x99b7(%rip)        # ffffffff8000b728 <con_input_buffer+0x8>
ffffffff80001d6d:	00 01 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001d71:	89 15 cd 99 00 00    	mov    %edx,0x99cd(%rip)        # ffffffff8000b744 <console_info+0x4>
    uint64_t index = y * fb_info.width;
ffffffff80001d77:	48 89 f9             	mov    %rdi,%rcx
    console_draw_hline(console_info.start_pos, FB_COLOR_YELLOW);
ffffffff80001d7a:	48 63 d0             	movslq %eax,%rdx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001d7d:	89 05 bd 99 00 00    	mov    %eax,0x99bd(%rip)        # ffffffff8000b740 <console_info>
    uint64_t index = y * fb_info.width;
ffffffff80001d83:	48 0f af d7          	imul   %rdi,%rdx
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001d87:	66 85 ff             	test   %di,%di
ffffffff80001d8a:	74 53                	je     ffffffff80001ddf <console_init+0xef>
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001d8c:	48 8b 35 1d 89 00 00 	mov    0x891d(%rip),%rsi        # ffffffff8000a6b0 <fb_info>
ffffffff80001d93:	83 e9 01             	sub    $0x1,%ecx
ffffffff80001d96:	4c 8d 46 04          	lea    0x4(%rsi),%r8
ffffffff80001d9a:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001d9e:	48 01 ca             	add    %rcx,%rdx
ffffffff80001da1:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001da5:	0f 1f 00             	nopl   (%rax)
ffffffff80001da8:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001dae:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001db2:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001db5:	75 f1                	jne    ffffffff80001da8 <console_init+0xb8>
    console_draw_hline(console_info.start_pos + 1, FB_COLOR_YELLOW);
ffffffff80001db7:	8b 05 83 99 00 00    	mov    0x9983(%rip),%eax        # ffffffff8000b740 <console_info>
ffffffff80001dbd:	8d 50 01             	lea    0x1(%rax),%edx
    uint64_t index = y * fb_info.width;
ffffffff80001dc0:	48 0f af d7          	imul   %rdi,%rdx
ffffffff80001dc4:	48 01 d1             	add    %rdx,%rcx
ffffffff80001dc7:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001dcb:	49 8d 14 88          	lea    (%r8,%rcx,4),%rdx
ffffffff80001dcf:	90                   	nop
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001dd0:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001dd6:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001dda:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001ddd:	75 f1                	jne    ffffffff80001dd0 <console_init+0xe0>
    kbd_set_target(console_input);
ffffffff80001ddf:	48 c7 c7 b0 19 00 80 	mov    $0xffffffff800019b0,%rdi
ffffffff80001de6:	e9 15 02 00 00       	jmpq   ffffffff80002000 <kbd_set_target>
ffffffff80001deb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001df0 <console_exec>:
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001df0:	0f b7 05 c3 88 00 00 	movzwl 0x88c3(%rip),%eax        # ffffffff8000a6ba <fb_info+0xa>
ffffffff80001df7:	8b 15 43 99 00 00    	mov    0x9943(%rip),%edx        # ffffffff8000b740 <console_info>
ffffffff80001dfd:	8d 34 42             	lea    (%rdx,%rax,2),%esi
ffffffff80001e00:	0f b7 15 b1 88 00 00 	movzwl 0x88b1(%rip),%edx        # ffffffff8000a6b8 <fb_info+0x8>
ffffffff80001e07:	0f af d0             	imul   %eax,%edx
ffffffff80001e0a:	39 d6                	cmp    %edx,%esi
ffffffff80001e0c:	7d 2d                	jge    ffffffff80001e3b <console_exec+0x4b>
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff80001e0e:	48 8b 3d 9b 88 00 00 	mov    0x889b(%rip),%rdi        # ffffffff8000a6b0 <fb_info>
ffffffff80001e15:	83 ea 01             	sub    $0x1,%edx
ffffffff80001e18:	4c 63 c6             	movslq %esi,%r8
ffffffff80001e1b:	29 f2                	sub    %esi,%edx
ffffffff80001e1d:	8b 0d 29 99 00 00    	mov    0x9929(%rip),%ecx        # ffffffff8000b74c <console_info+0xc>
ffffffff80001e23:	4c 01 c2             	add    %r8,%rdx
ffffffff80001e26:	4a 8d 04 87          	lea    (%rdi,%r8,4),%rax
ffffffff80001e2a:	48 8d 54 97 04       	lea    0x4(%rdi,%rdx,4),%rdx
ffffffff80001e2f:	90                   	nop
ffffffff80001e30:	89 08                	mov    %ecx,(%rax)
ffffffff80001e32:	48 83 c0 04          	add    $0x4,%rax
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001e36:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001e39:	75 f5                	jne    ffffffff80001e30 <console_exec+0x40>
}
ffffffff80001e3b:	f3 c3                	repz retq 
ffffffff80001e3d:	0f 1f 00             	nopl   (%rax)

ffffffff80001e40 <serial_init>:
#include "../../io/io.h"

char serial_buffer[256];

uint64_t serial_init(uint16_t port)
{
ffffffff80001e40:	41 55                	push   %r13
ffffffff80001e42:	41 54                	push   %r12
    outb(port + 1, 0x00);
ffffffff80001e44:	44 8d 67 01          	lea    0x1(%rdi),%r12d
{
ffffffff80001e48:	55                   	push   %rbp
ffffffff80001e49:	53                   	push   %rbx
ffffffff80001e4a:	89 fb                	mov    %edi,%ebx
    outb(port + 3, 0x80);
ffffffff80001e4c:	8d 6b 03             	lea    0x3(%rbx),%ebp
    outb(port + 1, 0x00);
ffffffff80001e4f:	45 0f b7 e4          	movzwl %r12w,%r12d
ffffffff80001e53:	31 f6                	xor    %esi,%esi
{
ffffffff80001e55:	48 83 ec 08          	sub    $0x8,%rsp
    outb(port + 1, 0x00);
ffffffff80001e59:	44 89 e7             	mov    %r12d,%edi
    outb(port + 0, 0x00);
ffffffff80001e5c:	44 0f b7 eb          	movzwl %bx,%r13d
    outb(port + 3, 0x80);
ffffffff80001e60:	0f b7 ed             	movzwl %bp,%ebp
    outb(port + 1, 0x00);
ffffffff80001e63:	e8 98 e5 ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 3, 0x80);
ffffffff80001e68:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80001e6d:	89 ef                	mov    %ebp,%edi
ffffffff80001e6f:	e8 8c e5 ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 0, 0x00);
ffffffff80001e74:	31 f6                	xor    %esi,%esi
ffffffff80001e76:	44 89 ef             	mov    %r13d,%edi
ffffffff80001e79:	e8 82 e5 ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 1, 0x00);
ffffffff80001e7e:	31 f6                	xor    %esi,%esi
ffffffff80001e80:	44 89 e7             	mov    %r12d,%edi
ffffffff80001e83:	e8 78 e5 ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 3, 0x03);
ffffffff80001e88:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80001e8d:	89 ef                	mov    %ebp,%edi
ffffffff80001e8f:	e8 6c e5 ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 2, 0xC7);
ffffffff80001e94:	8d 7b 02             	lea    0x2(%rbx),%edi
    outb(port + 4, 0x0B);
ffffffff80001e97:	83 c3 04             	add    $0x4,%ebx
    outb(port + 2, 0xC7);
ffffffff80001e9a:	be c7 00 00 00       	mov    $0xc7,%esi
    outb(port + 4, 0x0B);
ffffffff80001e9f:	0f b7 db             	movzwl %bx,%ebx
    outb(port + 2, 0xC7);
ffffffff80001ea2:	0f b7 ff             	movzwl %di,%edi
ffffffff80001ea5:	e8 56 e5 ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 4, 0x0B);
ffffffff80001eaa:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80001eaf:	89 df                	mov    %ebx,%edi
ffffffff80001eb1:	e8 4a e5 ff ff       	callq  ffffffff80000400 <outb>

    if(inb(port + 0) != 0xAE)
ffffffff80001eb6:	44 89 ef             	mov    %r13d,%edi
ffffffff80001eb9:	e8 52 e5 ff ff       	callq  ffffffff80000410 <inb>
ffffffff80001ebe:	3c ae                	cmp    $0xae,%al
ffffffff80001ec0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001ec5:	74 11                	je     ffffffff80001ed8 <serial_init+0x98>
        return 1;
    }

    outb(port + 4, 0x0F);
    return 0;
}
ffffffff80001ec7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80001ecb:	48 89 d0             	mov    %rdx,%rax
ffffffff80001ece:	5b                   	pop    %rbx
ffffffff80001ecf:	5d                   	pop    %rbp
ffffffff80001ed0:	41 5c                	pop    %r12
ffffffff80001ed2:	41 5d                	pop    %r13
ffffffff80001ed4:	c3                   	retq   
ffffffff80001ed5:	0f 1f 00             	nopl   (%rax)
    outb(port + 4, 0x0F);
ffffffff80001ed8:	89 df                	mov    %ebx,%edi
ffffffff80001eda:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80001edf:	e8 1c e5 ff ff       	callq  ffffffff80000400 <outb>
}
ffffffff80001ee4:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff80001ee8:	31 d2                	xor    %edx,%edx
}
ffffffff80001eea:	5b                   	pop    %rbx
ffffffff80001eeb:	48 89 d0             	mov    %rdx,%rax
ffffffff80001eee:	5d                   	pop    %rbp
ffffffff80001eef:	41 5c                	pop    %r12
ffffffff80001ef1:	41 5d                	pop    %r13
ffffffff80001ef3:	c3                   	retq   
ffffffff80001ef4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001efb:	00 00 00 00 
ffffffff80001eff:	90                   	nop

ffffffff80001f00 <serial_received>:

uint64_t serial_received(uint16_t port)
{
    return inb(port + 5) & 1;
ffffffff80001f00:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001f03:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001f07:	0f b7 ff             	movzwl %di,%edi
ffffffff80001f0a:	e8 01 e5 ff ff       	callq  ffffffff80000410 <inb>
}
ffffffff80001f0f:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001f13:	83 e0 01             	and    $0x1,%eax
}
ffffffff80001f16:	c3                   	retq   
ffffffff80001f17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80001f1e:	00 00 

ffffffff80001f20 <serial_read>:

uint8_t serial_read(uint16_t port)
{
ffffffff80001f20:	55                   	push   %rbp
ffffffff80001f21:	53                   	push   %rbx
ffffffff80001f22:	0f b7 ef             	movzwl %di,%ebp
ffffffff80001f25:	83 c7 05             	add    $0x5,%edi
ffffffff80001f28:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80001f2c:	0f b7 df             	movzwl %di,%ebx
ffffffff80001f2f:	90                   	nop
    return inb(port + 5) & 1;
ffffffff80001f30:	89 df                	mov    %ebx,%edi
ffffffff80001f32:	e8 d9 e4 ff ff       	callq  ffffffff80000410 <inb>
    while(serial_received(port) == 0);
ffffffff80001f37:	a8 01                	test   $0x1,%al
ffffffff80001f39:	74 f5                	je     ffffffff80001f30 <serial_read+0x10>

    return inb(port);
}
ffffffff80001f3b:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port);
ffffffff80001f3f:	89 ef                	mov    %ebp,%edi
}
ffffffff80001f41:	5b                   	pop    %rbx
ffffffff80001f42:	5d                   	pop    %rbp
    return inb(port);
ffffffff80001f43:	e9 c8 e4 ff ff       	jmpq   ffffffff80000410 <inb>
ffffffff80001f48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001f4f:	00 

ffffffff80001f50 <serial_is_tx_empty>:

uint64_t serial_is_tx_empty(uint16_t port)
{
    return inb(port + 5) & 0x20;
ffffffff80001f50:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001f53:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80001f57:	0f b7 ff             	movzwl %di,%edi
ffffffff80001f5a:	e8 b1 e4 ff ff       	callq  ffffffff80000410 <inb>
ffffffff80001f5f:	83 e0 20             	and    $0x20,%eax
}
ffffffff80001f62:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80001f66:	0f b6 c0             	movzbl %al,%eax
}
ffffffff80001f69:	c3                   	retq   
ffffffff80001f6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80001f70 <serial_write>:

void serial_write(uint16_t port, uint8_t data)
{
ffffffff80001f70:	41 54                	push   %r12
ffffffff80001f72:	44 0f b7 e7          	movzwl %di,%r12d
ffffffff80001f76:	83 c7 05             	add    $0x5,%edi
ffffffff80001f79:	55                   	push   %rbp
ffffffff80001f7a:	89 f5                	mov    %esi,%ebp
ffffffff80001f7c:	53                   	push   %rbx
ffffffff80001f7d:	0f b7 df             	movzwl %di,%ebx
    return inb(port + 5) & 0x20;
ffffffff80001f80:	89 df                	mov    %ebx,%edi
ffffffff80001f82:	e8 89 e4 ff ff       	callq  ffffffff80000410 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80001f87:	a8 20                	test   $0x20,%al
ffffffff80001f89:	74 f5                	je     ffffffff80001f80 <serial_write+0x10>
    outb(port, data);
}
ffffffff80001f8b:	5b                   	pop    %rbx
    outb(port, data);
ffffffff80001f8c:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80001f90:	44 89 e7             	mov    %r12d,%edi
}
ffffffff80001f93:	5d                   	pop    %rbp
ffffffff80001f94:	41 5c                	pop    %r12
    outb(port, data);
ffffffff80001f96:	e9 65 e4 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001f9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001fa0 <serial_write_str>:

void serial_write_str(uint16_t port, char* data)
{
    uint8_t i = 0;
    while(data[i] != 0)
ffffffff80001fa0:	0f b6 06             	movzbl (%rsi),%eax
ffffffff80001fa3:	84 c0                	test   %al,%al
ffffffff80001fa5:	74 39                	je     ffffffff80001fe0 <serial_write_str+0x40>
{
ffffffff80001fa7:	41 54                	push   %r12
ffffffff80001fa9:	49 89 f4             	mov    %rsi,%r12
ffffffff80001fac:	55                   	push   %rbp
ffffffff80001fad:	0f b7 ef             	movzwl %di,%ebp
ffffffff80001fb0:	53                   	push   %rbx
    uint8_t i = 0;
ffffffff80001fb1:	31 db                	xor    %ebx,%ebx
ffffffff80001fb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        serial_write(port, data[i]);
ffffffff80001fb8:	0f b6 f0             	movzbl %al,%esi
        i++;
ffffffff80001fbb:	83 c3 01             	add    $0x1,%ebx
        serial_write(port, data[i]);
ffffffff80001fbe:	89 ef                	mov    %ebp,%edi
ffffffff80001fc0:	e8 ab ff ff ff       	callq  ffffffff80001f70 <serial_write>
    while(data[i] != 0)
ffffffff80001fc5:	0f b6 c3             	movzbl %bl,%eax
ffffffff80001fc8:	41 0f b6 04 04       	movzbl (%r12,%rax,1),%eax
ffffffff80001fcd:	84 c0                	test   %al,%al
ffffffff80001fcf:	75 e7                	jne    ffffffff80001fb8 <serial_write_str+0x18>
    }
ffffffff80001fd1:	5b                   	pop    %rbx
ffffffff80001fd2:	5d                   	pop    %rbp
ffffffff80001fd3:	41 5c                	pop    %r12
ffffffff80001fd5:	c3                   	retq   
ffffffff80001fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001fdd:	00 00 00 
ffffffff80001fe0:	f3 c3                	repz retq 
ffffffff80001fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001fe9:	00 00 00 
ffffffff80001fec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001ff0 <kbd_init>:


void kbd_init()
{

}
ffffffff80001ff0:	f3 c3                	repz retq 
ffffffff80001ff2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001ff9:	00 00 00 00 
ffffffff80001ffd:	0f 1f 00             	nopl   (%rax)

ffffffff80002000 <kbd_set_target>:

void kbd_set_target(void* handler)
{
    kbd_handler = handler;
ffffffff80002000:	48 89 3d 41 cb 00 00 	mov    %rdi,0xcb41(%rip)        # ffffffff8000eb48 <kbd_handler>
    kbd_active = 1;
ffffffff80002007:	c6 05 42 cb 00 00 01 	movb   $0x1,0xcb42(%rip)        # ffffffff8000eb50 <kbd_active>
}
ffffffff8000200e:	c3                   	retq   
ffffffff8000200f:	90                   	nop

ffffffff80002010 <kbd_translate>:

uint8_t kbd_translate(uint8_t scancode, uint8_t uppercase)
{
    if(scancode > 58) return 0;
ffffffff80002010:	31 c0                	xor    %eax,%eax
ffffffff80002012:	40 80 ff 3a          	cmp    $0x3a,%dil
ffffffff80002016:	77 14                	ja     ffffffff8000202c <kbd_translate+0x1c>
ffffffff80002018:	40 0f b6 ff          	movzbl %dil,%edi

    if(uppercase) return kbd_table[scancode] - 32;
ffffffff8000201c:	40 84 f6             	test   %sil,%sil
ffffffff8000201f:	0f b6 87 e0 4d 00 80 	movzbl -0x7fffb220(%rdi),%eax
ffffffff80002026:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80002029:	0f 45 c2             	cmovne %edx,%eax

    return kbd_table[scancode];
}
ffffffff8000202c:	f3 c3                	repz retq 
ffffffff8000202e:	66 90                	xchg   %ax,%ax

ffffffff80002030 <kbd_handle>:
void kbd_handle()
{
    uint8_t data;
    KEY_INFO_t key_info;

    if(!kbd_active) return;
ffffffff80002030:	80 3d 19 cb 00 00 00 	cmpb   $0x0,0xcb19(%rip)        # ffffffff8000eb50 <kbd_active>
ffffffff80002037:	75 07                	jne    ffffffff80002040 <kbd_handle+0x10>
ffffffff80002039:	f3 c3                	repz retq 
ffffffff8000203b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
{
ffffffff80002040:	48 83 ec 08          	sub    $0x8,%rsp

    data = inb(0x60);
ffffffff80002044:	bf 60 00 00 00       	mov    $0x60,%edi
ffffffff80002049:	e8 c2 e3 ff ff       	callq  ffffffff80000410 <inb>

    uint8_t buffer[20];

    switch(data)
ffffffff8000204e:	3c 36                	cmp    $0x36,%al
ffffffff80002050:	74 36                	je     ffffffff80002088 <kbd_handle+0x58>
ffffffff80002052:	77 1c                	ja     ffffffff80002070 <kbd_handle+0x40>
ffffffff80002054:	3c 01                	cmp    $0x1,%al
ffffffff80002056:	0f 84 84 00 00 00    	je     ffffffff800020e0 <kbd_handle+0xb0>
ffffffff8000205c:	3c 2a                	cmp    $0x2a,%al
ffffffff8000205e:	75 48                	jne    ffffffff800020a8 <kbd_handle+0x78>
    {
        case KBD_LEFT_SHIFT:
            lshift_status = 1;
ffffffff80002060:	c6 05 39 9a 00 00 01 	movb   $0x1,0x9a39(%rip)        # ffffffff8000baa0 <lshift_status>
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
    key_info.scancode = data;

    kbd_handler(key_info);

ffffffff80002067:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000206b:	c3                   	retq   
ffffffff8000206c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(data)
ffffffff80002070:	3c aa                	cmp    $0xaa,%al
ffffffff80002072:	74 24                	je     ffffffff80002098 <kbd_handle+0x68>
ffffffff80002074:	3c b6                	cmp    $0xb6,%al
ffffffff80002076:	75 30                	jne    ffffffff800020a8 <kbd_handle+0x78>
            rshift_status = 0;
ffffffff80002078:	c6 05 09 99 00 00 00 	movb   $0x0,0x9909(%rip)        # ffffffff8000b988 <rshift_status>
            return;
ffffffff8000207f:	eb e6                	jmp    ffffffff80002067 <kbd_handle+0x37>
ffffffff80002081:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            rshift_status = 1;
ffffffff80002088:	c6 05 f9 98 00 00 01 	movb   $0x1,0x98f9(%rip)        # ffffffff8000b988 <rshift_status>
            return;
ffffffff8000208f:	eb d6                	jmp    ffffffff80002067 <kbd_handle+0x37>
ffffffff80002091:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            lshift_status = 0;
ffffffff80002098:	c6 05 01 9a 00 00 00 	movb   $0x0,0x9a01(%rip)        # ffffffff8000baa0 <lshift_status>
            return;
ffffffff8000209f:	eb c6                	jmp    ffffffff80002067 <kbd_handle+0x37>
ffffffff800020a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(scancode > 58) return 0;
ffffffff800020a8:	31 d2                	xor    %edx,%edx
ffffffff800020aa:	3c 3a                	cmp    $0x3a,%al
ffffffff800020ac:	77 1e                	ja     ffffffff800020cc <kbd_handle+0x9c>
ffffffff800020ae:	0f b6 d0             	movzbl %al,%edx
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff800020b1:	0f b6 35 e8 99 00 00 	movzbl 0x99e8(%rip),%esi        # ffffffff8000baa0 <lshift_status>
ffffffff800020b8:	0f b6 92 e0 4d 00 80 	movzbl -0x7fffb220(%rdx),%edx
ffffffff800020bf:	40 0a 35 c2 98 00 00 	or     0x98c2(%rip),%sil        # ffffffff8000b988 <rshift_status>
ffffffff800020c6:	8d 4a e0             	lea    -0x20(%rdx),%ecx
ffffffff800020c9:	0f 45 d1             	cmovne %ecx,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff800020cc:	31 c9                	xor    %ecx,%ecx
ffffffff800020ce:	48 83 c4 08          	add    $0x8,%rsp
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff800020d2:	88 d5                	mov    %dl,%ch
    key_info.scancode = data;
ffffffff800020d4:	88 c1                	mov    %al,%cl
    kbd_handler(key_info);
ffffffff800020d6:	89 cf                	mov    %ecx,%edi
ffffffff800020d8:	ff 25 6a ca 00 00    	jmpq   *0xca6a(%rip)        # ffffffff8000eb48 <kbd_handler>
ffffffff800020de:	66 90                	xchg   %ax,%ax
            printf("%d\n", pit_ticks);
ffffffff800020e0:	48 8b 35 79 cb 00 00 	mov    0xcb79(%rip),%rsi        # ffffffff8000ec60 <pit_ticks>
ffffffff800020e7:	48 c7 c7 98 4c 00 80 	mov    $0xffffffff80004c98,%rdi
ffffffff800020ee:	31 c0                	xor    %eax,%eax
ffffffff800020f0:	48 83 c4 08          	add    $0x8,%rsp
            printf("%d\n", pit_ticks);
ffffffff800020f4:	e9 a7 13 00 00       	jmpq   ffffffff800034a0 <printf_>
ffffffff800020f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002100 <cpu_init>:

void cpu_init()
{
    uint64_t a,b,c,d;
    __cpuid(0,a,b,c,d);
ffffffff80002100:	f3 c3                	repz retq 
ffffffff80002102:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002109:	00 00 00 
ffffffff8000210c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002110 <acpi_init>:
    struct RSDP20Descriptor* rsdp;

}ACPI_Info;

void acpi_init()
{
ffffffff80002110:	48 83 ec 18          	sub    $0x18,%rsp
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80002114:	48 8b 05 6d 85 00 00 	mov    0x856d(%rip),%rax        # ffffffff8000a688 <boot_info+0x28>
    
    uint8_t test[8] = {'R', 'S', 'P', ' ', 'P', 'T', 'R', ' '};
ffffffff8000211b:	48 bf 52 53 50 20 50 	movabs $0x2052545020505352,%rdi
ffffffff80002122:	54 52 20 
ffffffff80002125:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff8000212a:	31 d2                	xor    %edx,%edx
ffffffff8000212c:	b9 52 00 00 00       	mov    $0x52,%ecx
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80002131:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80002135:	48 89 05 6c 99 00 00 	mov    %rax,0x996c(%rip)        # ffffffff8000baa8 <ACPI_Info>
    for(uint32_t i = 0; i < 8; i++)
    {
        if(test[i] == ACPI_Info.rsdp->header.signature[i]) 
ffffffff8000213c:	38 0c 10             	cmp    %cl,(%rax,%rdx,1)
ffffffff8000213f:	74 0f                	je     ffffffff80002150 <acpi_init+0x40>
            return;
    }

    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
    
ffffffff80002141:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80002145:	c3                   	retq   
ffffffff80002146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000214d:	00 00 00 
ffffffff80002150:	48 83 c2 01          	add    $0x1,%rdx
    for(uint32_t i = 0; i < 8; i++)
ffffffff80002154:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff80002158:	75 16                	jne    ffffffff80002170 <acpi_init+0x60>
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff8000215a:	0f b6 70 0f          	movzbl 0xf(%rax),%esi
ffffffff8000215e:	48 c7 c7 20 4e 00 80 	mov    $0xffffffff80004e20,%rdi
ffffffff80002165:	31 c0                	xor    %eax,%eax
ffffffff80002167:	48 83 c4 18          	add    $0x18,%rsp
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff8000216b:	e9 30 13 00 00       	jmpq   ffffffff800034a0 <printf_>
ffffffff80002170:	0f b6 4c 14 08       	movzbl 0x8(%rsp,%rdx,1),%ecx
ffffffff80002175:	eb c5                	jmp    ffffffff8000213c <acpi_init+0x2c>
ffffffff80002177:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000217e:	00 00 

ffffffff80002180 <pic_EOI>:

uint64_t ticks;

void pic_EOI(uint8_t IRQ)
{
    if(IRQ >= 8)
ffffffff80002180:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80002184:	77 12                	ja     ffffffff80002198 <pic_EOI+0x18>
    {
        outb(PIC2_CMD, PIC_EOI);
    }
    
    outb(PIC1_CMD, PIC_EOI);
ffffffff80002186:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000218b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002190:	e9 6b e2 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80002195:	0f 1f 00             	nopl   (%rax)
{
ffffffff80002198:	48 83 ec 08          	sub    $0x8,%rsp
        outb(PIC2_CMD, PIC_EOI);
ffffffff8000219c:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800021a1:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff800021a6:	e8 55 e2 ff ff       	callq  ffffffff80000400 <outb>
    outb(PIC1_CMD, PIC_EOI);
ffffffff800021ab:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800021b0:	bf 20 00 00 00       	mov    $0x20,%edi
}
ffffffff800021b5:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_CMD, PIC_EOI);
ffffffff800021b9:	e9 42 e2 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff800021be:	66 90                	xchg   %ax,%ax

ffffffff800021c0 <pic_set_mask>:

void pic_set_mask(uint8_t IRQ)
{
ffffffff800021c0:	55                   	push   %rbp
ffffffff800021c1:	53                   	push   %rbx
ffffffff800021c2:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff800021c6:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff800021ca:	76 34                	jbe    ffffffff80002200 <pic_set_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff800021cc:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff800021cf:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) | (1 << IRQ);
ffffffff800021d4:	89 df                	mov    %ebx,%edi
ffffffff800021d6:	e8 35 e2 ff ff       	callq  ffffffff80000410 <inb>
    outb(port, value);
}
ffffffff800021db:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) | (1 << IRQ);
ffffffff800021df:	89 e9                	mov    %ebp,%ecx
ffffffff800021e1:	be 01 00 00 00       	mov    $0x1,%esi
    outb(port, value);
ffffffff800021e6:	89 df                	mov    %ebx,%edi
    value = inb(port) | (1 << IRQ);
ffffffff800021e8:	d3 e6                	shl    %cl,%esi
}
ffffffff800021ea:	5b                   	pop    %rbx
ffffffff800021eb:	5d                   	pop    %rbp
    value = inb(port) | (1 << IRQ);
ffffffff800021ec:	09 f0                	or     %esi,%eax
    outb(port, value);
ffffffff800021ee:	0f b6 f0             	movzbl %al,%esi
ffffffff800021f1:	e9 0a e2 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff800021f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800021fd:	00 00 00 
ffffffff80002200:	89 fd                	mov    %edi,%ebp
ffffffff80002202:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80002207:	eb cb                	jmp    ffffffff800021d4 <pic_set_mask+0x14>
ffffffff80002209:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002210 <pic_clear_mask>:

void pic_clear_mask(uint8_t IRQ)
{
ffffffff80002210:	55                   	push   %rbp
ffffffff80002211:	53                   	push   %rbx
ffffffff80002212:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80002216:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff8000221a:	76 34                	jbe    ffffffff80002250 <pic_clear_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff8000221c:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff8000221f:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) & ~(1 << IRQ);
ffffffff80002224:	89 df                	mov    %ebx,%edi
ffffffff80002226:	e8 e5 e1 ff ff       	callq  ffffffff80000410 <inb>
    outb(port, value);
}
ffffffff8000222b:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) & ~(1 << IRQ);
ffffffff8000222f:	89 e9                	mov    %ebp,%ecx
ffffffff80002231:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    outb(port, value);
ffffffff80002236:	89 df                	mov    %ebx,%edi
    value = inb(port) & ~(1 << IRQ);
ffffffff80002238:	d3 c2                	rol    %cl,%edx
}
ffffffff8000223a:	5b                   	pop    %rbx
ffffffff8000223b:	5d                   	pop    %rbp
    value = inb(port) & ~(1 << IRQ);
ffffffff8000223c:	21 d0                	and    %edx,%eax
    outb(port, value);
ffffffff8000223e:	0f b6 f0             	movzbl %al,%esi
ffffffff80002241:	e9 ba e1 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80002246:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000224d:	00 00 00 
ffffffff80002250:	89 fd                	mov    %edi,%ebp
ffffffff80002252:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80002257:	eb cb                	jmp    ffffffff80002224 <pic_clear_mask+0x14>
ffffffff80002259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002260 <pic_disable>:

void pic_disable()
{
ffffffff80002260:	48 83 ec 08          	sub    $0x8,%rsp
    outb(PIC2_DATA, 0xff);
ffffffff80002264:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002269:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000226e:	e8 8d e1 ff ff       	callq  ffffffff80000400 <outb>
    outb(PIC1_DATA, 0xff);
ffffffff80002273:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002278:	bf 21 00 00 00       	mov    $0x21,%edi
}
ffffffff8000227d:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_DATA, 0xff);
ffffffff80002281:	e9 7a e1 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80002286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000228d:	00 00 00 

ffffffff80002290 <pic_remap>:

void pic_remap()
{
ffffffff80002290:	55                   	push   %rbp
ffffffff80002291:	53                   	push   %rbx
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80002292:	bf 21 00 00 00       	mov    $0x21,%edi
{
ffffffff80002297:	48 83 ec 08          	sub    $0x8,%rsp
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff8000229b:	e8 70 e1 ff ff       	callq  ffffffff80000410 <inb>
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff800022a0:	bf a1 00 00 00       	mov    $0xa1,%edi
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff800022a5:	89 c5                	mov    %eax,%ebp
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff800022a7:	e8 64 e1 ff ff       	callq  ffffffff80000410 <inb>

    outb(PIC1_CMD, 0x11);
ffffffff800022ac:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff800022b1:	bf 20 00 00 00       	mov    $0x20,%edi
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff800022b6:	89 c3                	mov    %eax,%ebx
    outb(PIC1_CMD, 0x11);
ffffffff800022b8:	e8 43 e1 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800022bd:	31 c0                	xor    %eax,%eax
ffffffff800022bf:	e8 5c e1 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_CMD, 0x11);
ffffffff800022c4:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff800022c9:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff800022ce:	e8 2d e1 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800022d3:	31 c0                	xor    %eax,%eax
ffffffff800022d5:	e8 46 e1 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x20);
ffffffff800022da:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800022df:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800022e4:	e8 17 e1 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800022e9:	31 c0                	xor    %eax,%eax
ffffffff800022eb:	e8 30 e1 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x20);
ffffffff800022f0:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800022f5:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800022fa:	e8 01 e1 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800022ff:	31 c0                	xor    %eax,%eax
ffffffff80002301:	e8 1a e1 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x04);
ffffffff80002306:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff8000230b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002310:	e8 eb e0 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80002315:	31 c0                	xor    %eax,%eax
ffffffff80002317:	e8 04 e1 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x02);
ffffffff8000231c:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80002321:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80002326:	e8 d5 e0 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff8000232b:	31 c0                	xor    %eax,%eax
ffffffff8000232d:	e8 ee e0 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x01);
ffffffff80002332:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80002337:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8000233c:	e8 bf e0 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80002341:	31 c0                	xor    %eax,%eax
ffffffff80002343:	e8 d8 e0 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x01);
ffffffff80002348:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000234d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80002352:	e8 a9 e0 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80002357:	31 c0                	xor    %eax,%eax
ffffffff80002359:	e8 c2 e0 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, mask1);
ffffffff8000235e:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80002362:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002367:	e8 94 e0 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff8000236c:	31 c0                	xor    %eax,%eax
ffffffff8000236e:	e8 ad e0 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, mask2);
ffffffff80002373:	0f b6 f3             	movzbl %bl,%esi
ffffffff80002376:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000237b:	e8 80 e0 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80002380:	31 c0                	xor    %eax,%eax
}
ffffffff80002382:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80002386:	5b                   	pop    %rbx
ffffffff80002387:	5d                   	pop    %rbp
    io_wait();
ffffffff80002388:	e9 93 e0 ff ff       	jmpq   ffffffff80000420 <io_wait>
ffffffff8000238d:	0f 1f 00             	nopl   (%rax)

ffffffff80002390 <pit_init>:



void pit_init(uint64_t freq)
{
ffffffff80002390:	53                   	push   %rbx
    if(freq > 1193181)
        working_freq = 1193181;

    uint32_t divisor = 1193180 / working_freq;

    outb(0x43, 0x36);
ffffffff80002391:	be 36 00 00 00       	mov    $0x36,%esi
{
ffffffff80002396:	48 89 fb             	mov    %rdi,%rbx
    outb(0x43, 0x36);
ffffffff80002399:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8000239e:	e8 5d e0 ff ff       	callq  ffffffff80000400 <outb>
    uint32_t divisor = 1193180 / working_freq;
ffffffff800023a3:	48 81 fb dd 34 12 00 	cmp    $0x1234dd,%rbx
ffffffff800023aa:	bf dd 34 12 00       	mov    $0x1234dd,%edi
ffffffff800023af:	b8 10 27 00 00       	mov    $0x2710,%eax
ffffffff800023b4:	48 0f 46 fb          	cmovbe %rbx,%rdi
ffffffff800023b8:	48 81 ff 10 27 00 00 	cmp    $0x2710,%rdi
ffffffff800023bf:	48 0f 42 f8          	cmovb  %rax,%rdi
ffffffff800023c3:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
ffffffff800023c8:	31 d2                	xor    %edx,%edx
ffffffff800023ca:	48 f7 f7             	div    %rdi
    outb(0x40, divisor & 0xff);
ffffffff800023cd:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff800023d2:	89 c6                	mov    %eax,%esi
ffffffff800023d4:	e8 27 e0 ff ff       	callq  ffffffff80000400 <outb>
    outb(0x40, divisor >> 8);
ffffffff800023d9:	5b                   	pop    %rbx
    outb(0x40, divisor >> 8);
ffffffff800023da:	31 f6                	xor    %esi,%esi
ffffffff800023dc:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff800023e1:	e9 1a e0 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff800023e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800023ed:	00 00 00 

ffffffff800023f0 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
ffffffff800023f0:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800023f3:	73 04                	jae    ffffffff800023f9 <_out_buffer+0x9>
    ((char*)buffer)[idx] = character;
ffffffff800023f5:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  }
}
ffffffff800023f9:	f3 c3                	repz retq 
ffffffff800023fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80002400 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
ffffffff80002400:	f3 c3                	repz retq 
ffffffff80002402:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002409:	00 00 00 00 
ffffffff8000240d:	0f 1f 00             	nopl   (%rax)

ffffffff80002410 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
ffffffff80002410:	40 84 ff             	test   %dil,%dil
{
ffffffff80002413:	48 89 f0             	mov    %rsi,%rax
  if (character) {
ffffffff80002416:	74 10                	je     ffffffff80002428 <_out_fct+0x18>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
ffffffff80002418:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffffff8000241c:	40 0f be ff          	movsbl %dil,%edi
ffffffff80002420:	ff 20                	jmpq   *(%rax)
ffffffff80002422:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  }
}
ffffffff80002428:	f3 c3                	repz retq 
ffffffff8000242a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80002430 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002430:	41 57                	push   %r15
ffffffff80002432:	41 56                	push   %r14
ffffffff80002434:	41 55                	push   %r13
ffffffff80002436:	41 54                	push   %r12
ffffffff80002438:	49 89 cd             	mov    %rcx,%r13
ffffffff8000243b:	55                   	push   %rbp
ffffffff8000243c:	53                   	push   %rbx
ffffffff8000243d:	48 89 fd             	mov    %rdi,%rbp
ffffffff80002440:	4c 89 c3             	mov    %r8,%rbx
ffffffff80002443:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80002447:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
ffffffff8000244e:	48 89 34 24          	mov    %rsi,(%rsp)
ffffffff80002452:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80002457:	8b 7c 24 60          	mov    0x60(%rsp),%edi
ffffffff8000245b:	89 c6                	mov    %eax,%esi
ffffffff8000245d:	89 c1                	mov    %eax,%ecx
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
ffffffff8000245f:	89 c2                	mov    %eax,%edx
ffffffff80002461:	83 e6 10             	and    $0x10,%esi
ffffffff80002464:	83 e1 03             	and    $0x3,%ecx
ffffffff80002467:	83 e2 02             	and    $0x2,%edx
ffffffff8000246a:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
ffffffff8000246e:	75 79                	jne    ffffffff800024e9 <_ntoa_format+0xb9>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002470:	44 8b 54 24 78       	mov    0x78(%rsp),%r10d
ffffffff80002475:	41 89 c0             	mov    %eax,%r8d
ffffffff80002478:	8b 54 24 70          	mov    0x70(%rsp),%edx
ffffffff8000247c:	41 83 e0 01          	and    $0x1,%r8d
ffffffff80002480:	45 85 d2             	test   %r10d,%r10d
ffffffff80002483:	0f 85 d7 00 00 00    	jne    ffffffff80002560 <_ntoa_format+0x130>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002489:	49 39 d1             	cmp    %rdx,%r9
ffffffff8000248c:	73 27                	jae    ffffffff800024b5 <_ntoa_format+0x85>
ffffffff8000248e:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002492:	75 12                	jne    ffffffff800024a6 <_ntoa_format+0x76>
ffffffff80002494:	e9 b7 02 00 00       	jmpq   ffffffff80002750 <_ntoa_format+0x320>
ffffffff80002499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800024a0:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800024a4:	74 0f                	je     ffffffff800024b5 <_ntoa_format+0x85>
      buf[len++] = '0';
ffffffff800024a6:	49 83 c1 01          	add    $0x1,%r9
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800024aa:	49 39 d1             	cmp    %rdx,%r9
      buf[len++] = '0';
ffffffff800024ad:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800024b3:	72 eb                	jb     ffffffff800024a0 <_ntoa_format+0x70>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800024b5:	45 85 c0             	test   %r8d,%r8d
ffffffff800024b8:	74 2f                	je     ffffffff800024e9 <_ntoa_format+0xb9>
ffffffff800024ba:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff800024bf:	4d 39 ce             	cmp    %r9,%r14
ffffffff800024c2:	76 25                	jbe    ffffffff800024e9 <_ntoa_format+0xb9>
ffffffff800024c4:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800024c8:	75 10                	jne    ffffffff800024da <_ntoa_format+0xaa>
ffffffff800024ca:	e9 8b 03 00 00       	jmpq   ffffffff8000285a <_ntoa_format+0x42a>
ffffffff800024cf:	90                   	nop
ffffffff800024d0:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800024d4:	0f 84 76 02 00 00    	je     ffffffff80002750 <_ntoa_format+0x320>
      buf[len++] = '0';
ffffffff800024da:	49 83 c1 01          	add    $0x1,%r9
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800024de:	4d 39 f1             	cmp    %r14,%r9
      buf[len++] = '0';
ffffffff800024e1:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800024e7:	75 e7                	jne    ffffffff800024d0 <_ntoa_format+0xa0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
ffffffff800024e9:	85 f6                	test   %esi,%esi
ffffffff800024eb:	74 41                	je     ffffffff8000252e <_ntoa_format+0xfe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff800024ed:	f6 c4 04             	test   $0x4,%ah
ffffffff800024f0:	0f 85 5a 01 00 00    	jne    ffffffff80002650 <_ntoa_format+0x220>
ffffffff800024f6:	4d 85 c9             	test   %r9,%r9
ffffffff800024f9:	0f 85 31 01 00 00    	jne    ffffffff80002630 <_ntoa_format+0x200>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800024ff:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff80002504:	0f 84 2f 03 00 00    	je     ffffffff80002839 <_ntoa_format+0x409>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000250a:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff8000250f:	0f 85 37 03 00 00    	jne    ffffffff8000284c <_ntoa_format+0x41c>
      buf[len++] = 'b';
ffffffff80002515:	c6 03 62             	movb   $0x62,(%rbx)
ffffffff80002518:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
ffffffff8000251f:	00 00 
ffffffff80002521:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80002526:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
ffffffff8000252a:	c6 04 33 30          	movb   $0x30,(%rbx,%rsi,1)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff8000252e:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002532:	0f 84 38 02 00 00    	je     ffffffff80002770 <_ntoa_format+0x340>
    if (negative) {
ffffffff80002538:	40 84 ff             	test   %dil,%dil
ffffffff8000253b:	75 4b                	jne    ffffffff80002588 <_ntoa_format+0x158>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
ffffffff8000253d:	a8 04                	test   $0x4,%al
ffffffff8000253f:	0f 85 a3 01 00 00    	jne    ffffffff800026e8 <_ntoa_format+0x2b8>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
ffffffff80002545:	a8 08                	test   $0x8,%al
ffffffff80002547:	0f 84 9b 02 00 00    	je     ffffffff800027e8 <_ntoa_format+0x3b8>
      buf[len++] = ' ';
ffffffff8000254d:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80002551:	42 c6 04 0b 20       	movb   $0x20,(%rbx,%r9,1)
ffffffff80002556:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff8000255b:	eb 39                	jmp    ffffffff80002596 <_ntoa_format+0x166>
ffffffff8000255d:	0f 1f 00             	nopl   (%rax)
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002560:	45 85 c0             	test   %r8d,%r8d
ffffffff80002563:	0f 84 97 01 00 00    	je     ffffffff80002700 <_ntoa_format+0x2d0>
ffffffff80002569:	40 84 ff             	test   %dil,%dil
ffffffff8000256c:	75 04                	jne    ffffffff80002572 <_ntoa_format+0x142>
ffffffff8000256e:	a8 0c                	test   $0xc,%al
ffffffff80002570:	74 05                	je     ffffffff80002577 <_ntoa_format+0x147>
      width--;
ffffffff80002572:	83 6c 24 78 01       	subl   $0x1,0x78(%rsp)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002577:	49 39 d1             	cmp    %rdx,%r9
ffffffff8000257a:	0f 82 0e ff ff ff    	jb     ffffffff8000248e <_ntoa_format+0x5e>
ffffffff80002580:	e9 35 ff ff ff       	jmpq   ffffffff800024ba <_ntoa_format+0x8a>
ffffffff80002585:	0f 1f 00             	nopl   (%rax)
      buf[len++] = '-';
ffffffff80002588:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff8000258c:	42 c6 04 0b 2d       	movb   $0x2d,(%rbx,%r9,1)
ffffffff80002591:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002596:	85 c9                	test   %ecx,%ecx
ffffffff80002598:	0f 84 fa 00 00 00    	je     ffffffff80002698 <_ntoa_format+0x268>
ffffffff8000259e:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    for (size_t i = len; i < width; i++) {
ffffffff800025a3:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
ffffffff800025a8:	4c 89 fa             	mov    %r15,%rdx
ffffffff800025ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    out(buf[--len], buffer, idx++, maxlen);
ffffffff800025b0:	49 83 ec 01          	sub    $0x1,%r12
ffffffff800025b4:	4c 8d 72 01          	lea    0x1(%rdx),%r14
ffffffff800025b8:	4c 89 e9             	mov    %r13,%rcx
ffffffff800025bb:	42 0f be 3c 23       	movsbl (%rbx,%r12,1),%edi
ffffffff800025c0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800025c4:	ff d5                	callq  *%rbp
  while (len) {
ffffffff800025c6:	4d 85 e4             	test   %r12,%r12
    out(buf[--len], buffer, idx++, maxlen);
ffffffff800025c9:	4c 89 f2             	mov    %r14,%rdx
  while (len) {
ffffffff800025cc:	75 e2                	jne    ffffffff800025b0 <_ntoa_format+0x180>
ffffffff800025ce:	4c 03 7c 24 10       	add    0x10(%rsp),%r15
  if (flags & FLAGS_LEFT) {
ffffffff800025d3:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
ffffffff800025d7:	85 c0                	test   %eax,%eax
ffffffff800025d9:	74 3a                	je     ffffffff80002615 <_ntoa_format+0x1e5>
    while (idx - start_idx < width) {
ffffffff800025db:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff800025e0:	4c 89 fa             	mov    %r15,%rdx
ffffffff800025e3:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
ffffffff800025e8:	49 39 d6             	cmp    %rdx,%r14
ffffffff800025eb:	76 28                	jbe    ffffffff80002615 <_ntoa_format+0x1e5>
ffffffff800025ed:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff800025f0:	49 8d 5f 01          	lea    0x1(%r15),%rbx
ffffffff800025f4:	4c 89 fa             	mov    %r15,%rdx
ffffffff800025f7:	4c 89 e9             	mov    %r13,%rcx
ffffffff800025fa:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800025fe:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002603:	ff d5                	callq  *%rbp
    while (idx - start_idx < width) {
ffffffff80002605:	48 89 da             	mov    %rbx,%rdx
ffffffff80002608:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
      out(' ', buffer, idx++, maxlen);
ffffffff8000260d:	49 89 df             	mov    %rbx,%r15
    while (idx - start_idx < width) {
ffffffff80002610:	4c 39 f2             	cmp    %r14,%rdx
ffffffff80002613:	72 db                	jb     ffffffff800025f0 <_ntoa_format+0x1c0>
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
ffffffff80002615:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80002619:	4c 89 f8             	mov    %r15,%rax
ffffffff8000261c:	5b                   	pop    %rbx
ffffffff8000261d:	5d                   	pop    %rbp
ffffffff8000261e:	41 5c                	pop    %r12
ffffffff80002620:	41 5d                	pop    %r13
ffffffff80002622:	41 5e                	pop    %r14
ffffffff80002624:	41 5f                	pop    %r15
ffffffff80002626:	c3                   	retq   
ffffffff80002627:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000262e:	00 00 
ffffffff80002630:	8b 54 24 70          	mov    0x70(%rsp),%edx
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80002634:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80002637:	0f 84 e3 00 00 00    	je     ffffffff80002720 <_ntoa_format+0x2f0>
ffffffff8000263d:	8b 54 24 78          	mov    0x78(%rsp),%edx
ffffffff80002641:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80002644:	0f 84 d6 00 00 00    	je     ffffffff80002720 <_ntoa_format+0x2f0>
ffffffff8000264a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002650:	49 83 f9 1f          	cmp    $0x1f,%r9
ffffffff80002654:	0f 96 c2             	setbe  %dl
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002657:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff8000265c:	0f 84 1e 01 00 00    	je     ffffffff80002780 <_ntoa_format+0x350>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002662:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80002667:	0f 85 a3 00 00 00    	jne    ffffffff80002710 <_ntoa_format+0x2e0>
ffffffff8000266d:	84 d2                	test   %dl,%dl
ffffffff8000266f:	0f 84 9b 00 00 00    	je     ffffffff80002710 <_ntoa_format+0x2e0>
ffffffff80002675:	49 8d 71 01          	lea    0x1(%r9),%rsi
      buf[len++] = 'b';
ffffffff80002679:	42 c6 04 0b 62       	movb   $0x62,(%rbx,%r9,1)
ffffffff8000267e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff80002683:	48 83 7c 24 10 1f    	cmpq   $0x1f,0x10(%rsp)
ffffffff80002689:	0f 86 92 fe ff ff    	jbe    ffffffff80002521 <_ntoa_format+0xf1>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff8000268f:	85 c9                	test   %ecx,%ecx
ffffffff80002691:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80002696:	75 3a                	jne    ffffffff800026d2 <_ntoa_format+0x2a2>
ffffffff80002698:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff8000269d:	4c 3b 74 24 10       	cmp    0x10(%rsp),%r14
ffffffff800026a2:	0f 86 50 01 00 00    	jbe    ffffffff800027f8 <_ntoa_format+0x3c8>
ffffffff800026a8:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff800026ad:	49 01 d6             	add    %rdx,%r14
ffffffff800026b0:	4c 2b 74 24 10       	sub    0x10(%rsp),%r14
ffffffff800026b5:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff800026b8:	4c 8d 7a 01          	lea    0x1(%rdx),%r15
ffffffff800026bc:	4c 89 e9             	mov    %r13,%rcx
ffffffff800026bf:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800026c3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800026c8:	ff d5                	callq  *%rbp
    for (size_t i = len; i < width; i++) {
ffffffff800026ca:	4d 39 f7             	cmp    %r14,%r15
ffffffff800026cd:	4c 89 fa             	mov    %r15,%rdx
ffffffff800026d0:	75 e6                	jne    ffffffff800026b8 <_ntoa_format+0x288>
  while (len) {
ffffffff800026d2:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
ffffffff800026d8:	0f 85 c5 fe ff ff    	jne    ffffffff800025a3 <_ntoa_format+0x173>
ffffffff800026de:	e9 f0 fe ff ff       	jmpq   ffffffff800025d3 <_ntoa_format+0x1a3>
ffffffff800026e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      buf[len++] = '+';  // ignore the space if the '+' exists
ffffffff800026e8:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff800026ec:	42 c6 04 0b 2b       	movb   $0x2b,(%rbx,%r9,1)
ffffffff800026f1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800026f6:	e9 9b fe ff ff       	jmpq   ffffffff80002596 <_ntoa_format+0x166>
ffffffff800026fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002700:	49 39 d1             	cmp    %rdx,%r9
ffffffff80002703:	0f 82 85 fd ff ff    	jb     ffffffff8000248e <_ntoa_format+0x5e>
ffffffff80002709:	e9 db fd ff ff       	jmpq   ffffffff800024e9 <_ntoa_format+0xb9>
ffffffff8000270e:	66 90                	xchg   %ax,%ax
ffffffff80002710:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80002715:	e9 69 ff ff ff       	jmpq   ffffffff80002683 <_ntoa_format+0x253>
ffffffff8000271a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (len && (base == 16U)) {
ffffffff80002720:	4d 89 c8             	mov    %r9,%r8
ffffffff80002723:	49 83 e8 01          	sub    $0x1,%r8
ffffffff80002727:	0f 95 c2             	setne  %dl
ffffffff8000272a:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff8000272f:	40 0f 94 c6          	sete   %sil
ffffffff80002733:	40 20 f2             	and    %sil,%dl
ffffffff80002736:	0f 84 d9 00 00 00    	je     ffffffff80002815 <_ntoa_format+0x3e5>
        len--;
ffffffff8000273c:	49 8d 71 fe          	lea    -0x2(%r9),%rsi
ffffffff80002740:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002745:	eb 3e                	jmp    ffffffff80002785 <_ntoa_format+0x355>
ffffffff80002747:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000274e:	00 00 
  if (flags & FLAGS_HASH) {
ffffffff80002750:	85 f6                	test   %esi,%esi
ffffffff80002752:	74 6c                	je     ffffffff800027c0 <_ntoa_format+0x390>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80002754:	f6 c4 04             	test   $0x4,%ah
ffffffff80002757:	41 b9 20 00 00 00    	mov    $0x20,%r9d
ffffffff8000275d:	0f 84 d1 fe ff ff    	je     ffffffff80002634 <_ntoa_format+0x204>
ffffffff80002763:	e9 e8 fe ff ff       	jmpq   ffffffff80002650 <_ntoa_format+0x220>
ffffffff80002768:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000276f:	00 
ffffffff80002770:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80002777:	00 00 
ffffffff80002779:	e9 18 fe ff ff       	jmpq   ffffffff80002596 <_ntoa_format+0x166>
ffffffff8000277e:	66 90                	xchg   %ax,%ax
ffffffff80002780:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002785:	89 c6                	mov    %eax,%esi
ffffffff80002787:	83 e6 20             	and    $0x20,%esi
ffffffff8000278a:	75 08                	jne    ffffffff80002794 <_ntoa_format+0x364>
ffffffff8000278c:	84 d2                	test   %dl,%dl
ffffffff8000278e:	0f 85 8e 00 00 00    	jne    ffffffff80002822 <_ntoa_format+0x3f2>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002794:	85 f6                	test   %esi,%esi
ffffffff80002796:	0f 84 e7 fe ff ff    	je     ffffffff80002683 <_ntoa_format+0x253>
ffffffff8000279c:	84 d2                	test   %dl,%dl
ffffffff8000279e:	0f 84 df fe ff ff    	je     ffffffff80002683 <_ntoa_format+0x253>
      buf[len++] = 'X';
ffffffff800027a4:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff800027a9:	c6 04 33 58          	movb   $0x58,(%rbx,%rsi,1)
ffffffff800027ad:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800027b1:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff800027b6:	e9 c8 fe ff ff       	jmpq   ffffffff80002683 <_ntoa_format+0x253>
ffffffff800027bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800027c0:	85 c9                	test   %ecx,%ecx
ffffffff800027c2:	75 3e                	jne    ffffffff80002802 <_ntoa_format+0x3d2>
ffffffff800027c4:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff800027c9:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff800027d0:	00 00 
ffffffff800027d2:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff800027d6:	0f 87 cc fe ff ff    	ja     ffffffff800026a8 <_ntoa_format+0x278>
ffffffff800027dc:	e9 bd fd ff ff       	jmpq   ffffffff8000259e <_ntoa_format+0x16e>
ffffffff800027e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800027e8:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff800027ed:	e9 9d fe ff ff       	jmpq   ffffffff8000268f <_ntoa_format+0x25f>
ffffffff800027f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff800027f8:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff800027fd:	e9 d0 fe ff ff       	jmpq   ffffffff800026d2 <_ntoa_format+0x2a2>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002802:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80002807:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000280e:	00 00 
ffffffff80002810:	e9 8e fd ff ff       	jmpq   ffffffff800025a3 <_ntoa_format+0x173>
      len--;
ffffffff80002815:	4d 89 c1             	mov    %r8,%r9
ffffffff80002818:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000281d:	e9 35 fe ff ff       	jmpq   ffffffff80002657 <_ntoa_format+0x227>
      buf[len++] = 'x';
ffffffff80002822:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80002827:	c6 04 33 78          	movb   $0x78,(%rbx,%rsi,1)
ffffffff8000282b:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000282f:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002834:	e9 4a fe ff ff       	jmpq   ffffffff80002683 <_ntoa_format+0x253>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002839:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
ffffffff80002840:	00 00 
ffffffff80002842:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002847:	e9 39 ff ff ff       	jmpq   ffffffff80002785 <_ntoa_format+0x355>
      buf[len++] = '0';
ffffffff8000284c:	c6 03 30             	movb   $0x30,(%rbx)
ffffffff8000284f:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80002855:	e9 de fc ff ff       	jmpq   ffffffff80002538 <_ntoa_format+0x108>
  if (flags & FLAGS_HASH) {
ffffffff8000285a:	85 f6                	test   %esi,%esi
ffffffff8000285c:	74 17                	je     ffffffff80002875 <_ntoa_format+0x445>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff8000285e:	f6 c4 04             	test   $0x4,%ah
ffffffff80002861:	0f 84 cd fd ff ff    	je     ffffffff80002634 <_ntoa_format+0x204>
ffffffff80002867:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000286e:	00 00 
ffffffff80002870:	e9 1a fe ff ff       	jmpq   ffffffff8000268f <_ntoa_format+0x25f>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002875:	85 c9                	test   %ecx,%ecx
    for (size_t i = len; i < width; i++) {
ffffffff80002877:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000287e:	00 00 
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002880:	0f 85 18 fd ff ff    	jne    ffffffff8000259e <_ntoa_format+0x16e>
    for (size_t i = len; i < width; i++) {
ffffffff80002886:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff8000288a:	0f 87 18 fe ff ff    	ja     ffffffff800026a8 <_ntoa_format+0x278>
ffffffff80002890:	e9 09 fd ff ff       	jmpq   ffffffff8000259e <_ntoa_format+0x16e>
ffffffff80002895:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000289c:	00 00 00 00 

ffffffff800028a0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff800028a0:	41 55                	push   %r13
ffffffff800028a2:	41 54                	push   %r12
ffffffff800028a4:	4c 89 c0             	mov    %r8,%rax
ffffffff800028a7:	55                   	push   %rbp
ffffffff800028a8:	53                   	push   %rbx
ffffffff800028a9:	48 89 d3             	mov    %rdx,%rbx
ffffffff800028ac:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff800028b0:	4d 85 c0             	test   %r8,%r8
{
ffffffff800028b3:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff800028b8:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff800028bc:	75 13                	jne    ffffffff800028d1 <_ntoa_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff800028be:	89 ea                	mov    %ebp,%edx
ffffffff800028c0:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800028c3:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff800028c9:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800028cb:	0f 85 7f 00 00 00    	jne    ffffffff80002950 <_ntoa_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800028d1:	89 ea                	mov    %ebp,%edx
ffffffff800028d3:	83 e2 20             	and    $0x20,%edx
ffffffff800028d6:	83 fa 01             	cmp    $0x1,%edx
ffffffff800028d9:	45 19 db             	sbb    %r11d,%r11d
ffffffff800028dc:	45 31 c0             	xor    %r8d,%r8d
ffffffff800028df:	41 83 e3 20          	and    $0x20,%r11d
ffffffff800028e3:	41 83 c3 37          	add    $0x37,%r11d
ffffffff800028e7:	eb 0d                	jmp    ffffffff800028f6 <_ntoa_long+0x56>
ffffffff800028e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800028f0:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff800028f4:	77 26                	ja     ffffffff8000291c <_ntoa_long+0x7c>
ffffffff800028f6:	31 d2                	xor    %edx,%edx
ffffffff800028f8:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800028fb:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff800028ff:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80002903:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80002907:	44 89 ea             	mov    %r13d,%edx
ffffffff8000290a:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff8000290e:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002912:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002915:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff8000291a:	75 d4                	jne    ffffffff800028f0 <_ntoa_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff8000291c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002920:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002924:	48 89 da             	mov    %rbx,%rdx
ffffffff80002927:	55                   	push   %rbp
ffffffff80002928:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff8000292c:	50                   	push   %rax
ffffffff8000292d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002931:	50                   	push   %rax
ffffffff80002932:	41 52                	push   %r10
ffffffff80002934:	41 51                	push   %r9
ffffffff80002936:	4d 89 c1             	mov    %r8,%r9
ffffffff80002939:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff8000293e:	e8 ed fa ff ff       	callq  ffffffff80002430 <_ntoa_format>
}
ffffffff80002943:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002947:	5b                   	pop    %rbx
ffffffff80002948:	5d                   	pop    %rbp
ffffffff80002949:	41 5c                	pop    %r12
ffffffff8000294b:	41 5d                	pop    %r13
ffffffff8000294d:	c3                   	retq   
ffffffff8000294e:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002950:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002953:	eb c7                	jmp    ffffffff8000291c <_ntoa_long+0x7c>
ffffffff80002955:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000295c:	00 00 00 00 

ffffffff80002960 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002960:	41 55                	push   %r13
ffffffff80002962:	41 54                	push   %r12
ffffffff80002964:	4c 89 c0             	mov    %r8,%rax
ffffffff80002967:	55                   	push   %rbp
ffffffff80002968:	53                   	push   %rbx
ffffffff80002969:	48 89 d3             	mov    %rdx,%rbx
ffffffff8000296c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80002970:	4d 85 c0             	test   %r8,%r8
{
ffffffff80002973:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80002978:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff8000297c:	75 13                	jne    ffffffff80002991 <_ntoa_long_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff8000297e:	89 ea                	mov    %ebp,%edx
ffffffff80002980:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002983:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80002989:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff8000298b:	0f 85 7f 00 00 00    	jne    ffffffff80002a10 <_ntoa_long_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002991:	89 ea                	mov    %ebp,%edx
ffffffff80002993:	83 e2 20             	and    $0x20,%edx
ffffffff80002996:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002999:	45 19 db             	sbb    %r11d,%r11d
ffffffff8000299c:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000299f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff800029a3:	41 83 c3 37          	add    $0x37,%r11d
ffffffff800029a7:	eb 0d                	jmp    ffffffff800029b6 <_ntoa_long_long+0x56>
ffffffff800029a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800029b0:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff800029b4:	77 26                	ja     ffffffff800029dc <_ntoa_long_long+0x7c>
ffffffff800029b6:	31 d2                	xor    %edx,%edx
ffffffff800029b8:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800029bb:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff800029bf:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff800029c3:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff800029c7:	44 89 ea             	mov    %r13d,%edx
ffffffff800029ca:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff800029ce:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800029d2:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800029d5:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800029da:	75 d4                	jne    ffffffff800029b0 <_ntoa_long_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff800029dc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800029e0:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff800029e4:	48 89 da             	mov    %rbx,%rdx
ffffffff800029e7:	55                   	push   %rbp
ffffffff800029e8:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff800029ec:	50                   	push   %rax
ffffffff800029ed:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff800029f1:	50                   	push   %rax
ffffffff800029f2:	41 52                	push   %r10
ffffffff800029f4:	41 51                	push   %r9
ffffffff800029f6:	4d 89 c1             	mov    %r8,%r9
ffffffff800029f9:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff800029fe:	e8 2d fa ff ff       	callq  ffffffff80002430 <_ntoa_format>
}
ffffffff80002a03:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002a07:	5b                   	pop    %rbx
ffffffff80002a08:	5d                   	pop    %rbp
ffffffff80002a09:	41 5c                	pop    %r12
ffffffff80002a0b:	41 5d                	pop    %r13
ffffffff80002a0d:	c3                   	retq   
ffffffff80002a0e:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002a10:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002a13:	eb c7                	jmp    ffffffff800029dc <_ntoa_long_long+0x7c>
ffffffff80002a15:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002a1c:	00 00 00 00 

ffffffff80002a20 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
ffffffff80002a20:	41 57                	push   %r15
ffffffff80002a22:	41 56                	push   %r14
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
ffffffff80002a24:	48 c7 c0 00 24 00 80 	mov    $0xffffffff80002400,%rax
{
ffffffff80002a2b:	41 55                	push   %r13
ffffffff80002a2d:	41 54                	push   %r12
ffffffff80002a2f:	49 89 f7             	mov    %rsi,%r15
ffffffff80002a32:	55                   	push   %rbp
ffffffff80002a33:	53                   	push   %rbx
ffffffff80002a34:	48 89 fd             	mov    %rdi,%rbp
ffffffff80002a37:	49 89 d6             	mov    %rdx,%r14
ffffffff80002a3a:	49 89 cd             	mov    %rcx,%r13
ffffffff80002a3d:	48 83 ec 38          	sub    $0x38,%rsp
    out = _out_null;
ffffffff80002a41:	48 85 f6             	test   %rsi,%rsi
ffffffff80002a44:	48 0f 44 e8          	cmove  %rax,%rbp
{
ffffffff80002a48:	4c 89 04 24          	mov    %r8,(%rsp)
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
ffffffff80002a4c:	31 db                	xor    %ebx,%ebx
  while (*format)
ffffffff80002a4e:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff80002a53:	40 84 ff             	test   %dil,%dil
ffffffff80002a56:	74 26                	je     ffffffff80002a7e <_vsnprintf+0x5e>
ffffffff80002a58:	49 83 c5 01          	add    $0x1,%r13
    if (*format != '%') {
ffffffff80002a5c:	40 80 ff 25          	cmp    $0x25,%dil
ffffffff80002a60:	74 46                	je     ffffffff80002aa8 <_vsnprintf+0x88>
      out(*format, buffer, idx++, maxlen);
ffffffff80002a62:	4c 8d 63 01          	lea    0x1(%rbx),%r12
        out(*format, buffer, idx++, maxlen);
ffffffff80002a66:	48 89 da             	mov    %rbx,%rdx
ffffffff80002a69:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002a6c:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002a6f:	ff d5                	callq  *%rbp
  while (*format)
ffffffff80002a71:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
        out(*format, buffer, idx++, maxlen);
ffffffff80002a76:	4c 89 e3             	mov    %r12,%rbx
  while (*format)
ffffffff80002a79:	40 84 ff             	test   %dil,%dil
ffffffff80002a7c:	75 da                	jne    ffffffff80002a58 <_vsnprintf+0x38>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
ffffffff80002a7e:	49 8d 56 ff          	lea    -0x1(%r14),%rdx
ffffffff80002a82:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80002a85:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002a88:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002a8b:	48 0f 42 d3          	cmovb  %rbx,%rdx
ffffffff80002a8f:	31 ff                	xor    %edi,%edi
ffffffff80002a91:	ff d5                	callq  *%rbp

  // return written chars without terminating \0
  return (int)idx;
}
ffffffff80002a93:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80002a97:	89 d8                	mov    %ebx,%eax
ffffffff80002a99:	5b                   	pop    %rbx
ffffffff80002a9a:	5d                   	pop    %rbp
ffffffff80002a9b:	41 5c                	pop    %r12
ffffffff80002a9d:	41 5d                	pop    %r13
ffffffff80002a9f:	41 5e                	pop    %r14
ffffffff80002aa1:	41 5f                	pop    %r15
ffffffff80002aa3:	c3                   	retq   
ffffffff80002aa4:	0f 1f 40 00          	nopl   0x0(%rax)
    flags = 0U;
ffffffff80002aa8:	31 c9                	xor    %ecx,%ecx
ffffffff80002aaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      switch (*format) {
ffffffff80002ab0:	41 0f be 45 00       	movsbl 0x0(%r13),%eax
ffffffff80002ab5:	49 8d 75 01          	lea    0x1(%r13),%rsi
ffffffff80002ab9:	48 89 f7             	mov    %rsi,%rdi
ffffffff80002abc:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80002abf:	80 fa 10             	cmp    $0x10,%dl
ffffffff80002ac2:	77 3c                	ja     ffffffff80002b00 <_vsnprintf+0xe0>
ffffffff80002ac4:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002ac7:	ff 24 d5 c0 4e 00 80 	jmpq   *-0x7fffb140(,%rdx,8)
ffffffff80002ace:	66 90                	xchg   %ax,%ax
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
ffffffff80002ad0:	83 c9 01             	or     $0x1,%ecx
ffffffff80002ad3:	49 89 f5             	mov    %rsi,%r13
ffffffff80002ad6:	eb d8                	jmp    ffffffff80002ab0 <_vsnprintf+0x90>
ffffffff80002ad8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002adf:	00 
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ffffffff80002ae0:	83 c9 04             	or     $0x4,%ecx
ffffffff80002ae3:	eb ee                	jmp    ffffffff80002ad3 <_vsnprintf+0xb3>
ffffffff80002ae5:	0f 1f 00             	nopl   (%rax)
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ffffffff80002ae8:	83 c9 02             	or     $0x2,%ecx
ffffffff80002aeb:	eb e6                	jmp    ffffffff80002ad3 <_vsnprintf+0xb3>
ffffffff80002aed:	0f 1f 00             	nopl   (%rax)
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ffffffff80002af0:	83 c9 10             	or     $0x10,%ecx
ffffffff80002af3:	eb de                	jmp    ffffffff80002ad3 <_vsnprintf+0xb3>
ffffffff80002af5:	0f 1f 00             	nopl   (%rax)
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ffffffff80002af8:	83 c9 08             	or     $0x8,%ecx
ffffffff80002afb:	eb d6                	jmp    ffffffff80002ad3 <_vsnprintf+0xb3>
ffffffff80002afd:	0f 1f 00             	nopl   (%rax)
  return (ch >= '0') && (ch <= '9');
ffffffff80002b00:	8d 50 d0             	lea    -0x30(%rax),%edx
    if (_is_digit(*format)) {
ffffffff80002b03:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002b06:	0f 86 54 02 00 00    	jbe    ffffffff80002d60 <_vsnprintf+0x340>
    width = 0U;
ffffffff80002b0c:	45 31 e4             	xor    %r12d,%r12d
    else if (*format == '*') {
ffffffff80002b0f:	3c 2a                	cmp    $0x2a,%al
ffffffff80002b11:	0f 84 75 07 00 00    	je     ffffffff8000328c <_vsnprintf+0x86c>
    precision = 0U;
ffffffff80002b17:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002b1a:	3c 2e                	cmp    $0x2e,%al
ffffffff80002b1c:	0f 84 73 02 00 00    	je     ffffffff80002d95 <_vsnprintf+0x375>
    switch (*format) {
ffffffff80002b22:	3c 6a                	cmp    $0x6a,%al
ffffffff80002b24:	74 12                	je     ffffffff80002b38 <_vsnprintf+0x118>
ffffffff80002b26:	0f 8e bc 02 00 00    	jle    ffffffff80002de8 <_vsnprintf+0x3c8>
ffffffff80002b2c:	3c 6c                	cmp    $0x6c,%al
ffffffff80002b2e:	74 30                	je     ffffffff80002b60 <_vsnprintf+0x140>
ffffffff80002b30:	3c 7a                	cmp    $0x7a,%al
ffffffff80002b32:	0f 85 d0 02 00 00    	jne    ffffffff80002e08 <_vsnprintf+0x3e8>
ffffffff80002b38:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002b3d:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ffffffff80002b41:	80 cd 01             	or     $0x1,%ch
    switch (*format) {
ffffffff80002b44:	8d 50 db             	lea    -0x25(%rax),%edx
ffffffff80002b47:	80 fa 53             	cmp    $0x53,%dl
ffffffff80002b4a:	0f 87 00 02 00 00    	ja     ffffffff80002d50 <_vsnprintf+0x330>
ffffffff80002b50:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002b53:	ff 24 d5 48 4f 00 80 	jmpq   *-0x7fffb0b8(,%rdx,8)
ffffffff80002b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if (*format == 'l') {
ffffffff80002b60:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002b65:	3c 6c                	cmp    $0x6c,%al
ffffffff80002b67:	0f 84 98 04 00 00    	je     ffffffff80003005 <_vsnprintf+0x5e5>
        flags |= FLAGS_LONG;
ffffffff80002b6d:	80 cd 01             	or     $0x1,%ch
ffffffff80002b70:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002b74:	eb ce                	jmp    ffffffff80002b44 <_vsnprintf+0x124>
ffffffff80002b76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002b7d:	00 00 00 
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002b80:	48 8b 34 24          	mov    (%rsp),%rsi
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
ffffffff80002b84:	83 c9 21             	or     $0x21,%ecx
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002b87:	8b 06                	mov    (%rsi),%eax
ffffffff80002b89:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80002b8c:	0f 87 45 08 00 00    	ja     ffffffff800033d7 <_vsnprintf+0x9b7>
ffffffff80002b92:	89 c2                	mov    %eax,%edx
ffffffff80002b94:	48 03 56 10          	add    0x10(%rsi),%rdx
ffffffff80002b98:	83 c0 08             	add    $0x8,%eax
ffffffff80002b9b:	89 06                	mov    %eax,(%rsi)
ffffffff80002b9d:	51                   	push   %rcx
ffffffff80002b9e:	6a 10                	pushq  $0x10
ffffffff80002ba0:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002ba3:	41 52                	push   %r10
ffffffff80002ba5:	6a 10                	pushq  $0x10
ffffffff80002ba7:	4c 8b 02             	mov    (%rdx),%r8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80002baa:	48 89 da             	mov    %rbx,%rdx
ffffffff80002bad:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002bb0:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002bb3:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002bb6:	e8 a5 fd ff ff       	callq  ffffffff80002960 <_ntoa_long_long>
ffffffff80002bbb:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002bbf:	48 89 c3             	mov    %rax,%rbx
ffffffff80002bc2:	e9 87 fe ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
ffffffff80002bc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002bce:	00 00 
ffffffff80002bd0:	4c 8d 43 01          	lea    0x1(%rbx),%r8
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002bd4:	83 e1 02             	and    $0x2,%ecx
ffffffff80002bd7:	4c 89 c0             	mov    %r8,%rax
ffffffff80002bda:	0f 84 47 04 00 00    	je     ffffffff80003027 <_vsnprintf+0x607>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002be0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002be4:	8b 16                	mov    (%rsi),%edx
ffffffff80002be6:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002be9:	0f 87 34 06 00 00    	ja     ffffffff80003223 <_vsnprintf+0x803>
ffffffff80002bef:	89 d1                	mov    %edx,%ecx
ffffffff80002bf1:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80002bf5:	83 c2 08             	add    $0x8,%edx
ffffffff80002bf8:	89 16                	mov    %edx,(%rsi)
ffffffff80002bfa:	0f be 39             	movsbl (%rcx),%edi
ffffffff80002bfd:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffffff80002c02:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002c05:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80002c0a:	48 89 da             	mov    %rbx,%rdx
ffffffff80002c0d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002c10:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002c12:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff80002c16:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80002c1b:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
ffffffff80002c20:	0f 86 e8 02 00 00    	jbe    ffffffff80002f0e <_vsnprintf+0x4ee>
ffffffff80002c26:	41 8d 4c 24 fe       	lea    -0x2(%r12),%ecx
ffffffff80002c2b:	48 83 c3 02          	add    $0x2,%rbx
ffffffff80002c2f:	48 89 c2             	mov    %rax,%rdx
ffffffff80002c32:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
ffffffff80002c37:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80002c3c:	48 01 cb             	add    %rcx,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff80002c3f:	4c 8d 62 01          	lea    0x1(%rdx),%r12
ffffffff80002c43:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002c46:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002c49:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002c4e:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002c50:	49 39 dc             	cmp    %rbx,%r12
ffffffff80002c53:	4c 89 e2             	mov    %r12,%rdx
ffffffff80002c56:	75 e7                	jne    ffffffff80002c3f <_vsnprintf+0x21f>
ffffffff80002c58:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
ffffffff80002c5d:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
        break;
ffffffff80002c62:	e9 e7 fd ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
ffffffff80002c67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002c6e:	00 00 
        out('%', buffer, idx++, maxlen);
ffffffff80002c70:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002c74:	48 89 da             	mov    %rbx,%rdx
ffffffff80002c77:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002c7a:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002c7d:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff80002c82:	4c 89 e3             	mov    %r12,%rbx
ffffffff80002c85:	ff d5                	callq  *%rbp
        break;
ffffffff80002c87:	e9 c2 fd ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
ffffffff80002c8c:	0f 1f 40 00          	nopl   0x0(%rax)
        if (*format == 'x' || *format == 'X') {
ffffffff80002c90:	89 c2                	mov    %eax,%edx
ffffffff80002c92:	83 e2 df             	and    $0xffffffdf,%edx
ffffffff80002c95:	80 fa 58             	cmp    $0x58,%dl
ffffffff80002c98:	0f 84 66 02 00 00    	je     ffffffff80002f04 <_vsnprintf+0x4e4>
        else if (*format == 'o') {
ffffffff80002c9e:	3c 6f                	cmp    $0x6f,%al
ffffffff80002ca0:	0f 84 b6 04 00 00    	je     ffffffff8000315c <_vsnprintf+0x73c>
        else if (*format == 'b') {
ffffffff80002ca6:	3c 62                	cmp    $0x62,%al
ffffffff80002ca8:	0f 84 20 05 00 00    	je     ffffffff800031ce <_vsnprintf+0x7ae>
          flags &= ~FLAGS_HASH;   // no hash for dec format
ffffffff80002cae:	83 e1 ef             	and    $0xffffffef,%ecx
ffffffff80002cb1:	bf 0a 00 00 00       	mov    $0xa,%edi
        if (*format == 'X') {
ffffffff80002cb6:	3c 58                	cmp    $0x58,%al
ffffffff80002cb8:	0f 84 3c 03 00 00    	je     ffffffff80002ffa <_vsnprintf+0x5da>
        if ((*format != 'i') && (*format != 'd')) {
ffffffff80002cbe:	3c 69                	cmp    $0x69,%al
ffffffff80002cc0:	74 08                	je     ffffffff80002cca <_vsnprintf+0x2aa>
ffffffff80002cc2:	3c 64                	cmp    $0x64,%al
ffffffff80002cc4:	0f 85 33 03 00 00    	jne    ffffffff80002ffd <_vsnprintf+0x5dd>
          flags &= ~FLAGS_ZEROPAD;
ffffffff80002cca:	89 ca                	mov    %ecx,%edx
ffffffff80002ccc:	83 e2 fe             	and    $0xfffffffe,%edx
ffffffff80002ccf:	f6 c5 04             	test   $0x4,%ch
ffffffff80002cd2:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80002cd5:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff80002cd9:	89 ce                	mov    %ecx,%esi
ffffffff80002cdb:	81 e6 00 02 00 00    	and    $0x200,%esi
        if ((*format == 'i') || (*format == 'd')) {
ffffffff80002ce1:	3c 69                	cmp    $0x69,%al
ffffffff80002ce3:	8b 12                	mov    (%rdx),%edx
ffffffff80002ce5:	0f 84 b8 02 00 00    	je     ffffffff80002fa3 <_vsnprintf+0x583>
ffffffff80002ceb:	3c 64                	cmp    $0x64,%al
ffffffff80002ced:	0f 84 b0 02 00 00    	je     ffffffff80002fa3 <_vsnprintf+0x583>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002cf3:	85 f6                	test   %esi,%esi
ffffffff80002cf5:	0f 85 38 04 00 00    	jne    ffffffff80003133 <_vsnprintf+0x713>
          else if (flags & FLAGS_LONG) {
ffffffff80002cfb:	f6 c5 01             	test   $0x1,%ch
ffffffff80002cfe:	0f 85 a1 04 00 00    	jne    ffffffff800031a5 <_vsnprintf+0x785>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002d04:	f6 c1 40             	test   $0x40,%cl
ffffffff80002d07:	0f 84 6e 04 00 00    	je     ffffffff8000317b <_vsnprintf+0x75b>
ffffffff80002d0d:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002d10:	0f 87 d2 05 00 00    	ja     ffffffff800032e8 <_vsnprintf+0x8c8>
ffffffff80002d16:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002d1a:	89 d0                	mov    %edx,%eax
ffffffff80002d1c:	83 c2 08             	add    $0x8,%edx
ffffffff80002d1f:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002d23:	89 16                	mov    %edx,(%rsi)
ffffffff80002d25:	44 0f b6 00          	movzbl (%rax),%r8d
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff80002d29:	51                   	push   %rcx
ffffffff80002d2a:	41 54                	push   %r12
ffffffff80002d2c:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002d2f:	41 52                	push   %r10
ffffffff80002d31:	57                   	push   %rdi
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002d32:	48 89 da             	mov    %rbx,%rdx
ffffffff80002d35:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002d38:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002d3b:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002d3e:	e8 5d fb ff ff       	callq  ffffffff800028a0 <_ntoa_long>
ffffffff80002d43:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002d47:	48 89 c3             	mov    %rax,%rbx
ffffffff80002d4a:	e9 ff fc ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
ffffffff80002d4f:	90                   	nop
        out(*format, buffer, idx++, maxlen);
ffffffff80002d50:	4c 8d 63 01          	lea    0x1(%rbx),%r12
    switch (*format) {
ffffffff80002d54:	0f be f8             	movsbl %al,%edi
ffffffff80002d57:	e9 0a fd ff ff       	jmpq   ffffffff80002a66 <_vsnprintf+0x46>
ffffffff80002d5c:	0f 1f 40 00          	nopl   0x0(%rax)
  unsigned int i = 0U;
ffffffff80002d60:	45 31 e4             	xor    %r12d,%r12d
ffffffff80002d63:	eb 0a                	jmp    ffffffff80002d6f <_vsnprintf+0x34f>
ffffffff80002d65:	0f 1f 00             	nopl   (%rax)
  while (_is_digit(**str)) {
ffffffff80002d68:	49 89 f5             	mov    %rsi,%r13
ffffffff80002d6b:	48 83 c6 01          	add    $0x1,%rsi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002d6f:	43 8d 14 a4          	lea    (%r12,%r12,4),%edx
ffffffff80002d73:	44 8d 64 50 d0       	lea    -0x30(%rax,%rdx,2),%r12d
  while (_is_digit(**str)) {
ffffffff80002d78:	0f be 06             	movsbl (%rsi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002d7b:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002d7e:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002d81:	76 e5                	jbe    ffffffff80002d68 <_vsnprintf+0x348>
ffffffff80002d83:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80002d87:	49 89 f5             	mov    %rsi,%r13
    precision = 0U;
ffffffff80002d8a:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002d8d:	3c 2e                	cmp    $0x2e,%al
ffffffff80002d8f:	0f 85 8d fd ff ff    	jne    ffffffff80002b22 <_vsnprintf+0x102>
      if (_is_digit(*format)) {
ffffffff80002d95:	41 0f be 45 01       	movsbl 0x1(%r13),%eax
      flags |= FLAGS_PRECISION;
ffffffff80002d9a:	80 cd 04             	or     $0x4,%ch
  return (ch >= '0') && (ch <= '9');
ffffffff80002d9d:	8d 50 d0             	lea    -0x30(%rax),%edx
      if (_is_digit(*format)) {
ffffffff80002da0:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002da3:	76 1e                	jbe    ffffffff80002dc3 <_vsnprintf+0x3a3>
      else if (*format == '*') {
ffffffff80002da5:	3c 2a                	cmp    $0x2a,%al
ffffffff80002da7:	0f 84 3f 06 00 00    	je     ffffffff800033ec <_vsnprintf+0x9cc>
      format++;
ffffffff80002dad:	49 89 fd             	mov    %rdi,%r13
      else if (*format == '*') {
ffffffff80002db0:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80002db4:	e9 69 fd ff ff       	jmpq   ffffffff80002b22 <_vsnprintf+0x102>
ffffffff80002db9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  while (_is_digit(**str)) {
ffffffff80002dc0:	4c 89 ef             	mov    %r13,%rdi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002dc3:	43 8d 14 92          	lea    (%r10,%r10,4),%edx
ffffffff80002dc7:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002dcb:	44 8d 54 50 d0       	lea    -0x30(%rax,%rdx,2),%r10d
  while (_is_digit(**str)) {
ffffffff80002dd0:	0f be 47 01          	movsbl 0x1(%rdi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002dd4:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002dd7:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002dda:	76 e4                	jbe    ffffffff80002dc0 <_vsnprintf+0x3a0>
ffffffff80002ddc:	48 83 c7 02          	add    $0x2,%rdi
ffffffff80002de0:	e9 3d fd ff ff       	jmpq   ffffffff80002b22 <_vsnprintf+0x102>
ffffffff80002de5:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002de8:	3c 68                	cmp    $0x68,%al
ffffffff80002dea:	75 1c                	jne    ffffffff80002e08 <_vsnprintf+0x3e8>
        if (*format == 'h') {
ffffffff80002dec:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002df1:	3c 68                	cmp    $0x68,%al
ffffffff80002df3:	0f 84 1d 02 00 00    	je     ffffffff80003016 <_vsnprintf+0x5f6>
        flags |= FLAGS_SHORT;
ffffffff80002df9:	80 c9 80             	or     $0x80,%cl
ffffffff80002dfc:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002e00:	e9 3f fd ff ff       	jmpq   ffffffff80002b44 <_vsnprintf+0x124>
ffffffff80002e05:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002e08:	49 89 fd             	mov    %rdi,%r13
ffffffff80002e0b:	e9 34 fd ff ff       	jmpq   ffffffff80002b44 <_vsnprintf+0x124>
        const char* p = va_arg(va, char*);
ffffffff80002e10:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e14:	8b 16                	mov    (%rsi),%edx
ffffffff80002e16:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002e19:	0f 87 2e 04 00 00    	ja     ffffffff8000324d <_vsnprintf+0x82d>
ffffffff80002e1f:	89 d0                	mov    %edx,%eax
ffffffff80002e21:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002e25:	83 c2 08             	add    $0x8,%edx
ffffffff80002e28:	89 16                	mov    %edx,(%rsi)
ffffffff80002e2a:	4c 8b 08             	mov    (%rax),%r9
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80002e2d:	45 85 d2             	test   %r10d,%r10d
ffffffff80002e30:	41 0f be 39          	movsbl (%r9),%edi
ffffffff80002e34:	0f 85 54 01 00 00    	jne    ffffffff80002f8e <_vsnprintf+0x56e>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002e3a:	40 84 ff             	test   %dil,%dil
ffffffff80002e3d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80002e44:	0f 84 b8 03 00 00    	je     ffffffff80003202 <_vsnprintf+0x7e2>
ffffffff80002e4a:	4c 89 c8             	mov    %r9,%rax
ffffffff80002e4d:	eb 11                	jmp    ffffffff80002e60 <_vsnprintf+0x440>
ffffffff80002e4f:	90                   	nop
ffffffff80002e50:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002e55:	48 29 c2             	sub    %rax,%rdx
ffffffff80002e58:	4c 01 ca             	add    %r9,%rdx
ffffffff80002e5b:	48 01 f2             	add    %rsi,%rdx
ffffffff80002e5e:	74 09                	je     ffffffff80002e69 <_vsnprintf+0x449>
ffffffff80002e60:	48 83 c0 01          	add    $0x1,%rax
ffffffff80002e64:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff80002e67:	75 e7                	jne    ffffffff80002e50 <_vsnprintf+0x430>
ffffffff80002e69:	44 29 c8             	sub    %r9d,%eax
ffffffff80002e6c:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (flags & FLAGS_PRECISION) {
ffffffff80002e70:	89 c8                	mov    %ecx,%eax
ffffffff80002e72:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80002e77:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff80002e7b:	74 0f                	je     ffffffff80002e8c <_vsnprintf+0x46c>
          l = (l < precision ? l : precision);
ffffffff80002e7d:	8b 44 24 20          	mov    0x20(%rsp),%eax
ffffffff80002e81:	44 39 d0             	cmp    %r10d,%eax
ffffffff80002e84:	41 0f 47 c2          	cmova  %r10d,%eax
ffffffff80002e88:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002e8c:	83 e1 02             	and    $0x2,%ecx
ffffffff80002e8f:	89 4c 24 24          	mov    %ecx,0x24(%rsp)
ffffffff80002e93:	0f 84 0e 02 00 00    	je     ffffffff800030a7 <_vsnprintf+0x687>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002e99:	40 84 ff             	test   %dil,%dil
ffffffff80002e9c:	0f 84 94 00 00 00    	je     ffffffff80002f36 <_vsnprintf+0x516>
ffffffff80002ea2:	49 29 d9             	sub    %rbx,%r9
ffffffff80002ea5:	44 89 64 24 28       	mov    %r12d,0x28(%rsp)
ffffffff80002eaa:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff80002eaf:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
ffffffff80002eb4:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80002eb9:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
ffffffff80002ebe:	49 89 dd             	mov    %rbx,%r13
ffffffff80002ec1:	eb 27                	jmp    ffffffff80002eea <_vsnprintf+0x4ca>
ffffffff80002ec3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002ec8:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002ecb:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002ece:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002ed1:	ff d5                	callq  *%rbp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002ed3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002ed8:	49 8d 5d 01          	lea    0x1(%r13),%rbx
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002edc:	41 0f be 7c 05 01    	movsbl 0x1(%r13,%rax,1),%edi
ffffffff80002ee2:	40 84 ff             	test   %dil,%dil
ffffffff80002ee5:	74 39                	je     ffffffff80002f20 <_vsnprintf+0x500>
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002ee7:	49 89 dd             	mov    %rbx,%r13
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002eea:	45 85 e4             	test   %r12d,%r12d
ffffffff80002eed:	74 d9                	je     ffffffff80002ec8 <_vsnprintf+0x4a8>
ffffffff80002eef:	8b 44 24 10          	mov    0x10(%rsp),%eax
ffffffff80002ef3:	85 c0                	test   %eax,%eax
ffffffff80002ef5:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002ef8:	0f 84 68 02 00 00    	je     ffffffff80003166 <_vsnprintf+0x746>
ffffffff80002efe:	89 54 24 10          	mov    %edx,0x10(%rsp)
ffffffff80002f02:	eb c4                	jmp    ffffffff80002ec8 <_vsnprintf+0x4a8>
ffffffff80002f04:	bf 10 00 00 00       	mov    $0x10,%edi
ffffffff80002f09:	e9 a8 fd ff ff       	jmpq   ffffffff80002cb6 <_vsnprintf+0x296>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002f0e:	4c 89 c3             	mov    %r8,%rbx
ffffffff80002f11:	e9 38 fb ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
ffffffff80002f16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002f1d:	00 00 00 
ffffffff80002f20:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff80002f25:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
        if (flags & FLAGS_LEFT) {
ffffffff80002f2a:	8b 44 24 24          	mov    0x24(%rsp),%eax
ffffffff80002f2e:	85 c0                	test   %eax,%eax
ffffffff80002f30:	0f 84 18 fb ff ff    	je     ffffffff80002a4e <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80002f36:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff80002f3a:	41 39 cc             	cmp    %ecx,%r12d
ffffffff80002f3d:	0f 86 0b fb ff ff    	jbe    ffffffff80002a4e <_vsnprintf+0x2e>
ffffffff80002f43:	41 83 ec 01          	sub    $0x1,%r12d
ffffffff80002f47:	48 89 da             	mov    %rbx,%rdx
ffffffff80002f4a:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff80002f4f:	44 89 e0             	mov    %r12d,%eax
ffffffff80002f52:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002f56:	29 c8                	sub    %ecx,%eax
ffffffff80002f58:	4c 01 e0             	add    %r12,%rax
ffffffff80002f5b:	4d 89 e5             	mov    %r12,%r13
ffffffff80002f5e:	48 89 c3             	mov    %rax,%rbx
ffffffff80002f61:	eb 09                	jmp    ffffffff80002f6c <_vsnprintf+0x54c>
ffffffff80002f63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80002f68:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80002f6c:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002f6f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002f72:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002f77:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002f79:	49 39 dd             	cmp    %rbx,%r13
ffffffff80002f7c:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002f7f:	75 e7                	jne    ffffffff80002f68 <_vsnprintf+0x548>
ffffffff80002f81:	4c 89 eb             	mov    %r13,%rbx
ffffffff80002f84:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
        break;
ffffffff80002f89:	e9 c0 fa ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002f8e:	40 84 ff             	test   %dil,%dil
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80002f91:	44 89 d6             	mov    %r10d,%esi
  for (s = str; *s && maxsize--; ++s);
ffffffff80002f94:	0f 84 68 02 00 00    	je     ffffffff80003202 <_vsnprintf+0x7e2>
ffffffff80002f9a:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff80002f9e:	e9 a7 fe ff ff       	jmpq   ffffffff80002e4a <_vsnprintf+0x42a>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002fa3:	85 f6                	test   %esi,%esi
ffffffff80002fa5:	0f 85 bd 03 00 00    	jne    ffffffff80003368 <_vsnprintf+0x948>
          else if (flags & FLAGS_LONG) {
ffffffff80002fab:	f6 c5 01             	test   $0x1,%ch
ffffffff80002fae:	0f 85 7e 03 00 00    	jne    ffffffff80003332 <_vsnprintf+0x912>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002fb4:	f6 c1 40             	test   $0x40,%cl
ffffffff80002fb7:	0f 84 1b 02 00 00    	je     ffffffff800031d8 <_vsnprintf+0x7b8>
ffffffff80002fbd:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002fc0:	0f 87 b1 02 00 00    	ja     ffffffff80003277 <_vsnprintf+0x857>
ffffffff80002fc6:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002fca:	89 d0                	mov    %edx,%eax
ffffffff80002fcc:	83 c2 08             	add    $0x8,%edx
ffffffff80002fcf:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002fd3:	89 16                	mov    %edx,(%rsi)
ffffffff80002fd5:	44 0f be 08          	movsbl (%rax),%r9d
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002fd9:	44 89 c8             	mov    %r9d,%eax
ffffffff80002fdc:	51                   	push   %rcx
ffffffff80002fdd:	41 54                	push   %r12
ffffffff80002fdf:	c1 f8 1f             	sar    $0x1f,%eax
ffffffff80002fe2:	41 52                	push   %r10
ffffffff80002fe4:	57                   	push   %rdi
ffffffff80002fe5:	41 89 c0             	mov    %eax,%r8d
ffffffff80002fe8:	45 31 c8             	xor    %r9d,%r8d
ffffffff80002feb:	41 c1 e9 1f          	shr    $0x1f,%r9d
ffffffff80002fef:	41 29 c0             	sub    %eax,%r8d
ffffffff80002ff2:	4d 63 c0             	movslq %r8d,%r8
ffffffff80002ff5:	e9 38 fd ff ff       	jmpq   ffffffff80002d32 <_vsnprintf+0x312>
          flags |= FLAGS_UPPERCASE;
ffffffff80002ffa:	83 c9 20             	or     $0x20,%ecx
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ffffffff80002ffd:	83 e1 f3             	and    $0xfffffff3,%ecx
ffffffff80003000:	e9 c5 fc ff ff       	jmpq   ffffffff80002cca <_vsnprintf+0x2aa>
ffffffff80003005:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_LONG_LONG;
ffffffff8000300a:	80 cd 03             	or     $0x3,%ch
ffffffff8000300d:	49 83 c5 03          	add    $0x3,%r13
ffffffff80003011:	e9 2e fb ff ff       	jmpq   ffffffff80002b44 <_vsnprintf+0x124>
ffffffff80003016:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_CHAR;
ffffffff8000301b:	80 c9 c0             	or     $0xc0,%cl
ffffffff8000301e:	49 83 c5 03          	add    $0x3,%r13
ffffffff80003022:	e9 1d fb ff ff       	jmpq   ffffffff80002b44 <_vsnprintf+0x124>
          while (l++ < width) {
ffffffff80003027:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff8000302b:	0f 86 de 01 00 00    	jbe    ffffffff8000320f <_vsnprintf+0x7ef>
ffffffff80003031:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
ffffffff80003036:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
ffffffff8000303b:	4d 89 c5             	mov    %r8,%r13
ffffffff8000303e:	4c 01 c0             	add    %r8,%rax
ffffffff80003041:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80003046:	eb 0f                	jmp    ffffffff80003057 <_vsnprintf+0x637>
ffffffff80003048:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000304f:	00 
ffffffff80003050:	4c 89 eb             	mov    %r13,%rbx
ffffffff80003053:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80003057:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000305a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000305d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003060:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003065:	4d 89 ec             	mov    %r13,%r12
ffffffff80003068:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff8000306a:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff8000306f:	75 df                	jne    ffffffff80003050 <_vsnprintf+0x630>
ffffffff80003071:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
ffffffff80003076:	48 83 c3 02          	add    $0x2,%rbx
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000307a:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff8000307e:	8b 01                	mov    (%rcx),%eax
ffffffff80003080:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80003083:	0f 87 d9 01 00 00    	ja     ffffffff80003262 <_vsnprintf+0x842>
ffffffff80003089:	89 c2                	mov    %eax,%edx
ffffffff8000308b:	48 03 51 10          	add    0x10(%rcx),%rdx
ffffffff8000308f:	83 c0 08             	add    $0x8,%eax
ffffffff80003092:	89 01                	mov    %eax,(%rcx)
ffffffff80003094:	0f be 3a             	movsbl (%rdx),%edi
ffffffff80003097:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000309a:	4c 89 e2             	mov    %r12,%rdx
ffffffff8000309d:	4c 89 fe             	mov    %r15,%rsi
ffffffff800030a0:	ff d5                	callq  *%rbp
ffffffff800030a2:	e9 a7 f9 ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff800030a7:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff800030ab:	41 39 cc             	cmp    %ecx,%r12d
ffffffff800030ae:	8d 41 01             	lea    0x1(%rcx),%eax
ffffffff800030b1:	0f 86 63 01 00 00    	jbe    ffffffff8000321a <_vsnprintf+0x7fa>
ffffffff800030b7:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
ffffffff800030bc:	4c 8d 43 01          	lea    0x1(%rbx),%r8
ffffffff800030c0:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
ffffffff800030c5:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
ffffffff800030ca:	48 89 da             	mov    %rbx,%rdx
ffffffff800030cd:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff800030d2:	29 c8                	sub    %ecx,%eax
ffffffff800030d4:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff800030d9:	4d 89 c5             	mov    %r8,%r13
ffffffff800030dc:	4c 01 c0             	add    %r8,%rax
ffffffff800030df:	49 89 c4             	mov    %rax,%r12
ffffffff800030e2:	eb 08                	jmp    ffffffff800030ec <_vsnprintf+0x6cc>
ffffffff800030e4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff800030e8:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff800030ec:	4c 89 f1             	mov    %r14,%rcx
ffffffff800030ef:	4c 89 fe             	mov    %r15,%rsi
ffffffff800030f2:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800030f7:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff800030f9:	4d 39 e5             	cmp    %r12,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff800030fc:	4c 89 eb             	mov    %r13,%rbx
ffffffff800030ff:	4c 89 ea             	mov    %r13,%rdx
          while (l++ < width) {
ffffffff80003102:	75 e4                	jne    ffffffff800030e8 <_vsnprintf+0x6c8>
ffffffff80003104:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
ffffffff80003109:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
ffffffff8000310e:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
ffffffff80003113:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffffff80003118:	41 0f be 39          	movsbl (%r9),%edi
ffffffff8000311c:	41 8d 44 24 01       	lea    0x1(%r12),%eax
ffffffff80003121:	89 44 24 20          	mov    %eax,0x20(%rsp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003125:	40 84 ff             	test   %dil,%dil
ffffffff80003128:	0f 85 74 fd ff ff    	jne    ffffffff80002ea2 <_vsnprintf+0x482>
ffffffff8000312e:	e9 1b f9 ff ff       	jmpq   ffffffff80002a4e <_vsnprintf+0x2e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80003133:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003136:	0f 87 97 01 00 00    	ja     ffffffff800032d3 <_vsnprintf+0x8b3>
ffffffff8000313c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003140:	89 d0                	mov    %edx,%eax
ffffffff80003142:	83 c2 08             	add    $0x8,%edx
ffffffff80003145:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003149:	89 16                	mov    %edx,(%rsi)
ffffffff8000314b:	51                   	push   %rcx
ffffffff8000314c:	45 31 c9             	xor    %r9d,%r9d
ffffffff8000314f:	41 54                	push   %r12
ffffffff80003151:	41 52                	push   %r10
ffffffff80003153:	57                   	push   %rdi
ffffffff80003154:	4c 8b 00             	mov    (%rax),%r8
ffffffff80003157:	e9 4e fa ff ff       	jmpq   ffffffff80002baa <_vsnprintf+0x18a>
ffffffff8000315c:	bf 08 00 00 00       	mov    $0x8,%edi
ffffffff80003161:	e9 97 fe ff ff       	jmpq   ffffffff80002ffd <_vsnprintf+0x5dd>
ffffffff80003166:	4c 89 e8             	mov    %r13,%rax
ffffffff80003169:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff8000316e:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
ffffffff80003173:	48 89 c3             	mov    %rax,%rbx
ffffffff80003176:	e9 af fd ff ff       	jmpq   ffffffff80002f2a <_vsnprintf+0x50a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000317b:	f6 c1 80             	test   $0x80,%cl
ffffffff8000317e:	0f 84 8e 01 00 00    	je     ffffffff80003312 <_vsnprintf+0x8f2>
ffffffff80003184:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003187:	0f 87 70 01 00 00    	ja     ffffffff800032fd <_vsnprintf+0x8dd>
ffffffff8000318d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003191:	89 d0                	mov    %edx,%eax
ffffffff80003193:	83 c2 08             	add    $0x8,%edx
ffffffff80003196:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000319a:	89 16                	mov    %edx,(%rsi)
ffffffff8000319c:	44 0f b7 00          	movzwl (%rax),%r8d
ffffffff800031a0:	e9 84 fb ff ff       	jmpq   ffffffff80002d29 <_vsnprintf+0x309>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff800031a5:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800031a8:	0f 87 8a 00 00 00    	ja     ffffffff80003238 <_vsnprintf+0x818>
ffffffff800031ae:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800031b2:	89 d0                	mov    %edx,%eax
ffffffff800031b4:	83 c2 08             	add    $0x8,%edx
ffffffff800031b7:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800031bb:	89 16                	mov    %edx,(%rsi)
ffffffff800031bd:	51                   	push   %rcx
ffffffff800031be:	45 31 c9             	xor    %r9d,%r9d
ffffffff800031c1:	41 54                	push   %r12
ffffffff800031c3:	41 52                	push   %r10
ffffffff800031c5:	57                   	push   %rdi
ffffffff800031c6:	4c 8b 00             	mov    (%rax),%r8
ffffffff800031c9:	e9 64 fb ff ff       	jmpq   ffffffff80002d32 <_vsnprintf+0x312>
ffffffff800031ce:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff800031d3:	e9 25 fe ff ff       	jmpq   ffffffff80002ffd <_vsnprintf+0x5dd>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff800031d8:	f6 c1 80             	test   $0x80,%cl
ffffffff800031db:	0f 84 56 02 00 00    	je     ffffffff80003437 <_vsnprintf+0xa17>
ffffffff800031e1:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800031e4:	0f 87 38 02 00 00    	ja     ffffffff80003422 <_vsnprintf+0xa02>
ffffffff800031ea:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800031ee:	89 d0                	mov    %edx,%eax
ffffffff800031f0:	83 c2 08             	add    $0x8,%edx
ffffffff800031f3:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800031f7:	89 16                	mov    %edx,(%rsi)
ffffffff800031f9:	44 0f bf 08          	movswl (%rax),%r9d
ffffffff800031fd:	e9 d7 fd ff ff       	jmpq   ffffffff80002fd9 <_vsnprintf+0x5b9>
  for (s = str; *s && maxsize--; ++s);
ffffffff80003202:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
ffffffff80003209:	00 
ffffffff8000320a:	e9 61 fc ff ff       	jmpq   ffffffff80002e70 <_vsnprintf+0x450>
          while (l++ < width) {
ffffffff8000320f:	49 89 dc             	mov    %rbx,%r12
ffffffff80003212:	4c 89 c3             	mov    %r8,%rbx
ffffffff80003215:	e9 60 fe ff ff       	jmpq   ffffffff8000307a <_vsnprintf+0x65a>
          while (l++ < width) {
ffffffff8000321a:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff8000321e:	e9 02 ff ff ff       	jmpq   ffffffff80003125 <_vsnprintf+0x705>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003223:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003227:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff8000322b:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff8000322f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003233:	e9 c2 f9 ff ff       	jmpq   ffffffff80002bfa <_vsnprintf+0x1da>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80003238:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000323c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003240:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003244:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003248:	e9 70 ff ff ff       	jmpq   ffffffff800031bd <_vsnprintf+0x79d>
        const char* p = va_arg(va, char*);
ffffffff8000324d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003251:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003255:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003259:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000325d:	e9 c8 fb ff ff       	jmpq   ffffffff80002e2a <_vsnprintf+0x40a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003262:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff80003266:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff8000326a:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff8000326e:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80003272:	e9 1d fe ff ff       	jmpq   ffffffff80003094 <_vsnprintf+0x674>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003277:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000327b:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000327f:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003283:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003287:	e9 49 fd ff ff       	jmpq   ffffffff80002fd5 <_vsnprintf+0x5b5>
      const int w = va_arg(va, int);
ffffffff8000328c:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80003290:	8b 17                	mov    (%rdi),%edx
ffffffff80003292:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003295:	77 2a                	ja     ffffffff800032c1 <_vsnprintf+0x8a1>
ffffffff80003297:	89 d0                	mov    %edx,%eax
ffffffff80003299:	48 03 47 10          	add    0x10(%rdi),%rax
ffffffff8000329d:	83 c2 08             	add    $0x8,%edx
ffffffff800032a0:	89 17                	mov    %edx,(%rdi)
ffffffff800032a2:	44 8b 20             	mov    (%rax),%r12d
      if (w < 0) {
ffffffff800032a5:	45 85 e4             	test   %r12d,%r12d
ffffffff800032a8:	79 06                	jns    ffffffff800032b0 <_vsnprintf+0x890>
        flags |= FLAGS_LEFT;    // reverse padding
ffffffff800032aa:	83 c9 02             	or     $0x2,%ecx
        width = (unsigned int)-w;
ffffffff800032ad:	41 f7 dc             	neg    %r12d
ffffffff800032b0:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff800032b5:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff800032b9:	49 89 f5             	mov    %rsi,%r13
ffffffff800032bc:	e9 c9 fa ff ff       	jmpq   ffffffff80002d8a <_vsnprintf+0x36a>
      const int w = va_arg(va, int);
ffffffff800032c1:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff800032c5:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff800032c9:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800032cd:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff800032d1:	eb cf                	jmp    ffffffff800032a2 <_vsnprintf+0x882>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff800032d3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032d7:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800032db:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800032df:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800032e3:	e9 63 fe ff ff       	jmpq   ffffffff8000314b <_vsnprintf+0x72b>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff800032e8:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032ec:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800032f0:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800032f4:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800032f8:	e9 28 fa ff ff       	jmpq   ffffffff80002d25 <_vsnprintf+0x305>
ffffffff800032fd:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003301:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003305:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003309:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000330d:	e9 8a fe ff ff       	jmpq   ffffffff8000319c <_vsnprintf+0x77c>
ffffffff80003312:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003315:	0f 87 83 00 00 00    	ja     ffffffff8000339e <_vsnprintf+0x97e>
ffffffff8000331b:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000331f:	89 d0                	mov    %edx,%eax
ffffffff80003321:	83 c2 08             	add    $0x8,%edx
ffffffff80003324:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003328:	89 16                	mov    %edx,(%rsi)
ffffffff8000332a:	44 8b 00             	mov    (%rax),%r8d
ffffffff8000332d:	e9 f7 f9 ff ff       	jmpq   ffffffff80002d29 <_vsnprintf+0x309>
            const long value = va_arg(va, long);
ffffffff80003332:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003335:	77 7c                	ja     ffffffff800033b3 <_vsnprintf+0x993>
ffffffff80003337:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000333b:	89 d0                	mov    %edx,%eax
ffffffff8000333d:	83 c2 08             	add    $0x8,%edx
ffffffff80003340:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003344:	89 16                	mov    %edx,(%rsi)
ffffffff80003346:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80003349:	51                   	push   %rcx
ffffffff8000334a:	41 54                	push   %r12
ffffffff8000334c:	41 52                	push   %r10
ffffffff8000334e:	57                   	push   %rdi
ffffffff8000334f:	4c 89 c8             	mov    %r9,%rax
ffffffff80003352:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff80003356:	49 89 c0             	mov    %rax,%r8
ffffffff80003359:	4d 31 c8             	xor    %r9,%r8
ffffffff8000335c:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003360:	49 29 c0             	sub    %rax,%r8
ffffffff80003363:	e9 ca f9 ff ff       	jmpq   ffffffff80002d32 <_vsnprintf+0x312>
            const long long value = va_arg(va, long long);
ffffffff80003368:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff8000336b:	77 58                	ja     ffffffff800033c5 <_vsnprintf+0x9a5>
ffffffff8000336d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003371:	89 d0                	mov    %edx,%eax
ffffffff80003373:	83 c2 08             	add    $0x8,%edx
ffffffff80003376:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000337a:	89 16                	mov    %edx,(%rsi)
ffffffff8000337c:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff8000337f:	51                   	push   %rcx
ffffffff80003380:	41 54                	push   %r12
ffffffff80003382:	41 52                	push   %r10
ffffffff80003384:	57                   	push   %rdi
ffffffff80003385:	4c 89 c8             	mov    %r9,%rax
ffffffff80003388:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8000338c:	49 89 c0             	mov    %rax,%r8
ffffffff8000338f:	4d 31 c8             	xor    %r9,%r8
ffffffff80003392:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003396:	49 29 c0             	sub    %rax,%r8
ffffffff80003399:	e9 0c f8 ff ff       	jmpq   ffffffff80002baa <_vsnprintf+0x18a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000339e:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033a2:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033a6:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033aa:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800033ae:	e9 77 ff ff ff       	jmpq   ffffffff8000332a <_vsnprintf+0x90a>
            const long value = va_arg(va, long);
ffffffff800033b3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033b7:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033bb:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033bf:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800033c3:	eb 81                	jmp    ffffffff80003346 <_vsnprintf+0x926>
            const long long value = va_arg(va, long long);
ffffffff800033c5:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033c9:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033cd:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033d1:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800033d5:	eb a5                	jmp    ffffffff8000337c <_vsnprintf+0x95c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff800033d7:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033db:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff800033df:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff800033e3:	48 89 46 08          	mov    %rax,0x8(%rsi)
ffffffff800033e7:	e9 b1 f7 ff ff       	jmpq   ffffffff80002b9d <_vsnprintf+0x17d>
        const int prec = (int)va_arg(va, int);
ffffffff800033ec:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033f0:	8b 16                	mov    (%rsi),%edx
ffffffff800033f2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800033f5:	77 5c                	ja     ffffffff80003453 <_vsnprintf+0xa33>
ffffffff800033f7:	89 d0                	mov    %edx,%eax
ffffffff800033f9:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800033fd:	83 c2 08             	add    $0x8,%edx
ffffffff80003400:	89 16                	mov    %edx,(%rsi)
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff80003402:	8b 10                	mov    (%rax),%edx
ffffffff80003404:	41 ba 00 00 00 00    	mov    $0x0,%r10d
ffffffff8000340a:	49 8d 7d 03          	lea    0x3(%r13),%rdi
ffffffff8000340e:	85 d2                	test   %edx,%edx
ffffffff80003410:	44 0f 49 10          	cmovns (%rax),%r10d
ffffffff80003414:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
        format++;
ffffffff80003419:	49 83 c5 02          	add    $0x2,%r13
ffffffff8000341d:	e9 00 f7 ff ff       	jmpq   ffffffff80002b22 <_vsnprintf+0x102>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003422:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003426:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000342a:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000342e:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003432:	e9 c2 fd ff ff       	jmpq   ffffffff800031f9 <_vsnprintf+0x7d9>
ffffffff80003437:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff8000343a:	77 29                	ja     ffffffff80003465 <_vsnprintf+0xa45>
ffffffff8000343c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003440:	89 d0                	mov    %edx,%eax
ffffffff80003442:	83 c2 08             	add    $0x8,%edx
ffffffff80003445:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003449:	89 16                	mov    %edx,(%rsi)
ffffffff8000344b:	44 8b 08             	mov    (%rax),%r9d
ffffffff8000344e:	e9 86 fb ff ff       	jmpq   ffffffff80002fd9 <_vsnprintf+0x5b9>
        const int prec = (int)va_arg(va, int);
ffffffff80003453:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003457:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000345b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000345f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003463:	eb 9d                	jmp    ffffffff80003402 <_vsnprintf+0x9e2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003465:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003469:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000346d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003471:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003475:	eb d4                	jmp    ffffffff8000344b <_vsnprintf+0xa2b>
ffffffff80003477:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000347e:	00 00 

ffffffff80003480 <_out_char>:
  if (character) {
ffffffff80003480:	40 84 ff             	test   %dil,%dil
ffffffff80003483:	75 0b                	jne    ffffffff80003490 <_out_char+0x10>
}
ffffffff80003485:	f3 c3                	repz retq 
ffffffff80003487:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000348e:	00 00 
    _putchar(character);
ffffffff80003490:	40 0f be ff          	movsbl %dil,%edi
ffffffff80003494:	e9 c7 01 00 00       	jmpq   ffffffff80003660 <_putchar>
ffffffff80003499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800034a0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
ffffffff800034a0:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff800034a4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff800034a9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
ffffffff800034ae:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800034b3:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
ffffffff800034b8:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff800034bd:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  va_start(va, format);
ffffffff800034c2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800034c7:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
{
ffffffff800034cc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800034d1:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff800034d8:	48 89 f9             	mov    %rdi,%rcx
ffffffff800034db:	48 c7 c7 80 34 00 80 	mov    $0xffffffff80003480,%rdi
{
ffffffff800034e2:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff800034e7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
ffffffff800034ee:	00 
ffffffff800034ef:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800034f4:	e8 27 f5 ff ff       	callq  ffffffff80002a20 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff800034f9:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800034fd:	c3                   	retq   
ffffffff800034fe:	66 90                	xchg   %ax,%ax

ffffffff80003500 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
ffffffff80003500:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003504:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003509:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000350e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80003513:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffffff80003518:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000351d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff80003524:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003529:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000352e:	48 89 f1             	mov    %rsi,%rcx
ffffffff80003531:	48 89 fe             	mov    %rdi,%rsi
ffffffff80003534:	48 c7 c7 f0 23 00 80 	mov    $0xffffffff800023f0,%rdi
{
ffffffff8000353b:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003540:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff80003547:	00 
ffffffff80003548:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000354d:	e8 ce f4 ff ff       	callq  ffffffff80002a20 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80003552:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80003556:	c3                   	retq   
ffffffff80003557:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000355e:	00 00 

ffffffff80003560 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
ffffffff80003560:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003564:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003569:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff8000356e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80003573:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003578:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000357b:	48 89 f2             	mov    %rsi,%rdx
  va_start(va, format);
ffffffff8000357e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003583:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003588:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000358b:	48 c7 c7 f0 23 00 80 	mov    $0xffffffff800023f0,%rdi
{
ffffffff80003592:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003597:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%rsp)
ffffffff8000359e:	00 
ffffffff8000359f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff800035a4:	e8 77 f4 ff ff       	callq  ffffffff80002a20 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff800035a9:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800035ad:	c3                   	retq   
ffffffff800035ae:	66 90                	xchg   %ax,%ax

ffffffff800035b0 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
ffffffff800035b0:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800035b4:	49 89 f0             	mov    %rsi,%r8
ffffffff800035b7:	48 89 f9             	mov    %rdi,%rcx
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800035ba:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
ffffffff800035bf:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff800035c6:	48 c7 c7 80 34 00 80 	mov    $0xffffffff80003480,%rdi
ffffffff800035cd:	e8 4e f4 ff ff       	callq  ffffffff80002a20 <_vsnprintf>
}
ffffffff800035d2:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800035d6:	c3                   	retq   
ffffffff800035d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800035de:	00 00 

ffffffff800035e0 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
ffffffff800035e0:	49 89 c8             	mov    %rcx,%r8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff800035e3:	48 89 d1             	mov    %rdx,%rcx
ffffffff800035e6:	48 89 f2             	mov    %rsi,%rdx
ffffffff800035e9:	48 89 fe             	mov    %rdi,%rsi
ffffffff800035ec:	48 c7 c7 f0 23 00 80 	mov    $0xffffffff800023f0,%rdi
ffffffff800035f3:	e9 28 f4 ff ff       	jmpq   ffffffff80002a20 <_vsnprintf>
ffffffff800035f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800035ff:	00 

ffffffff80003600 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
ffffffff80003600:	48 83 ec 68          	sub    $0x68,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003604:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
{
ffffffff80003609:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff8000360e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003613:	4c 8d 44 24 18       	lea    0x18(%rsp),%r8
ffffffff80003618:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
{
ffffffff8000361d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  va_start(va, format);
ffffffff80003622:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff80003627:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff8000362c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003631:	48 89 d1             	mov    %rdx,%rcx
ffffffff80003634:	48 c7 c7 10 24 00 80 	mov    $0xffffffff80002410,%rdi
ffffffff8000363b:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff80003642:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
  va_start(va, format);
ffffffff80003647:	c7 44 24 18 18 00 00 	movl   $0x18,0x18(%rsp)
ffffffff8000364e:	00 
ffffffff8000364f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003654:	e8 c7 f3 ff ff       	callq  ffffffff80002a20 <_vsnprintf>
  va_end(va);
  return ret;
ffffffff80003659:	48 83 c4 68          	add    $0x68,%rsp
ffffffff8000365d:	c3                   	retq   
ffffffff8000365e:	66 90                	xchg   %ax,%ax

ffffffff80003660 <_putchar>:
#include "../device/console/console.h"

void _putchar(char character)
{
    
    putchar(character);
ffffffff80003660:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80003664:	e9 a7 e3 ff ff       	jmpq   ffffffff80001a10 <putchar>
ffffffff80003669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003670 <serial_printf>:
    
    //serial_write(0x3F8, character);
}

void serial_printf(uint16_t port, const char* format, ...)
{
ffffffff80003670:	53                   	push   %rbx
ffffffff80003671:	89 fb                	mov    %edi,%ebx
ffffffff80003673:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    char buffer[64];

    va_list argptr;
    va_start(argptr, format);
ffffffff8000367a:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
ffffffff80003681:	00 
{
ffffffff80003682:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003687:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
ffffffff8000368c:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
{
ffffffff80003691:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003696:	48 89 f2             	mov    %rsi,%rdx
    va_start(argptr, format);
ffffffff80003699:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff8000369e:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
    vsnprintf(buffer, 64, format, argptr);
ffffffff800036a3:	be 40 00 00 00       	mov    $0x40,%esi
{
ffffffff800036a8:	4c 89 84 24 80 00 00 	mov    %r8,0x80(%rsp)
ffffffff800036af:	00 
ffffffff800036b0:	4c 89 8c 24 88 00 00 	mov    %r9,0x88(%rsp)
ffffffff800036b7:	00 
    va_start(argptr, format);
ffffffff800036b8:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff800036bf:	00 
ffffffff800036c0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff800036c5:	e8 16 ff ff ff       	callq  ffffffff800035e0 <vsnprintf_>
    va_end(argptr);

    serial_write_str(port, buffer);
ffffffff800036ca:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff800036cf:	0f b7 fb             	movzwl %bx,%edi
ffffffff800036d2:	e8 c9 e8 ff ff       	callq  ffffffff80001fa0 <serial_write_str>
ffffffff800036d7:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
ffffffff800036de:	5b                   	pop    %rbx
ffffffff800036df:	c3                   	retq   

ffffffff800036e0 <pagewalk>:
#include <stdint.h>
#include <stddef.h>


void pagewalk()
{
ffffffff800036e0:	eb fe                	jmp    ffffffff800036e0 <pagewalk>
ffffffff800036e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800036e9:	00 00 00 
ffffffff800036ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800036f0 <print_gdt>:
uint8_t ist2[4096];

void print_gdt()
{

}
ffffffff800036f0:	f3 c3                	repz retq 
ffffffff800036f2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800036f9:	00 00 00 00 
ffffffff800036fd:	0f 1f 00             	nopl   (%rax)

ffffffff80003700 <gdt_init>:

void gdt_init()
{
    gdt.null0.raw = 0x00;
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80003700:	48 b8 ff ff 00 00 00 	movabs $0xaf9a000000ffff,%rax
ffffffff80003707:	9a af 00 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);

    gdtr.base = (uint64_t)&gdt;
    gdtr.limit = sizeof(gdt);

    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff8000370a:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff8000370f:	48 c7 c7 60 eb 00 80 	mov    $0xffffffff8000eb60,%rdi
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80003716:	48 89 05 eb b4 00 00 	mov    %rax,0xb4eb(%rip)        # ffffffff8000ec08 <gdt+0x8>
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff8000371d:	48 b8 ff ff 00 00 00 	movabs $0xaf92000000ffff,%rax
ffffffff80003724:	92 af 00 
    gdt.null0.raw = 0x00;
ffffffff80003727:	48 c7 05 ce b4 00 00 	movq   $0x0,0xb4ce(%rip)        # ffffffff8000ec00 <gdt>
ffffffff8000372e:	00 00 00 00 
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff80003732:	48 89 05 d7 b4 00 00 	mov    %rax,0xb4d7(%rip)        # ffffffff8000ec10 <gdt+0x10>
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff80003739:	48 b8 ff ff 00 00 00 	movabs $0xaffa000000ffff,%rax
ffffffff80003740:	fa af 00 
    gdt.null1.raw = 0x00;
ffffffff80003743:	48 c7 05 ca b4 00 00 	movq   $0x0,0xb4ca(%rip)        # ffffffff8000ec18 <gdt+0x18>
ffffffff8000374a:	00 00 00 00 
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff8000374e:	48 89 05 cb b4 00 00 	mov    %rax,0xb4cb(%rip)        # ffffffff8000ec20 <gdt+0x20>
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff80003755:	48 b8 ff ff 00 00 00 	movabs $0xaff2000000ffff,%rax
ffffffff8000375c:	f2 af 00 
    gdt.null2.raw = 0x00;
ffffffff8000375f:	48 c7 05 c6 b4 00 00 	movq   $0x0,0xb4c6(%rip)        # ffffffff8000ec30 <gdt+0x30>
ffffffff80003766:	00 00 00 00 
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff8000376a:	48 89 05 b7 b4 00 00 	mov    %rax,0xb4b7(%rip)        # ffffffff8000ec28 <gdt+0x28>
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003771:	48 c7 c0 80 eb 00 80 	mov    $0xffffffff8000eb80,%rax
    gdt.null3.raw = 0x00;
ffffffff80003778:	48 c7 05 b5 b4 00 00 	movq   $0x0,0xb4b5(%rip)        # ffffffff8000ec38 <gdt+0x38>
ffffffff8000377f:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003783:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003786:	66 89 05 c5 b4 00 00 	mov    %ax,0xb4c5(%rip)        # ffffffff8000ec52 <gdt+0x52>
    gdt.null4.raw = 0x00;
ffffffff8000378d:	48 c7 05 a8 b4 00 00 	movq   $0x0,0xb4a8(%rip)        # ffffffff8000ec40 <gdt+0x40>
ffffffff80003794:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003798:	48 c1 ea 10          	shr    $0x10,%rdx
    gdt.null5.raw = 0x00;
ffffffff8000379c:	48 c7 05 a1 b4 00 00 	movq   $0x0,0xb4a1(%rip)        # ffffffff8000ec48 <gdt+0x48>
ffffffff800037a3:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff800037a7:	c6 05 a7 b4 00 00 89 	movb   $0x89,0xb4a7(%rip)        # ffffffff8000ec55 <gdt+0x55>
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff800037ae:	88 15 a0 b4 00 00    	mov    %dl,0xb4a0(%rip)        # ffffffff8000ec54 <gdt+0x54>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800037b4:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff800037b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff800037bb:	89 05 97 b4 00 00    	mov    %eax,0xb497(%rip)        # ffffffff8000ec58 <gdt+0x58>
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff800037c1:	b8 68 00 00 00       	mov    $0x68,%eax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800037c6:	48 c1 ea 18          	shr    $0x18,%rdx
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff800037ca:	66 89 05 7f b4 00 00 	mov    %ax,0xb47f(%rip)        # ffffffff8000ec50 <gdt+0x50>
    gdt.tss_entry.reserved0 = 0;
ffffffff800037d1:	0f b6 05 7e b4 00 00 	movzbl 0xb47e(%rip),%eax        # ffffffff8000ec56 <gdt+0x56>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800037d8:	88 15 79 b4 00 00    	mov    %dl,0xb479(%rip)        # ffffffff8000ec57 <gdt+0x57>
    gdtr.limit = sizeof(gdt);
ffffffff800037de:	ba 60 00 00 00       	mov    $0x60,%edx
    gdt.tss_entry.reserved1 = 0;
ffffffff800037e3:	c7 05 6f b4 00 00 00 	movl   $0x0,0xb46f(%rip)        # ffffffff8000ec5c <gdt+0x5c>
ffffffff800037ea:	00 00 00 
    tss.reserved0 = 0x00;
ffffffff800037ed:	c7 05 89 b3 00 00 00 	movl   $0x0,0xb389(%rip)        # ffffffff8000eb80 <tss>
ffffffff800037f4:	00 00 00 
    tss.RSP0 = (uint64_t)stack + sizeof(stack);
ffffffff800037f7:	48 c7 05 82 b3 00 00 	movq   $0xffffffff8000a660,0xb382(%rip)        # ffffffff8000eb84 <tss+0x4>
ffffffff800037fe:	60 a6 00 80 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);
ffffffff80003802:	48 c7 05 97 b3 00 00 	movq   $0xffffffff8000eac0,0xb397(%rip)        # ffffffff8000eba4 <tss+0x24>
ffffffff80003809:	c0 ea 00 80 
    gdtr.base = (uint64_t)&gdt;
ffffffff8000380d:	48 c7 05 4a b3 00 00 	movq   $0xffffffff8000ec00,0xb34a(%rip)        # ffffffff8000eb62 <gdtr+0x2>
ffffffff80003814:	00 ec 00 80 
    gdt.tss_entry.reserved0 = 0;
ffffffff80003818:	83 e0 40             	and    $0x40,%eax
    gdtr.limit = sizeof(gdt);
ffffffff8000381b:	66 89 15 3e b3 00 00 	mov    %dx,0xb33e(%rip)        # ffffffff8000eb60 <gdtr>
    gdt.tss_entry.reserved0 = 0;
ffffffff80003822:	88 05 2e b4 00 00    	mov    %al,0xb42e(%rip)        # ffffffff8000ec56 <gdt+0x56>
    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff80003828:	e9 13 c8 ff ff       	jmpq   ffffffff80000040 <gdt_load>
ffffffff8000382d:	0f 1f 00             	nopl   (%rax)

ffffffff80003830 <memset>:
#include "kstring.h"

void* memset(void* s, uint64_t c, uint64_t len)
{
    unsigned char* p=s;
    while(len--)
ffffffff80003830:	48 85 d2             	test   %rdx,%rdx
{
ffffffff80003833:	48 89 f8             	mov    %rdi,%rax
    while(len--)
ffffffff80003836:	74 15                	je     ffffffff8000384d <memset+0x1d>
ffffffff80003838:	48 01 fa             	add    %rdi,%rdx
    unsigned char* p=s;
ffffffff8000383b:	48 89 f9             	mov    %rdi,%rcx
ffffffff8000383e:	66 90                	xchg   %ax,%ax
    {
        *p++ = (unsigned char)c;
ffffffff80003840:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80003844:	40 88 71 ff          	mov    %sil,-0x1(%rcx)
    while(len--)
ffffffff80003848:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8000384b:	75 f3                	jne    ffffffff80003840 <memset+0x10>
    }
    return s;
}
ffffffff8000384d:	f3 c3                	repz retq 
ffffffff8000384f:	90                   	nop

ffffffff80003850 <memcmp>:

int memcmp(const void* str1, const void* str2, size_t n)
{
    if(!n)
        return 0;
ffffffff80003850:	31 c0                	xor    %eax,%eax
    if(!n)
ffffffff80003852:	48 85 d2             	test   %rdx,%rdx
ffffffff80003855:	74 36                	je     ffffffff8000388d <memcmp+0x3d>

    while(--n && *(uint8_t*)str1 == *(uint8_t*)str2)
ffffffff80003857:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000385b:	44 0f b6 06          	movzbl (%rsi),%r8d
ffffffff8000385f:	0f b6 0f             	movzbl (%rdi),%ecx
ffffffff80003862:	74 23                	je     ffffffff80003887 <memcmp+0x37>
ffffffff80003864:	41 38 c8             	cmp    %cl,%r8b
ffffffff80003867:	75 1e                	jne    ffffffff80003887 <memcmp+0x37>
ffffffff80003869:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000386e:	eb 09                	jmp    ffffffff80003879 <memcmp+0x29>
ffffffff80003870:	48 83 c0 01          	add    $0x1,%rax
ffffffff80003874:	44 38 c1             	cmp    %r8b,%cl
ffffffff80003877:	75 0e                	jne    ffffffff80003887 <memcmp+0x37>
ffffffff80003879:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000387c:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff80003880:	44 0f b6 04 06       	movzbl (%rsi,%rax,1),%r8d
ffffffff80003885:	75 e9                	jne    ffffffff80003870 <memcmp+0x20>
    {
        str1 = (uint8_t*)str1 + 1;
        str2 = (uint8_t*)str2 + 1;
    }

    return (*((uint8_t*)str1) - *((uint8_t*)str2));
ffffffff80003887:	0f b6 c1             	movzbl %cl,%eax
ffffffff8000388a:	44 29 c0             	sub    %r8d,%eax
ffffffff8000388d:	f3 c3                	repz retq 
ffffffff8000388f:	90                   	nop

ffffffff80003890 <kernel>:

void kernel()
{

    //printf("Kernel Now\n");
    serial_init(0x3F8);     //COM1
ffffffff80003890:	bf f8 03 00 00       	mov    $0x3f8,%edi
{
ffffffff80003895:	48 83 ec 08          	sub    $0x8,%rsp
    serial_init(0x3F8);     //COM1
ffffffff80003899:	e8 a2 e5 ff ff       	callq  ffffffff80001e40 <serial_init>
    gdt_init();
ffffffff8000389e:	31 c0                	xor    %eax,%eax
ffffffff800038a0:	e8 5b fe ff ff       	callq  ffffffff80003700 <gdt_init>
    idt_init();
ffffffff800038a5:	31 c0                	xor    %eax,%eax
ffffffff800038a7:	e8 84 00 00 00       	callq  ffffffff80003930 <idt_init>
    fb_init();
ffffffff800038ac:	31 c0                	xor    %eax,%eax
ffffffff800038ae:	e8 2d e0 ff ff       	callq  ffffffff800018e0 <fb_init>
    console_init();
ffffffff800038b3:	31 c0                	xor    %eax,%eax
ffffffff800038b5:	e8 36 e4 ff ff       	callq  ffffffff80001cf0 <console_init>

    //serial_write(0x3F8, 'm');

    pmm_init();
ffffffff800038ba:	31 c0                	xor    %eax,%eax
ffffffff800038bc:	e8 bf db ff ff       	callq  ffffffff80001480 <pmm_init>
    vmm_init();
ffffffff800038c1:	31 c0                	xor    %eax,%eax
ffffffff800038c3:	e8 38 d2 ff ff       	callq  ffffffff80000b00 <vmm_init>
    //fb_clearscreen(FB_COLOR_BLUE);

    //int_test();

 
    printf("Kernel Done!\n");
ffffffff800038c8:	48 c7 c7 e8 51 00 80 	mov    $0xffffffff800051e8,%rdi
ffffffff800038cf:	31 c0                	xor    %eax,%eax
ffffffff800038d1:	e8 ca fb ff ff       	callq  ffffffff800034a0 <printf_>
ffffffff800038d6:	eb fe                	jmp    ffffffff800038d6 <kernel+0x46>
ffffffff800038d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800038df:	00 

ffffffff800038e0 <create_descriptor>:

void create_descriptor(uint16_t index, void* isr, uint8_t ist, uint8_t cs, uint8_t attr)
{
    struct idt_entry* entry = &idt[index];

    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800038e0:	0f b7 ff             	movzwl %di,%edi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800038e3:	48 89 f0             	mov    %rsi,%rax
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
    entry->ist = ist;
    entry->kernel_cs = cs;
ffffffff800038e6:	0f b6 c9             	movzbl %cl,%ecx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800038e9:	48 c1 e7 04          	shl    $0x4,%rdi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800038ed:	48 c1 e8 10          	shr    $0x10,%rax
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800038f1:	66 89 b7 80 ec 00 80 	mov    %si,-0x7fff1380(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800038f8:	48 c1 ee 20          	shr    $0x20,%rsi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800038fc:	66 89 87 86 ec 00 80 	mov    %ax,-0x7fff137a(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003903:	89 b7 88 ec 00 80    	mov    %esi,-0x7fff1378(%rdi)
    entry->ist = ist;
ffffffff80003909:	88 97 84 ec 00 80    	mov    %dl,-0x7fff137c(%rdi)
    entry->kernel_cs = cs;
ffffffff8000390f:	66 89 8f 82 ec 00 80 	mov    %cx,-0x7fff137e(%rdi)
    entry->attributes = attr;
ffffffff80003916:	44 88 87 85 ec 00 80 	mov    %r8b,-0x7fff137b(%rdi)
    entry->reserved = 0;
ffffffff8000391d:	c7 87 8c ec 00 80 00 	movl   $0x0,-0x7fff1374(%rdi)
ffffffff80003924:	00 00 00 
}
ffffffff80003927:	c3                   	retq   
ffffffff80003928:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000392f:	00 

ffffffff80003930 <idt_init>:

void idt_init()
{
    //uint64_t idt_ptr = hh_code_to_phys((uint64_t)&idt[0]);
    idtr.base = (uint64_t)&idt[0];
ffffffff80003930:	48 c7 c0 80 ec 00 80 	mov    $0xffffffff8000ec80,%rax
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003937:	b9 ff 0f 00 00       	mov    $0xfff,%ecx
{
ffffffff8000393c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80003940:	48 8d b8 f0 02 00 00 	lea    0x2f0(%rax),%rdi
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003947:	66 89 0d 1a b3 00 00 	mov    %cx,0xb31a(%rip)        # ffffffff8000ec68 <idtr>
    idtr.base = (uint64_t)&idt[0];
ffffffff8000394e:	48 89 05 15 b3 00 00 	mov    %rax,0xb315(%rip)        # ffffffff8000ec6a <idtr+0x2>
ffffffff80003955:	48 c7 c1 48 02 00 80 	mov    $0xffffffff80000248,%rcx
ffffffff8000395c:	0f 1f 40 00          	nopl   0x0(%rax)

    for(uint8_t index = 0; index < 47; index++)
    {
        create_descriptor(index, isr_stub_table[index], 0x00, 0x08, 0x8E);
ffffffff80003960:	48 8b 11             	mov    (%rcx),%rdx
    entry->ist = ist;
ffffffff80003963:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80003967:	48 83 c0 10          	add    $0x10,%rax
    entry->attributes = attr;
ffffffff8000396b:	c6 40 f5 8e          	movb   $0x8e,-0xb(%rax)
    entry->reserved = 0;
ffffffff8000396f:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
ffffffff80003976:	48 83 c1 08          	add    $0x8,%rcx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff8000397a:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000397e:	48 89 d6             	mov    %rdx,%rsi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003981:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80003985:	89 50 f8             	mov    %edx,-0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003988:	48 c1 ee 10          	shr    $0x10,%rsi
    entry->kernel_cs = cs;
ffffffff8000398c:	ba 08 00 00 00       	mov    $0x8,%edx
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003991:	66 89 70 f6          	mov    %si,-0xa(%rax)
    entry->kernel_cs = cs;
ffffffff80003995:	66 89 50 f2          	mov    %dx,-0xe(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80003999:	48 39 f8             	cmp    %rdi,%rax
ffffffff8000399c:	75 c2                	jne    ffffffff80003960 <idt_init+0x30>
    }

    create_descriptor(127, isr_stub_table[48], 0x00, 0x08, 0x8E);
ffffffff8000399e:	48 8b 05 23 ca ff ff 	mov    -0x35dd(%rip),%rax        # ffffffff800003c8 <isr_stub_table+0x180>
    entry->kernel_cs = cs;
ffffffff800039a5:	c7 05 c3 ba 00 00 08 	movl   $0x8e000008,0xbac3(%rip)        # ffffffff8000f472 <idt+0x7f2>
ffffffff800039ac:	00 00 8e 
    entry->reserved = 0;
ffffffff800039af:	c7 05 c3 ba 00 00 00 	movl   $0x0,0xbac3(%rip)        # ffffffff8000f47c <idt+0x7fc>
ffffffff800039b6:	00 00 00 
    entry->kernel_cs = cs;
ffffffff800039b9:	c7 05 bf ba 00 00 08 	movl   $0x8e000008,0xbabf(%rip)        # ffffffff8000f482 <idt+0x802>
ffffffff800039c0:	00 00 8e 
    entry->reserved = 0;
ffffffff800039c3:	c7 05 bf ba 00 00 00 	movl   $0x0,0xbabf(%rip)        # ffffffff8000f48c <idt+0x80c>
ffffffff800039ca:	00 00 00 
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800039cd:	66 89 05 9c ba 00 00 	mov    %ax,0xba9c(%rip)        # ffffffff8000f470 <idt+0x7f0>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039d4:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800039d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff800039db:	89 05 97 ba 00 00    	mov    %eax,0xba97(%rip)        # ffffffff8000f478 <idt+0x7f8>
    create_descriptor(128, isr_stub_table[49], 0x00, 0x08, 0x8E);
ffffffff800039e1:	48 8b 05 e8 c9 ff ff 	mov    -0x3618(%rip),%rax        # ffffffff800003d0 <isr_stub_table+0x188>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039e8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff800039ec:	66 89 15 83 ba 00 00 	mov    %dx,0xba83(%rip)        # ffffffff8000f476 <idt+0x7f6>
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800039f3:	66 89 05 86 ba 00 00 	mov    %ax,0xba86(%rip)        # ffffffff8000f480 <idt+0x800>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039fa:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800039fd:	48 c1 e8 20          	shr    $0x20,%rax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a01:	48 c1 ea 10          	shr    $0x10,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003a05:	89 05 7d ba 00 00    	mov    %eax,0xba7d(%rip)        # ffffffff8000f488 <idt+0x808>

    pic_remap();
ffffffff80003a0b:	31 c0                	xor    %eax,%eax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a0d:	66 89 15 72 ba 00 00 	mov    %dx,0xba72(%rip)        # ffffffff8000f486 <idt+0x806>
    pic_remap();
ffffffff80003a14:	e8 77 e8 ff ff       	callq  ffffffff80002290 <pic_remap>
    pic_disable();
ffffffff80003a19:	31 c0                	xor    %eax,%eax
ffffffff80003a1b:	e8 40 e8 ff ff       	callq  ffffffff80002260 <pic_disable>

    

    idt_load(&idtr);
ffffffff80003a20:	48 c7 c7 68 ec 00 80 	mov    $0xffffffff8000ec68,%rdi
ffffffff80003a27:	e8 ac c9 ff ff       	callq  ffffffff800003d8 <idt_load>

    pit_init(10000);
ffffffff80003a2c:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff80003a31:	e8 5a e9 ff ff       	callq  ffffffff80002390 <pit_init>

    pic_clear_mask(1);
ffffffff80003a36:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80003a3b:	e8 d0 e7 ff ff       	callq  ffffffff80002210 <pic_clear_mask>
    pic_clear_mask(0);
ffffffff80003a40:	31 ff                	xor    %edi,%edi


    //__asm__ volatile ("lidt %0" : : "m"(idtr));
    //__asm__ volatile ("sti");
}
ffffffff80003a42:	48 83 c4 08          	add    $0x8,%rsp
    pic_clear_mask(0);
ffffffff80003a46:	e9 c5 e7 ff ff       	jmpq   ffffffff80002210 <pic_clear_mask>
ffffffff80003a4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80003a50 <interrupt_handler>:

uint64_t interrupt_handler(uint64_t rsp)
{
ffffffff80003a50:	55                   	push   %rbp
ffffffff80003a51:	53                   	push   %rbx
ffffffff80003a52:	48 89 fb             	mov    %rdi,%rbx
ffffffff80003a55:	48 83 ec 08          	sub    $0x8,%rsp
    struct interrupt_stack_frame* frame = (struct interrupt_stack_frame*)rsp;
    
    if(frame->int_no < 32)
ffffffff80003a59:	48 8b 77 78          	mov    0x78(%rdi),%rsi
ffffffff80003a5d:	48 83 fe 1f          	cmp    $0x1f,%rsi
ffffffff80003a61:	77 1d                	ja     ffffffff80003a80 <interrupt_handler+0x30>
    {
        if(frame->cs == 0x08)
ffffffff80003a63:	48 83 bf 90 00 00 00 	cmpq   $0x8,0x90(%rdi)
ffffffff80003a6a:	08 
ffffffff80003a6b:	74 63                	je     ffffffff80003ad0 <interrupt_handler+0x80>
    {
        printf("Syscall 127\n");
        return rsp;
    }
    return rsp;
ffffffff80003a6d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003a71:	48 89 d8             	mov    %rbx,%rax
ffffffff80003a74:	5b                   	pop    %rbx
ffffffff80003a75:	5d                   	pop    %rbp
ffffffff80003a76:	c3                   	retq   
ffffffff80003a77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003a7e:	00 00 
    else if (frame->int_no < 48)
ffffffff80003a80:	48 83 fe 2f          	cmp    $0x2f,%rsi
ffffffff80003a84:	77 32                	ja     ffffffff80003ab8 <interrupt_handler+0x68>
        uint64_t irq = frame->int_no - 32;
ffffffff80003a86:	48 8d 6e e0          	lea    -0x20(%rsi),%rbp
        if(irq > 1)
ffffffff80003a8a:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff80003a8e:	0f 87 fc 00 00 00    	ja     ffffffff80003b90 <interrupt_handler+0x140>
        switch(irq)
ffffffff80003a94:	0f 84 e6 00 00 00    	je     ffffffff80003b80 <interrupt_handler+0x130>
                pit_ticks++;
ffffffff80003a9a:	48 83 05 be b1 00 00 	addq   $0x1,0xb1be(%rip)        # ffffffff8000ec60 <pit_ticks>
ffffffff80003aa1:	01 
        pic_EOI(irq);
ffffffff80003aa2:	89 ef                	mov    %ebp,%edi
ffffffff80003aa4:	e8 d7 e6 ff ff       	callq  ffffffff80002180 <pic_EOI>
ffffffff80003aa9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003aad:	48 89 d8             	mov    %rbx,%rax
ffffffff80003ab0:	5b                   	pop    %rbx
ffffffff80003ab1:	5d                   	pop    %rbp
ffffffff80003ab2:	c3                   	retq   
ffffffff80003ab3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    else if (frame->int_no == 127)
ffffffff80003ab8:	48 83 fe 7f          	cmp    $0x7f,%rsi
ffffffff80003abc:	75 af                	jne    ffffffff80003a6d <interrupt_handler+0x1d>
        printf("Syscall 127\n");
ffffffff80003abe:	48 c7 c7 7b 52 00 80 	mov    $0xffffffff8000527b,%rdi
ffffffff80003ac5:	31 c0                	xor    %eax,%eax
ffffffff80003ac7:	e8 d4 f9 ff ff       	callq  ffffffff800034a0 <printf_>
        return rsp;
ffffffff80003acc:	eb 9f                	jmp    ffffffff80003a6d <interrupt_handler+0x1d>
ffffffff80003ace:	66 90                	xchg   %ax,%ax
            uint64_t cr2 = read_cr2();
ffffffff80003ad0:	31 c0                	xor    %eax,%eax
ffffffff80003ad2:	e8 99 c5 ff ff       	callq  ffffffff80000070 <read_cr2>
ffffffff80003ad7:	48 89 c5             	mov    %rax,%rbp
            serial_write(0x3F8, frame->int_no + 65);
ffffffff80003ada:	0f b6 43 78          	movzbl 0x78(%rbx),%eax
ffffffff80003ade:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80003ae3:	8d 70 41             	lea    0x41(%rax),%esi
ffffffff80003ae6:	40 0f b6 f6          	movzbl %sil,%esi
ffffffff80003aea:	e8 81 e4 ff ff       	callq  ffffffff80001f70 <serial_write>
            printf("\nCPU Exception! INT %d   ERR %x  CR2 %p\n", frame->int_no, frame->err_no, cr2);
ffffffff80003aef:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff80003af6:	48 8b 73 78          	mov    0x78(%rbx),%rsi
ffffffff80003afa:	48 89 e9             	mov    %rbp,%rcx
ffffffff80003afd:	48 c7 c7 f8 51 00 80 	mov    $0xffffffff800051f8,%rdi
ffffffff80003b04:	31 c0                	xor    %eax,%eax
ffffffff80003b06:	e8 95 f9 ff ff       	callq  ffffffff800034a0 <printf_>
            printf(_exception_messages[frame->int_no]);
ffffffff80003b0b:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff80003b0f:	48 8b 3c c5 c0 53 00 	mov    -0x7fffac40(,%rax,8),%rdi
ffffffff80003b16:	80 
ffffffff80003b17:	31 c0                	xor    %eax,%eax
ffffffff80003b19:	e8 82 f9 ff ff       	callq  ffffffff800034a0 <printf_>
            printf("\n");
ffffffff80003b1e:	48 c7 c7 77 4c 00 80 	mov    $0xffffffff80004c77,%rdi
ffffffff80003b25:	31 c0                	xor    %eax,%eax
ffffffff80003b27:	e8 74 f9 ff ff       	callq  ffffffff800034a0 <printf_>
            printf("SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff80003b2c:	48 8b 8b 98 00 00 00 	mov    0x98(%rbx),%rcx
ffffffff80003b33:	48 8b 93 a0 00 00 00 	mov    0xa0(%rbx),%rdx
ffffffff80003b3a:	48 c7 c7 28 52 00 80 	mov    $0xffffffff80005228,%rdi
ffffffff80003b41:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
ffffffff80003b48:	4c 8b 8b 88 00 00 00 	mov    0x88(%rbx),%r9
ffffffff80003b4f:	31 c0                	xor    %eax,%eax
ffffffff80003b51:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80003b58:	e8 43 f9 ff ff       	callq  ffffffff800034a0 <printf_>
            printf("rax: %x  rdi: %x", frame->rax, frame->rdi);
ffffffff80003b5d:	48 8b 53 48          	mov    0x48(%rbx),%rdx
ffffffff80003b61:	48 8b 73 70          	mov    0x70(%rbx),%rsi
ffffffff80003b65:	48 c7 c7 56 52 00 80 	mov    $0xffffffff80005256,%rdi
ffffffff80003b6c:	31 c0                	xor    %eax,%eax
ffffffff80003b6e:	e8 2d f9 ff ff       	callq  ffffffff800034a0 <printf_>
            asm("cli");
ffffffff80003b73:	fa                   	cli    
            asm("hlt");
ffffffff80003b74:	f4                   	hlt    
ffffffff80003b75:	eb fe                	jmp    ffffffff80003b75 <interrupt_handler+0x125>
ffffffff80003b77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003b7e:	00 00 
                kbd_handle();
ffffffff80003b80:	31 c0                	xor    %eax,%eax
ffffffff80003b82:	e8 a9 e4 ff ff       	callq  ffffffff80002030 <kbd_handle>
                break;
ffffffff80003b87:	e9 16 ff ff ff       	jmpq   ffffffff80003aa2 <interrupt_handler+0x52>
ffffffff80003b8c:	0f 1f 40 00          	nopl   0x0(%rax)
            printf("INT: %d  IRQ: %d  \n", frame->int_no, irq);
ffffffff80003b90:	48 89 ea             	mov    %rbp,%rdx
ffffffff80003b93:	48 c7 c7 67 52 00 80 	mov    $0xffffffff80005267,%rdi
ffffffff80003b9a:	31 c0                	xor    %eax,%eax
ffffffff80003b9c:	e8 ff f8 ff ff       	callq  ffffffff800034a0 <printf_>
ffffffff80003ba1:	e9 fc fe ff ff       	jmpq   ffffffff80003aa2 <interrupt_handler+0x52>
