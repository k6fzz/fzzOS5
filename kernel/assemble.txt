
./bin/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <to_usermode>:
ffffffff80000000:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000003:	48 89 f4             	mov    %rsi,%rsp
ffffffff80000006:	41 bb 02 02 00 00    	mov    $0x202,%r11d
ffffffff8000000c:	0f 07                	sysret 

ffffffff8000000e <enable_sce>:
ffffffff8000000e:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff80000013:	0f 32                	rdmsr  
ffffffff80000015:	83 c8 01             	or     $0x1,%eax
ffffffff80000018:	0f 30                	wrmsr  
ffffffff8000001a:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff8000001f:	0f 32                	rdmsr  
ffffffff80000021:	ba 08 00 18 00       	mov    $0x180008,%edx
ffffffff80000026:	0f 30                	wrmsr  
ffffffff80000028:	c3                   	retq   

ffffffff80000029 <enable_sce.end>:
ffffffff80000029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80000030 <read_cr3>:
ffffffff80000030:	0f 20 d8             	mov    %cr3,%rax
ffffffff80000033:	c3                   	retq   

ffffffff80000034 <write_cr3>:
ffffffff80000034:	0f 22 df             	mov    %rdi,%cr3
ffffffff80000037:	c3                   	retq   

ffffffff80000038 <write_cr3.end>:
ffffffff80000038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000003f:	00 

ffffffff80000040 <gdt_load>:
ffffffff80000040:	0f 01 17             	lgdt   (%rdi)
ffffffff80000043:	55                   	push   %rbp
ffffffff80000044:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000047:	6a 10                	pushq  $0x10
ffffffff80000049:	55                   	push   %rbp
ffffffff8000004a:	9c                   	pushfq 
ffffffff8000004b:	6a 08                	pushq  $0x8
ffffffff8000004d:	68 54 00 00 80       	pushq  $0xffffffff80000054
ffffffff80000052:	48 cf                	iretq  

ffffffff80000054 <gdt_load.trampoline>:
ffffffff80000054:	5d                   	pop    %rbp
ffffffff80000055:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80000059:	8e d8                	mov    %eax,%ds
ffffffff8000005b:	8e c0                	mov    %eax,%es
ffffffff8000005d:	8e e0                	mov    %eax,%fs
ffffffff8000005f:	8e e8                	mov    %eax,%gs
ffffffff80000061:	8e d0                	mov    %eax,%ss
ffffffff80000063:	66 8b 06             	mov    (%rsi),%ax
ffffffff80000066:	0f 00 d8             	ltr    %ax
ffffffff80000069:	c3                   	retq   

ffffffff8000006a <gdt_load.end>:
ffffffff8000006a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000070 <_interrupt_common>:
ffffffff80000070:	fc                   	cld    
ffffffff80000071:	50                   	push   %rax
ffffffff80000072:	53                   	push   %rbx
ffffffff80000073:	51                   	push   %rcx
ffffffff80000074:	52                   	push   %rdx
ffffffff80000075:	56                   	push   %rsi
ffffffff80000076:	57                   	push   %rdi
ffffffff80000077:	55                   	push   %rbp
ffffffff80000078:	41 50                	push   %r8
ffffffff8000007a:	41 51                	push   %r9
ffffffff8000007c:	41 52                	push   %r10
ffffffff8000007e:	41 53                	push   %r11
ffffffff80000080:	41 54                	push   %r12
ffffffff80000082:	41 55                	push   %r13
ffffffff80000084:	41 56                	push   %r14
ffffffff80000086:	41 57                	push   %r15
ffffffff80000088:	48 89 e7             	mov    %rsp,%rdi
ffffffff8000008b:	e8 e0 2f 00 00       	callq  ffffffff80003070 <interrupt_handler>
ffffffff80000090:	48 89 c4             	mov    %rax,%rsp
ffffffff80000093:	41 5f                	pop    %r15
ffffffff80000095:	41 5e                	pop    %r14
ffffffff80000097:	41 5d                	pop    %r13
ffffffff80000099:	41 5c                	pop    %r12
ffffffff8000009b:	41 5b                	pop    %r11
ffffffff8000009d:	41 5a                	pop    %r10
ffffffff8000009f:	41 59                	pop    %r9
ffffffff800000a1:	41 58                	pop    %r8
ffffffff800000a3:	5d                   	pop    %rbp
ffffffff800000a4:	5f                   	pop    %rdi
ffffffff800000a5:	5e                   	pop    %rsi
ffffffff800000a6:	5a                   	pop    %rdx
ffffffff800000a7:	59                   	pop    %rcx
ffffffff800000a8:	5b                   	pop    %rbx
ffffffff800000a9:	58                   	pop    %rax
ffffffff800000aa:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800000ae:	48 cf                	iretq  

ffffffff800000b0 <_interrupt0>:
ffffffff800000b0:	6a 00                	pushq  $0x0
ffffffff800000b2:	6a 00                	pushq  $0x0
ffffffff800000b4:	eb ba                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000b6 <_interrupt1>:
ffffffff800000b6:	6a 00                	pushq  $0x0
ffffffff800000b8:	6a 01                	pushq  $0x1
ffffffff800000ba:	eb b4                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000bc <_interrupt2>:
ffffffff800000bc:	6a 00                	pushq  $0x0
ffffffff800000be:	6a 02                	pushq  $0x2
ffffffff800000c0:	eb ae                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000c2 <_interrupt3>:
ffffffff800000c2:	6a 00                	pushq  $0x0
ffffffff800000c4:	6a 03                	pushq  $0x3
ffffffff800000c6:	eb a8                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000c8 <_interrupt4>:
ffffffff800000c8:	6a 00                	pushq  $0x0
ffffffff800000ca:	6a 04                	pushq  $0x4
ffffffff800000cc:	eb a2                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000ce <_interrupt5>:
ffffffff800000ce:	6a 00                	pushq  $0x0
ffffffff800000d0:	6a 05                	pushq  $0x5
ffffffff800000d2:	eb 9c                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000d4 <_interrupt6>:
ffffffff800000d4:	6a 00                	pushq  $0x0
ffffffff800000d6:	6a 06                	pushq  $0x6
ffffffff800000d8:	eb 96                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000da <_interrupt7>:
ffffffff800000da:	6a 00                	pushq  $0x0
ffffffff800000dc:	6a 07                	pushq  $0x7
ffffffff800000de:	eb 90                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000e0 <_interrupt8>:
ffffffff800000e0:	6a 08                	pushq  $0x8
ffffffff800000e2:	eb 8c                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000e4 <_interrupt9>:
ffffffff800000e4:	6a 00                	pushq  $0x0
ffffffff800000e6:	6a 09                	pushq  $0x9
ffffffff800000e8:	eb 86                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000ea <_interrupt10>:
ffffffff800000ea:	6a 0a                	pushq  $0xa
ffffffff800000ec:	eb 82                	jmp    ffffffff80000070 <_interrupt_common>

ffffffff800000ee <_interrupt11>:
ffffffff800000ee:	6a 0b                	pushq  $0xb
ffffffff800000f0:	e9 7b ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800000f5 <_interrupt12>:
ffffffff800000f5:	6a 0c                	pushq  $0xc
ffffffff800000f7:	e9 74 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800000fc <_interrupt13>:
ffffffff800000fc:	6a 0d                	pushq  $0xd
ffffffff800000fe:	e9 6d ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000103 <_interrupt14>:
ffffffff80000103:	6a 0e                	pushq  $0xe
ffffffff80000105:	e9 66 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000010a <_interrupt15>:
ffffffff8000010a:	6a 00                	pushq  $0x0
ffffffff8000010c:	6a 0f                	pushq  $0xf
ffffffff8000010e:	e9 5d ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000113 <_interrupt16>:
ffffffff80000113:	6a 00                	pushq  $0x0
ffffffff80000115:	6a 10                	pushq  $0x10
ffffffff80000117:	e9 54 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000011c <_interrupt17>:
ffffffff8000011c:	6a 11                	pushq  $0x11
ffffffff8000011e:	e9 4d ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000123 <_interrupt18>:
ffffffff80000123:	6a 00                	pushq  $0x0
ffffffff80000125:	6a 12                	pushq  $0x12
ffffffff80000127:	e9 44 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000012c <_interrupt19>:
ffffffff8000012c:	6a 00                	pushq  $0x0
ffffffff8000012e:	6a 13                	pushq  $0x13
ffffffff80000130:	e9 3b ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000135 <_interrupt20>:
ffffffff80000135:	6a 00                	pushq  $0x0
ffffffff80000137:	6a 14                	pushq  $0x14
ffffffff80000139:	e9 32 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000013e <_interrupt21>:
ffffffff8000013e:	6a 00                	pushq  $0x0
ffffffff80000140:	6a 15                	pushq  $0x15
ffffffff80000142:	e9 29 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000147 <_interrupt22>:
ffffffff80000147:	6a 00                	pushq  $0x0
ffffffff80000149:	6a 16                	pushq  $0x16
ffffffff8000014b:	e9 20 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000150 <_interrupt23>:
ffffffff80000150:	6a 00                	pushq  $0x0
ffffffff80000152:	6a 17                	pushq  $0x17
ffffffff80000154:	e9 17 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000159 <_interrupt24>:
ffffffff80000159:	6a 00                	pushq  $0x0
ffffffff8000015b:	6a 18                	pushq  $0x18
ffffffff8000015d:	e9 0e ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000162 <_interrupt25>:
ffffffff80000162:	6a 00                	pushq  $0x0
ffffffff80000164:	6a 19                	pushq  $0x19
ffffffff80000166:	e9 05 ff ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000016b <_interrupt26>:
ffffffff8000016b:	6a 00                	pushq  $0x0
ffffffff8000016d:	6a 1a                	pushq  $0x1a
ffffffff8000016f:	e9 fc fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000174 <_interrupt27>:
ffffffff80000174:	6a 00                	pushq  $0x0
ffffffff80000176:	6a 1b                	pushq  $0x1b
ffffffff80000178:	e9 f3 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000017d <_interrupt28>:
ffffffff8000017d:	6a 00                	pushq  $0x0
ffffffff8000017f:	6a 1c                	pushq  $0x1c
ffffffff80000181:	e9 ea fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000186 <_interrupt29>:
ffffffff80000186:	6a 00                	pushq  $0x0
ffffffff80000188:	6a 1d                	pushq  $0x1d
ffffffff8000018a:	e9 e1 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000018f <_interrupt30>:
ffffffff8000018f:	6a 1e                	pushq  $0x1e
ffffffff80000191:	e9 da fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000196 <_interrupt31>:
ffffffff80000196:	6a 00                	pushq  $0x0
ffffffff80000198:	6a 1f                	pushq  $0x1f
ffffffff8000019a:	e9 d1 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000019f <_interrupt32>:
ffffffff8000019f:	6a 00                	pushq  $0x0
ffffffff800001a1:	6a 20                	pushq  $0x20
ffffffff800001a3:	e9 c8 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001a8 <_interrupt33>:
ffffffff800001a8:	6a 00                	pushq  $0x0
ffffffff800001aa:	6a 21                	pushq  $0x21
ffffffff800001ac:	e9 bf fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001b1 <_interrupt34>:
ffffffff800001b1:	6a 00                	pushq  $0x0
ffffffff800001b3:	6a 22                	pushq  $0x22
ffffffff800001b5:	e9 b6 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001ba <_interrupt35>:
ffffffff800001ba:	6a 00                	pushq  $0x0
ffffffff800001bc:	6a 23                	pushq  $0x23
ffffffff800001be:	e9 ad fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001c3 <_interrupt36>:
ffffffff800001c3:	6a 00                	pushq  $0x0
ffffffff800001c5:	6a 24                	pushq  $0x24
ffffffff800001c7:	e9 a4 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001cc <_interrupt37>:
ffffffff800001cc:	6a 00                	pushq  $0x0
ffffffff800001ce:	6a 25                	pushq  $0x25
ffffffff800001d0:	e9 9b fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001d5 <_interrupt38>:
ffffffff800001d5:	6a 00                	pushq  $0x0
ffffffff800001d7:	6a 26                	pushq  $0x26
ffffffff800001d9:	e9 92 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001de <_interrupt39>:
ffffffff800001de:	6a 00                	pushq  $0x0
ffffffff800001e0:	6a 27                	pushq  $0x27
ffffffff800001e2:	e9 89 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001e7 <_interrupt40>:
ffffffff800001e7:	6a 00                	pushq  $0x0
ffffffff800001e9:	6a 28                	pushq  $0x28
ffffffff800001eb:	e9 80 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001f0 <_interrupt41>:
ffffffff800001f0:	6a 00                	pushq  $0x0
ffffffff800001f2:	6a 29                	pushq  $0x29
ffffffff800001f4:	e9 77 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff800001f9 <_interrupt42>:
ffffffff800001f9:	6a 00                	pushq  $0x0
ffffffff800001fb:	6a 2a                	pushq  $0x2a
ffffffff800001fd:	e9 6e fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000202 <_interrupt43>:
ffffffff80000202:	6a 00                	pushq  $0x0
ffffffff80000204:	6a 2b                	pushq  $0x2b
ffffffff80000206:	e9 65 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000020b <_interrupt44>:
ffffffff8000020b:	6a 00                	pushq  $0x0
ffffffff8000020d:	6a 2c                	pushq  $0x2c
ffffffff8000020f:	e9 5c fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000214 <_interrupt45>:
ffffffff80000214:	6a 00                	pushq  $0x0
ffffffff80000216:	6a 2d                	pushq  $0x2d
ffffffff80000218:	e9 53 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000021d <_interrupt46>:
ffffffff8000021d:	6a 00                	pushq  $0x0
ffffffff8000021f:	6a 2e                	pushq  $0x2e
ffffffff80000221:	e9 4a fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000226 <_interrupt47>:
ffffffff80000226:	6a 00                	pushq  $0x0
ffffffff80000228:	6a 2f                	pushq  $0x2f
ffffffff8000022a:	e9 41 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff8000022f <_interrupt127>:
ffffffff8000022f:	6a 00                	pushq  $0x0
ffffffff80000231:	6a 7f                	pushq  $0x7f
ffffffff80000233:	e9 38 fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000238 <_interrupt128>:
ffffffff80000238:	6a 00                	pushq  $0x0
ffffffff8000023a:	68 80 00 00 00       	pushq  $0x80
ffffffff8000023f:	e9 2c fe ff ff       	jmpq   ffffffff80000070 <_interrupt_common>

ffffffff80000244 <isr_stub_table>:
ffffffff80000244:	b0 00 00 80 ff ff ff ff b6 00 00 80 ff ff ff ff     ................
ffffffff80000254:	bc 00 00 80 ff ff ff ff c2 00 00 80 ff ff ff ff     ................
ffffffff80000264:	c8 00 00 80 ff ff ff ff ce 00 00 80 ff ff ff ff     ................
ffffffff80000274:	d4 00 00 80 ff ff ff ff da 00 00 80 ff ff ff ff     ................
ffffffff80000284:	e0 00 00 80 ff ff ff ff e4 00 00 80 ff ff ff ff     ................
ffffffff80000294:	ea 00 00 80 ff ff ff ff ee 00 00 80 ff ff ff ff     ................
ffffffff800002a4:	f5 00 00 80 ff ff ff ff fc 00 00 80 ff ff ff ff     ................
ffffffff800002b4:	03 01 00 80 ff ff ff ff 0a 01 00 80 ff ff ff ff     ................
ffffffff800002c4:	13 01 00 80 ff ff ff ff 1c 01 00 80 ff ff ff ff     ................
ffffffff800002d4:	23 01 00 80 ff ff ff ff 2c 01 00 80 ff ff ff ff     #.......,.......
ffffffff800002e4:	35 01 00 80 ff ff ff ff 3e 01 00 80 ff ff ff ff     5.......>.......
ffffffff800002f4:	47 01 00 80 ff ff ff ff 50 01 00 80 ff ff ff ff     G.......P.......
ffffffff80000304:	59 01 00 80 ff ff ff ff 62 01 00 80 ff ff ff ff     Y.......b.......
ffffffff80000314:	6b 01 00 80 ff ff ff ff 74 01 00 80 ff ff ff ff     k.......t.......
ffffffff80000324:	7d 01 00 80 ff ff ff ff 86 01 00 80 ff ff ff ff     }...............
ffffffff80000334:	8f 01 00 80 ff ff ff ff 96 01 00 80 ff ff ff ff     ................
ffffffff80000344:	9f 01 00 80 ff ff ff ff a8 01 00 80 ff ff ff ff     ................
ffffffff80000354:	b1 01 00 80 ff ff ff ff ba 01 00 80 ff ff ff ff     ................
ffffffff80000364:	c3 01 00 80 ff ff ff ff cc 01 00 80 ff ff ff ff     ................
ffffffff80000374:	d5 01 00 80 ff ff ff ff de 01 00 80 ff ff ff ff     ................
ffffffff80000384:	e7 01 00 80 ff ff ff ff f0 01 00 80 ff ff ff ff     ................
ffffffff80000394:	f9 01 00 80 ff ff ff ff 02 02 00 80 ff ff ff ff     ................
ffffffff800003a4:	0b 02 00 80 ff ff ff ff 14 02 00 80 ff ff ff ff     ................
ffffffff800003b4:	1d 02 00 80 ff ff ff ff 26 02 00 80 ff ff ff ff     ........&.......
ffffffff800003c4:	2f 02 00 80 ff ff ff ff 38 02 00 80 ff ff ff ff     /.......8.......

ffffffff800003d4 <idt_load>:
ffffffff800003d4:	0f 01 1f             	lidt   (%rdi)
ffffffff800003d7:	fb                   	sti    
ffffffff800003d8:	c3                   	retq   

ffffffff800003d9 <int_test>:
ffffffff800003d9:	cd 7f                	int    $0x7f
ffffffff800003db:	c3                   	retq   

ffffffff800003dc <int_test.end>:
ffffffff800003dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800003e0 <user_init>:
extern void enable_sce();

void user_init()
{

}
ffffffff800003e0:	f3 c3                	repz retq 
ffffffff800003e2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800003e9:	00 00 00 00 
ffffffff800003ed:	0f 1f 00             	nopl   (%rax)

ffffffff800003f0 <user_enter>:


void user_enter(void* func, uint8_t* stack)
{

ffffffff800003f0:	f3 c3                	repz retq 
ffffffff800003f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800003f9:	00 00 00 
ffffffff800003fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000400 <outb>:
#include <stdint.h>
#include <stddef.h>

void outb(uint16_t port, uint8_t val)
{
    asm volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80000400:	89 f0                	mov    %esi,%eax
ffffffff80000402:	89 fa                	mov    %edi,%edx
ffffffff80000404:	ee                   	out    %al,(%dx)
}
ffffffff80000405:	c3                   	retq   
ffffffff80000406:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000040d:	00 00 00 

ffffffff80000410 <inb>:

uint8_t inb(uint16_t port)
{
    uint8_t ret;
    asm volatile ( "inb %1, %0"
ffffffff80000410:	89 fa                	mov    %edi,%edx
ffffffff80000412:	ec                   	in     (%dx),%al
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
}
ffffffff80000413:	c3                   	retq   
ffffffff80000414:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000041b:	00 00 00 00 
ffffffff8000041f:	90                   	nop

ffffffff80000420 <io_wait>:
    asm volatile ( "inb %1, %0"
ffffffff80000420:	e4 80                	in     $0x80,%al

void io_wait()
{
    inb(0x80);
ffffffff80000422:	c3                   	retq   
ffffffff80000423:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000042a:	00 00 00 
ffffffff8000042d:	0f 1f 00             	nopl   (%rax)

ffffffff80000430 <schedule>:
ffffffff80000430:	f3 c3                	repz retq 
ffffffff80000432:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000439:	00 00 00 00 
ffffffff8000043d:	0f 1f 00             	nopl   (%rax)

ffffffff80000440 <scheduler_init>:
}

void scheduler_init()
{

ffffffff80000440:	f3 c3                	repz retq 
ffffffff80000442:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000449:	00 00 00 
ffffffff8000044c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000450 <stivale2_get_tag>:
};



void *stivale2_get_tag(struct stivale2_struct *stivale2_struct, uint64_t id) {
    struct stivale2_tag *current_tag = (void *)stivale2_struct->tags;
ffffffff80000450:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
    for (;;) {
        if (current_tag == NULL) {
ffffffff80000457:	48 85 c0             	test   %rax,%rax
ffffffff8000045a:	74 1a                	je     ffffffff80000476 <stivale2_get_tag+0x26>
            return NULL;
        }
        if (current_tag->identifier == id) {
ffffffff8000045c:	48 3b 30             	cmp    (%rax),%rsi
ffffffff8000045f:	75 0c                	jne    ffffffff8000046d <stivale2_get_tag+0x1d>
ffffffff80000461:	eb 1d                	jmp    ffffffff80000480 <stivale2_get_tag+0x30>
ffffffff80000463:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80000468:	48 39 30             	cmp    %rsi,(%rax)
ffffffff8000046b:	74 09                	je     ffffffff80000476 <stivale2_get_tag+0x26>
            return current_tag;
        }
        current_tag = (void *)current_tag->next;
ffffffff8000046d:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff80000471:	48 85 c0             	test   %rax,%rax
ffffffff80000474:	75 f2                	jne    ffffffff80000468 <stivale2_get_tag+0x18>
    }
}
ffffffff80000476:	f3 c3                	repz retq 
ffffffff80000478:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000047f:	00 
ffffffff80000480:	f3 c3                	repz retq 
ffffffff80000482:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000489:	00 00 00 00 
ffffffff8000048d:	0f 1f 00             	nopl   (%rax)

ffffffff80000490 <_start>:
    struct stivale2_tag *current_tag = (void *)stivale2_struct->tags;
ffffffff80000490:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
        if (current_tag == NULL) {
ffffffff80000497:	48 85 c0             	test   %rax,%rax
ffffffff8000049a:	74 2c                	je     ffffffff800004c8 <_start+0x38>
        if (current_tag->identifier == id) {
ffffffff8000049c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8000049f:	48 be 74 09 3b 23 c3 	movabs $0xc2b3f4c3233b0974,%rsi
ffffffff800004a6:	f4 b3 c2 
ffffffff800004a9:	48 39 f2             	cmp    %rsi,%rdx
ffffffff800004ac:	0f 84 31 01 00 00    	je     ffffffff800005e3 <_start+0x153>
ffffffff800004b2:	48 89 c1             	mov    %rax,%rcx
ffffffff800004b5:	eb 05                	jmp    ffffffff800004bc <_start+0x2c>
ffffffff800004b7:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800004ba:	74 0f                	je     ffffffff800004cb <_start+0x3b>
        current_tag = (void *)current_tag->next;
ffffffff800004bc:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800004c0:	48 85 c9             	test   %rcx,%rcx
ffffffff800004c3:	75 f2                	jne    ffffffff800004b7 <_start+0x27>
ffffffff800004c5:	0f 1f 00             	nopl   (%rax)

    // Check if the tag was actually found.
    if (term_str_tag == NULL) {
        // It wasn't found, just hang...
        for (;;) {
            asm ("hlt");
ffffffff800004c8:	f4                   	hlt    
ffffffff800004c9:	eb fd                	jmp    ffffffff800004c8 <_start+0x38>
        }
    }

    void* term_write_ptr = (void *)term_str_tag->term_write;
    term_write = term_write_ptr;
ffffffff800004cb:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff800004cf:	48 89 0d 02 94 00 00 	mov    %rcx,0x9402(%rip)        # ffffffff800098d8 <term_write>
        if (current_tag->identifier == id) {
ffffffff800004d6:	48 b9 fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rcx
ffffffff800004dd:	61 64 50 
ffffffff800004e0:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800004e3:	0f 84 1f 01 00 00    	je     ffffffff80000608 <_start+0x178>
ffffffff800004e9:	48 89 c1             	mov    %rax,%rcx
ffffffff800004ec:	48 be fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rsi
ffffffff800004f3:	61 64 50 
ffffffff800004f6:	eb 05                	jmp    ffffffff800004fd <_start+0x6d>
ffffffff800004f8:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800004fb:	74 1e                	je     ffffffff8000051b <_start+0x8b>
        current_tag = (void *)current_tag->next;
ffffffff800004fd:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000501:	48 85 c9             	test   %rcx,%rcx
ffffffff80000504:	75 f2                	jne    ffffffff800004f8 <_start+0x68>
    //printf("Terminal Initialized\n");

    //Grab the Framebuffer
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000506:	48 c7 05 a7 93 00 00 	movq   $0x0,0x93a7(%rip)        # ffffffff800098b8 <boot_info+0x18>
ffffffff8000050d:	00 00 00 00 
ffffffff80000511:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (boot_info.tag_framebuffer == NULL)
    {
    //    printf("Framebuffer Not Found\n");
        for( ;; ) 
            asm("hlt");
ffffffff80000518:	f4                   	hlt    
ffffffff80000519:	eb fd                	jmp    ffffffff80000518 <_start+0x88>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff8000051b:	48 89 0d 96 93 00 00 	mov    %rcx,0x9396(%rip)        # ffffffff800098b8 <boot_info+0x18>
        if (current_tag->identifier == id) {
ffffffff80000522:	48 b9 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rcx
ffffffff80000529:	f7 87 21 
ffffffff8000052c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000052f:	0f 84 c7 00 00 00    	je     ffffffff800005fc <_start+0x16c>
ffffffff80000535:	48 89 c1             	mov    %rax,%rcx
ffffffff80000538:	48 be 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rsi
ffffffff8000053f:	f7 87 21 
        current_tag = (void *)current_tag->next;
ffffffff80000542:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000546:	48 85 c9             	test   %rcx,%rcx
ffffffff80000549:	0f 84 84 00 00 00    	je     ffffffff800005d3 <_start+0x143>
        if (current_tag->identifier == id) {
ffffffff8000054f:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000552:	75 ee                	jne    ffffffff80000542 <_start+0xb2>
    }
    //printf("Framebuffer found at %x\n", boot_info.tag_framebuffer->framebuffer_addr);

    //Memory Map
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000554:	48 89 0d 55 93 00 00 	mov    %rcx,0x9355(%rip)        # ffffffff800098b0 <boot_info+0x10>
        if (current_tag->identifier == id) {
ffffffff8000055b:	48 b9 f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rcx
ffffffff80000562:	78 0d 06 
ffffffff80000565:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000568:	0f 84 85 00 00 00    	je     ffffffff800005f3 <_start+0x163>
ffffffff8000056e:	48 89 c1             	mov    %rax,%rcx
ffffffff80000571:	48 be f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rsi
ffffffff80000578:	78 0d 06 
ffffffff8000057b:	eb 05                	jmp    ffffffff80000582 <_start+0xf2>
ffffffff8000057d:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000580:	74 09                	je     ffffffff8000058b <_start+0xfb>
        current_tag = (void *)current_tag->next;
ffffffff80000582:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000586:	48 85 c9             	test   %rcx,%rcx
ffffffff80000589:	75 f2                	jne    ffffffff8000057d <_start+0xed>
            asm("hlt");
    }
    //printf("Memory Map at %x\n", boot_info.tag_memmap);

    //Kernel Base Address
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff8000058b:	48 89 0d 0e 93 00 00 	mov    %rcx,0x930e(%rip)        # ffffffff800098a0 <boot_info>
        if (current_tag->identifier == id) {
ffffffff80000592:	48 b9 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rcx
ffffffff80000599:	86 17 9e 
ffffffff8000059c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000059f:	74 1a                	je     ffffffff800005bb <_start+0x12b>
ffffffff800005a1:	48 ba 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rdx
ffffffff800005a8:	86 17 9e 
ffffffff800005ab:	eb 05                	jmp    ffffffff800005b2 <_start+0x122>
ffffffff800005ad:	48 39 10             	cmp    %rdx,(%rax)
ffffffff800005b0:	74 09                	je     ffffffff800005bb <_start+0x12b>
        current_tag = (void *)current_tag->next;
ffffffff800005b2:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff800005b6:	48 85 c0             	test   %rax,%rax
ffffffff800005b9:	75 f2                	jne    ffffffff800005ad <_start+0x11d>
{
ffffffff800005bb:	52                   	push   %rdx
    }
    //printf("Kernel Physical Base Address %x\n", boot_info.tag_kernel_base_address->physical_base_address);
    //printf("Kernel Virtual Base Address  %x\n", boot_info.tag_kernel_base_address->virtual_base_address);
    //printf("--------\n");

    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff800005bc:	48 89 05 05 93 00 00 	mov    %rax,0x9305(%rip)        # ffffffff800098c8 <boot_info+0x28>

    kernel();
ffffffff800005c3:	31 c0                	xor    %eax,%eax
ffffffff800005c5:	e8 d6 28 00 00       	callq  ffffffff80002ea0 <kernel>
ffffffff800005ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)


    // We should never get here, but just in case...
    for (;;) {
        asm ("hlt");
ffffffff800005d0:	f4                   	hlt    
ffffffff800005d1:	eb fd                	jmp    ffffffff800005d0 <_start+0x140>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005d3:	48 c7 05 d2 92 00 00 	movq   $0x0,0x92d2(%rip)        # ffffffff800098b0 <boot_info+0x10>
ffffffff800005da:	00 00 00 00 
ffffffff800005de:	66 90                	xchg   %ax,%ax
            asm("hlt");
ffffffff800005e0:	f4                   	hlt    
ffffffff800005e1:	eb fd                	jmp    ffffffff800005e0 <_start+0x150>
    term_write = term_write_ptr;
ffffffff800005e3:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800005e7:	48 89 0d ea 92 00 00 	mov    %rcx,0x92ea(%rip)        # ffffffff800098d8 <term_write>
ffffffff800005ee:	e9 f6 fe ff ff       	jmpq   ffffffff800004e9 <_start+0x59>
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff800005f3:	48 89 05 a6 92 00 00 	mov    %rax,0x92a6(%rip)        # ffffffff800098a0 <boot_info>
ffffffff800005fa:	eb a5                	jmp    ffffffff800005a1 <_start+0x111>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005fc:	48 89 05 ad 92 00 00 	mov    %rax,0x92ad(%rip)        # ffffffff800098b0 <boot_info+0x10>
ffffffff80000603:	e9 66 ff ff ff       	jmpq   ffffffff8000056e <_start+0xde>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000608:	48 89 05 a9 92 00 00 	mov    %rax,0x92a9(%rip)        # ffffffff800098b8 <boot_info+0x18>
ffffffff8000060f:	e9 21 ff ff ff       	jmpq   ffffffff80000535 <_start+0xa5>
ffffffff80000614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000061b:	00 00 00 
ffffffff8000061e:	66 90                	xchg   %ax,%ax

ffffffff80000620 <vmm_create_page_table>:
extern uint8_t* _end_of_kernel;
struct PageTable* RootPageDirectory = {0};


struct PageTable* vmm_create_page_table()
{
ffffffff80000620:	53                   	push   %rbx
    void* page = pmm_allocpage();   //get a page
ffffffff80000621:	31 c0                	xor    %eax,%eax
ffffffff80000623:	e8 68 09 00 00       	callq  ffffffff80000f90 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000628:	48 85 c0             	test   %rax,%rax
ffffffff8000062b:	74 23                	je     ffffffff80000650 <vmm_create_page_table+0x30>

    memset((uint8_t*)page, 0, 4096);    //clear the page
ffffffff8000062d:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff80000632:	31 f6                	xor    %esi,%esi
ffffffff80000634:	48 89 c7             	mov    %rax,%rdi
ffffffff80000637:	48 89 c3             	mov    %rax,%rbx
ffffffff8000063a:	e8 01 28 00 00       	callq  ffffffff80002e40 <memset>
    return addr - 0xFFFF800000000000;
}

static inline uint64_t phys_to_hh_data(uint64_t addr)
{
    return 0xFFFF800000000000 + addr;
ffffffff8000063f:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80000646:	80 ff ff 
ffffffff80000649:	48 01 d8             	add    %rbx,%rax
    return (struct PageTable*)phys_to_hh_data((uint64_t)page);
}
ffffffff8000064c:	5b                   	pop    %rbx
ffffffff8000064d:	c3                   	retq   
ffffffff8000064e:	66 90                	xchg   %ax,%ax
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000650:	31 c0                	xor    %eax,%eax
}
ffffffff80000652:	5b                   	pop    %rbx
ffffffff80000653:	c3                   	retq   
ffffffff80000654:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000065b:	00 00 00 00 
ffffffff8000065f:	90                   	nop

ffffffff80000660 <vmm_init>:

void vmm_init()
{
ffffffff80000660:	53                   	push   %rbx
    printf("VMM Init\n");
ffffffff80000661:	48 c7 c7 e0 41 00 80 	mov    $0xffffffff800041e0,%rdi
ffffffff80000668:	31 c0                	xor    %eax,%eax
ffffffff8000066a:	e8 c1 24 00 00       	callq  ffffffff80002b30 <printf_>

    //RootPageDirectory = vmm_create_page_table();

    uint64_t* PML4 = (uint64_t*)read_cr3();
ffffffff8000066f:	31 c0                	xor    %eax,%eax
ffffffff80000671:	e8 ba f9 ff ff       	callq  ffffffff80000030 <read_cr3>
    printf("CR3: %p\n", (uint64_t)PML4);
ffffffff80000676:	48 c7 c7 ea 41 00 80 	mov    $0xffffffff800041ea,%rdi
ffffffff8000067d:	48 89 c6             	mov    %rax,%rsi
ffffffff80000680:	31 c0                	xor    %eax,%eax
ffffffff80000682:	e8 a9 24 00 00       	callq  ffffffff80002b30 <printf_>
    
    struct PageTable* newPageTable = vmm_create_page_table();
ffffffff80000687:	31 c0                	xor    %eax,%eax
ffffffff80000689:	e8 92 ff ff ff       	callq  ffffffff80000620 <vmm_create_page_table>

    newPageTable->entry[0] = 0x01;

    printf("%p\n", newPageTable);
ffffffff8000068e:	48 c7 c7 ef 41 00 80 	mov    $0xffffffff800041ef,%rdi
    struct PageTable* newPageTable = vmm_create_page_table();
ffffffff80000695:	48 89 c3             	mov    %rax,%rbx
    printf("%p\n", newPageTable);
ffffffff80000698:	48 89 c6             	mov    %rax,%rsi
    newPageTable->entry[0] = 0x01;
ffffffff8000069b:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    printf("%p\n", newPageTable);
ffffffff800006a2:	31 c0                	xor    %eax,%eax
ffffffff800006a4:	e8 87 24 00 00       	callq  ffffffff80002b30 <printf_>
    printf("%p\n", newPageTable->entry[0]);
ffffffff800006a9:	48 8b 33             	mov    (%rbx),%rsi
ffffffff800006ac:	48 c7 c7 ef 41 00 80 	mov    $0xffffffff800041ef,%rdi
ffffffff800006b3:	31 c0                	xor    %eax,%eax

    //printf("Root Page Directory at: 0x%p\n", RootPageDirectory);

    

}
ffffffff800006b5:	5b                   	pop    %rbx
    printf("%p\n", newPageTable->entry[0]);
ffffffff800006b6:	e9 75 24 00 00       	jmpq   ffffffff80002b30 <printf_>
ffffffff800006bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800006c0 <liballoc_lock>:
#include "liballoc.h"
#include "pmm.h"

int liballoc_lock()
{
    asm("cli");
ffffffff800006c0:	fa                   	cli    
    return 0;
}
ffffffff800006c1:	31 c0                	xor    %eax,%eax
ffffffff800006c3:	c3                   	retq   
ffffffff800006c4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800006cb:	00 00 00 00 
ffffffff800006cf:	90                   	nop

ffffffff800006d0 <liballoc_unlock>:


int liballoc_unlock()
{
    asm("sti");
ffffffff800006d0:	fb                   	sti    
    return 0;
}
ffffffff800006d1:	31 c0                	xor    %eax,%eax
ffffffff800006d3:	c3                   	retq   
ffffffff800006d4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800006db:	00 00 00 00 
ffffffff800006df:	90                   	nop

ffffffff800006e0 <liballoc_free>:

int liballoc_free(void* page, size_t count)
{
ffffffff800006e0:	48 83 ec 08          	sub    $0x8,%rsp
    pmm_freepages(page, count);
ffffffff800006e4:	e8 07 0a 00 00       	callq  ffffffff800010f0 <pmm_freepages>
}
ffffffff800006e9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800006ed:	c3                   	retq   
ffffffff800006ee:	66 90                	xchg   %ax,%ax

ffffffff800006f0 <liballoc_alloc>:

void* liballoc_alloc(size_t count)
{
    pmm_allocpages(count);
ffffffff800006f0:	e9 4b 09 00 00       	jmpq   ffffffff80001040 <pmm_allocpages>
ffffffff800006f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800006fc:	00 00 00 
ffffffff800006ff:	90                   	nop

ffffffff80000700 <allocate_new_page>:
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
		st += sizeof(struct liballoc_minor);
ffffffff80000700:	83 c7 50             	add    $0x50,%edi
{
ffffffff80000703:	53                   	push   %rbx
ffffffff80000704:	bb 10 00 00 00       	mov    $0x10,%ebx
ffffffff80000709:	89 f8                	mov    %edi,%eax

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff8000070b:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
ffffffff80000711:	c1 e8 0c             	shr    $0xc,%eax
			st  = st / (l_pageSize);
		else
			st  = st / (l_pageSize) + 1;
ffffffff80000714:	83 ff 01             	cmp    $0x1,%edi
ffffffff80000717:	83 d8 ff             	sbb    $0xffffffff,%eax
ffffffff8000071a:	83 f8 10             	cmp    $0x10,%eax
ffffffff8000071d:	0f 43 d8             	cmovae %eax,%ebx

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80000720:	89 df                	mov    %ebx,%edi
ffffffff80000722:	e8 c9 ff ff ff       	callq  ffffffff800006f0 <liballoc_alloc>

		if ( maj == NULL ) 
ffffffff80000727:	48 85 c0             	test   %rax,%rax
ffffffff8000072a:	74 34                	je     ffffffff80000760 <allocate_new_page+0x60>
			return NULL;	// uh oh, we ran out of memory.
		}
		
		maj->prev 	= NULL;
		maj->next 	= NULL;
		maj->pages 	= st;
ffffffff8000072c:	89 58 10             	mov    %ebx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff8000072f:	c1 e3 0c             	shl    $0xc,%ebx
		maj->prev 	= NULL;
ffffffff80000732:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80000739:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80000740:	00 
		maj->size 	= st * l_pageSize;
ffffffff80000741:	89 58 14             	mov    %ebx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80000744:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff8000074b:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000752:	00 

		l_allocated += maj->size;
ffffffff80000753:	48 01 1d ae d4 00 00 	add    %rbx,0xd4ae(%rip)        # ffffffff8000dc08 <l_allocated>
		FLUSH();
		#endif
	
		
      return maj;
}
ffffffff8000075a:	5b                   	pop    %rbx
ffffffff8000075b:	c3                   	retq   
ffffffff8000075c:	0f 1f 40 00          	nopl   0x0(%rax)
			l_warningCount += 1;
ffffffff80000760:	48 83 05 90 d4 00 00 	addq   $0x1,0xd490(%rip)        # ffffffff8000dbf8 <l_warningCount>
ffffffff80000767:	01 
}
ffffffff80000768:	5b                   	pop    %rbx
ffffffff80000769:	c3                   	retq   
ffffffff8000076a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000770 <kmalloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff80000770:	41 57                	push   %r15
ffffffff80000772:	41 56                	push   %r14
ffffffff80000774:	41 55                	push   %r13
ffffffff80000776:	41 54                	push   %r12
ffffffff80000778:	49 89 fd             	mov    %rdi,%r13
ffffffff8000077b:	55                   	push   %rbp
ffffffff8000077c:	53                   	push   %rbx
ffffffff8000077d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000781:	eb 1a                	jmp    ffffffff8000079d <kmalloc+0x2d>
ffffffff80000783:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80000788:	31 c0                	xor    %eax,%eax
		return PREFIX(malloc)(1);
ffffffff8000078a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		l_warningCount += 1;
ffffffff80000790:	48 83 05 60 d4 00 00 	addq   $0x1,0xd460(%rip)        # ffffffff8000dbf8 <l_warningCount>
ffffffff80000797:	01 
		liballoc_unlock();
ffffffff80000798:	e8 33 ff ff ff       	callq  ffffffff800006d0 <liballoc_unlock>
		size += ALIGNMENT + ALIGN_INFO;
ffffffff8000079d:	4d 8d 65 20          	lea    0x20(%r13),%r12
	liballoc_lock();
ffffffff800007a1:	31 c0                	xor    %eax,%eax
ffffffff800007a3:	e8 18 ff ff ff       	callq  ffffffff800006c0 <liballoc_lock>
	if ( size == 0 )
ffffffff800007a8:	4d 85 e4             	test   %r12,%r12
ffffffff800007ab:	74 db                	je     ffffffff80000788 <kmalloc+0x18>
	}
	

	if ( l_memRoot == NULL )
ffffffff800007ad:	48 8b 35 64 d4 00 00 	mov    0xd464(%rip),%rsi        # ffffffff8000dc18 <l_memRoot>
ffffffff800007b4:	48 85 f6             	test   %rsi,%rsi
ffffffff800007b7:	0f 84 c3 02 00 00    	je     ffffffff80000a80 <kmalloc+0x310>

	maj = l_memRoot;
	startedBet = 0;
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff800007bd:	48 8b 15 4c d4 00 00 	mov    0xd44c(%rip),%rdx        # ffffffff8000dc10 <l_bestBet>
ffffffff800007c4:	49 8d 5d 48          	lea    0x48(%r13),%rbx
ffffffff800007c8:	48 85 d2             	test   %rdx,%rdx
ffffffff800007cb:	0f 84 3f 02 00 00    	je     ffffffff80000a10 <kmalloc+0x2a0>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff800007d1:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff800007d4:	8b 4a 18             	mov    0x18(%rdx),%ecx

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
		{
			maj = l_bestBet;
			startedBet = 1;
ffffffff800007d7:	41 bf 01 00 00 00    	mov    $0x1,%r15d
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff800007dd:	41 89 c6             	mov    %eax,%r14d
ffffffff800007e0:	41 29 ce             	sub    %ecx,%r14d
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff800007e3:	49 39 de             	cmp    %rbx,%r14
ffffffff800007e6:	0f 86 b4 01 00 00    	jbe    ffffffff800009a0 <kmalloc+0x230>
		}
	}
	
	while ( maj != NULL )
	{
		diff  = maj->size - maj->usage;	
ffffffff800007ec:	29 c8                	sub    %ecx,%eax
										// free memory in the block

		if ( bestSize < diff )
ffffffff800007ee:	4c 39 f0             	cmp    %r14,%rax
ffffffff800007f1:	76 0a                	jbe    ffffffff800007fd <kmalloc+0x8d>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff800007f3:	48 89 15 16 d4 00 00 	mov    %rdx,0xd416(%rip)        # ffffffff8000dc10 <l_bestBet>
ffffffff800007fa:	49 89 c6             	mov    %rax,%r14
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff800007fd:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000800:	73 22                	jae    ffffffff80000824 <kmalloc+0xb4>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80000802:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff80000806:	48 85 c0             	test   %rax,%rax
ffffffff80000809:	0f 84 b9 00 00 00    	je     ffffffff800008c8 <kmalloc+0x158>
ffffffff8000080f:	48 89 c2             	mov    %rax,%rdx
ffffffff80000812:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000815:	8b 4a 18             	mov    0x18(%rdx),%ecx
		diff  = maj->size - maj->usage;	
ffffffff80000818:	29 c8                	sub    %ecx,%eax
		if ( bestSize < diff )
ffffffff8000081a:	4c 39 f0             	cmp    %r14,%rax
ffffffff8000081d:	77 d4                	ja     ffffffff800007f3 <kmalloc+0x83>
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff8000081f:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000822:	72 de                	jb     ffffffff80000802 <kmalloc+0x92>
ffffffff80000824:	48 89 d5             	mov    %rdx,%rbp
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80000827:	48 8b 55 20          	mov    0x20(%rbp),%rdx
ffffffff8000082b:	48 85 d2             	test   %rdx,%rdx
ffffffff8000082e:	0f 84 7d 01 00 00    	je     ffffffff800009b1 <kmalloc+0x241>
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
		diff -= (uintptr_t)maj;
ffffffff80000834:	48 89 d0             	mov    %rdx,%rax
ffffffff80000837:	48 29 e8             	sub    %rbp,%rax
		diff -= sizeof(struct liballoc_major);
ffffffff8000083a:	48 83 e8 28          	sub    $0x28,%rax

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff8000083e:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000841:	0f 83 62 02 00 00    	jae    ffffffff80000aa9 <kmalloc+0x339>
		
			// Looping within the block now...
		while ( min != NULL )
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80000847:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff8000084b:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff8000084e:	48 85 c9             	test   %rcx,%rcx
ffffffff80000851:	74 25                	je     ffffffff80000878 <kmalloc+0x108>
				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
					diff -= (uintptr_t)min;
ffffffff80000853:	48 89 c8             	mov    %rcx,%rax
ffffffff80000856:	48 29 d0             	sub    %rdx,%rax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000859:	48 83 e8 28          	sub    $0x28,%rax
					diff -= min->size;
ffffffff8000085d:	48 29 f0             	sub    %rsi,%rax
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000860:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000863:	0f 83 b7 00 00 00    	jae    ffffffff80000920 <kmalloc+0x1b0>
ffffffff80000869:	48 89 ca             	mov    %rcx,%rdx
				if ( min->next == NULL )
ffffffff8000086c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000870:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000873:	48 85 c9             	test   %rcx,%rcx
ffffffff80000876:	75 db                	jne    ffffffff80000853 <kmalloc+0xe3>
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80000878:	8b 45 14             	mov    0x14(%rbp),%eax
					diff -= sizeof( struct liballoc_minor );
ffffffff8000087b:	48 8d 44 05 d8       	lea    -0x28(%rbp,%rax,1),%rax
ffffffff80000880:	48 29 d0             	sub    %rdx,%rax
					diff -= min->size; 
ffffffff80000883:	48 29 f0             	sub    %rsi,%rax
					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000886:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000889:	0f 83 99 01 00 00    	jae    ffffffff80000a28 <kmalloc+0x2b8>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff8000088f:	48 8b 55 08          	mov    0x8(%rbp),%rdx
ffffffff80000893:	48 85 d2             	test   %rdx,%rdx
ffffffff80000896:	0f 85 76 ff ff ff    	jne    ffffffff80000812 <kmalloc+0xa2>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff8000089c:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff800008a0:	74 5e                	je     ffffffff80000900 <kmalloc+0x190>
				startedBet = 0;
				continue;
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff800008a2:	44 89 e7             	mov    %r12d,%edi
ffffffff800008a5:	e8 56 fe ff ff       	callq  ffffffff80000700 <allocate_new_page>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff800008aa:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff800008ad:	48 89 c2             	mov    %rax,%rdx
ffffffff800008b0:	48 89 45 08          	mov    %rax,0x8(%rbp)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff800008b4:	0f 84 e1 01 00 00    	je     ffffffff80000a9b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff800008ba:	48 89 28             	mov    %rbp,(%rax)
ffffffff800008bd:	e9 50 ff ff ff       	jmpq   ffffffff80000812 <kmalloc+0xa2>
ffffffff800008c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff800008c8:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff800008cc:	74 32                	je     ffffffff80000900 <kmalloc+0x190>
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff800008ce:	44 89 e7             	mov    %r12d,%edi
ffffffff800008d1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff800008d6:	e8 25 fe ff ff       	callq  ffffffff80000700 <allocate_new_page>
ffffffff800008db:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff800008e0:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff800008e3:	48 89 c5             	mov    %rax,%rbp
ffffffff800008e6:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff800008ea:	0f 84 ab 01 00 00    	je     ffffffff80000a9b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff800008f0:	48 89 10             	mov    %rdx,(%rax)
ffffffff800008f3:	e9 2f ff ff ff       	jmpq   ffffffff80000827 <kmalloc+0xb7>
ffffffff800008f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800008ff:	00 
				maj = l_memRoot;
ffffffff80000900:	48 8b 15 11 d3 00 00 	mov    0xd311(%rip),%rdx        # ffffffff8000dc18 <l_memRoot>
	while ( maj != NULL )
ffffffff80000907:	48 85 d2             	test   %rdx,%rdx
ffffffff8000090a:	0f 84 8b 01 00 00    	je     ffffffff80000a9b <kmalloc+0x32b>
ffffffff80000910:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000913:	e9 fa fe ff ff       	jmpq   ffffffff80000812 <kmalloc+0xa2>
ffffffff80000918:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000091f:	00 
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000920:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
						l_inuse += size;
ffffffff80000924:	4c 01 25 d5 d2 00 00 	add    %r12,0xd2d5(%rip)        # ffffffff8000dc00 <l_inuse>
						new_min->next = min->next;
ffffffff8000092b:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
						min->next->prev = new_min;
ffffffff8000092f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000933:	48 8d 43 28          	lea    0x28(%rbx),%rax
						new_min->magic = LIBALLOC_MAGIC;
ffffffff80000937:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
						ALIGN( p );
ffffffff8000093e:	48 83 c3 60          	add    $0x60,%rbx
						new_min->prev = min;
ffffffff80000942:	48 89 53 c8          	mov    %rdx,-0x38(%rbx)
						new_min->size = size;
ffffffff80000946:	44 89 63 e4          	mov    %r12d,-0x1c(%rbx)
						new_min->req_size = req_size;
ffffffff8000094a:	44 89 6b e8          	mov    %r13d,-0x18(%rbx)
						new_min->block = maj;
ffffffff8000094e:	48 89 6b d8          	mov    %rbp,-0x28(%rbx)
						min->next->prev = new_min;
ffffffff80000952:	48 89 01             	mov    %rax,(%rcx)
						min->next = new_min;
ffffffff80000955:	48 89 42 08          	mov    %rax,0x8(%rdx)
						ALIGN( p );
ffffffff80000959:	48 89 da             	mov    %rbx,%rdx
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff8000095c:	41 8d 44 24 28       	lea    0x28(%r12),%eax
ffffffff80000961:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80000964:	83 e2 0f             	and    $0xf,%edx
ffffffff80000967:	0f 84 93 00 00 00    	je     ffffffff80000a00 <kmalloc+0x290>
ffffffff8000096d:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000972:	48 29 d0             	sub    %rdx,%rax
ffffffff80000975:	48 01 c3             	add    %rax,%rbx
ffffffff80000978:	83 c0 10             	add    $0x10,%eax
ffffffff8000097b:	88 43 f0             	mov    %al,-0x10(%rbx)
						liballoc_unlock();		// release the lock
ffffffff8000097e:	31 c0                	xor    %eax,%eax
ffffffff80000980:	e8 4b fd ff ff       	callq  ffffffff800006d0 <liballoc_unlock>
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
}
ffffffff80000985:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80000989:	48 89 d8             	mov    %rbx,%rax
ffffffff8000098c:	5b                   	pop    %rbx
ffffffff8000098d:	5d                   	pop    %rbp
ffffffff8000098e:	41 5c                	pop    %r12
ffffffff80000990:	41 5d                	pop    %r13
ffffffff80000992:	41 5e                	pop    %r14
ffffffff80000994:	41 5f                	pop    %r15
ffffffff80000996:	c3                   	retq   
ffffffff80000997:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000099e:	00 00 
ffffffff800009a0:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff800009a3:	8b 4e 18             	mov    0x18(%rsi),%ecx
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff800009a6:	48 89 f2             	mov    %rsi,%rdx
	startedBet = 0;
ffffffff800009a9:	45 31 ff             	xor    %r15d,%r15d
ffffffff800009ac:	e9 3b fe ff ff       	jmpq   ffffffff800007ec <kmalloc+0x7c>
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff800009b1:	48 8d 45 28          	lea    0x28(%rbp),%rax
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff800009b5:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 		= NULL;
ffffffff800009bc:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff800009c3:	00 
			maj->first->next 		= NULL;
ffffffff800009c4:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff800009cb:	00 
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff800009cc:	48 89 45 20          	mov    %rax,0x20(%rbp)
			ALIGN( p );
ffffffff800009d0:	48 8d 5d 60          	lea    0x60(%rbp),%rbx
			maj->first->block 	= maj;
ffffffff800009d4:	48 89 6d 38          	mov    %rbp,0x38(%rbp)
			maj->first->size 	= size;
ffffffff800009d8:	44 89 65 44          	mov    %r12d,0x44(%rbp)
			maj->first->req_size 	= req_size;
ffffffff800009dc:	44 89 6d 48          	mov    %r13d,0x48(%rbp)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff800009e0:	41 8d 44 24 28       	lea    0x28(%r12),%eax
			l_inuse += size;
ffffffff800009e5:	4c 01 25 14 d2 00 00 	add    %r12,0xd214(%rip)        # ffffffff8000dc00 <l_inuse>
			ALIGN( p );
ffffffff800009ec:	48 89 da             	mov    %rbx,%rdx
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff800009ef:	01 45 18             	add    %eax,0x18(%rbp)
			ALIGN( p );
ffffffff800009f2:	83 e2 0f             	and    $0xf,%edx
ffffffff800009f5:	0f 85 72 ff ff ff    	jne    ffffffff8000096d <kmalloc+0x1fd>
ffffffff800009fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
						ALIGN( p );
ffffffff80000a00:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000a05:	e9 71 ff ff ff       	jmpq   ffffffff8000097b <kmalloc+0x20b>
ffffffff80000a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000a10:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80000a13:	8b 4e 18             	mov    0x18(%rsi),%ecx
	if ( l_bestBet != NULL )
ffffffff80000a16:	48 89 f2             	mov    %rsi,%rdx
	unsigned long long bestSize = 0;
ffffffff80000a19:	45 31 f6             	xor    %r14d,%r14d
	startedBet = 0;
ffffffff80000a1c:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000a1f:	e9 c8 fd ff ff       	jmpq   ffffffff800007ec <kmalloc+0x7c>
ffffffff80000a24:	0f 1f 40 00          	nopl   0x0(%rax)
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000a28:	48 01 d6             	add    %rdx,%rsi
						l_inuse += size;
ffffffff80000a2b:	4c 01 25 ce d1 00 00 	add    %r12,0xd1ce(%rip)        # ffffffff8000dc00 <l_inuse>
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000a32:	48 8d 46 28          	lea    0x28(%rsi),%rax
						ALIGN( p );
ffffffff80000a36:	48 8d 5e 60          	lea    0x60(%rsi),%rbx
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000a3a:	48 89 42 08          	mov    %rax,0x8(%rdx)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000a3e:	41 8d 44 24 28       	lea    0x28(%r12),%eax
						min->next->prev = min;
ffffffff80000a43:	48 89 56 28          	mov    %rdx,0x28(%rsi)
						ALIGN( p );
ffffffff80000a47:	48 89 da             	mov    %rbx,%rdx
						min->next = NULL;
ffffffff80000a4a:	48 c7 46 30 00 00 00 	movq   $0x0,0x30(%rsi)
ffffffff80000a51:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff80000a52:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						min->block = maj;
ffffffff80000a59:	48 89 6e 38          	mov    %rbp,0x38(%rsi)
						min->size = size;
ffffffff80000a5d:	44 89 66 44          	mov    %r12d,0x44(%rsi)
						min->req_size = req_size;
ffffffff80000a61:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000a65:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80000a68:	83 e2 0f             	and    $0xf,%edx
ffffffff80000a6b:	0f 85 fc fe ff ff    	jne    ffffffff8000096d <kmalloc+0x1fd>
						ALIGN( p );
ffffffff80000a71:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000a76:	e9 00 ff ff ff       	jmpq   ffffffff8000097b <kmalloc+0x20b>
ffffffff80000a7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		l_memRoot = allocate_new_page( size );
ffffffff80000a80:	44 89 e7             	mov    %r12d,%edi
ffffffff80000a83:	e8 78 fc ff ff       	callq  ffffffff80000700 <allocate_new_page>
		if ( l_memRoot == NULL )
ffffffff80000a88:	48 85 c0             	test   %rax,%rax
		l_memRoot = allocate_new_page( size );
ffffffff80000a8b:	48 89 c6             	mov    %rax,%rsi
ffffffff80000a8e:	48 89 05 83 d1 00 00 	mov    %rax,0xd183(%rip)        # ffffffff8000dc18 <l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80000a95:	0f 85 22 fd ff ff    	jne    ffffffff800007bd <kmalloc+0x4d>
		  liballoc_unlock();
ffffffff80000a9b:	31 c0                	xor    %eax,%eax
		  return NULL;
ffffffff80000a9d:	31 db                	xor    %ebx,%ebx
		  liballoc_unlock();
ffffffff80000a9f:	e8 2c fc ff ff       	callq  ffffffff800006d0 <liballoc_unlock>
		  return NULL;
ffffffff80000aa4:	e9 dc fe ff ff       	jmpq   ffffffff80000985 <kmalloc+0x215>
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80000aa9:	48 8d 45 28          	lea    0x28(%rbp),%rax
ffffffff80000aad:	48 89 02             	mov    %rax,(%rdx)
			maj->first->prev->next = maj->first;
ffffffff80000ab0:	48 89 55 30          	mov    %rdx,0x30(%rbp)
			maj->first = maj->first->prev;
ffffffff80000ab4:	48 89 45 20          	mov    %rax,0x20(%rbp)
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80000ab8:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 	= NULL;
ffffffff80000abf:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80000ac6:	00 
ffffffff80000ac7:	e9 04 ff ff ff       	jmpq   ffffffff800009d0 <kmalloc+0x260>
ffffffff80000acc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000ad0 <kfree>:
void PREFIX(free)(void *ptr)
{
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80000ad0:	48 85 ff             	test   %rdi,%rdi
ffffffff80000ad3:	0f 84 d7 00 00 00    	je     ffffffff80000bb0 <kfree+0xe0>
{
ffffffff80000ad9:	53                   	push   %rbx
		FLUSH();
		#endif
		return;
	}

	UNALIGN( ptr );
ffffffff80000ada:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80000adf:	48 89 fb             	mov    %rdi,%rbx
ffffffff80000ae2:	48 29 c3             	sub    %rax,%rbx
ffffffff80000ae5:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80000ae9:	48 0f 43 df          	cmovae %rdi,%rbx

	liballoc_lock();		// lockit
ffffffff80000aed:	31 c0                	xor    %eax,%eax
ffffffff80000aef:	e8 cc fb ff ff       	callq  ffffffff800006c0 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000af4:	8b 43 f0             	mov    -0x10(%rbx),%eax
	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80000af7:	48 8d 73 d8          	lea    -0x28(%rbx),%rsi
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000afb:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80000b00:	74 2e                	je     ffffffff80000b30 <kfree+0x60>
	{
		l_errorCount += 1;

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000b02:	89 c2                	mov    %eax,%edx
		l_errorCount += 1;
ffffffff80000b04:	48 83 05 e4 d0 00 00 	addq   $0x1,0xd0e4(%rip)        # ffffffff8000dbf0 <l_errorCount>
ffffffff80000b0b:	01 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000b0c:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
		if ( 
ffffffff80000b12:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80000b18:	0f 84 82 00 00 00    	je     ffffffff80000ba0 <kfree+0xd0>
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000b1e:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff80000b22:	74 7c                	je     ffffffff80000ba0 <kfree+0xd0>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80000b24:	3c de                	cmp    $0xde,%al
ffffffff80000b26:	74 78                	je     ffffffff80000ba0 <kfree+0xd0>
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
}
ffffffff80000b28:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff80000b29:	31 c0                	xor    %eax,%eax
ffffffff80000b2b:	e9 a0 fb ff ff       	jmpq   ffffffff800006d0 <liballoc_unlock>
		maj = min->block;
ffffffff80000b30:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
		l_inuse -= min->size;
ffffffff80000b34:	8b 53 f4             	mov    -0xc(%rbx),%edx
ffffffff80000b37:	48 29 15 c2 d0 00 00 	sub    %rdx,0xd0c2(%rip)        # ffffffff8000dc00 <l_inuse>
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80000b3e:	8b 4f 18             	mov    0x18(%rdi),%ecx
ffffffff80000b41:	29 d1                	sub    %edx,%ecx
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80000b43:	48 8b 53 e0          	mov    -0x20(%rbx),%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80000b47:	89 c8                	mov    %ecx,%eax
ffffffff80000b49:	48 8b 4b d8          	mov    -0x28(%rbx),%rcx
ffffffff80000b4d:	83 e8 28             	sub    $0x28,%eax
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80000b50:	48 85 d2             	test   %rdx,%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80000b53:	89 47 18             	mov    %eax,0x18(%rdi)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff80000b56:	c7 43 f0 ad de ad de 	movl   $0xdeaddead,-0x10(%rbx)
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80000b5d:	74 06                	je     ffffffff80000b65 <kfree+0x95>
ffffffff80000b5f:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff80000b62:	48 8b 0e             	mov    (%rsi),%rcx
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80000b65:	48 85 c9             	test   %rcx,%rcx
ffffffff80000b68:	74 56                	je     ffffffff80000bc0 <kfree+0xf0>
ffffffff80000b6a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80000b6e:	48 8b 57 20          	mov    0x20(%rdi),%rdx
	if ( maj->first == NULL )	// Block completely unused.
ffffffff80000b72:	48 85 d2             	test   %rdx,%rdx
ffffffff80000b75:	48 8b 0d 94 d0 00 00 	mov    0xd094(%rip),%rcx        # ffffffff8000dc10 <l_bestBet>
ffffffff80000b7c:	74 52                	je     ffffffff80000bd0 <kfree+0x100>
		if ( l_bestBet != NULL )
ffffffff80000b7e:	48 85 c9             	test   %rcx,%rcx
ffffffff80000b81:	74 a5                	je     ffffffff80000b28 <kfree+0x58>
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80000b83:	8b 51 14             	mov    0x14(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80000b86:	8b 77 14             	mov    0x14(%rdi),%esi
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80000b89:	2b 51 18             	sub    0x18(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80000b8c:	29 c6                	sub    %eax,%esi
			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff80000b8e:	39 f2                	cmp    %esi,%edx
ffffffff80000b90:	7d 96                	jge    ffffffff80000b28 <kfree+0x58>
ffffffff80000b92:	48 89 3d 77 d0 00 00 	mov    %rdi,0xd077(%rip)        # ffffffff8000dc10 <l_bestBet>
ffffffff80000b99:	eb 8d                	jmp    ffffffff80000b28 <kfree+0x58>
ffffffff80000b9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			l_possibleOverruns += 1;
ffffffff80000ba0:	48 83 05 40 d0 00 00 	addq   $0x1,0xd040(%rip)        # ffffffff8000dbe8 <l_possibleOverruns>
ffffffff80000ba7:	01 
		liballoc_unlock();		// release the lock
ffffffff80000ba8:	31 c0                	xor    %eax,%eax
}
ffffffff80000baa:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff80000bab:	e9 20 fb ff ff       	jmpq   ffffffff800006d0 <liballoc_unlock>
		l_warningCount += 1;
ffffffff80000bb0:	48 83 05 40 d0 00 00 	addq   $0x1,0xd040(%rip)        # ffffffff8000dbf8 <l_warningCount>
ffffffff80000bb7:	01 
ffffffff80000bb8:	c3                   	retq   
ffffffff80000bb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80000bc0:	48 89 57 20          	mov    %rdx,0x20(%rdi)
ffffffff80000bc4:	eb ac                	jmp    ffffffff80000b72 <kfree+0xa2>
ffffffff80000bc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000bcd:	00 00 00 
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80000bd0:	48 39 3d 41 d0 00 00 	cmp    %rdi,0xd041(%rip)        # ffffffff8000dc18 <l_memRoot>
ffffffff80000bd7:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff80000bdb:	74 3b                	je     ffffffff80000c18 <kfree+0x148>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80000bdd:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80000be0:	74 46                	je     ffffffff80000c28 <kfree+0x158>
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80000be2:	48 8b 17             	mov    (%rdi),%rdx
ffffffff80000be5:	48 85 d2             	test   %rdx,%rdx
ffffffff80000be8:	74 08                	je     ffffffff80000bf2 <kfree+0x122>
ffffffff80000bea:	48 89 42 08          	mov    %rax,0x8(%rdx)
ffffffff80000bee:	48 8b 47 08          	mov    0x8(%rdi),%rax
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff80000bf2:	48 85 c0             	test   %rax,%rax
ffffffff80000bf5:	74 03                	je     ffffffff80000bfa <kfree+0x12a>
ffffffff80000bf7:	48 89 10             	mov    %rdx,(%rax)
		liballoc_free( maj, maj->pages );
ffffffff80000bfa:	8b 77 10             	mov    0x10(%rdi),%esi
		l_allocated -= maj->size;
ffffffff80000bfd:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff80000c00:	48 29 05 01 d0 00 00 	sub    %rax,0xd001(%rip)        # ffffffff8000dc08 <l_allocated>
		liballoc_free( maj, maj->pages );
ffffffff80000c07:	e8 d4 fa ff ff       	callq  ffffffff800006e0 <liballoc_free>
ffffffff80000c0c:	e9 17 ff ff ff       	jmpq   ffffffff80000b28 <kfree+0x58>
ffffffff80000c11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80000c18:	48 89 05 f9 cf 00 00 	mov    %rax,0xcff9(%rip)        # ffffffff8000dc18 <l_memRoot>
ffffffff80000c1f:	eb bc                	jmp    ffffffff80000bdd <kfree+0x10d>
ffffffff80000c21:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80000c28:	48 c7 05 dd cf 00 00 	movq   $0x0,0xcfdd(%rip)        # ffffffff8000dc10 <l_bestBet>
ffffffff80000c2f:	00 00 00 00 
ffffffff80000c33:	eb ad                	jmp    ffffffff80000be2 <kfree+0x112>
ffffffff80000c35:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000c3c:	00 00 00 00 

ffffffff80000c40 <kcalloc>:
void* PREFIX(calloc)(size_t nobj, size_t size)
{
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff80000c40:	0f af fe             	imul   %esi,%edi
{
ffffffff80000c43:	53                   	push   %rbx
       
       p = PREFIX(malloc)( real_size );
ffffffff80000c44:	48 63 df             	movslq %edi,%rbx
ffffffff80000c47:	48 89 df             	mov    %rbx,%rdi
ffffffff80000c4a:	e8 21 fb ff ff       	callq  ffffffff80000770 <kmalloc>
	for ( i = 0; i < n ; i++)
ffffffff80000c4f:	48 85 db             	test   %rbx,%rbx
ffffffff80000c52:	74 1b                	je     ffffffff80000c6f <kcalloc+0x2f>
ffffffff80000c54:	31 c9                	xor    %ecx,%ecx
ffffffff80000c56:	31 d2                	xor    %edx,%edx
ffffffff80000c58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000c5f:	00 
		((char*)s)[i] = c;
ffffffff80000c60:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
	for ( i = 0; i < n ; i++)
ffffffff80000c64:	8d 51 01             	lea    0x1(%rcx),%edx
ffffffff80000c67:	48 39 d3             	cmp    %rdx,%rbx
ffffffff80000c6a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80000c6d:	77 f1                	ja     ffffffff80000c60 <kcalloc+0x20>

       liballoc_memset( p, 0, real_size );

       return p;
}
ffffffff80000c6f:	5b                   	pop    %rbx
ffffffff80000c70:	c3                   	retq   
ffffffff80000c71:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000c78:	00 00 00 00 
ffffffff80000c7c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000c80 <krealloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff80000c80:	41 54                	push   %r12
ffffffff80000c82:	55                   	push   %rbp
ffffffff80000c83:	53                   	push   %rbx
ffffffff80000c84:	48 89 fb             	mov    %rdi,%rbx
ffffffff80000c87:	48 83 ec 10          	sub    $0x10,%rsp
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff80000c8b:	48 85 f6             	test   %rsi,%rsi
ffffffff80000c8e:	0f 84 54 01 00 00    	je     ffffffff80000de8 <krealloc+0x168>
		PREFIX(free)( p );
		return NULL;
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80000c94:	48 85 ff             	test   %rdi,%rdi
ffffffff80000c97:	49 89 f4             	mov    %rsi,%r12
ffffffff80000c9a:	0f 84 e0 00 00 00    	je     ffffffff80000d80 <krealloc+0x100>

	// Unalign the pointer if required.
	ptr = p;
	UNALIGN(ptr);
ffffffff80000ca0:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80000ca5:	48 89 fd             	mov    %rdi,%rbp
ffffffff80000ca8:	48 29 c5             	sub    %rax,%rbp
ffffffff80000cab:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80000caf:	48 0f 43 ef          	cmovae %rdi,%rbp

	liballoc_lock();		// lockit
ffffffff80000cb3:	31 c0                	xor    %eax,%eax
ffffffff80000cb5:	e8 06 fa ff ff       	callq  ffffffff800006c0 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000cba:	8b 45 f0             	mov    -0x10(%rbp),%eax
		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80000cbd:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000cc1:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80000cc6:	0f 85 c4 00 00 00    	jne    ffffffff80000d90 <krealloc+0x110>
		
		// Definitely a memory block.
		
		real_size = min->req_size;

		if ( real_size >= size ) 
ffffffff80000ccc:	8b 6d f8             	mov    -0x8(%rbp),%ebp
ffffffff80000ccf:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80000cd2:	0f 83 90 00 00 00    	jae    ffffffff80000d68 <krealloc+0xe8>
			min->req_size = size;
			liballoc_unlock();
			return p;
		}

	liballoc_unlock();
ffffffff80000cd8:	31 c0                	xor    %eax,%eax
ffffffff80000cda:	e8 f1 f9 ff ff       	callq  ffffffff800006d0 <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80000cdf:	4c 89 e7             	mov    %r12,%rdi
ffffffff80000ce2:	e8 89 fa ff ff       	callq  ffffffff80000770 <kmalloc>
  while ( n >= sizeof(unsigned int) )
ffffffff80000ce7:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff80000ceb:	0f 86 e7 00 00 00    	jbe    ffffffff80000dd8 <krealloc+0x158>
ffffffff80000cf1:	48 83 ed 04          	sub    $0x4,%rbp
ffffffff80000cf5:	31 d2                	xor    %edx,%edx
ffffffff80000cf7:	48 89 ef             	mov    %rbp,%rdi
ffffffff80000cfa:	48 c1 ef 02          	shr    $0x2,%rdi
ffffffff80000cfe:	48 8d 34 bd 04 00 00 	lea    0x4(,%rdi,4),%rsi
ffffffff80000d05:	00 
ffffffff80000d06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000d0d:	00 00 00 
      *ldest++ = *lsrc++;
ffffffff80000d10:	8b 0c 13             	mov    (%rbx,%rdx,1),%ecx
ffffffff80000d13:	89 0c 10             	mov    %ecx,(%rax,%rdx,1)
ffffffff80000d16:	48 83 c2 04          	add    $0x4,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff80000d1a:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80000d1d:	75 f1                	jne    ffffffff80000d10 <krealloc+0x90>
ffffffff80000d1f:	48 f7 df             	neg    %rdi
ffffffff80000d22:	4c 8d 04 13          	lea    (%rbx,%rdx,1),%r8
ffffffff80000d26:	48 01 c2             	add    %rax,%rdx
ffffffff80000d29:	48 8d 6c bd 00       	lea    0x0(%rbp,%rdi,4),%rbp
  while ( n > 0 )
ffffffff80000d2e:	48 85 ed             	test   %rbp,%rbp
ffffffff80000d31:	74 14                	je     ffffffff80000d47 <krealloc+0xc7>
ffffffff80000d33:	31 c9                	xor    %ecx,%ecx
      *cdest++ = *csrc++;
ffffffff80000d35:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff80000d3a:	40 88 34 0a          	mov    %sil,(%rdx,%rcx,1)
ffffffff80000d3e:	48 83 c1 01          	add    $0x1,%rcx
  while ( n > 0 )
ffffffff80000d42:	48 39 e9             	cmp    %rbp,%rcx
ffffffff80000d45:	75 ee                	jne    ffffffff80000d35 <krealloc+0xb5>
	liballoc_memcpy( ptr, p, real_size );
	PREFIX(free)( p );
ffffffff80000d47:	48 89 df             	mov    %rbx,%rdi
ffffffff80000d4a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80000d4f:	e8 7c fd ff ff       	callq  ffffffff80000ad0 <kfree>
ffffffff80000d54:	48 8b 44 24 08       	mov    0x8(%rsp),%rax

	return ptr;
}
ffffffff80000d59:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000d5d:	5b                   	pop    %rbx
ffffffff80000d5e:	5d                   	pop    %rbp
ffffffff80000d5f:	41 5c                	pop    %r12
ffffffff80000d61:	c3                   	retq   
ffffffff80000d62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			min->req_size = size;
ffffffff80000d68:	44 89 62 20          	mov    %r12d,0x20(%rdx)
			liballoc_unlock();
ffffffff80000d6c:	31 c0                	xor    %eax,%eax
ffffffff80000d6e:	e8 5d f9 ff ff       	callq  ffffffff800006d0 <liballoc_unlock>
			return p;
ffffffff80000d73:	48 89 d8             	mov    %rbx,%rax
}
ffffffff80000d76:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000d7a:	5b                   	pop    %rbx
ffffffff80000d7b:	5d                   	pop    %rbp
ffffffff80000d7c:	41 5c                	pop    %r12
ffffffff80000d7e:	c3                   	retq   
ffffffff80000d7f:	90                   	nop
ffffffff80000d80:	48 83 c4 10          	add    $0x10,%rsp
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80000d84:	48 89 f7             	mov    %rsi,%rdi
}
ffffffff80000d87:	5b                   	pop    %rbx
ffffffff80000d88:	5d                   	pop    %rbp
ffffffff80000d89:	41 5c                	pop    %r12
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80000d8b:	e9 e0 f9 ff ff       	jmpq   ffffffff80000770 <kmalloc>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000d90:	89 c2                	mov    %eax,%edx
			l_errorCount += 1;
ffffffff80000d92:	48 83 05 56 ce 00 00 	addq   $0x1,0xce56(%rip)        # ffffffff8000dbf0 <l_errorCount>
ffffffff80000d99:	01 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000d9a:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
			if ( 
ffffffff80000da0:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80000da6:	74 20                	je     ffffffff80000dc8 <krealloc+0x148>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000da8:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff80000dac:	74 1a                	je     ffffffff80000dc8 <krealloc+0x148>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80000dae:	3c de                	cmp    $0xde,%al
ffffffff80000db0:	74 16                	je     ffffffff80000dc8 <krealloc+0x148>
			liballoc_unlock();		// release the lock
ffffffff80000db2:	31 c0                	xor    %eax,%eax
ffffffff80000db4:	e8 17 f9 ff ff       	callq  ffffffff800006d0 <liballoc_unlock>
}
ffffffff80000db9:	48 83 c4 10          	add    $0x10,%rsp
			return NULL;
ffffffff80000dbd:	31 c0                	xor    %eax,%eax
}
ffffffff80000dbf:	5b                   	pop    %rbx
ffffffff80000dc0:	5d                   	pop    %rbp
ffffffff80000dc1:	41 5c                	pop    %r12
ffffffff80000dc3:	c3                   	retq   
ffffffff80000dc4:	0f 1f 40 00          	nopl   0x0(%rax)
				l_possibleOverruns += 1;
ffffffff80000dc8:	48 83 05 18 ce 00 00 	addq   $0x1,0xce18(%rip)        # ffffffff8000dbe8 <l_possibleOverruns>
ffffffff80000dcf:	01 
ffffffff80000dd0:	eb e0                	jmp    ffffffff80000db2 <krealloc+0x132>
ffffffff80000dd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80000dd8:	48 89 c2             	mov    %rax,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff80000ddb:	49 89 d8             	mov    %rbx,%r8
ffffffff80000dde:	e9 4b ff ff ff       	jmpq   ffffffff80000d2e <krealloc+0xae>
ffffffff80000de3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		PREFIX(free)( p );
ffffffff80000de8:	e8 e3 fc ff ff       	callq  ffffffff80000ad0 <kfree>
		return NULL;
ffffffff80000ded:	31 c0                	xor    %eax,%eax
ffffffff80000def:	eb 85                	jmp    ffffffff80000d76 <krealloc+0xf6>
ffffffff80000df1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000df8:	00 00 00 
ffffffff80000dfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000e00 <pmm_init>:

//Initialize the Physical Memory Manager
void pmm_init()
{
    //memory map helper variables
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff80000e00:	48 8b 15 a9 8a 00 00 	mov    0x8aa9(%rip),%rdx        # ffffffff800098b0 <boot_info+0x10>
ffffffff80000e07:	48 8b 05 d2 8a 00 00 	mov    0x8ad2(%rip),%rax        # ffffffff800098e0 <pmm_info>
ffffffff80000e0e:	4c 8b 4a 10          	mov    0x10(%rdx),%r9
    struct stivale2_mmap_entry* current_entry = NULL;
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment

    //iterate through the memory map, find the largest memory segment, calculate total memory size
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80000e12:	4d 85 c9             	test   %r9,%r9
ffffffff80000e15:	0f 84 45 01 00 00    	je     ffffffff80000f60 <pmm_init+0x160>
ffffffff80000e1b:	48 83 c2 18          	add    $0x18,%rdx
ffffffff80000e1f:	31 f6                	xor    %esi,%esi
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
ffffffff80000e21:	45 31 c0             	xor    %r8d,%r8d
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
ffffffff80000e24:	31 c9                	xor    %ecx,%ecx
ffffffff80000e26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000e2d:	00 00 00 
    {
        current_entry = &boot_info.tag_memmap->memmap[i];
        //printf("Addr: 0x%x  Size: %d  Type: %X\n", current_entry->base, current_entry->length, current_entry->type);

        //Calculate total memory
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff80000e30:	48 8b 7a 08          	mov    0x8(%rdx),%rdi
ffffffff80000e34:	48 01 f8             	add    %rdi,%rax
        {
            continue;
        }

        //Capture the largest segment size
        if(current_entry->length > mmap_largest_segment_size)
ffffffff80000e37:	83 7a 10 01          	cmpl   $0x1,0x10(%rdx)
ffffffff80000e3b:	75 0b                	jne    ffffffff80000e48 <pmm_init+0x48>
ffffffff80000e3d:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80000e40:	76 06                	jbe    ffffffff80000e48 <pmm_init+0x48>
        {
            mmap_largest_segment_base = current_entry->base;
ffffffff80000e42:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80000e45:	49 89 f8             	mov    %rdi,%r8
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80000e48:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80000e4c:	48 83 c2 18          	add    $0x18,%rdx
ffffffff80000e50:	49 39 f1             	cmp    %rsi,%r9
ffffffff80000e53:	75 db                	jne    ffffffff80000e30 <pmm_init+0x30>
            mmap_largest_segment_size = current_entry->length;
        }
    };

    //Populate the PMM state variables
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80000e55:	48 89 c2             	mov    %rax,%rdx
ffffffff80000e58:	48 89 05 81 8a 00 00 	mov    %rax,0x8a81(%rip)        # ffffffff800098e0 <pmm_info>
    pmm_info.usedpages = pmm_info.totalpages;
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80000e5f:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff80000e63:	48 83 c0 01          	add    $0x1,%rax
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80000e67:	48 c1 ea 0c          	shr    $0xc,%rdx
    
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80000e6b:	48 39 c7             	cmp    %rax,%rdi
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80000e6e:	48 89 15 7b 8a 00 00 	mov    %rdx,0x8a7b(%rip)        # ffffffff800098f0 <pmm_info+0x10>
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80000e75:	48 89 15 6c 8a 00 00 	mov    %rdx,0x8a6c(%rip)        # ffffffff800098e8 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80000e7c:	48 89 05 7d 8a 00 00 	mov    %rax,0x8a7d(%rip)        # ffffffff80009900 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80000e83:	0f 82 d5 00 00 00    	jb     ffffffff80000f5e <pmm_init+0x15e>
ffffffff80000e89:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80000e90:	80 ff ff 
    //printf("Total Memory (KB): %d\n", (pmm_info.totalmem/1024));
    //printf("Total Pages: %d   Used Pages: %d\n", pmm_info.totalpages, pmm_info.usedpages);
    //printf("Bitmap Addr: %p  Bitmap Size (bytes): %d\n", pmm_info.bitmap, pmm_info.bitmap_size);

    //Set all bitmap bits to 1
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff80000e93:	31 d2                	xor    %edx,%edx
ffffffff80000e95:	48 01 c8             	add    %rcx,%rax
    pmm_info.bitmap = (uint8_t*)phys_to_hh_data(mmap_largest_segment_base); 
ffffffff80000e98:	48 89 05 59 8a 00 00 	mov    %rax,0x8a59(%rip)        # ffffffff800098f8 <pmm_info+0x18>
ffffffff80000e9f:	eb 0e                	jmp    ffffffff80000eaf <pmm_init+0xaf>
ffffffff80000ea1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80000ea8:	48 8b 05 49 8a 00 00 	mov    0x8a49(%rip),%rax        # ffffffff800098f8 <pmm_info+0x18>
        {
        pmm_info.bitmap[i] = 0xff;
ffffffff80000eaf:	c6 04 10 ff          	movb   $0xff,(%rax,%rdx,1)
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff80000eb3:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80000eb7:	48 39 15 42 8a 00 00 	cmp    %rdx,0x8a42(%rip)        # ffffffff80009900 <pmm_info+0x20>
ffffffff80000ebe:	77 e8                	ja     ffffffff80000ea8 <pmm_init+0xa8>
    

    //printf("Number of MMAP Entries: %d\n", mmap_entries);

    //Iterate through the memory map again, unset bitmap for available memory
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80000ec0:	31 ff                	xor    %edi,%edi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80000ec2:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80000ec8:	eb 0f                	jmp    ffffffff80000ed9 <pmm_init+0xd9>
ffffffff80000eca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80000ed0:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80000ed4:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80000ed7:	74 72                	je     ffffffff80000f4b <pmm_init+0x14b>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];

        if(current_entry->type == 1)
ffffffff80000ed9:	48 8b 15 d0 89 00 00 	mov    0x89d0(%rip),%rdx        # ffffffff800098b0 <boot_info+0x10>
ffffffff80000ee0:	48 8d 04 7f          	lea    (%rdi,%rdi,2),%rax
ffffffff80000ee4:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
ffffffff80000ee8:	83 78 28 01          	cmpl   $0x1,0x28(%rax)
ffffffff80000eec:	75 e2                	jne    ffffffff80000ed0 <pmm_init+0xd0>
        {
            uint64_t pages = current_entry->length / 4096;
ffffffff80000eee:	48 8b 50 20          	mov    0x20(%rax),%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff80000ef2:	48 8b 40 18          	mov    0x18(%rax),%rax
            uint64_t pages = current_entry->length / 4096;
ffffffff80000ef6:	48 c1 ea 0c          	shr    $0xc,%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff80000efa:	48 c1 e8 0c          	shr    $0xc,%rax
            //printf("Index: %d  Pages: %d\n", align, pages);

            for(uint64_t j = 0; j < pages; j++)
ffffffff80000efe:	48 85 d2             	test   %rdx,%rdx
ffffffff80000f01:	74 cd                	je     ffffffff80000ed0 <pmm_init+0xd0>
ffffffff80000f03:	48 01 c2             	add    %rax,%rdx
ffffffff80000f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000f0d:	00 00 00 
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80000f10:	49 89 c0             	mov    %rax,%r8
ffffffff80000f13:	89 c1                	mov    %eax,%ecx
ffffffff80000f15:	45 89 ca             	mov    %r9d,%r10d
ffffffff80000f18:	49 c1 e8 03          	shr    $0x3,%r8
ffffffff80000f1c:	4c 03 05 d5 89 00 00 	add    0x89d5(%rip),%r8        # ffffffff800098f8 <pmm_info+0x18>
ffffffff80000f23:	83 e1 07             	and    $0x7,%ecx
ffffffff80000f26:	41 d3 e2             	shl    %cl,%r10d
                //uint64_t bitindex = align % 8;
                //pmm_info.bitmap[byteindex] &= ~(1 << bitindex);
                
                bitmap_unset(pmm_info.bitmap, align);

                align++;                    //increment page index
ffffffff80000f29:	48 83 c0 01          	add    $0x1,%rax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80000f2d:	44 89 d1             	mov    %r10d,%ecx
ffffffff80000f30:	f7 d1                	not    %ecx
ffffffff80000f32:	41 20 08             	and    %cl,(%r8)
                pmm_info.usedpages--;       //decrement used page counter
ffffffff80000f35:	48 83 2d ab 89 00 00 	subq   $0x1,0x89ab(%rip)        # ffffffff800098e8 <pmm_info+0x8>
ffffffff80000f3c:	01 
            for(uint64_t j = 0; j < pages; j++)
ffffffff80000f3d:	48 39 d0             	cmp    %rdx,%rax
ffffffff80000f40:	75 ce                	jne    ffffffff80000f10 <pmm_init+0x110>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80000f42:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80000f46:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80000f49:	75 8e                	jne    ffffffff80000ed9 <pmm_init+0xd9>
            }
        }
    }

    //Make certain the NULL page is unavailable
    bitmap_set(pmm_info.bitmap, 0);
ffffffff80000f4b:	48 8b 05 a6 89 00 00 	mov    0x89a6(%rip),%rax        # ffffffff800098f8 <pmm_info+0x18>
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff80000f52:	80 08 01             	orb    $0x1,(%rax)
    pmm_info.usedpages++;
ffffffff80000f55:	48 83 05 8b 89 00 00 	addq   $0x1,0x898b(%rip)        # ffffffff800098e8 <pmm_info+0x8>
ffffffff80000f5c:	01 
    //printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
    //printf("PMM Initialized\n");

   

}
ffffffff80000f5d:	c3                   	retq   
ffffffff80000f5e:	eb fe                	jmp    ffffffff80000f5e <pmm_init+0x15e>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80000f60:	48 89 c2             	mov    %rax,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80000f63:	48 c1 e8 0f          	shr    $0xf,%rax
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80000f67:	48 c1 ea 0c          	shr    $0xc,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80000f6b:	48 83 c0 01          	add    $0x1,%rax
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80000f6f:	48 89 15 72 89 00 00 	mov    %rdx,0x8972(%rip)        # ffffffff800098e8 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80000f76:	48 89 05 83 89 00 00 	mov    %rax,0x8983(%rip)        # ffffffff80009900 <pmm_info+0x20>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80000f7d:	48 89 15 6c 89 00 00 	mov    %rdx,0x896c(%rip)        # ffffffff800098f0 <pmm_info+0x10>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80000f84:	48 8b 04 25 08 00 00 	mov    0x8,%rax
ffffffff80000f8b:	00 
ffffffff80000f8c:	0f 0b                	ud2    
ffffffff80000f8e:	66 90                	xchg   %ax,%ax

ffffffff80000f90 <pmm_allocpage>:


void* pmm_allocpage()
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff80000f90:	48 8b 35 51 89 00 00 	mov    0x8951(%rip),%rsi        # ffffffff800098e8 <pmm_info+0x8>
ffffffff80000f97:	48 3b 35 52 89 00 00 	cmp    0x8952(%rip),%rsi        # ffffffff800098f0 <pmm_info+0x10>
ffffffff80000f9e:	73 68                	jae    ffffffff80001008 <pmm_allocpage+0x78>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80000fa0:	48 8b 3d 59 89 00 00 	mov    0x8959(%rip),%rdi        # ffffffff80009900 <pmm_info+0x20>
ffffffff80000fa7:	4c 8b 05 4a 89 00 00 	mov    0x894a(%rip),%r8        # ffffffff800098f8 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff80000fae:	48 85 ff             	test   %rdi,%rdi
ffffffff80000fb1:	74 26                	je     ffffffff80000fd9 <pmm_allocpage+0x49>
ffffffff80000fb3:	31 c9                	xor    %ecx,%ecx
        if(bitmap[i] != 0xff)
ffffffff80000fb5:	41 0f b6 14 08       	movzbl (%r8,%rcx,1),%edx
ffffffff80000fba:	80 fa ff             	cmp    $0xff,%dl
ffffffff80000fbd:	74 11                	je     ffffffff80000fd0 <pmm_allocpage+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80000fbf:	31 c0                	xor    %eax,%eax
                if(!(bitmap[i] & (1 << j)))
ffffffff80000fc1:	0f a3 c2             	bt     %eax,%edx
ffffffff80000fc4:	73 2a                	jae    ffffffff80000ff0 <pmm_allocpage+0x60>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80000fc6:	48 83 c0 01          	add    $0x1,%rax
ffffffff80000fca:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80000fce:	75 f1                	jne    ffffffff80000fc1 <pmm_allocpage+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80000fd0:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80000fd4:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80000fd7:	75 dc                	jne    ffffffff80000fb5 <pmm_allocpage+0x25>

    pmm_info.usedpages++;
ffffffff80000fd9:	48 83 c6 01          	add    $0x1,%rsi
    for(uint64_t i = 0; i < size; i++)
ffffffff80000fdd:	31 c0                	xor    %eax,%eax
    pmm_info.usedpages++;
ffffffff80000fdf:	48 89 35 02 89 00 00 	mov    %rsi,0x8902(%rip)        # ffffffff800098e8 <pmm_info+0x8>

    return (void*)(index * PAGE_SIZE);
ffffffff80000fe6:	c3                   	retq   
ffffffff80000fe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80000fee:	00 00 
                    return (i * 8) + j;
ffffffff80000ff0:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
    pmm_info.usedpages++;
ffffffff80000ff4:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80000ff8:	48 89 35 e9 88 00 00 	mov    %rsi,0x88e9(%rip)        # ffffffff800098e8 <pmm_info+0x8>
ffffffff80000fff:	48 c1 e0 0c          	shl    $0xc,%rax
    return (void*)(index * PAGE_SIZE);
ffffffff80001003:	c3                   	retq   
ffffffff80001004:	0f 1f 40 00          	nopl   0x0(%rax)
        return NULL;
ffffffff80001008:	31 c0                	xor    %eax,%eax
}
ffffffff8000100a:	c3                   	retq   
ffffffff8000100b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001010 <pmm_freepage>:
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001010:	48 89 fa             	mov    %rdi,%rdx


void pmm_freepage(void* page)
{
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001013:	48 c1 ef 0c          	shr    $0xc,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001017:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000101c:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff80001020:	48 03 15 d1 88 00 00 	add    0x88d1(%rip),%rdx        # ffffffff800098f8 <pmm_info+0x18>
ffffffff80001027:	89 f9                	mov    %edi,%ecx
ffffffff80001029:	83 e1 07             	and    $0x7,%ecx
ffffffff8000102c:	d3 e0                	shl    %cl,%eax
ffffffff8000102e:	f7 d0                	not    %eax
ffffffff80001030:	20 02                	and    %al,(%rdx)
    bitmap_unset(pmm_info.bitmap, index);
    pmm_info.usedpages--;
ffffffff80001032:	48 83 2d ae 88 00 00 	subq   $0x1,0x88ae(%rip)        # ffffffff800098e8 <pmm_info+0x8>
ffffffff80001039:	01 
}
ffffffff8000103a:	c3                   	retq   
ffffffff8000103b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001040 <pmm_allocpages>:

void* pmm_allocpages(uint64_t count)
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff80001040:	4c 8b 15 a1 88 00 00 	mov    0x88a1(%rip),%r10        # ffffffff800098e8 <pmm_info+0x8>
ffffffff80001047:	4c 3b 15 a2 88 00 00 	cmp    0x88a2(%rip),%r10        # ffffffff800098f0 <pmm_info+0x10>
ffffffff8000104e:	73 73                	jae    ffffffff800010c3 <pmm_allocpages+0x83>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001050:	48 8b 05 a9 88 00 00 	mov    0x88a9(%rip),%rax        # ffffffff80009900 <pmm_info+0x20>
ffffffff80001057:	4c 8b 05 9a 88 00 00 	mov    0x889a(%rip),%r8        # ffffffff800098f8 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff8000105e:	48 85 c0             	test   %rax,%rax
ffffffff80001061:	74 28                	je     ffffffff8000108b <pmm_allocpages+0x4b>
ffffffff80001063:	31 f6                	xor    %esi,%esi
        if(bitmap[i] != 0xff)
ffffffff80001065:	41 0f b6 0c 30       	movzbl (%r8,%rsi,1),%ecx
ffffffff8000106a:	80 f9 ff             	cmp    $0xff,%cl
ffffffff8000106d:	74 11                	je     ffffffff80001080 <pmm_allocpages+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff8000106f:	31 d2                	xor    %edx,%edx
                if(!(bitmap[i] & (1 << j)))
ffffffff80001071:	0f a3 d1             	bt     %edx,%ecx
ffffffff80001074:	73 5a                	jae    ffffffff800010d0 <pmm_allocpages+0x90>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001076:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000107a:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8000107e:	75 f1                	jne    ffffffff80001071 <pmm_allocpages+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001080:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001084:	48 39 f0             	cmp    %rsi,%rax
ffffffff80001087:	75 dc                	jne    ffffffff80001065 <pmm_allocpages+0x25>
    return 0;
ffffffff80001089:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff8000108b:	48 85 ff             	test   %rdi,%rdi
ffffffff8000108e:	74 50                	je     ffffffff800010e0 <pmm_allocpages+0xa0>
ffffffff80001090:	31 d2                	xor    %edx,%edx
    {
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff80001092:	41 f6 00 01          	testb  $0x1,(%r8)
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001096:	41 b9 01 00 00 00    	mov    $0x1,%r9d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000109c:	74 25                	je     ffffffff800010c3 <pmm_allocpages+0x83>
    for(uint64_t i = 0; i < count; i++)
ffffffff8000109e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800010a2:	48 39 d7             	cmp    %rdx,%rdi
ffffffff800010a5:	74 39                	je     ffffffff800010e0 <pmm_allocpages+0xa0>
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff800010a7:	48 89 d1             	mov    %rdx,%rcx
ffffffff800010aa:	45 89 cb             	mov    %r9d,%r11d
ffffffff800010ad:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff800010b1:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff800010b6:	89 d1                	mov    %edx,%ecx
ffffffff800010b8:	83 e1 08             	and    $0x8,%ecx
ffffffff800010bb:	41 d3 e3             	shl    %cl,%r11d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff800010be:	44 85 de             	test   %r11d,%esi
ffffffff800010c1:	75 db                	jne    ffffffff8000109e <pmm_allocpages+0x5e>
        return NULL;
ffffffff800010c3:	31 c0                	xor    %eax,%eax
    }

    pmm_info.usedpages += count;

    return (void*)(index * PAGE_SIZE);
}
ffffffff800010c5:	c3                   	retq   
ffffffff800010c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800010cd:	00 00 00 
                    return (i * 8) + j;
ffffffff800010d0:	48 8d 04 f2          	lea    (%rdx,%rsi,8),%rax
ffffffff800010d4:	eb b5                	jmp    ffffffff8000108b <pmm_allocpages+0x4b>
ffffffff800010d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800010dd:	00 00 00 
    pmm_info.usedpages += count;
ffffffff800010e0:	4c 01 d7             	add    %r10,%rdi
    return (void*)(index * PAGE_SIZE);
ffffffff800010e3:	48 c1 e0 0c          	shl    $0xc,%rax
    pmm_info.usedpages += count;
ffffffff800010e7:	48 89 3d fa 87 00 00 	mov    %rdi,0x87fa(%rip)        # ffffffff800098e8 <pmm_info+0x8>
    return (void*)(index * PAGE_SIZE);
ffffffff800010ee:	c3                   	retq   
ffffffff800010ef:	90                   	nop

ffffffff800010f0 <pmm_freepages>:

uint64_t pmm_freepages(void* page, uint64_t count)
{
    uint64_t pg = (uint64_t)page;

    for(uint64_t i=0; i < count; i++)
ffffffff800010f0:	48 85 f6             	test   %rsi,%rsi
ffffffff800010f3:	74 44                	je     ffffffff80001139 <pmm_freepages+0x49>
ffffffff800010f5:	45 31 c0             	xor    %r8d,%r8d
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800010f8:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff800010fe:	66 90                	xchg   %ax,%ax
ffffffff80001100:	48 89 f8             	mov    %rdi,%rax
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001103:	48 89 f9             	mov    %rdi,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001106:	44 89 ca             	mov    %r9d,%edx
ffffffff80001109:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000110d:	48 03 05 e4 87 00 00 	add    0x87e4(%rip),%rax        # ffffffff800098f8 <pmm_info+0x18>
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001114:	48 c1 e9 0c          	shr    $0xc,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001118:	83 e1 07             	and    $0x7,%ecx
    for(uint64_t i=0; i < count; i++)
ffffffff8000111b:	49 83 c0 01          	add    $0x1,%r8
    {
        pmm_freepage((void*)pg);
        pg += 0x1000;
ffffffff8000111f:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001126:	d3 e2                	shl    %cl,%edx
ffffffff80001128:	f7 d2                	not    %edx
ffffffff8000112a:	20 10                	and    %dl,(%rax)
    pmm_info.usedpages--;
ffffffff8000112c:	48 83 2d b4 87 00 00 	subq   $0x1,0x87b4(%rip)        # ffffffff800098e8 <pmm_info+0x8>
ffffffff80001133:	01 
    for(uint64_t i=0; i < count; i++)
ffffffff80001134:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80001137:	75 c7                	jne    ffffffff80001100 <pmm_freepages+0x10>
    }

    return 0;
}
ffffffff80001139:	31 c0                	xor    %eax,%eax
ffffffff8000113b:	c3                   	retq   
ffffffff8000113c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001140 <pmm_get_free_memory>:

uint64_t pmm_get_free_memory()
{
    return (pmm_info.totalpages - pmm_info.usedpages) * PAGE_SIZE;
ffffffff80001140:	48 8b 05 a9 87 00 00 	mov    0x87a9(%rip),%rax        # ffffffff800098f0 <pmm_info+0x10>
ffffffff80001147:	48 2b 05 9a 87 00 00 	sub    0x879a(%rip),%rax        # ffffffff800098e8 <pmm_info+0x8>
ffffffff8000114e:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff80001152:	c3                   	retq   
ffffffff80001153:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000115a:	00 00 00 00 
ffffffff8000115e:	66 90                	xchg   %ax,%ax

ffffffff80001160 <pmm_get_total_memory>:

uint64_t pmm_get_total_memory()
{   
    return (pmm_info.totalpages) * PAGE_SIZE;
ffffffff80001160:	48 8b 05 89 87 00 00 	mov    0x8789(%rip),%rax        # ffffffff800098f0 <pmm_info+0x10>
ffffffff80001167:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8000116b:	c3                   	retq   
ffffffff8000116c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001170 <fb_init>:



void fb_init()
{
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001170:	48 8b 15 41 87 00 00 	mov    0x8741(%rip),%rdx        # ffffffff800098b8 <boot_info+0x18>
ffffffff80001177:	48 8b 42 10          	mov    0x10(%rdx),%rax
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff8000117b:	0f b7 4a 18          	movzwl 0x18(%rdx),%ecx
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff8000117f:	0f b7 72 1c          	movzwl 0x1c(%rdx),%esi
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001183:	48 89 05 86 87 00 00 	mov    %rax,0x8786(%rip)        # ffffffff80009910 <fb_info>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff8000118a:	0f b7 42 1a          	movzwl 0x1a(%rdx),%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000118e:	0f b7 52 1e          	movzwl 0x1e(%rdx),%edx
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80001192:	66 89 0d 81 87 00 00 	mov    %cx,0x8781(%rip)        # ffffffff8000991a <fb_info+0xa>
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff80001199:	66 89 35 7c 87 00 00 	mov    %si,0x877c(%rip)        # ffffffff8000991c <fb_info+0xc>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff800011a0:	66 89 05 71 87 00 00 	mov    %ax,0x8771(%rip)        # ffffffff80009918 <fb_info+0x8>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff800011a7:	0f af c1             	imul   %ecx,%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff800011aa:	66 89 15 6d 87 00 00 	mov    %dx,0x876d(%rip)        # ffffffff8000991e <fb_info+0xe>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff800011b1:	89 05 69 87 00 00    	mov    %eax,0x8769(%rip)        # ffffffff80009920 <fb_info+0x10>

    //printf("FB Height: %d  FB Width: %d\n", fb_info.height, fb_info.width);
    //printf("FB BPP: %d   FB Pitch: %d\n", fb_info.bpp, fb_info.pitch);

    //fb_putpixel(100,100,FB_COLOR_WHITE);
}
ffffffff800011b7:	c3                   	retq   
ffffffff800011b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800011bf:	00 

ffffffff800011c0 <fb_putpixel>:

void fb_putpixel(uint32_t x, uint32_t y, enum fb_color col)
{
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff800011c0:	0f b7 0d 57 87 00 00 	movzwl 0x8757(%rip),%ecx        # ffffffff8000991e <fb_info+0xe>
ffffffff800011c7:	0f b7 05 4e 87 00 00 	movzwl 0x874e(%rip),%eax        # ffffffff8000991c <fb_info+0xc>
{
ffffffff800011ce:	41 89 d0             	mov    %edx,%r8d
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff800011d1:	31 d2                	xor    %edx,%edx
ffffffff800011d3:	66 c1 e9 03          	shr    $0x3,%cx
ffffffff800011d7:	66 f7 f1             	div    %cx
ffffffff800011da:	0f b7 c0             	movzwl %ax,%eax
ffffffff800011dd:	0f af c6             	imul   %esi,%eax
ffffffff800011e0:	8d 14 38             	lea    (%rax,%rdi,1),%edx
    //if(index > fb_info.max_pixels) return;
    *((uint32_t*)fb_info.base + index) = col;
ffffffff800011e3:	48 8b 05 26 87 00 00 	mov    0x8726(%rip),%rax        # ffffffff80009910 <fb_info>
ffffffff800011ea:	44 89 04 90          	mov    %r8d,(%rax,%rdx,4)
}
ffffffff800011ee:	c3                   	retq   
ffffffff800011ef:	90                   	nop

ffffffff800011f0 <fb_clearscreen>:

void fb_clearscreen(enum fb_color col)
{
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800011f0:	0f b7 05 21 87 00 00 	movzwl 0x8721(%rip),%eax        # ffffffff80009918 <fb_info+0x8>
ffffffff800011f7:	0f b7 15 1c 87 00 00 	movzwl 0x871c(%rip),%edx        # ffffffff8000991a <fb_info+0xa>
ffffffff800011fe:	0f af c2             	imul   %edx,%eax
ffffffff80001201:	85 c0                	test   %eax,%eax
ffffffff80001203:	48 63 c8             	movslq %eax,%rcx
ffffffff80001206:	74 1f                	je     ffffffff80001227 <fb_clearscreen+0x37>
    {
        *((uint32_t*)fb_info.base + i) = col;
ffffffff80001208:	48 8b 15 01 87 00 00 	mov    0x8701(%rip),%rdx        # ffffffff80009910 <fb_info>
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff8000120f:	31 c0                	xor    %eax,%eax
ffffffff80001211:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001218:	48 83 c0 01          	add    $0x1,%rax
        *((uint32_t*)fb_info.base + i) = col;
ffffffff8000121c:	89 3a                	mov    %edi,(%rdx)
ffffffff8000121e:	48 83 c2 04          	add    $0x4,%rdx
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80001222:	48 39 c8             	cmp    %rcx,%rax
ffffffff80001225:	75 f1                	jne    ffffffff80001218 <fb_clearscreen+0x28>
    }
}
ffffffff80001227:	f3 c3                	repz retq 
ffffffff80001229:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80001230 <fb_drawline>:

void fb_drawline(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, enum fb_color col)
{

ffffffff80001230:	f3 c3                	repz retq 
ffffffff80001232:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001239:	00 00 00 
ffffffff8000123c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001240 <console_input>:

    //write the output buffer to screen
}

void console_input(KEY_INFO_t key)
{
ffffffff80001240:	89 f8                	mov    %edi,%eax
ffffffff80001242:	0f b6 fc             	movzbl %ah,%edi
    con_input_buffer.index++;
ffffffff80001245:	48 8b 05 24 97 00 00 	mov    0x9724(%rip),%rax        # ffffffff8000a970 <con_input_buffer+0x10>
ffffffff8000124c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001250:	48 89 15 19 97 00 00 	mov    %rdx,0x9719(%rip)        # ffffffff8000a970 <con_input_buffer+0x10>
    con_input_buffer.buffer[con_input_buffer.index] = key.ascii;
ffffffff80001257:	48 8b 15 02 97 00 00 	mov    0x9702(%rip),%rdx        # ffffffff8000a960 <con_input_buffer>
ffffffff8000125e:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
    

    con_output_buffer.buffer[con_output_buffer.index] = key.ascii;
ffffffff80001263:	48 8b 05 e6 96 00 00 	mov    0x96e6(%rip),%rax        # ffffffff8000a950 <con_output_buffer+0x10>
ffffffff8000126a:	48 8b 15 cf 96 00 00 	mov    0x96cf(%rip),%rdx        # ffffffff8000a940 <con_output_buffer>
ffffffff80001271:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
    con_output_buffer.index++;
ffffffff80001275:	48 8b 05 d4 96 00 00 	mov    0x96d4(%rip),%rax        # ffffffff8000a950 <con_output_buffer+0x10>
ffffffff8000127c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001280:	48 89 15 c9 96 00 00 	mov    %rdx,0x96c9(%rip)        # ffffffff8000a950 <con_output_buffer+0x10>
    con_output_buffer.buffer[con_output_buffer.index] = 0x00;
ffffffff80001287:	48 8b 15 b2 96 00 00 	mov    0x96b2(%rip),%rdx        # ffffffff8000a940 <con_output_buffer>
ffffffff8000128e:	c6 44 02 01 00       	movb   $0x0,0x1(%rdx,%rax,1)
    return;
ffffffff80001293:	c3                   	retq   
ffffffff80001294:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000129b:	00 00 00 00 
ffffffff8000129f:	90                   	nop

ffffffff800012a0 <putchar>:
    switch(c)
ffffffff800012a0:	40 80 ff 0a          	cmp    $0xa,%dil
ffffffff800012a4:	0f 84 f6 00 00 00    	je     ffffffff800013a0 <putchar+0x100>
ffffffff800012aa:	40 80 ff 0d          	cmp    $0xd,%dil
ffffffff800012ae:	0f 84 ec 00 00 00    	je     ffffffff800013a0 <putchar+0x100>
ffffffff800012b4:	40 80 ff 09          	cmp    $0x9,%dil
ffffffff800012b8:	0f 84 be 00 00 00    	je     ffffffff8000137c <putchar+0xdc>
{
ffffffff800012be:	41 57                	push   %r15
ffffffff800012c0:	41 56                	push   %r14
ffffffff800012c2:	89 f8                	mov    %edi,%eax
ffffffff800012c4:	41 55                	push   %r13
ffffffff800012c6:	41 54                	push   %r12
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff800012c8:	48 c1 e0 04          	shl    $0x4,%rax
{
ffffffff800012cc:	55                   	push   %rbp
ffffffff800012cd:	53                   	push   %rbx
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff800012ce:	25 f0 0f 00 00       	and    $0xff0,%eax
ffffffff800012d3:	4c 8d a8 e4 63 00 80 	lea    -0x7fff9c1c(%rax),%r13
ffffffff800012da:	48 05 f4 63 00 80    	add    $0xffffffff800063f4,%rax
{
ffffffff800012e0:	48 83 ec 18          	sub    $0x18,%rsp
    console_drawchar(c, console_info.cursor_x, console_info.cursor_y, console_info.foreground_color, console_info.background_color);
ffffffff800012e4:	8b 0d 9e 96 00 00    	mov    0x969e(%rip),%ecx        # ffffffff8000a988 <console_info+0x8>
ffffffff800012ea:	0f b7 1d a1 96 00 00 	movzwl 0x96a1(%rip),%ebx        # ffffffff8000a992 <console_info+0x12>
ffffffff800012f1:	44 8b 25 94 96 00 00 	mov    0x9694(%rip),%r12d        # ffffffff8000a98c <console_info+0xc>
ffffffff800012f8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff800012fd:	89 0c 24             	mov    %ecx,(%rsp)
ffffffff80001300:	0f b7 0d 89 96 00 00 	movzwl 0x9689(%rip),%ecx        # ffffffff8000a990 <console_info+0x10>
ffffffff80001307:	8d 69 08             	lea    0x8(%rcx),%ebp
ffffffff8000130a:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
ffffffff8000130e:	66 90                	xchg   %ax,%ax
        row = glyph[i];
ffffffff80001310:	45 0f b6 75 00       	movzbl 0x0(%r13),%r14d
ffffffff80001315:	44 8b 7c 24 04       	mov    0x4(%rsp),%r15d
ffffffff8000131a:	eb 1d                	jmp    ffffffff80001339 <putchar+0x99>
ffffffff8000131c:	0f 1f 40 00          	nopl   0x0(%rax)
                fb_putpixel(x+j, y+i, background);
ffffffff80001320:	44 89 ff             	mov    %r15d,%edi
ffffffff80001323:	44 89 e2             	mov    %r12d,%edx
ffffffff80001326:	89 de                	mov    %ebx,%esi
ffffffff80001328:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff8000132c:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, background);
ffffffff8000132f:	e8 8c fe ff ff       	callq  ffffffff800011c0 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001334:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001337:	74 1e                	je     ffffffff80001357 <putchar+0xb7>
            if(row & 0x80)
ffffffff80001339:	45 84 f6             	test   %r14b,%r14b
ffffffff8000133c:	79 e2                	jns    ffffffff80001320 <putchar+0x80>
                fb_putpixel(x+j, y+i, foreground);
ffffffff8000133e:	8b 14 24             	mov    (%rsp),%edx
ffffffff80001341:	44 89 ff             	mov    %r15d,%edi
ffffffff80001344:	89 de                	mov    %ebx,%esi
ffffffff80001346:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff8000134a:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, foreground);
ffffffff8000134d:	e8 6e fe ff ff       	callq  ffffffff800011c0 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001352:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001355:	75 e2                	jne    ffffffff80001339 <putchar+0x99>
ffffffff80001357:	49 83 c5 01          	add    $0x1,%r13
ffffffff8000135b:	83 c3 01             	add    $0x1,%ebx
    for (uint32_t i = 0; i < 16; i++)
ffffffff8000135e:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff80001363:	75 ab                	jne    ffffffff80001310 <putchar+0x70>
    console_info.cursor_x += 8;
ffffffff80001365:	66 83 05 23 96 00 00 	addw   $0x8,0x9623(%rip)        # ffffffff8000a990 <console_info+0x10>
ffffffff8000136c:	08 
}
ffffffff8000136d:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001371:	5b                   	pop    %rbx
ffffffff80001372:	5d                   	pop    %rbp
ffffffff80001373:	41 5c                	pop    %r12
ffffffff80001375:	41 5d                	pop    %r13
ffffffff80001377:	41 5e                	pop    %r14
ffffffff80001379:	41 5f                	pop    %r15
ffffffff8000137b:	c3                   	retq   
            if(console_info.cursor_x += (PSF1_FONT_HEIGHT * 4) < fb_info.width)
ffffffff8000137c:	31 c0                	xor    %eax,%eax
ffffffff8000137e:	66 83 3d 94 85 00 00 	cmpw   $0x40,0x8594(%rip)        # ffffffff8000991a <fb_info+0xa>
ffffffff80001385:	40 
ffffffff80001386:	0f 97 c0             	seta   %al
ffffffff80001389:	66 03 05 00 96 00 00 	add    0x9600(%rip),%ax        # ffffffff8000a990 <console_info+0x10>
ffffffff80001390:	74 20                	je     ffffffff800013b2 <putchar+0x112>
                console_info.cursor_x += (8*4);
ffffffff80001392:	83 c0 20             	add    $0x20,%eax
ffffffff80001395:	66 89 05 f4 95 00 00 	mov    %ax,0x95f4(%rip)        # ffffffff8000a990 <console_info+0x10>
                return;
ffffffff8000139c:	c3                   	retq   
ffffffff8000139d:	0f 1f 00             	nopl   (%rax)
    console_info.cursor_x = 0;
ffffffff800013a0:	31 d2                	xor    %edx,%edx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff800013a2:	66 83 05 e8 95 00 00 	addw   $0x10,0x95e8(%rip)        # ffffffff8000a992 <console_info+0x12>
ffffffff800013a9:	10 
    console_info.cursor_x = 0;
ffffffff800013aa:	66 89 15 df 95 00 00 	mov    %dx,0x95df(%rip)        # ffffffff8000a990 <console_info+0x10>
ffffffff800013b1:	c3                   	retq   
                console_info.cursor_x += (8*4);
ffffffff800013b2:	b8 20 00 00 00       	mov    $0x20,%eax
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff800013b7:	66 83 05 d3 95 00 00 	addw   $0x10,0x95d3(%rip)        # ffffffff8000a992 <console_info+0x12>
ffffffff800013be:	10 
                console_info.cursor_x += (8*4);
ffffffff800013bf:	66 89 05 ca 95 00 00 	mov    %ax,0x95ca(%rip)        # ffffffff8000a990 <console_info+0x10>
ffffffff800013c6:	c3                   	retq   
ffffffff800013c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800013ce:	00 00 

ffffffff800013d0 <console_init>:
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff800013d0:	0f b7 05 41 85 00 00 	movzwl 0x8541(%rip),%eax        # ffffffff80009918 <fb_info+0x8>
    uint64_t index = y * fb_info.width;
ffffffff800013d7:	0f b7 3d 3c 85 00 00 	movzwl 0x853c(%rip),%edi        # ffffffff8000991a <fb_info+0xa>
    console_info.font = (struct PSF1_FONT*)&_binary_zapl16_psf_start;
ffffffff800013de:	48 c7 05 af 95 00 00 	movq   $0xffffffff800063e0,0x95af(%rip)        # ffffffff8000a998 <console_info+0x18>
ffffffff800013e5:	e0 63 00 80 
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff800013e9:	c7 05 95 95 00 00 ff 	movl   $0xffffffff,0x9595(%rip)        # ffffffff8000a988 <console_info+0x8>
ffffffff800013f0:	ff ff ff 
    console_info.background_color = FB_COLOR_BLACK;
ffffffff800013f3:	c7 05 8f 95 00 00 00 	movl   $0xff000000,0x958f(%rip)        # ffffffff8000a98c <console_info+0xc>
ffffffff800013fa:	00 00 ff 
    console_info.cursor_x = 0;
ffffffff800013fd:	c7 05 89 95 00 00 00 	movl   $0x0,0x9589(%rip)        # ffffffff8000a990 <console_info+0x10>
ffffffff80001404:	00 00 00 
    con_output_buffer.buffer = console_buffer;
ffffffff80001407:	48 c7 05 2e 95 00 00 	movq   $0xffffffff80009940,0x952e(%rip)        # ffffffff8000a940 <con_output_buffer>
ffffffff8000140e:	40 99 00 80 
    con_output_buffer.buffer_size = sizeof(console_buffer);
ffffffff80001412:	48 c7 05 2b 95 00 00 	movq   $0x1000,0x952b(%rip)        # ffffffff8000a948 <con_output_buffer+0x8>
ffffffff80001419:	00 10 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff8000141d:	89 c2                	mov    %eax,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff8000141f:	66 c1 e8 02          	shr    $0x2,%ax
    con_output_buffer.index = 0;
ffffffff80001423:	48 c7 05 22 95 00 00 	movq   $0x0,0x9522(%rip)        # ffffffff8000a950 <con_output_buffer+0x10>
ffffffff8000142a:	00 00 00 00 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff8000142e:	0f b7 c0             	movzwl %ax,%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001431:	66 c1 ea 04          	shr    $0x4,%dx
    con_input_buffer.buffer = cmd_buffer;
ffffffff80001435:	48 c7 05 20 95 00 00 	movq   $0xffffffff8000a9a0,0x9520(%rip)        # ffffffff8000a960 <con_input_buffer>
ffffffff8000143c:	a0 a9 00 80 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001440:	8d 04 40             	lea    (%rax,%rax,2),%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001443:	0f b7 d2             	movzwl %dx,%edx
    con_input_buffer.buffer_size = sizeof(cmd_buffer);
ffffffff80001446:	48 c7 05 17 95 00 00 	movq   $0x100,0x9517(%rip)        # ffffffff8000a968 <con_input_buffer+0x8>
ffffffff8000144d:	00 01 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001451:	89 15 2d 95 00 00    	mov    %edx,0x952d(%rip)        # ffffffff8000a984 <console_info+0x4>
    uint64_t index = y * fb_info.width;
ffffffff80001457:	48 89 f9             	mov    %rdi,%rcx
    console_draw_hline(console_info.start_pos, FB_COLOR_YELLOW);
ffffffff8000145a:	48 63 d0             	movslq %eax,%rdx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff8000145d:	89 05 1d 95 00 00    	mov    %eax,0x951d(%rip)        # ffffffff8000a980 <console_info>
    uint64_t index = y * fb_info.width;
ffffffff80001463:	48 0f af d7          	imul   %rdi,%rdx
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001467:	66 85 ff             	test   %di,%di
ffffffff8000146a:	74 53                	je     ffffffff800014bf <console_init+0xef>
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff8000146c:	48 8b 35 9d 84 00 00 	mov    0x849d(%rip),%rsi        # ffffffff80009910 <fb_info>
ffffffff80001473:	83 e9 01             	sub    $0x1,%ecx
ffffffff80001476:	4c 8d 46 04          	lea    0x4(%rsi),%r8
ffffffff8000147a:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff8000147e:	48 01 ca             	add    %rcx,%rdx
ffffffff80001481:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001485:	0f 1f 00             	nopl   (%rax)
ffffffff80001488:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff8000148e:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001492:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001495:	75 f1                	jne    ffffffff80001488 <console_init+0xb8>
    console_draw_hline(console_info.start_pos + 1, FB_COLOR_YELLOW);
ffffffff80001497:	8b 05 e3 94 00 00    	mov    0x94e3(%rip),%eax        # ffffffff8000a980 <console_info>
ffffffff8000149d:	8d 50 01             	lea    0x1(%rax),%edx
    uint64_t index = y * fb_info.width;
ffffffff800014a0:	48 0f af d7          	imul   %rdi,%rdx
ffffffff800014a4:	48 01 d1             	add    %rdx,%rcx
ffffffff800014a7:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff800014ab:	49 8d 14 88          	lea    (%r8,%rcx,4),%rdx
ffffffff800014af:	90                   	nop
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff800014b0:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff800014b6:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff800014ba:	48 39 c2             	cmp    %rax,%rdx
ffffffff800014bd:	75 f1                	jne    ffffffff800014b0 <console_init+0xe0>
    kbd_set_target(console_input);
ffffffff800014bf:	48 c7 c7 40 12 00 80 	mov    $0xffffffff80001240,%rdi
ffffffff800014c6:	e9 c5 01 00 00       	jmpq   ffffffff80001690 <kbd_set_target>
ffffffff800014cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800014d0 <console_exec>:
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff800014d0:	0f b7 05 43 84 00 00 	movzwl 0x8443(%rip),%eax        # ffffffff8000991a <fb_info+0xa>
ffffffff800014d7:	8b 15 a3 94 00 00    	mov    0x94a3(%rip),%edx        # ffffffff8000a980 <console_info>
ffffffff800014dd:	8d 34 42             	lea    (%rdx,%rax,2),%esi
ffffffff800014e0:	0f b7 15 31 84 00 00 	movzwl 0x8431(%rip),%edx        # ffffffff80009918 <fb_info+0x8>
ffffffff800014e7:	0f af d0             	imul   %eax,%edx
ffffffff800014ea:	39 d6                	cmp    %edx,%esi
ffffffff800014ec:	7d 2d                	jge    ffffffff8000151b <console_exec+0x4b>
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff800014ee:	48 8b 3d 1b 84 00 00 	mov    0x841b(%rip),%rdi        # ffffffff80009910 <fb_info>
ffffffff800014f5:	83 ea 01             	sub    $0x1,%edx
ffffffff800014f8:	4c 63 c6             	movslq %esi,%r8
ffffffff800014fb:	29 f2                	sub    %esi,%edx
ffffffff800014fd:	8b 0d 89 94 00 00    	mov    0x9489(%rip),%ecx        # ffffffff8000a98c <console_info+0xc>
ffffffff80001503:	4c 01 c2             	add    %r8,%rdx
ffffffff80001506:	4a 8d 04 87          	lea    (%rdi,%r8,4),%rax
ffffffff8000150a:	48 8d 54 97 04       	lea    0x4(%rdi,%rdx,4),%rdx
ffffffff8000150f:	90                   	nop
ffffffff80001510:	89 08                	mov    %ecx,(%rax)
ffffffff80001512:	48 83 c0 04          	add    $0x4,%rax
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001516:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001519:	75 f5                	jne    ffffffff80001510 <console_exec+0x40>
}
ffffffff8000151b:	f3 c3                	repz retq 
ffffffff8000151d:	0f 1f 00             	nopl   (%rax)

ffffffff80001520 <serial_init>:
#include "serial.h"
#include "../../io/io.h"


uint64_t serial_init(uint16_t port)
{
ffffffff80001520:	41 55                	push   %r13
ffffffff80001522:	41 54                	push   %r12
    outb(port + 1, 0x00);
ffffffff80001524:	44 8d 67 01          	lea    0x1(%rdi),%r12d
{
ffffffff80001528:	55                   	push   %rbp
ffffffff80001529:	53                   	push   %rbx
ffffffff8000152a:	89 fb                	mov    %edi,%ebx
    outb(port + 3, 0x80);
ffffffff8000152c:	8d 6b 03             	lea    0x3(%rbx),%ebp
    outb(port + 1, 0x00);
ffffffff8000152f:	45 0f b7 e4          	movzwl %r12w,%r12d
ffffffff80001533:	31 f6                	xor    %esi,%esi
{
ffffffff80001535:	48 83 ec 08          	sub    $0x8,%rsp
    outb(port + 1, 0x00);
ffffffff80001539:	44 89 e7             	mov    %r12d,%edi
    outb(port + 0, 0x00);
ffffffff8000153c:	44 0f b7 eb          	movzwl %bx,%r13d
    outb(port + 3, 0x80);
ffffffff80001540:	0f b7 ed             	movzwl %bp,%ebp
    outb(port + 1, 0x00);
ffffffff80001543:	e8 b8 ee ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 3, 0x80);
ffffffff80001548:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8000154d:	89 ef                	mov    %ebp,%edi
ffffffff8000154f:	e8 ac ee ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 0, 0x00);
ffffffff80001554:	31 f6                	xor    %esi,%esi
ffffffff80001556:	44 89 ef             	mov    %r13d,%edi
ffffffff80001559:	e8 a2 ee ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 1, 0x00);
ffffffff8000155e:	31 f6                	xor    %esi,%esi
ffffffff80001560:	44 89 e7             	mov    %r12d,%edi
ffffffff80001563:	e8 98 ee ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 3, 0x03);
ffffffff80001568:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8000156d:	89 ef                	mov    %ebp,%edi
ffffffff8000156f:	e8 8c ee ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 2, 0xC7);
ffffffff80001574:	8d 7b 02             	lea    0x2(%rbx),%edi
    outb(port + 4, 0x0B);
ffffffff80001577:	83 c3 04             	add    $0x4,%ebx
    outb(port + 2, 0xC7);
ffffffff8000157a:	be c7 00 00 00       	mov    $0xc7,%esi
    outb(port + 4, 0x0B);
ffffffff8000157f:	0f b7 db             	movzwl %bx,%ebx
    outb(port + 2, 0xC7);
ffffffff80001582:	0f b7 ff             	movzwl %di,%edi
ffffffff80001585:	e8 76 ee ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 4, 0x0B);
ffffffff8000158a:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff8000158f:	89 df                	mov    %ebx,%edi
ffffffff80001591:	e8 6a ee ff ff       	callq  ffffffff80000400 <outb>

    if(inb(port + 0) != 0xAE)
ffffffff80001596:	44 89 ef             	mov    %r13d,%edi
ffffffff80001599:	e8 72 ee ff ff       	callq  ffffffff80000410 <inb>
ffffffff8000159e:	3c ae                	cmp    $0xae,%al
ffffffff800015a0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800015a5:	74 11                	je     ffffffff800015b8 <serial_init+0x98>
        return 1;
    }

    outb(port + 4, 0x0F);
    return 0;
}
ffffffff800015a7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800015ab:	48 89 d0             	mov    %rdx,%rax
ffffffff800015ae:	5b                   	pop    %rbx
ffffffff800015af:	5d                   	pop    %rbp
ffffffff800015b0:	41 5c                	pop    %r12
ffffffff800015b2:	41 5d                	pop    %r13
ffffffff800015b4:	c3                   	retq   
ffffffff800015b5:	0f 1f 00             	nopl   (%rax)
    outb(port + 4, 0x0F);
ffffffff800015b8:	89 df                	mov    %ebx,%edi
ffffffff800015ba:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff800015bf:	e8 3c ee ff ff       	callq  ffffffff80000400 <outb>
}
ffffffff800015c4:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff800015c8:	31 d2                	xor    %edx,%edx
}
ffffffff800015ca:	5b                   	pop    %rbx
ffffffff800015cb:	48 89 d0             	mov    %rdx,%rax
ffffffff800015ce:	5d                   	pop    %rbp
ffffffff800015cf:	41 5c                	pop    %r12
ffffffff800015d1:	41 5d                	pop    %r13
ffffffff800015d3:	c3                   	retq   
ffffffff800015d4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800015db:	00 00 00 00 
ffffffff800015df:	90                   	nop

ffffffff800015e0 <serial_received>:

uint64_t serial_received(uint16_t port)
{
    return inb(port + 5) & 1;
ffffffff800015e0:	83 c7 05             	add    $0x5,%edi
{
ffffffff800015e3:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff800015e7:	0f b7 ff             	movzwl %di,%edi
ffffffff800015ea:	e8 21 ee ff ff       	callq  ffffffff80000410 <inb>
}
ffffffff800015ef:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff800015f3:	83 e0 01             	and    $0x1,%eax
}
ffffffff800015f6:	c3                   	retq   
ffffffff800015f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800015fe:	00 00 

ffffffff80001600 <serial_read>:

uint8_t serial_read(uint16_t port)
{
ffffffff80001600:	55                   	push   %rbp
ffffffff80001601:	53                   	push   %rbx
ffffffff80001602:	0f b7 ef             	movzwl %di,%ebp
ffffffff80001605:	83 c7 05             	add    $0x5,%edi
ffffffff80001608:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8000160c:	0f b7 df             	movzwl %di,%ebx
ffffffff8000160f:	90                   	nop
    return inb(port + 5) & 1;
ffffffff80001610:	89 df                	mov    %ebx,%edi
ffffffff80001612:	e8 f9 ed ff ff       	callq  ffffffff80000410 <inb>
    while(serial_received(port) == 0);
ffffffff80001617:	a8 01                	test   $0x1,%al
ffffffff80001619:	74 f5                	je     ffffffff80001610 <serial_read+0x10>

    return inb(port);
}
ffffffff8000161b:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port);
ffffffff8000161f:	89 ef                	mov    %ebp,%edi
}
ffffffff80001621:	5b                   	pop    %rbx
ffffffff80001622:	5d                   	pop    %rbp
    return inb(port);
ffffffff80001623:	e9 e8 ed ff ff       	jmpq   ffffffff80000410 <inb>
ffffffff80001628:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000162f:	00 

ffffffff80001630 <serial_is_tx_empty>:

uint64_t serial_is_tx_empty(uint16_t port)
{
    return inb(port + 5) & 0x20;
ffffffff80001630:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001633:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80001637:	0f b7 ff             	movzwl %di,%edi
ffffffff8000163a:	e8 d1 ed ff ff       	callq  ffffffff80000410 <inb>
ffffffff8000163f:	83 e0 20             	and    $0x20,%eax
}
ffffffff80001642:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80001646:	0f b6 c0             	movzbl %al,%eax
}
ffffffff80001649:	c3                   	retq   
ffffffff8000164a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80001650 <serial_write>:

void serial_write(uint16_t port, uint8_t data)
{
ffffffff80001650:	41 54                	push   %r12
ffffffff80001652:	44 0f b7 e7          	movzwl %di,%r12d
ffffffff80001656:	83 c7 05             	add    $0x5,%edi
ffffffff80001659:	55                   	push   %rbp
ffffffff8000165a:	89 f5                	mov    %esi,%ebp
ffffffff8000165c:	53                   	push   %rbx
ffffffff8000165d:	0f b7 df             	movzwl %di,%ebx
    return inb(port + 5) & 0x20;
ffffffff80001660:	89 df                	mov    %ebx,%edi
ffffffff80001662:	e8 a9 ed ff ff       	callq  ffffffff80000410 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80001667:	a8 20                	test   $0x20,%al
ffffffff80001669:	74 f5                	je     ffffffff80001660 <serial_write+0x10>
    outb(port, data);
ffffffff8000166b:	5b                   	pop    %rbx
    outb(port, data);
ffffffff8000166c:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80001670:	44 89 e7             	mov    %r12d,%edi
ffffffff80001673:	5d                   	pop    %rbp
ffffffff80001674:	41 5c                	pop    %r12
    outb(port, data);
ffffffff80001676:	e9 85 ed ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff8000167b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001680 <kbd_init>:


void kbd_init()
{

}
ffffffff80001680:	f3 c3                	repz retq 
ffffffff80001682:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001689:	00 00 00 00 
ffffffff8000168d:	0f 1f 00             	nopl   (%rax)

ffffffff80001690 <kbd_set_target>:

void kbd_set_target(void* handler)
{
    kbd_handler = handler;
ffffffff80001690:	48 89 3d 89 c5 00 00 	mov    %rdi,0xc589(%rip)        # ffffffff8000dc20 <kbd_handler>
    kbd_active = 1;
ffffffff80001697:	c6 05 8a c5 00 00 01 	movb   $0x1,0xc58a(%rip)        # ffffffff8000dc28 <kbd_active>
}
ffffffff8000169e:	c3                   	retq   
ffffffff8000169f:	90                   	nop

ffffffff800016a0 <kbd_translate>:

uint8_t kbd_translate(uint8_t scancode, uint8_t uppercase)
{
    if(scancode > 58) return 0;
ffffffff800016a0:	31 c0                	xor    %eax,%eax
ffffffff800016a2:	40 80 ff 3a          	cmp    $0x3a,%dil
ffffffff800016a6:	77 14                	ja     ffffffff800016bc <kbd_translate+0x1c>
ffffffff800016a8:	40 0f b6 ff          	movzbl %dil,%edi

    if(uppercase) return kbd_table[scancode] - 32;
ffffffff800016ac:	40 84 f6             	test   %sil,%sil
ffffffff800016af:	0f b6 87 00 42 00 80 	movzbl -0x7fffbe00(%rdi),%eax
ffffffff800016b6:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff800016b9:	0f 45 c2             	cmovne %edx,%eax

    return kbd_table[scancode];
}
ffffffff800016bc:	f3 c3                	repz retq 
ffffffff800016be:	66 90                	xchg   %ax,%ax

ffffffff800016c0 <kbd_handle>:
void kbd_handle()
{
    uint8_t data;
    KEY_INFO_t key_info;

    if(!kbd_active) return;
ffffffff800016c0:	80 3d 61 c5 00 00 00 	cmpb   $0x0,0xc561(%rip)        # ffffffff8000dc28 <kbd_active>
ffffffff800016c7:	75 07                	jne    ffffffff800016d0 <kbd_handle+0x10>
ffffffff800016c9:	f3 c3                	repz retq 
ffffffff800016cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
{
ffffffff800016d0:	48 83 ec 08          	sub    $0x8,%rsp

    data = inb(0x60);
ffffffff800016d4:	bf 60 00 00 00       	mov    $0x60,%edi
ffffffff800016d9:	e8 32 ed ff ff       	callq  ffffffff80000410 <inb>

    uint8_t buffer[20];

    switch(data)
ffffffff800016de:	3c 36                	cmp    $0x36,%al
ffffffff800016e0:	74 36                	je     ffffffff80001718 <kbd_handle+0x58>
ffffffff800016e2:	77 1c                	ja     ffffffff80001700 <kbd_handle+0x40>
ffffffff800016e4:	3c 01                	cmp    $0x1,%al
ffffffff800016e6:	0f 84 84 00 00 00    	je     ffffffff80001770 <kbd_handle+0xb0>
ffffffff800016ec:	3c 2a                	cmp    $0x2a,%al
ffffffff800016ee:	75 48                	jne    ffffffff80001738 <kbd_handle+0x78>
    {
        case KBD_LEFT_SHIFT:
            lshift_status = 1;
ffffffff800016f0:	c6 05 c9 94 00 00 01 	movb   $0x1,0x94c9(%rip)        # ffffffff8000abc0 <lshift_status>
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
    key_info.scancode = data;

    kbd_handler(key_info);

ffffffff800016f7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800016fb:	c3                   	retq   
ffffffff800016fc:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(data)
ffffffff80001700:	3c aa                	cmp    $0xaa,%al
ffffffff80001702:	74 24                	je     ffffffff80001728 <kbd_handle+0x68>
ffffffff80001704:	3c b6                	cmp    $0xb6,%al
ffffffff80001706:	75 30                	jne    ffffffff80001738 <kbd_handle+0x78>
            rshift_status = 0;
ffffffff80001708:	c6 05 99 93 00 00 00 	movb   $0x0,0x9399(%rip)        # ffffffff8000aaa8 <rshift_status>
            return;
ffffffff8000170f:	eb e6                	jmp    ffffffff800016f7 <kbd_handle+0x37>
ffffffff80001711:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            rshift_status = 1;
ffffffff80001718:	c6 05 89 93 00 00 01 	movb   $0x1,0x9389(%rip)        # ffffffff8000aaa8 <rshift_status>
            return;
ffffffff8000171f:	eb d6                	jmp    ffffffff800016f7 <kbd_handle+0x37>
ffffffff80001721:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            lshift_status = 0;
ffffffff80001728:	c6 05 91 94 00 00 00 	movb   $0x0,0x9491(%rip)        # ffffffff8000abc0 <lshift_status>
            return;
ffffffff8000172f:	eb c6                	jmp    ffffffff800016f7 <kbd_handle+0x37>
ffffffff80001731:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(scancode > 58) return 0;
ffffffff80001738:	31 d2                	xor    %edx,%edx
ffffffff8000173a:	3c 3a                	cmp    $0x3a,%al
ffffffff8000173c:	77 1e                	ja     ffffffff8000175c <kbd_handle+0x9c>
ffffffff8000173e:	0f b6 d0             	movzbl %al,%edx
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80001741:	0f b6 35 78 94 00 00 	movzbl 0x9478(%rip),%esi        # ffffffff8000abc0 <lshift_status>
ffffffff80001748:	0f b6 92 00 42 00 80 	movzbl -0x7fffbe00(%rdx),%edx
ffffffff8000174f:	40 0a 35 52 93 00 00 	or     0x9352(%rip),%sil        # ffffffff8000aaa8 <rshift_status>
ffffffff80001756:	8d 4a e0             	lea    -0x20(%rdx),%ecx
ffffffff80001759:	0f 45 d1             	cmovne %ecx,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff8000175c:	31 c9                	xor    %ecx,%ecx
ffffffff8000175e:	48 83 c4 08          	add    $0x8,%rsp
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80001762:	88 d5                	mov    %dl,%ch
    key_info.scancode = data;
ffffffff80001764:	88 c1                	mov    %al,%cl
    kbd_handler(key_info);
ffffffff80001766:	89 cf                	mov    %ecx,%edi
ffffffff80001768:	ff 25 b2 c4 00 00    	jmpq   *0xc4b2(%rip)        # ffffffff8000dc20 <kbd_handler>
ffffffff8000176e:	66 90                	xchg   %ax,%ax
            printf("%d\n", pit_ticks);
ffffffff80001770:	48 8b 35 c9 c5 00 00 	mov    0xc5c9(%rip),%rsi        # ffffffff8000dd40 <pit_ticks>
ffffffff80001777:	48 c7 c7 f3 41 00 80 	mov    $0xffffffff800041f3,%rdi
ffffffff8000177e:	31 c0                	xor    %eax,%eax
ffffffff80001780:	48 83 c4 08          	add    $0x8,%rsp
            printf("%d\n", pit_ticks);
ffffffff80001784:	e9 a7 13 00 00       	jmpq   ffffffff80002b30 <printf_>
ffffffff80001789:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80001790 <cpu_init>:

void cpu_init()
{
    uint64_t a,b,c,d;
    __cpuid(0,a,b,c,d);
ffffffff80001790:	f3 c3                	repz retq 
ffffffff80001792:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001799:	00 00 00 
ffffffff8000179c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800017a0 <acpi_init>:
    struct RSDP20Descriptor* rsdp;

}ACPI_Info;

void acpi_init()
{
ffffffff800017a0:	48 83 ec 18          	sub    $0x18,%rsp
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff800017a4:	48 8b 05 1d 81 00 00 	mov    0x811d(%rip),%rax        # ffffffff800098c8 <boot_info+0x28>
    
    uint8_t test[8] = {'R', 'S', 'P', ' ', 'P', 'T', 'R', ' '};
ffffffff800017ab:	48 bf 52 53 50 20 50 	movabs $0x2052545020505352,%rdi
ffffffff800017b2:	54 52 20 
ffffffff800017b5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff800017ba:	31 d2                	xor    %edx,%edx
ffffffff800017bc:	b9 52 00 00 00       	mov    $0x52,%ecx
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff800017c1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800017c5:	48 89 05 fc 93 00 00 	mov    %rax,0x93fc(%rip)        # ffffffff8000abc8 <ACPI_Info>
    for(uint32_t i = 0; i < 8; i++)
    {
        if(test[i] == ACPI_Info.rsdp->header.signature[i]) 
ffffffff800017cc:	38 0c 10             	cmp    %cl,(%rax,%rdx,1)
ffffffff800017cf:	74 0f                	je     ffffffff800017e0 <acpi_init+0x40>
            return;
    }

    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
    
ffffffff800017d1:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800017d5:	c3                   	retq   
ffffffff800017d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800017dd:	00 00 00 
ffffffff800017e0:	48 83 c2 01          	add    $0x1,%rdx
    for(uint32_t i = 0; i < 8; i++)
ffffffff800017e4:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff800017e8:	75 16                	jne    ffffffff80001800 <acpi_init+0x60>
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff800017ea:	0f b6 70 0f          	movzbl 0xf(%rax),%esi
ffffffff800017ee:	48 c7 c7 40 42 00 80 	mov    $0xffffffff80004240,%rdi
ffffffff800017f5:	31 c0                	xor    %eax,%eax
ffffffff800017f7:	48 83 c4 18          	add    $0x18,%rsp
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff800017fb:	e9 30 13 00 00       	jmpq   ffffffff80002b30 <printf_>
ffffffff80001800:	0f b6 4c 14 08       	movzbl 0x8(%rsp,%rdx,1),%ecx
ffffffff80001805:	eb c5                	jmp    ffffffff800017cc <acpi_init+0x2c>
ffffffff80001807:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000180e:	00 00 

ffffffff80001810 <pic_EOI>:

uint64_t ticks;

void pic_EOI(uint8_t IRQ)
{
    if(IRQ >= 8)
ffffffff80001810:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80001814:	77 12                	ja     ffffffff80001828 <pic_EOI+0x18>
    {
        outb(PIC2_CMD, PIC_EOI);
    }
    
    outb(PIC1_CMD, PIC_EOI);
ffffffff80001816:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000181b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80001820:	e9 db eb ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001825:	0f 1f 00             	nopl   (%rax)
{
ffffffff80001828:	48 83 ec 08          	sub    $0x8,%rsp
        outb(PIC2_CMD, PIC_EOI);
ffffffff8000182c:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001831:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80001836:	e8 c5 eb ff ff       	callq  ffffffff80000400 <outb>
    outb(PIC1_CMD, PIC_EOI);
ffffffff8000183b:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001840:	bf 20 00 00 00       	mov    $0x20,%edi
}
ffffffff80001845:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_CMD, PIC_EOI);
ffffffff80001849:	e9 b2 eb ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff8000184e:	66 90                	xchg   %ax,%ax

ffffffff80001850 <pic_set_mask>:

void pic_set_mask(uint8_t IRQ)
{
ffffffff80001850:	55                   	push   %rbp
ffffffff80001851:	53                   	push   %rbx
ffffffff80001852:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80001856:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff8000185a:	76 34                	jbe    ffffffff80001890 <pic_set_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff8000185c:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff8000185f:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) | (1 << IRQ);
ffffffff80001864:	89 df                	mov    %ebx,%edi
ffffffff80001866:	e8 a5 eb ff ff       	callq  ffffffff80000410 <inb>
    outb(port, value);
}
ffffffff8000186b:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) | (1 << IRQ);
ffffffff8000186f:	89 e9                	mov    %ebp,%ecx
ffffffff80001871:	be 01 00 00 00       	mov    $0x1,%esi
    outb(port, value);
ffffffff80001876:	89 df                	mov    %ebx,%edi
    value = inb(port) | (1 << IRQ);
ffffffff80001878:	d3 e6                	shl    %cl,%esi
}
ffffffff8000187a:	5b                   	pop    %rbx
ffffffff8000187b:	5d                   	pop    %rbp
    value = inb(port) | (1 << IRQ);
ffffffff8000187c:	09 f0                	or     %esi,%eax
    outb(port, value);
ffffffff8000187e:	0f b6 f0             	movzbl %al,%esi
ffffffff80001881:	e9 7a eb ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001886:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000188d:	00 00 00 
ffffffff80001890:	89 fd                	mov    %edi,%ebp
ffffffff80001892:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80001897:	eb cb                	jmp    ffffffff80001864 <pic_set_mask+0x14>
ffffffff80001899:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800018a0 <pic_clear_mask>:

void pic_clear_mask(uint8_t IRQ)
{
ffffffff800018a0:	55                   	push   %rbp
ffffffff800018a1:	53                   	push   %rbx
ffffffff800018a2:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff800018a6:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff800018aa:	76 34                	jbe    ffffffff800018e0 <pic_clear_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff800018ac:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff800018af:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) & ~(1 << IRQ);
ffffffff800018b4:	89 df                	mov    %ebx,%edi
ffffffff800018b6:	e8 55 eb ff ff       	callq  ffffffff80000410 <inb>
    outb(port, value);
}
ffffffff800018bb:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) & ~(1 << IRQ);
ffffffff800018bf:	89 e9                	mov    %ebp,%ecx
ffffffff800018c1:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    outb(port, value);
ffffffff800018c6:	89 df                	mov    %ebx,%edi
    value = inb(port) & ~(1 << IRQ);
ffffffff800018c8:	d3 c2                	rol    %cl,%edx
}
ffffffff800018ca:	5b                   	pop    %rbx
ffffffff800018cb:	5d                   	pop    %rbp
    value = inb(port) & ~(1 << IRQ);
ffffffff800018cc:	21 d0                	and    %edx,%eax
    outb(port, value);
ffffffff800018ce:	0f b6 f0             	movzbl %al,%esi
ffffffff800018d1:	e9 2a eb ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff800018d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800018dd:	00 00 00 
ffffffff800018e0:	89 fd                	mov    %edi,%ebp
ffffffff800018e2:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff800018e7:	eb cb                	jmp    ffffffff800018b4 <pic_clear_mask+0x14>
ffffffff800018e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800018f0 <pic_disable>:

void pic_disable()
{
ffffffff800018f0:	48 83 ec 08          	sub    $0x8,%rsp
    outb(PIC2_DATA, 0xff);
ffffffff800018f4:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff800018f9:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800018fe:	e8 fd ea ff ff       	callq  ffffffff80000400 <outb>
    outb(PIC1_DATA, 0xff);
ffffffff80001903:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80001908:	bf 21 00 00 00       	mov    $0x21,%edi
}
ffffffff8000190d:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_DATA, 0xff);
ffffffff80001911:	e9 ea ea ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000191d:	00 00 00 

ffffffff80001920 <pic_remap>:

void pic_remap()
{
ffffffff80001920:	55                   	push   %rbp
ffffffff80001921:	53                   	push   %rbx
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80001922:	bf 21 00 00 00       	mov    $0x21,%edi
{
ffffffff80001927:	48 83 ec 08          	sub    $0x8,%rsp
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff8000192b:	e8 e0 ea ff ff       	callq  ffffffff80000410 <inb>
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80001930:	bf a1 00 00 00       	mov    $0xa1,%edi
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80001935:	89 c5                	mov    %eax,%ebp
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80001937:	e8 d4 ea ff ff       	callq  ffffffff80000410 <inb>

    outb(PIC1_CMD, 0x11);
ffffffff8000193c:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80001941:	bf 20 00 00 00       	mov    $0x20,%edi
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80001946:	89 c3                	mov    %eax,%ebx
    outb(PIC1_CMD, 0x11);
ffffffff80001948:	e8 b3 ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff8000194d:	31 c0                	xor    %eax,%eax
ffffffff8000194f:	e8 cc ea ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_CMD, 0x11);
ffffffff80001954:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80001959:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8000195e:	e8 9d ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001963:	31 c0                	xor    %eax,%eax
ffffffff80001965:	e8 b6 ea ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x20);
ffffffff8000196a:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000196f:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80001974:	e8 87 ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001979:	31 c0                	xor    %eax,%eax
ffffffff8000197b:	e8 a0 ea ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x20);
ffffffff80001980:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001985:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000198a:	e8 71 ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff8000198f:	31 c0                	xor    %eax,%eax
ffffffff80001991:	e8 8a ea ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x04);
ffffffff80001996:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff8000199b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800019a0:	e8 5b ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800019a5:	31 c0                	xor    %eax,%eax
ffffffff800019a7:	e8 74 ea ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x02);
ffffffff800019ac:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff800019b1:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800019b6:	e8 45 ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800019bb:	31 c0                	xor    %eax,%eax
ffffffff800019bd:	e8 5e ea ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x01);
ffffffff800019c2:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800019c7:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800019cc:	e8 2f ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800019d1:	31 c0                	xor    %eax,%eax
ffffffff800019d3:	e8 48 ea ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x01);
ffffffff800019d8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800019dd:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800019e2:	e8 19 ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800019e7:	31 c0                	xor    %eax,%eax
ffffffff800019e9:	e8 32 ea ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, mask1);
ffffffff800019ee:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff800019f2:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800019f7:	e8 04 ea ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff800019fc:	31 c0                	xor    %eax,%eax
ffffffff800019fe:	e8 1d ea ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, mask2);
ffffffff80001a03:	0f b6 f3             	movzbl %bl,%esi
ffffffff80001a06:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80001a0b:	e8 f0 e9 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001a10:	31 c0                	xor    %eax,%eax
}
ffffffff80001a12:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80001a16:	5b                   	pop    %rbx
ffffffff80001a17:	5d                   	pop    %rbp
    io_wait();
ffffffff80001a18:	e9 03 ea ff ff       	jmpq   ffffffff80000420 <io_wait>
ffffffff80001a1d:	0f 1f 00             	nopl   (%rax)

ffffffff80001a20 <pit_init>:



void pit_init(uint64_t freq)
{
ffffffff80001a20:	53                   	push   %rbx
    if(freq > 1193181)
        working_freq = 1193181;

    uint32_t divisor = 1193180 / working_freq;

    outb(0x43, 0x36);
ffffffff80001a21:	be 36 00 00 00       	mov    $0x36,%esi
{
ffffffff80001a26:	48 89 fb             	mov    %rdi,%rbx
    outb(0x43, 0x36);
ffffffff80001a29:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff80001a2e:	e8 cd e9 ff ff       	callq  ffffffff80000400 <outb>
    uint32_t divisor = 1193180 / working_freq;
ffffffff80001a33:	48 81 fb dd 34 12 00 	cmp    $0x1234dd,%rbx
ffffffff80001a3a:	bf dd 34 12 00       	mov    $0x1234dd,%edi
ffffffff80001a3f:	b8 10 27 00 00       	mov    $0x2710,%eax
ffffffff80001a44:	48 0f 46 fb          	cmovbe %rbx,%rdi
ffffffff80001a48:	48 81 ff 10 27 00 00 	cmp    $0x2710,%rdi
ffffffff80001a4f:	48 0f 42 f8          	cmovb  %rax,%rdi
ffffffff80001a53:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
ffffffff80001a58:	31 d2                	xor    %edx,%edx
ffffffff80001a5a:	48 f7 f7             	div    %rdi
    outb(0x40, divisor & 0xff);
ffffffff80001a5d:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80001a62:	89 c6                	mov    %eax,%esi
ffffffff80001a64:	e8 97 e9 ff ff       	callq  ffffffff80000400 <outb>
    outb(0x40, divisor >> 8);
ffffffff80001a69:	5b                   	pop    %rbx
    outb(0x40, divisor >> 8);
ffffffff80001a6a:	31 f6                	xor    %esi,%esi
ffffffff80001a6c:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80001a71:	e9 8a e9 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001a76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001a7d:	00 00 00 

ffffffff80001a80 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
ffffffff80001a80:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80001a83:	73 04                	jae    ffffffff80001a89 <_out_buffer+0x9>
    ((char*)buffer)[idx] = character;
ffffffff80001a85:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  }
}
ffffffff80001a89:	f3 c3                	repz retq 
ffffffff80001a8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001a90 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
ffffffff80001a90:	f3 c3                	repz retq 
ffffffff80001a92:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001a99:	00 00 00 00 
ffffffff80001a9d:	0f 1f 00             	nopl   (%rax)

ffffffff80001aa0 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
ffffffff80001aa0:	40 84 ff             	test   %dil,%dil
{
ffffffff80001aa3:	48 89 f0             	mov    %rsi,%rax
  if (character) {
ffffffff80001aa6:	74 10                	je     ffffffff80001ab8 <_out_fct+0x18>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
ffffffff80001aa8:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffffff80001aac:	40 0f be ff          	movsbl %dil,%edi
ffffffff80001ab0:	ff 20                	jmpq   *(%rax)
ffffffff80001ab2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  }
}
ffffffff80001ab8:	f3 c3                	repz retq 
ffffffff80001aba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80001ac0 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80001ac0:	41 57                	push   %r15
ffffffff80001ac2:	41 56                	push   %r14
ffffffff80001ac4:	41 55                	push   %r13
ffffffff80001ac6:	41 54                	push   %r12
ffffffff80001ac8:	49 89 cd             	mov    %rcx,%r13
ffffffff80001acb:	55                   	push   %rbp
ffffffff80001acc:	53                   	push   %rbx
ffffffff80001acd:	48 89 fd             	mov    %rdi,%rbp
ffffffff80001ad0:	4c 89 c3             	mov    %r8,%rbx
ffffffff80001ad3:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80001ad7:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
ffffffff80001ade:	48 89 34 24          	mov    %rsi,(%rsp)
ffffffff80001ae2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80001ae7:	8b 7c 24 60          	mov    0x60(%rsp),%edi
ffffffff80001aeb:	89 c6                	mov    %eax,%esi
ffffffff80001aed:	89 c1                	mov    %eax,%ecx
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
ffffffff80001aef:	89 c2                	mov    %eax,%edx
ffffffff80001af1:	83 e6 10             	and    $0x10,%esi
ffffffff80001af4:	83 e1 03             	and    $0x3,%ecx
ffffffff80001af7:	83 e2 02             	and    $0x2,%edx
ffffffff80001afa:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
ffffffff80001afe:	75 79                	jne    ffffffff80001b79 <_ntoa_format+0xb9>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80001b00:	44 8b 54 24 78       	mov    0x78(%rsp),%r10d
ffffffff80001b05:	41 89 c0             	mov    %eax,%r8d
ffffffff80001b08:	8b 54 24 70          	mov    0x70(%rsp),%edx
ffffffff80001b0c:	41 83 e0 01          	and    $0x1,%r8d
ffffffff80001b10:	45 85 d2             	test   %r10d,%r10d
ffffffff80001b13:	0f 85 d7 00 00 00    	jne    ffffffff80001bf0 <_ntoa_format+0x130>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b19:	49 39 d1             	cmp    %rdx,%r9
ffffffff80001b1c:	73 27                	jae    ffffffff80001b45 <_ntoa_format+0x85>
ffffffff80001b1e:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001b22:	75 12                	jne    ffffffff80001b36 <_ntoa_format+0x76>
ffffffff80001b24:	e9 b7 02 00 00       	jmpq   ffffffff80001de0 <_ntoa_format+0x320>
ffffffff80001b29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001b30:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001b34:	74 0f                	je     ffffffff80001b45 <_ntoa_format+0x85>
      buf[len++] = '0';
ffffffff80001b36:	49 83 c1 01          	add    $0x1,%r9
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b3a:	49 39 d1             	cmp    %rdx,%r9
      buf[len++] = '0';
ffffffff80001b3d:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b43:	72 eb                	jb     ffffffff80001b30 <_ntoa_format+0x70>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b45:	45 85 c0             	test   %r8d,%r8d
ffffffff80001b48:	74 2f                	je     ffffffff80001b79 <_ntoa_format+0xb9>
ffffffff80001b4a:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff80001b4f:	4d 39 ce             	cmp    %r9,%r14
ffffffff80001b52:	76 25                	jbe    ffffffff80001b79 <_ntoa_format+0xb9>
ffffffff80001b54:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001b58:	75 10                	jne    ffffffff80001b6a <_ntoa_format+0xaa>
ffffffff80001b5a:	e9 8b 03 00 00       	jmpq   ffffffff80001eea <_ntoa_format+0x42a>
ffffffff80001b5f:	90                   	nop
ffffffff80001b60:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001b64:	0f 84 76 02 00 00    	je     ffffffff80001de0 <_ntoa_format+0x320>
      buf[len++] = '0';
ffffffff80001b6a:	49 83 c1 01          	add    $0x1,%r9
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b6e:	4d 39 f1             	cmp    %r14,%r9
      buf[len++] = '0';
ffffffff80001b71:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b77:	75 e7                	jne    ffffffff80001b60 <_ntoa_format+0xa0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
ffffffff80001b79:	85 f6                	test   %esi,%esi
ffffffff80001b7b:	74 41                	je     ffffffff80001bbe <_ntoa_format+0xfe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80001b7d:	f6 c4 04             	test   $0x4,%ah
ffffffff80001b80:	0f 85 5a 01 00 00    	jne    ffffffff80001ce0 <_ntoa_format+0x220>
ffffffff80001b86:	4d 85 c9             	test   %r9,%r9
ffffffff80001b89:	0f 85 31 01 00 00    	jne    ffffffff80001cc0 <_ntoa_format+0x200>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b8f:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff80001b94:	0f 84 2f 03 00 00    	je     ffffffff80001ec9 <_ntoa_format+0x409>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001b9a:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80001b9f:	0f 85 37 03 00 00    	jne    ffffffff80001edc <_ntoa_format+0x41c>
      buf[len++] = 'b';
ffffffff80001ba5:	c6 03 62             	movb   $0x62,(%rbx)
ffffffff80001ba8:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
ffffffff80001baf:	00 00 
ffffffff80001bb1:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80001bb6:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
ffffffff80001bba:	c6 04 33 30          	movb   $0x30,(%rbx,%rsi,1)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff80001bbe:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001bc2:	0f 84 38 02 00 00    	je     ffffffff80001e00 <_ntoa_format+0x340>
    if (negative) {
ffffffff80001bc8:	40 84 ff             	test   %dil,%dil
ffffffff80001bcb:	75 4b                	jne    ffffffff80001c18 <_ntoa_format+0x158>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
ffffffff80001bcd:	a8 04                	test   $0x4,%al
ffffffff80001bcf:	0f 85 a3 01 00 00    	jne    ffffffff80001d78 <_ntoa_format+0x2b8>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
ffffffff80001bd5:	a8 08                	test   $0x8,%al
ffffffff80001bd7:	0f 84 9b 02 00 00    	je     ffffffff80001e78 <_ntoa_format+0x3b8>
      buf[len++] = ' ';
ffffffff80001bdd:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80001be1:	42 c6 04 0b 20       	movb   $0x20,(%rbx,%r9,1)
ffffffff80001be6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80001beb:	eb 39                	jmp    ffffffff80001c26 <_ntoa_format+0x166>
ffffffff80001bed:	0f 1f 00             	nopl   (%rax)
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80001bf0:	45 85 c0             	test   %r8d,%r8d
ffffffff80001bf3:	0f 84 97 01 00 00    	je     ffffffff80001d90 <_ntoa_format+0x2d0>
ffffffff80001bf9:	40 84 ff             	test   %dil,%dil
ffffffff80001bfc:	75 04                	jne    ffffffff80001c02 <_ntoa_format+0x142>
ffffffff80001bfe:	a8 0c                	test   $0xc,%al
ffffffff80001c00:	74 05                	je     ffffffff80001c07 <_ntoa_format+0x147>
      width--;
ffffffff80001c02:	83 6c 24 78 01       	subl   $0x1,0x78(%rsp)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001c07:	49 39 d1             	cmp    %rdx,%r9
ffffffff80001c0a:	0f 82 0e ff ff ff    	jb     ffffffff80001b1e <_ntoa_format+0x5e>
ffffffff80001c10:	e9 35 ff ff ff       	jmpq   ffffffff80001b4a <_ntoa_format+0x8a>
ffffffff80001c15:	0f 1f 00             	nopl   (%rax)
      buf[len++] = '-';
ffffffff80001c18:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80001c1c:	42 c6 04 0b 2d       	movb   $0x2d,(%rbx,%r9,1)
ffffffff80001c21:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80001c26:	85 c9                	test   %ecx,%ecx
ffffffff80001c28:	0f 84 fa 00 00 00    	je     ffffffff80001d28 <_ntoa_format+0x268>
ffffffff80001c2e:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    for (size_t i = len; i < width; i++) {
ffffffff80001c33:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
ffffffff80001c38:	4c 89 fa             	mov    %r15,%rdx
ffffffff80001c3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80001c40:	49 83 ec 01          	sub    $0x1,%r12
ffffffff80001c44:	4c 8d 72 01          	lea    0x1(%rdx),%r14
ffffffff80001c48:	4c 89 e9             	mov    %r13,%rcx
ffffffff80001c4b:	42 0f be 3c 23       	movsbl (%rbx,%r12,1),%edi
ffffffff80001c50:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80001c54:	ff d5                	callq  *%rbp
  while (len) {
ffffffff80001c56:	4d 85 e4             	test   %r12,%r12
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80001c59:	4c 89 f2             	mov    %r14,%rdx
  while (len) {
ffffffff80001c5c:	75 e2                	jne    ffffffff80001c40 <_ntoa_format+0x180>
ffffffff80001c5e:	4c 03 7c 24 10       	add    0x10(%rsp),%r15
  if (flags & FLAGS_LEFT) {
ffffffff80001c63:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
ffffffff80001c67:	85 c0                	test   %eax,%eax
ffffffff80001c69:	74 3a                	je     ffffffff80001ca5 <_ntoa_format+0x1e5>
    while (idx - start_idx < width) {
ffffffff80001c6b:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff80001c70:	4c 89 fa             	mov    %r15,%rdx
ffffffff80001c73:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
ffffffff80001c78:	49 39 d6             	cmp    %rdx,%r14
ffffffff80001c7b:	76 28                	jbe    ffffffff80001ca5 <_ntoa_format+0x1e5>
ffffffff80001c7d:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80001c80:	49 8d 5f 01          	lea    0x1(%r15),%rbx
ffffffff80001c84:	4c 89 fa             	mov    %r15,%rdx
ffffffff80001c87:	4c 89 e9             	mov    %r13,%rcx
ffffffff80001c8a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80001c8e:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80001c93:	ff d5                	callq  *%rbp
    while (idx - start_idx < width) {
ffffffff80001c95:	48 89 da             	mov    %rbx,%rdx
ffffffff80001c98:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
      out(' ', buffer, idx++, maxlen);
ffffffff80001c9d:	49 89 df             	mov    %rbx,%r15
    while (idx - start_idx < width) {
ffffffff80001ca0:	4c 39 f2             	cmp    %r14,%rdx
ffffffff80001ca3:	72 db                	jb     ffffffff80001c80 <_ntoa_format+0x1c0>
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
ffffffff80001ca5:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80001ca9:	4c 89 f8             	mov    %r15,%rax
ffffffff80001cac:	5b                   	pop    %rbx
ffffffff80001cad:	5d                   	pop    %rbp
ffffffff80001cae:	41 5c                	pop    %r12
ffffffff80001cb0:	41 5d                	pop    %r13
ffffffff80001cb2:	41 5e                	pop    %r14
ffffffff80001cb4:	41 5f                	pop    %r15
ffffffff80001cb6:	c3                   	retq   
ffffffff80001cb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80001cbe:	00 00 
ffffffff80001cc0:	8b 54 24 70          	mov    0x70(%rsp),%edx
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80001cc4:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80001cc7:	0f 84 e3 00 00 00    	je     ffffffff80001db0 <_ntoa_format+0x2f0>
ffffffff80001ccd:	8b 54 24 78          	mov    0x78(%rsp),%edx
ffffffff80001cd1:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80001cd4:	0f 84 d6 00 00 00    	je     ffffffff80001db0 <_ntoa_format+0x2f0>
ffffffff80001cda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001ce0:	49 83 f9 1f          	cmp    $0x1f,%r9
ffffffff80001ce4:	0f 96 c2             	setbe  %dl
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001ce7:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff80001cec:	0f 84 1e 01 00 00    	je     ffffffff80001e10 <_ntoa_format+0x350>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001cf2:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80001cf7:	0f 85 a3 00 00 00    	jne    ffffffff80001da0 <_ntoa_format+0x2e0>
ffffffff80001cfd:	84 d2                	test   %dl,%dl
ffffffff80001cff:	0f 84 9b 00 00 00    	je     ffffffff80001da0 <_ntoa_format+0x2e0>
ffffffff80001d05:	49 8d 71 01          	lea    0x1(%r9),%rsi
      buf[len++] = 'b';
ffffffff80001d09:	42 c6 04 0b 62       	movb   $0x62,(%rbx,%r9,1)
ffffffff80001d0e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff80001d13:	48 83 7c 24 10 1f    	cmpq   $0x1f,0x10(%rsp)
ffffffff80001d19:	0f 86 92 fe ff ff    	jbe    ffffffff80001bb1 <_ntoa_format+0xf1>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80001d1f:	85 c9                	test   %ecx,%ecx
ffffffff80001d21:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80001d26:	75 3a                	jne    ffffffff80001d62 <_ntoa_format+0x2a2>
ffffffff80001d28:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff80001d2d:	4c 3b 74 24 10       	cmp    0x10(%rsp),%r14
ffffffff80001d32:	0f 86 50 01 00 00    	jbe    ffffffff80001e88 <_ntoa_format+0x3c8>
ffffffff80001d38:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80001d3d:	49 01 d6             	add    %rdx,%r14
ffffffff80001d40:	4c 2b 74 24 10       	sub    0x10(%rsp),%r14
ffffffff80001d45:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80001d48:	4c 8d 7a 01          	lea    0x1(%rdx),%r15
ffffffff80001d4c:	4c 89 e9             	mov    %r13,%rcx
ffffffff80001d4f:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80001d53:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80001d58:	ff d5                	callq  *%rbp
    for (size_t i = len; i < width; i++) {
ffffffff80001d5a:	4d 39 f7             	cmp    %r14,%r15
ffffffff80001d5d:	4c 89 fa             	mov    %r15,%rdx
ffffffff80001d60:	75 e6                	jne    ffffffff80001d48 <_ntoa_format+0x288>
  while (len) {
ffffffff80001d62:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
ffffffff80001d68:	0f 85 c5 fe ff ff    	jne    ffffffff80001c33 <_ntoa_format+0x173>
ffffffff80001d6e:	e9 f0 fe ff ff       	jmpq   ffffffff80001c63 <_ntoa_format+0x1a3>
ffffffff80001d73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      buf[len++] = '+';  // ignore the space if the '+' exists
ffffffff80001d78:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80001d7c:	42 c6 04 0b 2b       	movb   $0x2b,(%rbx,%r9,1)
ffffffff80001d81:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80001d86:	e9 9b fe ff ff       	jmpq   ffffffff80001c26 <_ntoa_format+0x166>
ffffffff80001d8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001d90:	49 39 d1             	cmp    %rdx,%r9
ffffffff80001d93:	0f 82 85 fd ff ff    	jb     ffffffff80001b1e <_ntoa_format+0x5e>
ffffffff80001d99:	e9 db fd ff ff       	jmpq   ffffffff80001b79 <_ntoa_format+0xb9>
ffffffff80001d9e:	66 90                	xchg   %ax,%ax
ffffffff80001da0:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80001da5:	e9 69 ff ff ff       	jmpq   ffffffff80001d13 <_ntoa_format+0x253>
ffffffff80001daa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (len && (base == 16U)) {
ffffffff80001db0:	4d 89 c8             	mov    %r9,%r8
ffffffff80001db3:	49 83 e8 01          	sub    $0x1,%r8
ffffffff80001db7:	0f 95 c2             	setne  %dl
ffffffff80001dba:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff80001dbf:	40 0f 94 c6          	sete   %sil
ffffffff80001dc3:	40 20 f2             	and    %sil,%dl
ffffffff80001dc6:	0f 84 d9 00 00 00    	je     ffffffff80001ea5 <_ntoa_format+0x3e5>
        len--;
ffffffff80001dcc:	49 8d 71 fe          	lea    -0x2(%r9),%rsi
ffffffff80001dd0:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80001dd5:	eb 3e                	jmp    ffffffff80001e15 <_ntoa_format+0x355>
ffffffff80001dd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80001dde:	00 00 
  if (flags & FLAGS_HASH) {
ffffffff80001de0:	85 f6                	test   %esi,%esi
ffffffff80001de2:	74 6c                	je     ffffffff80001e50 <_ntoa_format+0x390>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80001de4:	f6 c4 04             	test   $0x4,%ah
ffffffff80001de7:	41 b9 20 00 00 00    	mov    $0x20,%r9d
ffffffff80001ded:	0f 84 d1 fe ff ff    	je     ffffffff80001cc4 <_ntoa_format+0x204>
ffffffff80001df3:	e9 e8 fe ff ff       	jmpq   ffffffff80001ce0 <_ntoa_format+0x220>
ffffffff80001df8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001dff:	00 
ffffffff80001e00:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80001e07:	00 00 
ffffffff80001e09:	e9 18 fe ff ff       	jmpq   ffffffff80001c26 <_ntoa_format+0x166>
ffffffff80001e0e:	66 90                	xchg   %ax,%ax
ffffffff80001e10:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001e15:	89 c6                	mov    %eax,%esi
ffffffff80001e17:	83 e6 20             	and    $0x20,%esi
ffffffff80001e1a:	75 08                	jne    ffffffff80001e24 <_ntoa_format+0x364>
ffffffff80001e1c:	84 d2                	test   %dl,%dl
ffffffff80001e1e:	0f 85 8e 00 00 00    	jne    ffffffff80001eb2 <_ntoa_format+0x3f2>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001e24:	85 f6                	test   %esi,%esi
ffffffff80001e26:	0f 84 e7 fe ff ff    	je     ffffffff80001d13 <_ntoa_format+0x253>
ffffffff80001e2c:	84 d2                	test   %dl,%dl
ffffffff80001e2e:	0f 84 df fe ff ff    	je     ffffffff80001d13 <_ntoa_format+0x253>
      buf[len++] = 'X';
ffffffff80001e34:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80001e39:	c6 04 33 58          	movb   $0x58,(%rbx,%rsi,1)
ffffffff80001e3d:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001e41:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80001e46:	e9 c8 fe ff ff       	jmpq   ffffffff80001d13 <_ntoa_format+0x253>
ffffffff80001e4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80001e50:	85 c9                	test   %ecx,%ecx
ffffffff80001e52:	75 3e                	jne    ffffffff80001e92 <_ntoa_format+0x3d2>
ffffffff80001e54:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff80001e59:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80001e60:	00 00 
ffffffff80001e62:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff80001e66:	0f 87 cc fe ff ff    	ja     ffffffff80001d38 <_ntoa_format+0x278>
ffffffff80001e6c:	e9 bd fd ff ff       	jmpq   ffffffff80001c2e <_ntoa_format+0x16e>
ffffffff80001e71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001e78:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80001e7d:	e9 9d fe ff ff       	jmpq   ffffffff80001d1f <_ntoa_format+0x25f>
ffffffff80001e82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001e88:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80001e8d:	e9 d0 fe ff ff       	jmpq   ffffffff80001d62 <_ntoa_format+0x2a2>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80001e92:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80001e97:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80001e9e:	00 00 
ffffffff80001ea0:	e9 8e fd ff ff       	jmpq   ffffffff80001c33 <_ntoa_format+0x173>
      len--;
ffffffff80001ea5:	4d 89 c1             	mov    %r8,%r9
ffffffff80001ea8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001ead:	e9 35 fe ff ff       	jmpq   ffffffff80001ce7 <_ntoa_format+0x227>
      buf[len++] = 'x';
ffffffff80001eb2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80001eb7:	c6 04 33 78          	movb   $0x78,(%rbx,%rsi,1)
ffffffff80001ebb:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001ebf:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80001ec4:	e9 4a fe ff ff       	jmpq   ffffffff80001d13 <_ntoa_format+0x253>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001ec9:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
ffffffff80001ed0:	00 00 
ffffffff80001ed2:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001ed7:	e9 39 ff ff ff       	jmpq   ffffffff80001e15 <_ntoa_format+0x355>
      buf[len++] = '0';
ffffffff80001edc:	c6 03 30             	movb   $0x30,(%rbx)
ffffffff80001edf:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80001ee5:	e9 de fc ff ff       	jmpq   ffffffff80001bc8 <_ntoa_format+0x108>
  if (flags & FLAGS_HASH) {
ffffffff80001eea:	85 f6                	test   %esi,%esi
ffffffff80001eec:	74 17                	je     ffffffff80001f05 <_ntoa_format+0x445>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80001eee:	f6 c4 04             	test   $0x4,%ah
ffffffff80001ef1:	0f 84 cd fd ff ff    	je     ffffffff80001cc4 <_ntoa_format+0x204>
ffffffff80001ef7:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80001efe:	00 00 
ffffffff80001f00:	e9 1a fe ff ff       	jmpq   ffffffff80001d1f <_ntoa_format+0x25f>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80001f05:	85 c9                	test   %ecx,%ecx
    for (size_t i = len; i < width; i++) {
ffffffff80001f07:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80001f0e:	00 00 
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80001f10:	0f 85 18 fd ff ff    	jne    ffffffff80001c2e <_ntoa_format+0x16e>
    for (size_t i = len; i < width; i++) {
ffffffff80001f16:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff80001f1a:	0f 87 18 fe ff ff    	ja     ffffffff80001d38 <_ntoa_format+0x278>
ffffffff80001f20:	e9 09 fd ff ff       	jmpq   ffffffff80001c2e <_ntoa_format+0x16e>
ffffffff80001f25:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001f2c:	00 00 00 00 

ffffffff80001f30 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80001f30:	41 55                	push   %r13
ffffffff80001f32:	41 54                	push   %r12
ffffffff80001f34:	4c 89 c0             	mov    %r8,%rax
ffffffff80001f37:	55                   	push   %rbp
ffffffff80001f38:	53                   	push   %rbx
ffffffff80001f39:	48 89 d3             	mov    %rdx,%rbx
ffffffff80001f3c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80001f40:	4d 85 c0             	test   %r8,%r8
{
ffffffff80001f43:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80001f48:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff80001f4c:	75 13                	jne    ffffffff80001f61 <_ntoa_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff80001f4e:	89 ea                	mov    %ebp,%edx
ffffffff80001f50:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80001f53:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80001f59:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80001f5b:	0f 85 7f 00 00 00    	jne    ffffffff80001fe0 <_ntoa_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80001f61:	89 ea                	mov    %ebp,%edx
ffffffff80001f63:	83 e2 20             	and    $0x20,%edx
ffffffff80001f66:	83 fa 01             	cmp    $0x1,%edx
ffffffff80001f69:	45 19 db             	sbb    %r11d,%r11d
ffffffff80001f6c:	45 31 c0             	xor    %r8d,%r8d
ffffffff80001f6f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80001f73:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80001f77:	eb 0d                	jmp    ffffffff80001f86 <_ntoa_long+0x56>
ffffffff80001f79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80001f80:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80001f84:	77 26                	ja     ffffffff80001fac <_ntoa_long+0x7c>
ffffffff80001f86:	31 d2                	xor    %edx,%edx
ffffffff80001f88:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80001f8b:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff80001f8f:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80001f93:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80001f97:	44 89 ea             	mov    %r13d,%edx
ffffffff80001f9a:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff80001f9e:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80001fa2:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80001fa5:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80001faa:	75 d4                	jne    ffffffff80001f80 <_ntoa_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff80001fac:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80001fb0:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80001fb4:	48 89 da             	mov    %rbx,%rdx
ffffffff80001fb7:	55                   	push   %rbp
ffffffff80001fb8:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80001fbc:	50                   	push   %rax
ffffffff80001fbd:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80001fc1:	50                   	push   %rax
ffffffff80001fc2:	41 52                	push   %r10
ffffffff80001fc4:	41 51                	push   %r9
ffffffff80001fc6:	4d 89 c1             	mov    %r8,%r9
ffffffff80001fc9:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff80001fce:	e8 ed fa ff ff       	callq  ffffffff80001ac0 <_ntoa_format>
}
ffffffff80001fd3:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80001fd7:	5b                   	pop    %rbx
ffffffff80001fd8:	5d                   	pop    %rbp
ffffffff80001fd9:	41 5c                	pop    %r12
ffffffff80001fdb:	41 5d                	pop    %r13
ffffffff80001fdd:	c3                   	retq   
ffffffff80001fde:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80001fe0:	45 31 c0             	xor    %r8d,%r8d
ffffffff80001fe3:	eb c7                	jmp    ffffffff80001fac <_ntoa_long+0x7c>
ffffffff80001fe5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001fec:	00 00 00 00 

ffffffff80001ff0 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80001ff0:	41 55                	push   %r13
ffffffff80001ff2:	41 54                	push   %r12
ffffffff80001ff4:	4c 89 c0             	mov    %r8,%rax
ffffffff80001ff7:	55                   	push   %rbp
ffffffff80001ff8:	53                   	push   %rbx
ffffffff80001ff9:	48 89 d3             	mov    %rdx,%rbx
ffffffff80001ffc:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80002000:	4d 85 c0             	test   %r8,%r8
{
ffffffff80002003:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80002008:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff8000200c:	75 13                	jne    ffffffff80002021 <_ntoa_long_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff8000200e:	89 ea                	mov    %ebp,%edx
ffffffff80002010:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002013:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80002019:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff8000201b:	0f 85 7f 00 00 00    	jne    ffffffff800020a0 <_ntoa_long_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002021:	89 ea                	mov    %ebp,%edx
ffffffff80002023:	83 e2 20             	and    $0x20,%edx
ffffffff80002026:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002029:	45 19 db             	sbb    %r11d,%r11d
ffffffff8000202c:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000202f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002033:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002037:	eb 0d                	jmp    ffffffff80002046 <_ntoa_long_long+0x56>
ffffffff80002039:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002040:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80002044:	77 26                	ja     ffffffff8000206c <_ntoa_long_long+0x7c>
ffffffff80002046:	31 d2                	xor    %edx,%edx
ffffffff80002048:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff8000204b:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff8000204f:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80002053:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80002057:	44 89 ea             	mov    %r13d,%edx
ffffffff8000205a:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff8000205e:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002062:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002065:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff8000206a:	75 d4                	jne    ffffffff80002040 <_ntoa_long_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff8000206c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002070:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002074:	48 89 da             	mov    %rbx,%rdx
ffffffff80002077:	55                   	push   %rbp
ffffffff80002078:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff8000207c:	50                   	push   %rax
ffffffff8000207d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002081:	50                   	push   %rax
ffffffff80002082:	41 52                	push   %r10
ffffffff80002084:	41 51                	push   %r9
ffffffff80002086:	4d 89 c1             	mov    %r8,%r9
ffffffff80002089:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff8000208e:	e8 2d fa ff ff       	callq  ffffffff80001ac0 <_ntoa_format>
}
ffffffff80002093:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002097:	5b                   	pop    %rbx
ffffffff80002098:	5d                   	pop    %rbp
ffffffff80002099:	41 5c                	pop    %r12
ffffffff8000209b:	41 5d                	pop    %r13
ffffffff8000209d:	c3                   	retq   
ffffffff8000209e:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff800020a0:	45 31 c0             	xor    %r8d,%r8d
ffffffff800020a3:	eb c7                	jmp    ffffffff8000206c <_ntoa_long_long+0x7c>
ffffffff800020a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800020ac:	00 00 00 00 

ffffffff800020b0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
ffffffff800020b0:	41 57                	push   %r15
ffffffff800020b2:	41 56                	push   %r14
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
ffffffff800020b4:	48 c7 c0 90 1a 00 80 	mov    $0xffffffff80001a90,%rax
{
ffffffff800020bb:	41 55                	push   %r13
ffffffff800020bd:	41 54                	push   %r12
ffffffff800020bf:	49 89 f7             	mov    %rsi,%r15
ffffffff800020c2:	55                   	push   %rbp
ffffffff800020c3:	53                   	push   %rbx
ffffffff800020c4:	48 89 fd             	mov    %rdi,%rbp
ffffffff800020c7:	49 89 d6             	mov    %rdx,%r14
ffffffff800020ca:	49 89 cd             	mov    %rcx,%r13
ffffffff800020cd:	48 83 ec 38          	sub    $0x38,%rsp
    out = _out_null;
ffffffff800020d1:	48 85 f6             	test   %rsi,%rsi
ffffffff800020d4:	48 0f 44 e8          	cmove  %rax,%rbp
{
ffffffff800020d8:	4c 89 04 24          	mov    %r8,(%rsp)
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
ffffffff800020dc:	31 db                	xor    %ebx,%ebx
  while (*format)
ffffffff800020de:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff800020e3:	40 84 ff             	test   %dil,%dil
ffffffff800020e6:	74 26                	je     ffffffff8000210e <_vsnprintf+0x5e>
ffffffff800020e8:	49 83 c5 01          	add    $0x1,%r13
    if (*format != '%') {
ffffffff800020ec:	40 80 ff 25          	cmp    $0x25,%dil
ffffffff800020f0:	74 46                	je     ffffffff80002138 <_vsnprintf+0x88>
      out(*format, buffer, idx++, maxlen);
ffffffff800020f2:	4c 8d 63 01          	lea    0x1(%rbx),%r12
        out(*format, buffer, idx++, maxlen);
ffffffff800020f6:	48 89 da             	mov    %rbx,%rdx
ffffffff800020f9:	4c 89 f1             	mov    %r14,%rcx
ffffffff800020fc:	4c 89 fe             	mov    %r15,%rsi
ffffffff800020ff:	ff d5                	callq  *%rbp
  while (*format)
ffffffff80002101:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
        out(*format, buffer, idx++, maxlen);
ffffffff80002106:	4c 89 e3             	mov    %r12,%rbx
  while (*format)
ffffffff80002109:	40 84 ff             	test   %dil,%dil
ffffffff8000210c:	75 da                	jne    ffffffff800020e8 <_vsnprintf+0x38>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
ffffffff8000210e:	49 8d 56 ff          	lea    -0x1(%r14),%rdx
ffffffff80002112:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80002115:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002118:	4c 89 fe             	mov    %r15,%rsi
ffffffff8000211b:	48 0f 42 d3          	cmovb  %rbx,%rdx
ffffffff8000211f:	31 ff                	xor    %edi,%edi
ffffffff80002121:	ff d5                	callq  *%rbp

  // return written chars without terminating \0
  return (int)idx;
}
ffffffff80002123:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80002127:	89 d8                	mov    %ebx,%eax
ffffffff80002129:	5b                   	pop    %rbx
ffffffff8000212a:	5d                   	pop    %rbp
ffffffff8000212b:	41 5c                	pop    %r12
ffffffff8000212d:	41 5d                	pop    %r13
ffffffff8000212f:	41 5e                	pop    %r14
ffffffff80002131:	41 5f                	pop    %r15
ffffffff80002133:	c3                   	retq   
ffffffff80002134:	0f 1f 40 00          	nopl   0x0(%rax)
    flags = 0U;
ffffffff80002138:	31 c9                	xor    %ecx,%ecx
ffffffff8000213a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      switch (*format) {
ffffffff80002140:	41 0f be 45 00       	movsbl 0x0(%r13),%eax
ffffffff80002145:	49 8d 75 01          	lea    0x1(%r13),%rsi
ffffffff80002149:	48 89 f7             	mov    %rsi,%rdi
ffffffff8000214c:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff8000214f:	80 fa 10             	cmp    $0x10,%dl
ffffffff80002152:	77 3c                	ja     ffffffff80002190 <_vsnprintf+0xe0>
ffffffff80002154:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002157:	ff 24 d5 e0 42 00 80 	jmpq   *-0x7fffbd20(,%rdx,8)
ffffffff8000215e:	66 90                	xchg   %ax,%ax
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
ffffffff80002160:	83 c9 01             	or     $0x1,%ecx
ffffffff80002163:	49 89 f5             	mov    %rsi,%r13
ffffffff80002166:	eb d8                	jmp    ffffffff80002140 <_vsnprintf+0x90>
ffffffff80002168:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000216f:	00 
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ffffffff80002170:	83 c9 04             	or     $0x4,%ecx
ffffffff80002173:	eb ee                	jmp    ffffffff80002163 <_vsnprintf+0xb3>
ffffffff80002175:	0f 1f 00             	nopl   (%rax)
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ffffffff80002178:	83 c9 02             	or     $0x2,%ecx
ffffffff8000217b:	eb e6                	jmp    ffffffff80002163 <_vsnprintf+0xb3>
ffffffff8000217d:	0f 1f 00             	nopl   (%rax)
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ffffffff80002180:	83 c9 10             	or     $0x10,%ecx
ffffffff80002183:	eb de                	jmp    ffffffff80002163 <_vsnprintf+0xb3>
ffffffff80002185:	0f 1f 00             	nopl   (%rax)
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ffffffff80002188:	83 c9 08             	or     $0x8,%ecx
ffffffff8000218b:	eb d6                	jmp    ffffffff80002163 <_vsnprintf+0xb3>
ffffffff8000218d:	0f 1f 00             	nopl   (%rax)
  return (ch >= '0') && (ch <= '9');
ffffffff80002190:	8d 50 d0             	lea    -0x30(%rax),%edx
    if (_is_digit(*format)) {
ffffffff80002193:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002196:	0f 86 54 02 00 00    	jbe    ffffffff800023f0 <_vsnprintf+0x340>
    width = 0U;
ffffffff8000219c:	45 31 e4             	xor    %r12d,%r12d
    else if (*format == '*') {
ffffffff8000219f:	3c 2a                	cmp    $0x2a,%al
ffffffff800021a1:	0f 84 75 07 00 00    	je     ffffffff8000291c <_vsnprintf+0x86c>
    precision = 0U;
ffffffff800021a7:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff800021aa:	3c 2e                	cmp    $0x2e,%al
ffffffff800021ac:	0f 84 73 02 00 00    	je     ffffffff80002425 <_vsnprintf+0x375>
    switch (*format) {
ffffffff800021b2:	3c 6a                	cmp    $0x6a,%al
ffffffff800021b4:	74 12                	je     ffffffff800021c8 <_vsnprintf+0x118>
ffffffff800021b6:	0f 8e bc 02 00 00    	jle    ffffffff80002478 <_vsnprintf+0x3c8>
ffffffff800021bc:	3c 6c                	cmp    $0x6c,%al
ffffffff800021be:	74 30                	je     ffffffff800021f0 <_vsnprintf+0x140>
ffffffff800021c0:	3c 7a                	cmp    $0x7a,%al
ffffffff800021c2:	0f 85 d0 02 00 00    	jne    ffffffff80002498 <_vsnprintf+0x3e8>
ffffffff800021c8:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff800021cd:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ffffffff800021d1:	80 cd 01             	or     $0x1,%ch
    switch (*format) {
ffffffff800021d4:	8d 50 db             	lea    -0x25(%rax),%edx
ffffffff800021d7:	80 fa 53             	cmp    $0x53,%dl
ffffffff800021da:	0f 87 00 02 00 00    	ja     ffffffff800023e0 <_vsnprintf+0x330>
ffffffff800021e0:	0f b6 d2             	movzbl %dl,%edx
ffffffff800021e3:	ff 24 d5 68 43 00 80 	jmpq   *-0x7fffbc98(,%rdx,8)
ffffffff800021ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if (*format == 'l') {
ffffffff800021f0:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff800021f5:	3c 6c                	cmp    $0x6c,%al
ffffffff800021f7:	0f 84 98 04 00 00    	je     ffffffff80002695 <_vsnprintf+0x5e5>
        flags |= FLAGS_LONG;
ffffffff800021fd:	80 cd 01             	or     $0x1,%ch
ffffffff80002200:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002204:	eb ce                	jmp    ffffffff800021d4 <_vsnprintf+0x124>
ffffffff80002206:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000220d:	00 00 00 
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002210:	48 8b 34 24          	mov    (%rsp),%rsi
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
ffffffff80002214:	83 c9 21             	or     $0x21,%ecx
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002217:	8b 06                	mov    (%rsi),%eax
ffffffff80002219:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff8000221c:	0f 87 45 08 00 00    	ja     ffffffff80002a67 <_vsnprintf+0x9b7>
ffffffff80002222:	89 c2                	mov    %eax,%edx
ffffffff80002224:	48 03 56 10          	add    0x10(%rsi),%rdx
ffffffff80002228:	83 c0 08             	add    $0x8,%eax
ffffffff8000222b:	89 06                	mov    %eax,(%rsi)
ffffffff8000222d:	51                   	push   %rcx
ffffffff8000222e:	6a 10                	pushq  $0x10
ffffffff80002230:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002233:	41 52                	push   %r10
ffffffff80002235:	6a 10                	pushq  $0x10
ffffffff80002237:	4c 8b 02             	mov    (%rdx),%r8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff8000223a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000223d:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002240:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002243:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002246:	e8 a5 fd ff ff       	callq  ffffffff80001ff0 <_ntoa_long_long>
ffffffff8000224b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000224f:	48 89 c3             	mov    %rax,%rbx
ffffffff80002252:	e9 87 fe ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
ffffffff80002257:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000225e:	00 00 
ffffffff80002260:	4c 8d 43 01          	lea    0x1(%rbx),%r8
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002264:	83 e1 02             	and    $0x2,%ecx
ffffffff80002267:	4c 89 c0             	mov    %r8,%rax
ffffffff8000226a:	0f 84 47 04 00 00    	je     ffffffff800026b7 <_vsnprintf+0x607>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002270:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002274:	8b 16                	mov    (%rsi),%edx
ffffffff80002276:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002279:	0f 87 34 06 00 00    	ja     ffffffff800028b3 <_vsnprintf+0x803>
ffffffff8000227f:	89 d1                	mov    %edx,%ecx
ffffffff80002281:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80002285:	83 c2 08             	add    $0x8,%edx
ffffffff80002288:	89 16                	mov    %edx,(%rsi)
ffffffff8000228a:	0f be 39             	movsbl (%rcx),%edi
ffffffff8000228d:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffffff80002292:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002295:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8000229a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000229d:	4c 89 fe             	mov    %r15,%rsi
ffffffff800022a0:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff800022a2:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff800022a6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff800022ab:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
ffffffff800022b0:	0f 86 e8 02 00 00    	jbe    ffffffff8000259e <_vsnprintf+0x4ee>
ffffffff800022b6:	41 8d 4c 24 fe       	lea    -0x2(%r12),%ecx
ffffffff800022bb:	48 83 c3 02          	add    $0x2,%rbx
ffffffff800022bf:	48 89 c2             	mov    %rax,%rdx
ffffffff800022c2:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
ffffffff800022c7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff800022cc:	48 01 cb             	add    %rcx,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff800022cf:	4c 8d 62 01          	lea    0x1(%rdx),%r12
ffffffff800022d3:	4c 89 f1             	mov    %r14,%rcx
ffffffff800022d6:	4c 89 fe             	mov    %r15,%rsi
ffffffff800022d9:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800022de:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff800022e0:	49 39 dc             	cmp    %rbx,%r12
ffffffff800022e3:	4c 89 e2             	mov    %r12,%rdx
ffffffff800022e6:	75 e7                	jne    ffffffff800022cf <_vsnprintf+0x21f>
ffffffff800022e8:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
ffffffff800022ed:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
        break;
ffffffff800022f2:	e9 e7 fd ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
ffffffff800022f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800022fe:	00 00 
        out('%', buffer, idx++, maxlen);
ffffffff80002300:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002304:	48 89 da             	mov    %rbx,%rdx
ffffffff80002307:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000230a:	4c 89 fe             	mov    %r15,%rsi
ffffffff8000230d:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff80002312:	4c 89 e3             	mov    %r12,%rbx
ffffffff80002315:	ff d5                	callq  *%rbp
        break;
ffffffff80002317:	e9 c2 fd ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
ffffffff8000231c:	0f 1f 40 00          	nopl   0x0(%rax)
        if (*format == 'x' || *format == 'X') {
ffffffff80002320:	89 c2                	mov    %eax,%edx
ffffffff80002322:	83 e2 df             	and    $0xffffffdf,%edx
ffffffff80002325:	80 fa 58             	cmp    $0x58,%dl
ffffffff80002328:	0f 84 66 02 00 00    	je     ffffffff80002594 <_vsnprintf+0x4e4>
        else if (*format == 'o') {
ffffffff8000232e:	3c 6f                	cmp    $0x6f,%al
ffffffff80002330:	0f 84 b6 04 00 00    	je     ffffffff800027ec <_vsnprintf+0x73c>
        else if (*format == 'b') {
ffffffff80002336:	3c 62                	cmp    $0x62,%al
ffffffff80002338:	0f 84 20 05 00 00    	je     ffffffff8000285e <_vsnprintf+0x7ae>
          flags &= ~FLAGS_HASH;   // no hash for dec format
ffffffff8000233e:	83 e1 ef             	and    $0xffffffef,%ecx
ffffffff80002341:	bf 0a 00 00 00       	mov    $0xa,%edi
        if (*format == 'X') {
ffffffff80002346:	3c 58                	cmp    $0x58,%al
ffffffff80002348:	0f 84 3c 03 00 00    	je     ffffffff8000268a <_vsnprintf+0x5da>
        if ((*format != 'i') && (*format != 'd')) {
ffffffff8000234e:	3c 69                	cmp    $0x69,%al
ffffffff80002350:	74 08                	je     ffffffff8000235a <_vsnprintf+0x2aa>
ffffffff80002352:	3c 64                	cmp    $0x64,%al
ffffffff80002354:	0f 85 33 03 00 00    	jne    ffffffff8000268d <_vsnprintf+0x5dd>
          flags &= ~FLAGS_ZEROPAD;
ffffffff8000235a:	89 ca                	mov    %ecx,%edx
ffffffff8000235c:	83 e2 fe             	and    $0xfffffffe,%edx
ffffffff8000235f:	f6 c5 04             	test   $0x4,%ch
ffffffff80002362:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80002365:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff80002369:	89 ce                	mov    %ecx,%esi
ffffffff8000236b:	81 e6 00 02 00 00    	and    $0x200,%esi
        if ((*format == 'i') || (*format == 'd')) {
ffffffff80002371:	3c 69                	cmp    $0x69,%al
ffffffff80002373:	8b 12                	mov    (%rdx),%edx
ffffffff80002375:	0f 84 b8 02 00 00    	je     ffffffff80002633 <_vsnprintf+0x583>
ffffffff8000237b:	3c 64                	cmp    $0x64,%al
ffffffff8000237d:	0f 84 b0 02 00 00    	je     ffffffff80002633 <_vsnprintf+0x583>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002383:	85 f6                	test   %esi,%esi
ffffffff80002385:	0f 85 38 04 00 00    	jne    ffffffff800027c3 <_vsnprintf+0x713>
          else if (flags & FLAGS_LONG) {
ffffffff8000238b:	f6 c5 01             	test   $0x1,%ch
ffffffff8000238e:	0f 85 a1 04 00 00    	jne    ffffffff80002835 <_vsnprintf+0x785>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002394:	f6 c1 40             	test   $0x40,%cl
ffffffff80002397:	0f 84 6e 04 00 00    	je     ffffffff8000280b <_vsnprintf+0x75b>
ffffffff8000239d:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800023a0:	0f 87 d2 05 00 00    	ja     ffffffff80002978 <_vsnprintf+0x8c8>
ffffffff800023a6:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800023aa:	89 d0                	mov    %edx,%eax
ffffffff800023ac:	83 c2 08             	add    $0x8,%edx
ffffffff800023af:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800023b3:	89 16                	mov    %edx,(%rsi)
ffffffff800023b5:	44 0f b6 00          	movzbl (%rax),%r8d
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff800023b9:	51                   	push   %rcx
ffffffff800023ba:	41 54                	push   %r12
ffffffff800023bc:	45 31 c9             	xor    %r9d,%r9d
ffffffff800023bf:	41 52                	push   %r10
ffffffff800023c1:	57                   	push   %rdi
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff800023c2:	48 89 da             	mov    %rbx,%rdx
ffffffff800023c5:	4c 89 f1             	mov    %r14,%rcx
ffffffff800023c8:	4c 89 fe             	mov    %r15,%rsi
ffffffff800023cb:	48 89 ef             	mov    %rbp,%rdi
ffffffff800023ce:	e8 5d fb ff ff       	callq  ffffffff80001f30 <_ntoa_long>
ffffffff800023d3:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800023d7:	48 89 c3             	mov    %rax,%rbx
ffffffff800023da:	e9 ff fc ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
ffffffff800023df:	90                   	nop
        out(*format, buffer, idx++, maxlen);
ffffffff800023e0:	4c 8d 63 01          	lea    0x1(%rbx),%r12
    switch (*format) {
ffffffff800023e4:	0f be f8             	movsbl %al,%edi
ffffffff800023e7:	e9 0a fd ff ff       	jmpq   ffffffff800020f6 <_vsnprintf+0x46>
ffffffff800023ec:	0f 1f 40 00          	nopl   0x0(%rax)
  unsigned int i = 0U;
ffffffff800023f0:	45 31 e4             	xor    %r12d,%r12d
ffffffff800023f3:	eb 0a                	jmp    ffffffff800023ff <_vsnprintf+0x34f>
ffffffff800023f5:	0f 1f 00             	nopl   (%rax)
  while (_is_digit(**str)) {
ffffffff800023f8:	49 89 f5             	mov    %rsi,%r13
ffffffff800023fb:	48 83 c6 01          	add    $0x1,%rsi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff800023ff:	43 8d 14 a4          	lea    (%r12,%r12,4),%edx
ffffffff80002403:	44 8d 64 50 d0       	lea    -0x30(%rax,%rdx,2),%r12d
  while (_is_digit(**str)) {
ffffffff80002408:	0f be 06             	movsbl (%rsi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff8000240b:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff8000240e:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002411:	76 e5                	jbe    ffffffff800023f8 <_vsnprintf+0x348>
ffffffff80002413:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80002417:	49 89 f5             	mov    %rsi,%r13
    precision = 0U;
ffffffff8000241a:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff8000241d:	3c 2e                	cmp    $0x2e,%al
ffffffff8000241f:	0f 85 8d fd ff ff    	jne    ffffffff800021b2 <_vsnprintf+0x102>
      if (_is_digit(*format)) {
ffffffff80002425:	41 0f be 45 01       	movsbl 0x1(%r13),%eax
      flags |= FLAGS_PRECISION;
ffffffff8000242a:	80 cd 04             	or     $0x4,%ch
  return (ch >= '0') && (ch <= '9');
ffffffff8000242d:	8d 50 d0             	lea    -0x30(%rax),%edx
      if (_is_digit(*format)) {
ffffffff80002430:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002433:	76 1e                	jbe    ffffffff80002453 <_vsnprintf+0x3a3>
      else if (*format == '*') {
ffffffff80002435:	3c 2a                	cmp    $0x2a,%al
ffffffff80002437:	0f 84 3f 06 00 00    	je     ffffffff80002a7c <_vsnprintf+0x9cc>
      format++;
ffffffff8000243d:	49 89 fd             	mov    %rdi,%r13
      else if (*format == '*') {
ffffffff80002440:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80002444:	e9 69 fd ff ff       	jmpq   ffffffff800021b2 <_vsnprintf+0x102>
ffffffff80002449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  while (_is_digit(**str)) {
ffffffff80002450:	4c 89 ef             	mov    %r13,%rdi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002453:	43 8d 14 92          	lea    (%r10,%r10,4),%edx
ffffffff80002457:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff8000245b:	44 8d 54 50 d0       	lea    -0x30(%rax,%rdx,2),%r10d
  while (_is_digit(**str)) {
ffffffff80002460:	0f be 47 01          	movsbl 0x1(%rdi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002464:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002467:	80 fa 09             	cmp    $0x9,%dl
ffffffff8000246a:	76 e4                	jbe    ffffffff80002450 <_vsnprintf+0x3a0>
ffffffff8000246c:	48 83 c7 02          	add    $0x2,%rdi
ffffffff80002470:	e9 3d fd ff ff       	jmpq   ffffffff800021b2 <_vsnprintf+0x102>
ffffffff80002475:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002478:	3c 68                	cmp    $0x68,%al
ffffffff8000247a:	75 1c                	jne    ffffffff80002498 <_vsnprintf+0x3e8>
        if (*format == 'h') {
ffffffff8000247c:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002481:	3c 68                	cmp    $0x68,%al
ffffffff80002483:	0f 84 1d 02 00 00    	je     ffffffff800026a6 <_vsnprintf+0x5f6>
        flags |= FLAGS_SHORT;
ffffffff80002489:	80 c9 80             	or     $0x80,%cl
ffffffff8000248c:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002490:	e9 3f fd ff ff       	jmpq   ffffffff800021d4 <_vsnprintf+0x124>
ffffffff80002495:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002498:	49 89 fd             	mov    %rdi,%r13
ffffffff8000249b:	e9 34 fd ff ff       	jmpq   ffffffff800021d4 <_vsnprintf+0x124>
        const char* p = va_arg(va, char*);
ffffffff800024a0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800024a4:	8b 16                	mov    (%rsi),%edx
ffffffff800024a6:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800024a9:	0f 87 2e 04 00 00    	ja     ffffffff800028dd <_vsnprintf+0x82d>
ffffffff800024af:	89 d0                	mov    %edx,%eax
ffffffff800024b1:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800024b5:	83 c2 08             	add    $0x8,%edx
ffffffff800024b8:	89 16                	mov    %edx,(%rsi)
ffffffff800024ba:	4c 8b 08             	mov    (%rax),%r9
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff800024bd:	45 85 d2             	test   %r10d,%r10d
ffffffff800024c0:	41 0f be 39          	movsbl (%r9),%edi
ffffffff800024c4:	0f 85 54 01 00 00    	jne    ffffffff8000261e <_vsnprintf+0x56e>
  for (s = str; *s && maxsize--; ++s);
ffffffff800024ca:	40 84 ff             	test   %dil,%dil
ffffffff800024cd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff800024d4:	0f 84 b8 03 00 00    	je     ffffffff80002892 <_vsnprintf+0x7e2>
ffffffff800024da:	4c 89 c8             	mov    %r9,%rax
ffffffff800024dd:	eb 11                	jmp    ffffffff800024f0 <_vsnprintf+0x440>
ffffffff800024df:	90                   	nop
ffffffff800024e0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800024e5:	48 29 c2             	sub    %rax,%rdx
ffffffff800024e8:	4c 01 ca             	add    %r9,%rdx
ffffffff800024eb:	48 01 f2             	add    %rsi,%rdx
ffffffff800024ee:	74 09                	je     ffffffff800024f9 <_vsnprintf+0x449>
ffffffff800024f0:	48 83 c0 01          	add    $0x1,%rax
ffffffff800024f4:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff800024f7:	75 e7                	jne    ffffffff800024e0 <_vsnprintf+0x430>
ffffffff800024f9:	44 29 c8             	sub    %r9d,%eax
ffffffff800024fc:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (flags & FLAGS_PRECISION) {
ffffffff80002500:	89 c8                	mov    %ecx,%eax
ffffffff80002502:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80002507:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff8000250b:	74 0f                	je     ffffffff8000251c <_vsnprintf+0x46c>
          l = (l < precision ? l : precision);
ffffffff8000250d:	8b 44 24 20          	mov    0x20(%rsp),%eax
ffffffff80002511:	44 39 d0             	cmp    %r10d,%eax
ffffffff80002514:	41 0f 47 c2          	cmova  %r10d,%eax
ffffffff80002518:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (!(flags & FLAGS_LEFT)) {
ffffffff8000251c:	83 e1 02             	and    $0x2,%ecx
ffffffff8000251f:	89 4c 24 24          	mov    %ecx,0x24(%rsp)
ffffffff80002523:	0f 84 0e 02 00 00    	je     ffffffff80002737 <_vsnprintf+0x687>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002529:	40 84 ff             	test   %dil,%dil
ffffffff8000252c:	0f 84 94 00 00 00    	je     ffffffff800025c6 <_vsnprintf+0x516>
ffffffff80002532:	49 29 d9             	sub    %rbx,%r9
ffffffff80002535:	44 89 64 24 28       	mov    %r12d,0x28(%rsp)
ffffffff8000253a:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff8000253f:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
ffffffff80002544:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80002549:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
ffffffff8000254e:	49 89 dd             	mov    %rbx,%r13
ffffffff80002551:	eb 27                	jmp    ffffffff8000257a <_vsnprintf+0x4ca>
ffffffff80002553:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002558:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000255b:	4c 89 ea             	mov    %r13,%rdx
ffffffff8000255e:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002561:	ff d5                	callq  *%rbp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002563:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002568:	49 8d 5d 01          	lea    0x1(%r13),%rbx
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff8000256c:	41 0f be 7c 05 01    	movsbl 0x1(%r13,%rax,1),%edi
ffffffff80002572:	40 84 ff             	test   %dil,%dil
ffffffff80002575:	74 39                	je     ffffffff800025b0 <_vsnprintf+0x500>
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002577:	49 89 dd             	mov    %rbx,%r13
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff8000257a:	45 85 e4             	test   %r12d,%r12d
ffffffff8000257d:	74 d9                	je     ffffffff80002558 <_vsnprintf+0x4a8>
ffffffff8000257f:	8b 44 24 10          	mov    0x10(%rsp),%eax
ffffffff80002583:	85 c0                	test   %eax,%eax
ffffffff80002585:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002588:	0f 84 68 02 00 00    	je     ffffffff800027f6 <_vsnprintf+0x746>
ffffffff8000258e:	89 54 24 10          	mov    %edx,0x10(%rsp)
ffffffff80002592:	eb c4                	jmp    ffffffff80002558 <_vsnprintf+0x4a8>
ffffffff80002594:	bf 10 00 00 00       	mov    $0x10,%edi
ffffffff80002599:	e9 a8 fd ff ff       	jmpq   ffffffff80002346 <_vsnprintf+0x296>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000259e:	4c 89 c3             	mov    %r8,%rbx
ffffffff800025a1:	e9 38 fb ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
ffffffff800025a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800025ad:	00 00 00 
ffffffff800025b0:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff800025b5:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
        if (flags & FLAGS_LEFT) {
ffffffff800025ba:	8b 44 24 24          	mov    0x24(%rsp),%eax
ffffffff800025be:	85 c0                	test   %eax,%eax
ffffffff800025c0:	0f 84 18 fb ff ff    	je     ffffffff800020de <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff800025c6:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff800025ca:	41 39 cc             	cmp    %ecx,%r12d
ffffffff800025cd:	0f 86 0b fb ff ff    	jbe    ffffffff800020de <_vsnprintf+0x2e>
ffffffff800025d3:	41 83 ec 01          	sub    $0x1,%r12d
ffffffff800025d7:	48 89 da             	mov    %rbx,%rdx
ffffffff800025da:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff800025df:	44 89 e0             	mov    %r12d,%eax
ffffffff800025e2:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff800025e6:	29 c8                	sub    %ecx,%eax
ffffffff800025e8:	4c 01 e0             	add    %r12,%rax
ffffffff800025eb:	4d 89 e5             	mov    %r12,%r13
ffffffff800025ee:	48 89 c3             	mov    %rax,%rbx
ffffffff800025f1:	eb 09                	jmp    ffffffff800025fc <_vsnprintf+0x54c>
ffffffff800025f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff800025f8:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff800025fc:	4c 89 f1             	mov    %r14,%rcx
ffffffff800025ff:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002602:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002607:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002609:	49 39 dd             	cmp    %rbx,%r13
ffffffff8000260c:	4c 89 ea             	mov    %r13,%rdx
ffffffff8000260f:	75 e7                	jne    ffffffff800025f8 <_vsnprintf+0x548>
ffffffff80002611:	4c 89 eb             	mov    %r13,%rbx
ffffffff80002614:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
        break;
ffffffff80002619:	e9 c0 fa ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
  for (s = str; *s && maxsize--; ++s);
ffffffff8000261e:	40 84 ff             	test   %dil,%dil
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80002621:	44 89 d6             	mov    %r10d,%esi
  for (s = str; *s && maxsize--; ++s);
ffffffff80002624:	0f 84 68 02 00 00    	je     ffffffff80002892 <_vsnprintf+0x7e2>
ffffffff8000262a:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff8000262e:	e9 a7 fe ff ff       	jmpq   ffffffff800024da <_vsnprintf+0x42a>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002633:	85 f6                	test   %esi,%esi
ffffffff80002635:	0f 85 bd 03 00 00    	jne    ffffffff800029f8 <_vsnprintf+0x948>
          else if (flags & FLAGS_LONG) {
ffffffff8000263b:	f6 c5 01             	test   $0x1,%ch
ffffffff8000263e:	0f 85 7e 03 00 00    	jne    ffffffff800029c2 <_vsnprintf+0x912>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002644:	f6 c1 40             	test   $0x40,%cl
ffffffff80002647:	0f 84 1b 02 00 00    	je     ffffffff80002868 <_vsnprintf+0x7b8>
ffffffff8000264d:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002650:	0f 87 b1 02 00 00    	ja     ffffffff80002907 <_vsnprintf+0x857>
ffffffff80002656:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000265a:	89 d0                	mov    %edx,%eax
ffffffff8000265c:	83 c2 08             	add    $0x8,%edx
ffffffff8000265f:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002663:	89 16                	mov    %edx,(%rsi)
ffffffff80002665:	44 0f be 08          	movsbl (%rax),%r9d
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002669:	44 89 c8             	mov    %r9d,%eax
ffffffff8000266c:	51                   	push   %rcx
ffffffff8000266d:	41 54                	push   %r12
ffffffff8000266f:	c1 f8 1f             	sar    $0x1f,%eax
ffffffff80002672:	41 52                	push   %r10
ffffffff80002674:	57                   	push   %rdi
ffffffff80002675:	41 89 c0             	mov    %eax,%r8d
ffffffff80002678:	45 31 c8             	xor    %r9d,%r8d
ffffffff8000267b:	41 c1 e9 1f          	shr    $0x1f,%r9d
ffffffff8000267f:	41 29 c0             	sub    %eax,%r8d
ffffffff80002682:	4d 63 c0             	movslq %r8d,%r8
ffffffff80002685:	e9 38 fd ff ff       	jmpq   ffffffff800023c2 <_vsnprintf+0x312>
          flags |= FLAGS_UPPERCASE;
ffffffff8000268a:	83 c9 20             	or     $0x20,%ecx
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ffffffff8000268d:	83 e1 f3             	and    $0xfffffff3,%ecx
ffffffff80002690:	e9 c5 fc ff ff       	jmpq   ffffffff8000235a <_vsnprintf+0x2aa>
ffffffff80002695:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_LONG_LONG;
ffffffff8000269a:	80 cd 03             	or     $0x3,%ch
ffffffff8000269d:	49 83 c5 03          	add    $0x3,%r13
ffffffff800026a1:	e9 2e fb ff ff       	jmpq   ffffffff800021d4 <_vsnprintf+0x124>
ffffffff800026a6:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_CHAR;
ffffffff800026ab:	80 c9 c0             	or     $0xc0,%cl
ffffffff800026ae:	49 83 c5 03          	add    $0x3,%r13
ffffffff800026b2:	e9 1d fb ff ff       	jmpq   ffffffff800021d4 <_vsnprintf+0x124>
          while (l++ < width) {
ffffffff800026b7:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff800026bb:	0f 86 de 01 00 00    	jbe    ffffffff8000289f <_vsnprintf+0x7ef>
ffffffff800026c1:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
ffffffff800026c6:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
ffffffff800026cb:	4d 89 c5             	mov    %r8,%r13
ffffffff800026ce:	4c 01 c0             	add    %r8,%rax
ffffffff800026d1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff800026d6:	eb 0f                	jmp    ffffffff800026e7 <_vsnprintf+0x637>
ffffffff800026d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800026df:	00 
ffffffff800026e0:	4c 89 eb             	mov    %r13,%rbx
ffffffff800026e3:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff800026e7:	4c 89 f1             	mov    %r14,%rcx
ffffffff800026ea:	48 89 da             	mov    %rbx,%rdx
ffffffff800026ed:	4c 89 fe             	mov    %r15,%rsi
ffffffff800026f0:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800026f5:	4d 89 ec             	mov    %r13,%r12
ffffffff800026f8:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff800026fa:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff800026ff:	75 df                	jne    ffffffff800026e0 <_vsnprintf+0x630>
ffffffff80002701:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
ffffffff80002706:	48 83 c3 02          	add    $0x2,%rbx
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000270a:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff8000270e:	8b 01                	mov    (%rcx),%eax
ffffffff80002710:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80002713:	0f 87 d9 01 00 00    	ja     ffffffff800028f2 <_vsnprintf+0x842>
ffffffff80002719:	89 c2                	mov    %eax,%edx
ffffffff8000271b:	48 03 51 10          	add    0x10(%rcx),%rdx
ffffffff8000271f:	83 c0 08             	add    $0x8,%eax
ffffffff80002722:	89 01                	mov    %eax,(%rcx)
ffffffff80002724:	0f be 3a             	movsbl (%rdx),%edi
ffffffff80002727:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000272a:	4c 89 e2             	mov    %r12,%rdx
ffffffff8000272d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002730:	ff d5                	callq  *%rbp
ffffffff80002732:	e9 a7 f9 ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80002737:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff8000273b:	41 39 cc             	cmp    %ecx,%r12d
ffffffff8000273e:	8d 41 01             	lea    0x1(%rcx),%eax
ffffffff80002741:	0f 86 63 01 00 00    	jbe    ffffffff800028aa <_vsnprintf+0x7fa>
ffffffff80002747:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
ffffffff8000274c:	4c 8d 43 01          	lea    0x1(%rbx),%r8
ffffffff80002750:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
ffffffff80002755:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
ffffffff8000275a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000275d:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff80002762:	29 c8                	sub    %ecx,%eax
ffffffff80002764:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80002769:	4d 89 c5             	mov    %r8,%r13
ffffffff8000276c:	4c 01 c0             	add    %r8,%rax
ffffffff8000276f:	49 89 c4             	mov    %rax,%r12
ffffffff80002772:	eb 08                	jmp    ffffffff8000277c <_vsnprintf+0x6cc>
ffffffff80002774:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80002778:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000277c:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000277f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002782:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002787:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002789:	4d 39 e5             	cmp    %r12,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000278c:	4c 89 eb             	mov    %r13,%rbx
ffffffff8000278f:	4c 89 ea             	mov    %r13,%rdx
          while (l++ < width) {
ffffffff80002792:	75 e4                	jne    ffffffff80002778 <_vsnprintf+0x6c8>
ffffffff80002794:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
ffffffff80002799:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
ffffffff8000279e:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
ffffffff800027a3:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffffff800027a8:	41 0f be 39          	movsbl (%r9),%edi
ffffffff800027ac:	41 8d 44 24 01       	lea    0x1(%r12),%eax
ffffffff800027b1:	89 44 24 20          	mov    %eax,0x20(%rsp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff800027b5:	40 84 ff             	test   %dil,%dil
ffffffff800027b8:	0f 85 74 fd ff ff    	jne    ffffffff80002532 <_vsnprintf+0x482>
ffffffff800027be:	e9 1b f9 ff ff       	jmpq   ffffffff800020de <_vsnprintf+0x2e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff800027c3:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800027c6:	0f 87 97 01 00 00    	ja     ffffffff80002963 <_vsnprintf+0x8b3>
ffffffff800027cc:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800027d0:	89 d0                	mov    %edx,%eax
ffffffff800027d2:	83 c2 08             	add    $0x8,%edx
ffffffff800027d5:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800027d9:	89 16                	mov    %edx,(%rsi)
ffffffff800027db:	51                   	push   %rcx
ffffffff800027dc:	45 31 c9             	xor    %r9d,%r9d
ffffffff800027df:	41 54                	push   %r12
ffffffff800027e1:	41 52                	push   %r10
ffffffff800027e3:	57                   	push   %rdi
ffffffff800027e4:	4c 8b 00             	mov    (%rax),%r8
ffffffff800027e7:	e9 4e fa ff ff       	jmpq   ffffffff8000223a <_vsnprintf+0x18a>
ffffffff800027ec:	bf 08 00 00 00       	mov    $0x8,%edi
ffffffff800027f1:	e9 97 fe ff ff       	jmpq   ffffffff8000268d <_vsnprintf+0x5dd>
ffffffff800027f6:	4c 89 e8             	mov    %r13,%rax
ffffffff800027f9:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff800027fe:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
ffffffff80002803:	48 89 c3             	mov    %rax,%rbx
ffffffff80002806:	e9 af fd ff ff       	jmpq   ffffffff800025ba <_vsnprintf+0x50a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000280b:	f6 c1 80             	test   $0x80,%cl
ffffffff8000280e:	0f 84 8e 01 00 00    	je     ffffffff800029a2 <_vsnprintf+0x8f2>
ffffffff80002814:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002817:	0f 87 70 01 00 00    	ja     ffffffff8000298d <_vsnprintf+0x8dd>
ffffffff8000281d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002821:	89 d0                	mov    %edx,%eax
ffffffff80002823:	83 c2 08             	add    $0x8,%edx
ffffffff80002826:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000282a:	89 16                	mov    %edx,(%rsi)
ffffffff8000282c:	44 0f b7 00          	movzwl (%rax),%r8d
ffffffff80002830:	e9 84 fb ff ff       	jmpq   ffffffff800023b9 <_vsnprintf+0x309>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80002835:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002838:	0f 87 8a 00 00 00    	ja     ffffffff800028c8 <_vsnprintf+0x818>
ffffffff8000283e:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002842:	89 d0                	mov    %edx,%eax
ffffffff80002844:	83 c2 08             	add    $0x8,%edx
ffffffff80002847:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000284b:	89 16                	mov    %edx,(%rsi)
ffffffff8000284d:	51                   	push   %rcx
ffffffff8000284e:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002851:	41 54                	push   %r12
ffffffff80002853:	41 52                	push   %r10
ffffffff80002855:	57                   	push   %rdi
ffffffff80002856:	4c 8b 00             	mov    (%rax),%r8
ffffffff80002859:	e9 64 fb ff ff       	jmpq   ffffffff800023c2 <_vsnprintf+0x312>
ffffffff8000285e:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80002863:	e9 25 fe ff ff       	jmpq   ffffffff8000268d <_vsnprintf+0x5dd>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002868:	f6 c1 80             	test   $0x80,%cl
ffffffff8000286b:	0f 84 56 02 00 00    	je     ffffffff80002ac7 <_vsnprintf+0xa17>
ffffffff80002871:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002874:	0f 87 38 02 00 00    	ja     ffffffff80002ab2 <_vsnprintf+0xa02>
ffffffff8000287a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000287e:	89 d0                	mov    %edx,%eax
ffffffff80002880:	83 c2 08             	add    $0x8,%edx
ffffffff80002883:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002887:	89 16                	mov    %edx,(%rsi)
ffffffff80002889:	44 0f bf 08          	movswl (%rax),%r9d
ffffffff8000288d:	e9 d7 fd ff ff       	jmpq   ffffffff80002669 <_vsnprintf+0x5b9>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002892:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
ffffffff80002899:	00 
ffffffff8000289a:	e9 61 fc ff ff       	jmpq   ffffffff80002500 <_vsnprintf+0x450>
          while (l++ < width) {
ffffffff8000289f:	49 89 dc             	mov    %rbx,%r12
ffffffff800028a2:	4c 89 c3             	mov    %r8,%rbx
ffffffff800028a5:	e9 60 fe ff ff       	jmpq   ffffffff8000270a <_vsnprintf+0x65a>
          while (l++ < width) {
ffffffff800028aa:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff800028ae:	e9 02 ff ff ff       	jmpq   ffffffff800027b5 <_vsnprintf+0x705>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff800028b3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800028b7:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff800028bb:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff800028bf:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800028c3:	e9 c2 f9 ff ff       	jmpq   ffffffff8000228a <_vsnprintf+0x1da>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff800028c8:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800028cc:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800028d0:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800028d4:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800028d8:	e9 70 ff ff ff       	jmpq   ffffffff8000284d <_vsnprintf+0x79d>
        const char* p = va_arg(va, char*);
ffffffff800028dd:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800028e1:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800028e5:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800028e9:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800028ed:	e9 c8 fb ff ff       	jmpq   ffffffff800024ba <_vsnprintf+0x40a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff800028f2:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff800028f6:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff800028fa:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff800028fe:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80002902:	e9 1d fe ff ff       	jmpq   ffffffff80002724 <_vsnprintf+0x674>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002907:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000290b:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000290f:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002913:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002917:	e9 49 fd ff ff       	jmpq   ffffffff80002665 <_vsnprintf+0x5b5>
      const int w = va_arg(va, int);
ffffffff8000291c:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80002920:	8b 17                	mov    (%rdi),%edx
ffffffff80002922:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002925:	77 2a                	ja     ffffffff80002951 <_vsnprintf+0x8a1>
ffffffff80002927:	89 d0                	mov    %edx,%eax
ffffffff80002929:	48 03 47 10          	add    0x10(%rdi),%rax
ffffffff8000292d:	83 c2 08             	add    $0x8,%edx
ffffffff80002930:	89 17                	mov    %edx,(%rdi)
ffffffff80002932:	44 8b 20             	mov    (%rax),%r12d
      if (w < 0) {
ffffffff80002935:	45 85 e4             	test   %r12d,%r12d
ffffffff80002938:	79 06                	jns    ffffffff80002940 <_vsnprintf+0x890>
        flags |= FLAGS_LEFT;    // reverse padding
ffffffff8000293a:	83 c9 02             	or     $0x2,%ecx
        width = (unsigned int)-w;
ffffffff8000293d:	41 f7 dc             	neg    %r12d
ffffffff80002940:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002945:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80002949:	49 89 f5             	mov    %rsi,%r13
ffffffff8000294c:	e9 c9 fa ff ff       	jmpq   ffffffff8000241a <_vsnprintf+0x36a>
      const int w = va_arg(va, int);
ffffffff80002951:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80002955:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff80002959:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000295d:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff80002961:	eb cf                	jmp    ffffffff80002932 <_vsnprintf+0x882>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80002963:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002967:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000296b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000296f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002973:	e9 63 fe ff ff       	jmpq   ffffffff800027db <_vsnprintf+0x72b>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002978:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000297c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002980:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002984:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002988:	e9 28 fa ff ff       	jmpq   ffffffff800023b5 <_vsnprintf+0x305>
ffffffff8000298d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002991:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002995:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002999:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000299d:	e9 8a fe ff ff       	jmpq   ffffffff8000282c <_vsnprintf+0x77c>
ffffffff800029a2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800029a5:	0f 87 83 00 00 00    	ja     ffffffff80002a2e <_vsnprintf+0x97e>
ffffffff800029ab:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800029af:	89 d0                	mov    %edx,%eax
ffffffff800029b1:	83 c2 08             	add    $0x8,%edx
ffffffff800029b4:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800029b8:	89 16                	mov    %edx,(%rsi)
ffffffff800029ba:	44 8b 00             	mov    (%rax),%r8d
ffffffff800029bd:	e9 f7 f9 ff ff       	jmpq   ffffffff800023b9 <_vsnprintf+0x309>
            const long value = va_arg(va, long);
ffffffff800029c2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800029c5:	77 7c                	ja     ffffffff80002a43 <_vsnprintf+0x993>
ffffffff800029c7:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800029cb:	89 d0                	mov    %edx,%eax
ffffffff800029cd:	83 c2 08             	add    $0x8,%edx
ffffffff800029d0:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800029d4:	89 16                	mov    %edx,(%rsi)
ffffffff800029d6:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff800029d9:	51                   	push   %rcx
ffffffff800029da:	41 54                	push   %r12
ffffffff800029dc:	41 52                	push   %r10
ffffffff800029de:	57                   	push   %rdi
ffffffff800029df:	4c 89 c8             	mov    %r9,%rax
ffffffff800029e2:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff800029e6:	49 89 c0             	mov    %rax,%r8
ffffffff800029e9:	4d 31 c8             	xor    %r9,%r8
ffffffff800029ec:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff800029f0:	49 29 c0             	sub    %rax,%r8
ffffffff800029f3:	e9 ca f9 ff ff       	jmpq   ffffffff800023c2 <_vsnprintf+0x312>
            const long long value = va_arg(va, long long);
ffffffff800029f8:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800029fb:	77 58                	ja     ffffffff80002a55 <_vsnprintf+0x9a5>
ffffffff800029fd:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002a01:	89 d0                	mov    %edx,%eax
ffffffff80002a03:	83 c2 08             	add    $0x8,%edx
ffffffff80002a06:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002a0a:	89 16                	mov    %edx,(%rsi)
ffffffff80002a0c:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002a0f:	51                   	push   %rcx
ffffffff80002a10:	41 54                	push   %r12
ffffffff80002a12:	41 52                	push   %r10
ffffffff80002a14:	57                   	push   %rdi
ffffffff80002a15:	4c 89 c8             	mov    %r9,%rax
ffffffff80002a18:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff80002a1c:	49 89 c0             	mov    %rax,%r8
ffffffff80002a1f:	4d 31 c8             	xor    %r9,%r8
ffffffff80002a22:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80002a26:	49 29 c0             	sub    %rax,%r8
ffffffff80002a29:	e9 0c f8 ff ff       	jmpq   ffffffff8000223a <_vsnprintf+0x18a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002a2e:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002a32:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002a36:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002a3a:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002a3e:	e9 77 ff ff ff       	jmpq   ffffffff800029ba <_vsnprintf+0x90a>
            const long value = va_arg(va, long);
ffffffff80002a43:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002a47:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002a4b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002a4f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002a53:	eb 81                	jmp    ffffffff800029d6 <_vsnprintf+0x926>
            const long long value = va_arg(va, long long);
ffffffff80002a55:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002a59:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002a5d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002a61:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002a65:	eb a5                	jmp    ffffffff80002a0c <_vsnprintf+0x95c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002a67:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002a6b:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff80002a6f:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80002a73:	48 89 46 08          	mov    %rax,0x8(%rsi)
ffffffff80002a77:	e9 b1 f7 ff ff       	jmpq   ffffffff8000222d <_vsnprintf+0x17d>
        const int prec = (int)va_arg(va, int);
ffffffff80002a7c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002a80:	8b 16                	mov    (%rsi),%edx
ffffffff80002a82:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002a85:	77 5c                	ja     ffffffff80002ae3 <_vsnprintf+0xa33>
ffffffff80002a87:	89 d0                	mov    %edx,%eax
ffffffff80002a89:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002a8d:	83 c2 08             	add    $0x8,%edx
ffffffff80002a90:	89 16                	mov    %edx,(%rsi)
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff80002a92:	8b 10                	mov    (%rax),%edx
ffffffff80002a94:	41 ba 00 00 00 00    	mov    $0x0,%r10d
ffffffff80002a9a:	49 8d 7d 03          	lea    0x3(%r13),%rdi
ffffffff80002a9e:	85 d2                	test   %edx,%edx
ffffffff80002aa0:	44 0f 49 10          	cmovns (%rax),%r10d
ffffffff80002aa4:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
        format++;
ffffffff80002aa9:	49 83 c5 02          	add    $0x2,%r13
ffffffff80002aad:	e9 00 f7 ff ff       	jmpq   ffffffff800021b2 <_vsnprintf+0x102>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002ab2:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002ab6:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002aba:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002abe:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002ac2:	e9 c2 fd ff ff       	jmpq   ffffffff80002889 <_vsnprintf+0x7d9>
ffffffff80002ac7:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002aca:	77 29                	ja     ffffffff80002af5 <_vsnprintf+0xa45>
ffffffff80002acc:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002ad0:	89 d0                	mov    %edx,%eax
ffffffff80002ad2:	83 c2 08             	add    $0x8,%edx
ffffffff80002ad5:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002ad9:	89 16                	mov    %edx,(%rsi)
ffffffff80002adb:	44 8b 08             	mov    (%rax),%r9d
ffffffff80002ade:	e9 86 fb ff ff       	jmpq   ffffffff80002669 <_vsnprintf+0x5b9>
        const int prec = (int)va_arg(va, int);
ffffffff80002ae3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002ae7:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002aeb:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002aef:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002af3:	eb 9d                	jmp    ffffffff80002a92 <_vsnprintf+0x9e2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002af5:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002af9:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002afd:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002b01:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002b05:	eb d4                	jmp    ffffffff80002adb <_vsnprintf+0xa2b>
ffffffff80002b07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002b0e:	00 00 

ffffffff80002b10 <_out_char>:
  if (character) {
ffffffff80002b10:	40 84 ff             	test   %dil,%dil
ffffffff80002b13:	75 0b                	jne    ffffffff80002b20 <_out_char+0x10>
}
ffffffff80002b15:	f3 c3                	repz retq 
ffffffff80002b17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002b1e:	00 00 
    _putchar(character);
ffffffff80002b20:	40 0f be ff          	movsbl %dil,%edi
ffffffff80002b24:	e9 c7 01 00 00       	jmpq   ffffffff80002cf0 <_putchar>
ffffffff80002b29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002b30 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
ffffffff80002b30:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80002b34:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80002b39:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
ffffffff80002b3e:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002b43:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
ffffffff80002b48:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80002b4d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  va_start(va, format);
ffffffff80002b52:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002b57:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
{
ffffffff80002b5c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002b61:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80002b68:	48 89 f9             	mov    %rdi,%rcx
ffffffff80002b6b:	48 c7 c7 10 2b 00 80 	mov    $0xffffffff80002b10,%rdi
{
ffffffff80002b72:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80002b77:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
ffffffff80002b7e:	00 
ffffffff80002b7f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002b84:	e8 27 f5 ff ff       	callq  ffffffff800020b0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80002b89:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002b8d:	c3                   	retq   
ffffffff80002b8e:	66 90                	xchg   %ax,%ax

ffffffff80002b90 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
ffffffff80002b90:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80002b94:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80002b99:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002b9e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80002ba3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffffff80002ba8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002bad:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff80002bb4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002bb9:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002bbe:	48 89 f1             	mov    %rsi,%rcx
ffffffff80002bc1:	48 89 fe             	mov    %rdi,%rsi
ffffffff80002bc4:	48 c7 c7 80 1a 00 80 	mov    $0xffffffff80001a80,%rdi
{
ffffffff80002bcb:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80002bd0:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff80002bd7:	00 
ffffffff80002bd8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002bdd:	e8 ce f4 ff ff       	callq  ffffffff800020b0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80002be2:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002be6:	c3                   	retq   
ffffffff80002be7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002bee:	00 00 

ffffffff80002bf0 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
ffffffff80002bf0:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80002bf4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80002bf9:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002bfe:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80002c03:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002c08:	48 89 d1             	mov    %rdx,%rcx
ffffffff80002c0b:	48 89 f2             	mov    %rsi,%rdx
  va_start(va, format);
ffffffff80002c0e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002c13:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002c18:	48 89 fe             	mov    %rdi,%rsi
ffffffff80002c1b:	48 c7 c7 80 1a 00 80 	mov    $0xffffffff80001a80,%rdi
{
ffffffff80002c22:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80002c27:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%rsp)
ffffffff80002c2e:	00 
ffffffff80002c2f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002c34:	e8 77 f4 ff ff       	callq  ffffffff800020b0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80002c39:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002c3d:	c3                   	retq   
ffffffff80002c3e:	66 90                	xchg   %ax,%ax

ffffffff80002c40 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
ffffffff80002c40:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80002c44:	49 89 f0             	mov    %rsi,%r8
ffffffff80002c47:	48 89 f9             	mov    %rdi,%rcx
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002c4a:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
ffffffff80002c4f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80002c56:	48 c7 c7 10 2b 00 80 	mov    $0xffffffff80002b10,%rdi
ffffffff80002c5d:	e8 4e f4 ff ff       	callq  ffffffff800020b0 <_vsnprintf>
}
ffffffff80002c62:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80002c66:	c3                   	retq   
ffffffff80002c67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002c6e:	00 00 

ffffffff80002c70 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
ffffffff80002c70:	49 89 c8             	mov    %rcx,%r8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002c73:	48 89 d1             	mov    %rdx,%rcx
ffffffff80002c76:	48 89 f2             	mov    %rsi,%rdx
ffffffff80002c79:	48 89 fe             	mov    %rdi,%rsi
ffffffff80002c7c:	48 c7 c7 80 1a 00 80 	mov    $0xffffffff80001a80,%rdi
ffffffff80002c83:	e9 28 f4 ff ff       	jmpq   ffffffff800020b0 <_vsnprintf>
ffffffff80002c88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002c8f:	00 

ffffffff80002c90 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
ffffffff80002c90:	48 83 ec 68          	sub    $0x68,%rsp
  va_list va;
  va_start(va, format);
ffffffff80002c94:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
{
ffffffff80002c99:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff80002c9e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80002ca3:	4c 8d 44 24 18       	lea    0x18(%rsp),%r8
ffffffff80002ca8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
{
ffffffff80002cad:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  va_start(va, format);
ffffffff80002cb2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff80002cb7:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff80002cbc:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80002cc1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80002cc4:	48 c7 c7 a0 1a 00 80 	mov    $0xffffffff80001aa0,%rdi
ffffffff80002ccb:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff80002cd2:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
  va_start(va, format);
ffffffff80002cd7:	c7 44 24 18 18 00 00 	movl   $0x18,0x18(%rsp)
ffffffff80002cde:	00 
ffffffff80002cdf:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80002ce4:	e8 c7 f3 ff ff       	callq  ffffffff800020b0 <_vsnprintf>
  va_end(va);
  return ret;
ffffffff80002ce9:	48 83 c4 68          	add    $0x68,%rsp
ffffffff80002ced:	c3                   	retq   
ffffffff80002cee:	66 90                	xchg   %ax,%ax

ffffffff80002cf0 <_putchar>:
#include "../device/console/console.h"

void _putchar(char character)
{
    
    putchar(character);
ffffffff80002cf0:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80002cf4:	e9 a7 e5 ff ff       	jmpq   ffffffff800012a0 <putchar>
ffffffff80002cf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002d00 <print_gdt>:
uint8_t ist2[4096];

void print_gdt()
{

}
ffffffff80002d00:	f3 c3                	repz retq 
ffffffff80002d02:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002d09:	00 00 00 00 
ffffffff80002d0d:	0f 1f 00             	nopl   (%rax)

ffffffff80002d10 <gdt_init>:

void gdt_init()
{
    gdt.null0.raw = 0x00;
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80002d10:	48 b8 ff ff 00 00 00 	movabs $0xaf9a000000ffff,%rax
ffffffff80002d17:	9a af 00 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);

    gdtr.base = (uint64_t)&gdt;
    gdtr.limit = sizeof(gdt);

    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff80002d1a:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff80002d1f:	48 c7 c7 40 dc 00 80 	mov    $0xffffffff8000dc40,%rdi
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80002d26:	48 89 05 bb af 00 00 	mov    %rax,0xafbb(%rip)        # ffffffff8000dce8 <gdt+0x8>
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff80002d2d:	48 b8 ff ff 00 00 00 	movabs $0xaf92000000ffff,%rax
ffffffff80002d34:	92 af 00 
    gdt.null0.raw = 0x00;
ffffffff80002d37:	48 c7 05 9e af 00 00 	movq   $0x0,0xaf9e(%rip)        # ffffffff8000dce0 <gdt>
ffffffff80002d3e:	00 00 00 00 
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff80002d42:	48 89 05 a7 af 00 00 	mov    %rax,0xafa7(%rip)        # ffffffff8000dcf0 <gdt+0x10>
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff80002d49:	48 b8 ff ff 00 00 00 	movabs $0xaffa000000ffff,%rax
ffffffff80002d50:	fa af 00 
    gdt.null1.raw = 0x00;
ffffffff80002d53:	48 c7 05 9a af 00 00 	movq   $0x0,0xaf9a(%rip)        # ffffffff8000dcf8 <gdt+0x18>
ffffffff80002d5a:	00 00 00 00 
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff80002d5e:	48 89 05 9b af 00 00 	mov    %rax,0xaf9b(%rip)        # ffffffff8000dd00 <gdt+0x20>
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff80002d65:	48 b8 ff ff 00 00 00 	movabs $0xaff2000000ffff,%rax
ffffffff80002d6c:	f2 af 00 
    gdt.null2.raw = 0x00;
ffffffff80002d6f:	48 c7 05 96 af 00 00 	movq   $0x0,0xaf96(%rip)        # ffffffff8000dd10 <gdt+0x30>
ffffffff80002d76:	00 00 00 00 
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff80002d7a:	48 89 05 87 af 00 00 	mov    %rax,0xaf87(%rip)        # ffffffff8000dd08 <gdt+0x28>
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80002d81:	48 c7 c0 60 dc 00 80 	mov    $0xffffffff8000dc60,%rax
    gdt.null3.raw = 0x00;
ffffffff80002d88:	48 c7 05 85 af 00 00 	movq   $0x0,0xaf85(%rip)        # ffffffff8000dd18 <gdt+0x38>
ffffffff80002d8f:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80002d93:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80002d96:	66 89 05 95 af 00 00 	mov    %ax,0xaf95(%rip)        # ffffffff8000dd32 <gdt+0x52>
    gdt.null4.raw = 0x00;
ffffffff80002d9d:	48 c7 05 78 af 00 00 	movq   $0x0,0xaf78(%rip)        # ffffffff8000dd20 <gdt+0x40>
ffffffff80002da4:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80002da8:	48 c1 ea 10          	shr    $0x10,%rdx
    gdt.null5.raw = 0x00;
ffffffff80002dac:	48 c7 05 71 af 00 00 	movq   $0x0,0xaf71(%rip)        # ffffffff8000dd28 <gdt+0x48>
ffffffff80002db3:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff80002db7:	c6 05 77 af 00 00 89 	movb   $0x89,0xaf77(%rip)        # ffffffff8000dd35 <gdt+0x55>
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80002dbe:	88 15 70 af 00 00    	mov    %dl,0xaf70(%rip)        # ffffffff8000dd34 <gdt+0x54>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80002dc4:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff80002dc7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80002dcb:	89 05 67 af 00 00    	mov    %eax,0xaf67(%rip)        # ffffffff8000dd38 <gdt+0x58>
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff80002dd1:	b8 68 00 00 00       	mov    $0x68,%eax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80002dd6:	48 c1 ea 18          	shr    $0x18,%rdx
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff80002dda:	66 89 05 4f af 00 00 	mov    %ax,0xaf4f(%rip)        # ffffffff8000dd30 <gdt+0x50>
    gdt.tss_entry.reserved0 = 0;
ffffffff80002de1:	0f b6 05 4e af 00 00 	movzbl 0xaf4e(%rip),%eax        # ffffffff8000dd36 <gdt+0x56>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80002de8:	88 15 49 af 00 00    	mov    %dl,0xaf49(%rip)        # ffffffff8000dd37 <gdt+0x57>
    gdtr.limit = sizeof(gdt);
ffffffff80002dee:	ba 60 00 00 00       	mov    $0x60,%edx
    gdt.tss_entry.reserved1 = 0;
ffffffff80002df3:	c7 05 3f af 00 00 00 	movl   $0x0,0xaf3f(%rip)        # ffffffff8000dd3c <gdt+0x5c>
ffffffff80002dfa:	00 00 00 
    tss.reserved0 = 0x00;
ffffffff80002dfd:	c7 05 59 ae 00 00 00 	movl   $0x0,0xae59(%rip)        # ffffffff8000dc60 <tss>
ffffffff80002e04:	00 00 00 
    tss.RSP0 = (uint64_t)stack + sizeof(stack);
ffffffff80002e07:	48 c7 05 52 ae 00 00 	movq   $0xffffffff800098a0,0xae52(%rip)        # ffffffff8000dc64 <tss+0x4>
ffffffff80002e0e:	a0 98 00 80 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);
ffffffff80002e12:	48 c7 05 67 ae 00 00 	movq   $0xffffffff8000dbe0,0xae67(%rip)        # ffffffff8000dc84 <tss+0x24>
ffffffff80002e19:	e0 db 00 80 
    gdtr.base = (uint64_t)&gdt;
ffffffff80002e1d:	48 c7 05 1a ae 00 00 	movq   $0xffffffff8000dce0,0xae1a(%rip)        # ffffffff8000dc42 <gdtr+0x2>
ffffffff80002e24:	e0 dc 00 80 
    gdt.tss_entry.reserved0 = 0;
ffffffff80002e28:	83 e0 40             	and    $0x40,%eax
    gdtr.limit = sizeof(gdt);
ffffffff80002e2b:	66 89 15 0e ae 00 00 	mov    %dx,0xae0e(%rip)        # ffffffff8000dc40 <gdtr>
    gdt.tss_entry.reserved0 = 0;
ffffffff80002e32:	88 05 fe ae 00 00    	mov    %al,0xaefe(%rip)        # ffffffff8000dd36 <gdt+0x56>
    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff80002e38:	e9 03 d2 ff ff       	jmpq   ffffffff80000040 <gdt_load>
ffffffff80002e3d:	0f 1f 00             	nopl   (%rax)

ffffffff80002e40 <memset>:
#include "kstring.h"

void* memset(void* s, uint64_t c, uint64_t len)
{
    unsigned char* p=s;
    while(len--)
ffffffff80002e40:	48 85 d2             	test   %rdx,%rdx
{
ffffffff80002e43:	48 89 f8             	mov    %rdi,%rax
    while(len--)
ffffffff80002e46:	74 15                	je     ffffffff80002e5d <memset+0x1d>
ffffffff80002e48:	48 01 fa             	add    %rdi,%rdx
    unsigned char* p=s;
ffffffff80002e4b:	48 89 f9             	mov    %rdi,%rcx
ffffffff80002e4e:	66 90                	xchg   %ax,%ax
    {
        *p++ = (unsigned char)c;
ffffffff80002e50:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80002e54:	40 88 71 ff          	mov    %sil,-0x1(%rcx)
    while(len--)
ffffffff80002e58:	48 39 d1             	cmp    %rdx,%rcx
ffffffff80002e5b:	75 f3                	jne    ffffffff80002e50 <memset+0x10>
    }
    return s;
}
ffffffff80002e5d:	f3 c3                	repz retq 
ffffffff80002e5f:	90                   	nop

ffffffff80002e60 <memcmp>:

int memcmp(const void* str1, const void* str2, size_t n)
{
    if(!n)
        return 0;
ffffffff80002e60:	31 c0                	xor    %eax,%eax
    if(!n)
ffffffff80002e62:	48 85 d2             	test   %rdx,%rdx
ffffffff80002e65:	74 36                	je     ffffffff80002e9d <memcmp+0x3d>

    while(--n && *(uint8_t*)str1 == *(uint8_t*)str2)
ffffffff80002e67:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80002e6b:	44 0f b6 06          	movzbl (%rsi),%r8d
ffffffff80002e6f:	0f b6 0f             	movzbl (%rdi),%ecx
ffffffff80002e72:	74 23                	je     ffffffff80002e97 <memcmp+0x37>
ffffffff80002e74:	41 38 c8             	cmp    %cl,%r8b
ffffffff80002e77:	75 1e                	jne    ffffffff80002e97 <memcmp+0x37>
ffffffff80002e79:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80002e7e:	eb 09                	jmp    ffffffff80002e89 <memcmp+0x29>
ffffffff80002e80:	48 83 c0 01          	add    $0x1,%rax
ffffffff80002e84:	44 38 c1             	cmp    %r8b,%cl
ffffffff80002e87:	75 0e                	jne    ffffffff80002e97 <memcmp+0x37>
ffffffff80002e89:	48 39 c2             	cmp    %rax,%rdx
ffffffff80002e8c:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff80002e90:	44 0f b6 04 06       	movzbl (%rsi,%rax,1),%r8d
ffffffff80002e95:	75 e9                	jne    ffffffff80002e80 <memcmp+0x20>
    {
        str1 = (uint8_t*)str1 + 1;
        str2 = (uint8_t*)str2 + 1;
    }

    return (*((uint8_t*)str1) - *((uint8_t*)str2));
ffffffff80002e97:	0f b6 c1             	movzbl %cl,%eax
ffffffff80002e9a:	44 29 c0             	sub    %r8d,%eax
ffffffff80002e9d:	f3 c3                	repz retq 
ffffffff80002e9f:	90                   	nop

ffffffff80002ea0 <kernel>:
#include "./device/ACPI/acpi.h"
#include "./memory/liballoc.h"


void kernel()
{
ffffffff80002ea0:	48 83 ec 08          	sub    $0x8,%rsp

    //printf("Kernel Now\n");
    
    gdt_init();
ffffffff80002ea4:	31 c0                	xor    %eax,%eax
ffffffff80002ea6:	e8 65 fe ff ff       	callq  ffffffff80002d10 <gdt_init>
    idt_init();
ffffffff80002eab:	31 c0                	xor    %eax,%eax
ffffffff80002ead:	e8 9e 00 00 00       	callq  ffffffff80002f50 <idt_init>
    fb_init();
ffffffff80002eb2:	31 c0                	xor    %eax,%eax
ffffffff80002eb4:	e8 b7 e2 ff ff       	callq  ffffffff80001170 <fb_init>
    console_init();
ffffffff80002eb9:	31 c0                	xor    %eax,%eax
ffffffff80002ebb:	e8 10 e5 ff ff       	callq  ffffffff800013d0 <console_init>

    pmm_init();
ffffffff80002ec0:	31 c0                	xor    %eax,%eax
ffffffff80002ec2:	e8 39 df ff ff       	callq  ffffffff80000e00 <pmm_init>
    vmm_init();
ffffffff80002ec7:	31 c0                	xor    %eax,%eax
ffffffff80002ec9:	e8 92 d7 ff ff       	callq  ffffffff80000660 <vmm_init>

    serial_init(0x3F8);     //COM1
ffffffff80002ece:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002ed3:	e8 48 e6 ff ff       	callq  ffffffff80001520 <serial_init>

    serial_write(0x3F8, 'h');
ffffffff80002ed8:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002edd:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80002ee2:	e8 69 e7 ff ff       	callq  ffffffff80001650 <serial_write>

    //fb_clearscreen(FB_COLOR_BLUE);

    //int_test();

    printf("Kernel Done!\n");
ffffffff80002ee7:	48 c7 c7 08 46 00 80 	mov    $0xffffffff80004608,%rdi
ffffffff80002eee:	31 c0                	xor    %eax,%eax
ffffffff80002ef0:	e8 3b fc ff ff       	callq  ffffffff80002b30 <printf_>
ffffffff80002ef5:	eb fe                	jmp    ffffffff80002ef5 <kernel+0x55>
ffffffff80002ef7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002efe:	00 00 

ffffffff80002f00 <create_descriptor>:

void create_descriptor(uint16_t index, void* isr, uint8_t ist, uint8_t cs, uint8_t attr)
{
    struct idt_entry* entry = &idt[index];

    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80002f00:	0f b7 ff             	movzwl %di,%edi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80002f03:	48 89 f0             	mov    %rsi,%rax
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
    entry->ist = ist;
    entry->kernel_cs = cs;
ffffffff80002f06:	0f b6 c9             	movzbl %cl,%ecx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80002f09:	48 c1 e7 04          	shl    $0x4,%rdi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80002f0d:	48 c1 e8 10          	shr    $0x10,%rax
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80002f11:	66 89 b7 60 dd 00 80 	mov    %si,-0x7fff22a0(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80002f18:	48 c1 ee 20          	shr    $0x20,%rsi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80002f1c:	66 89 87 66 dd 00 80 	mov    %ax,-0x7fff229a(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80002f23:	89 b7 68 dd 00 80    	mov    %esi,-0x7fff2298(%rdi)
    entry->ist = ist;
ffffffff80002f29:	88 97 64 dd 00 80    	mov    %dl,-0x7fff229c(%rdi)
    entry->kernel_cs = cs;
ffffffff80002f2f:	66 89 8f 62 dd 00 80 	mov    %cx,-0x7fff229e(%rdi)
    entry->attributes = attr;
ffffffff80002f36:	44 88 87 65 dd 00 80 	mov    %r8b,-0x7fff229b(%rdi)
    entry->reserved = 0;
ffffffff80002f3d:	c7 87 6c dd 00 80 00 	movl   $0x0,-0x7fff2294(%rdi)
ffffffff80002f44:	00 00 00 
}
ffffffff80002f47:	c3                   	retq   
ffffffff80002f48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002f4f:	00 

ffffffff80002f50 <idt_init>:

void idt_init()
{
    //uint64_t idt_ptr = hh_code_to_phys((uint64_t)&idt[0]);
    idtr.base = (uint64_t)&idt[0];
ffffffff80002f50:	48 c7 c0 60 dd 00 80 	mov    $0xffffffff8000dd60,%rax
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80002f57:	b9 ff 0f 00 00       	mov    $0xfff,%ecx
{
ffffffff80002f5c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002f60:	48 8d b8 f0 02 00 00 	lea    0x2f0(%rax),%rdi
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80002f67:	66 89 0d da ad 00 00 	mov    %cx,0xadda(%rip)        # ffffffff8000dd48 <idtr>
    idtr.base = (uint64_t)&idt[0];
ffffffff80002f6e:	48 89 05 d5 ad 00 00 	mov    %rax,0xadd5(%rip)        # ffffffff8000dd4a <idtr+0x2>
ffffffff80002f75:	48 c7 c1 44 02 00 80 	mov    $0xffffffff80000244,%rcx
ffffffff80002f7c:	0f 1f 40 00          	nopl   0x0(%rax)

    for(uint8_t index = 0; index < 47; index++)
    {
        create_descriptor(index, isr_stub_table[index], 0x00, 0x08, 0x8E);
ffffffff80002f80:	48 8b 11             	mov    (%rcx),%rdx
    entry->ist = ist;
ffffffff80002f83:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80002f87:	48 83 c0 10          	add    $0x10,%rax
    entry->attributes = attr;
ffffffff80002f8b:	c6 40 f5 8e          	movb   $0x8e,-0xb(%rax)
    entry->reserved = 0;
ffffffff80002f8f:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
ffffffff80002f96:	48 83 c1 08          	add    $0x8,%rcx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80002f9a:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80002f9e:	48 89 d6             	mov    %rdx,%rsi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80002fa1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80002fa5:	89 50 f8             	mov    %edx,-0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80002fa8:	48 c1 ee 10          	shr    $0x10,%rsi
    entry->kernel_cs = cs;
ffffffff80002fac:	ba 08 00 00 00       	mov    $0x8,%edx
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80002fb1:	66 89 70 f6          	mov    %si,-0xa(%rax)
    entry->kernel_cs = cs;
ffffffff80002fb5:	66 89 50 f2          	mov    %dx,-0xe(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80002fb9:	48 39 f8             	cmp    %rdi,%rax
ffffffff80002fbc:	75 c2                	jne    ffffffff80002f80 <idt_init+0x30>
    }

    create_descriptor(127, isr_stub_table[48], 0x00, 0x08, 0x8E);
ffffffff80002fbe:	48 8b 05 ff d3 ff ff 	mov    -0x2c01(%rip),%rax        # ffffffff800003c4 <isr_stub_table+0x180>
    entry->kernel_cs = cs;
ffffffff80002fc5:	c7 05 83 b5 00 00 08 	movl   $0x8e000008,0xb583(%rip)        # ffffffff8000e552 <idt+0x7f2>
ffffffff80002fcc:	00 00 8e 
    entry->reserved = 0;
ffffffff80002fcf:	c7 05 83 b5 00 00 00 	movl   $0x0,0xb583(%rip)        # ffffffff8000e55c <idt+0x7fc>
ffffffff80002fd6:	00 00 00 
    entry->kernel_cs = cs;
ffffffff80002fd9:	c7 05 7f b5 00 00 08 	movl   $0x8e000008,0xb57f(%rip)        # ffffffff8000e562 <idt+0x802>
ffffffff80002fe0:	00 00 8e 
    entry->reserved = 0;
ffffffff80002fe3:	c7 05 7f b5 00 00 00 	movl   $0x0,0xb57f(%rip)        # ffffffff8000e56c <idt+0x80c>
ffffffff80002fea:	00 00 00 
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80002fed:	66 89 05 5c b5 00 00 	mov    %ax,0xb55c(%rip)        # ffffffff8000e550 <idt+0x7f0>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80002ff4:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80002ff7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80002ffb:	89 05 57 b5 00 00    	mov    %eax,0xb557(%rip)        # ffffffff8000e558 <idt+0x7f8>
    create_descriptor(128, isr_stub_table[49], 0x00, 0x08, 0x8E);
ffffffff80003001:	48 8b 05 c4 d3 ff ff 	mov    -0x2c3c(%rip),%rax        # ffffffff800003cc <isr_stub_table+0x188>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003008:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8000300c:	66 89 15 43 b5 00 00 	mov    %dx,0xb543(%rip)        # ffffffff8000e556 <idt+0x7f6>
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003013:	66 89 05 46 b5 00 00 	mov    %ax,0xb546(%rip)        # ffffffff8000e560 <idt+0x800>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000301a:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff8000301d:	48 c1 e8 20          	shr    $0x20,%rax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003021:	48 c1 ea 10          	shr    $0x10,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003025:	89 05 3d b5 00 00    	mov    %eax,0xb53d(%rip)        # ffffffff8000e568 <idt+0x808>

    pic_remap();
ffffffff8000302b:	31 c0                	xor    %eax,%eax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000302d:	66 89 15 32 b5 00 00 	mov    %dx,0xb532(%rip)        # ffffffff8000e566 <idt+0x806>
    pic_remap();
ffffffff80003034:	e8 e7 e8 ff ff       	callq  ffffffff80001920 <pic_remap>
    pic_disable();
ffffffff80003039:	31 c0                	xor    %eax,%eax
ffffffff8000303b:	e8 b0 e8 ff ff       	callq  ffffffff800018f0 <pic_disable>

    

    idt_load(&idtr);
ffffffff80003040:	48 c7 c7 48 dd 00 80 	mov    $0xffffffff8000dd48,%rdi
ffffffff80003047:	e8 88 d3 ff ff       	callq  ffffffff800003d4 <idt_load>

    pit_init(10000);
ffffffff8000304c:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff80003051:	e8 ca e9 ff ff       	callq  ffffffff80001a20 <pit_init>

    pic_clear_mask(1);
ffffffff80003056:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8000305b:	e8 40 e8 ff ff       	callq  ffffffff800018a0 <pic_clear_mask>
    pic_clear_mask(0);
ffffffff80003060:	31 ff                	xor    %edi,%edi


    //__asm__ volatile ("lidt %0" : : "m"(idtr));
    //__asm__ volatile ("sti");
}
ffffffff80003062:	48 83 c4 08          	add    $0x8,%rsp
    pic_clear_mask(0);
ffffffff80003066:	e9 35 e8 ff ff       	jmpq   ffffffff800018a0 <pic_clear_mask>
ffffffff8000306b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80003070 <interrupt_handler>:

uint64_t interrupt_handler(uint64_t rsp)
{
ffffffff80003070:	55                   	push   %rbp
ffffffff80003071:	53                   	push   %rbx
ffffffff80003072:	48 89 fb             	mov    %rdi,%rbx
ffffffff80003075:	48 83 ec 08          	sub    $0x8,%rsp
    struct interrupt_stack_frame* frame = (struct interrupt_stack_frame*)rsp;
    
    if(frame->int_no < 32)
ffffffff80003079:	48 8b 77 78          	mov    0x78(%rdi),%rsi
ffffffff8000307d:	48 83 fe 1f          	cmp    $0x1f,%rsi
ffffffff80003081:	77 1d                	ja     ffffffff800030a0 <interrupt_handler+0x30>
    {
        if(frame->cs == 0x08)
ffffffff80003083:	48 83 bf 90 00 00 00 	cmpq   $0x8,0x90(%rdi)
ffffffff8000308a:	08 
ffffffff8000308b:	74 63                	je     ffffffff800030f0 <interrupt_handler+0x80>
    {
        printf("Syscall 127\n");
        return rsp;
    }
    return rsp;
ffffffff8000308d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003091:	48 89 d8             	mov    %rbx,%rax
ffffffff80003094:	5b                   	pop    %rbx
ffffffff80003095:	5d                   	pop    %rbp
ffffffff80003096:	c3                   	retq   
ffffffff80003097:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000309e:	00 00 
    else if (frame->int_no < 48)
ffffffff800030a0:	48 83 fe 2f          	cmp    $0x2f,%rsi
ffffffff800030a4:	77 32                	ja     ffffffff800030d8 <interrupt_handler+0x68>
        uint64_t irq = frame->int_no - 32;
ffffffff800030a6:	48 8d 6e e0          	lea    -0x20(%rsi),%rbp
        if(irq > 1)
ffffffff800030aa:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff800030ae:	0f 87 e4 00 00 00    	ja     ffffffff80003198 <interrupt_handler+0x128>
        switch(irq)
ffffffff800030b4:	0f 84 ce 00 00 00    	je     ffffffff80003188 <interrupt_handler+0x118>
                pit_ticks++;
ffffffff800030ba:	48 83 05 7e ac 00 00 	addq   $0x1,0xac7e(%rip)        # ffffffff8000dd40 <pit_ticks>
ffffffff800030c1:	01 
        pic_EOI(irq);
ffffffff800030c2:	89 ef                	mov    %ebp,%edi
ffffffff800030c4:	e8 47 e7 ff ff       	callq  ffffffff80001810 <pic_EOI>
ffffffff800030c9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800030cd:	48 89 d8             	mov    %rbx,%rax
ffffffff800030d0:	5b                   	pop    %rbx
ffffffff800030d1:	5d                   	pop    %rbp
ffffffff800030d2:	c3                   	retq   
ffffffff800030d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    else if (frame->int_no == 127)
ffffffff800030d8:	48 83 fe 7f          	cmp    $0x7f,%rsi
ffffffff800030dc:	75 af                	jne    ffffffff8000308d <interrupt_handler+0x1d>
        printf("Syscall 127\n");
ffffffff800030de:	48 c7 c7 8b 46 00 80 	mov    $0xffffffff8000468b,%rdi
ffffffff800030e5:	31 c0                	xor    %eax,%eax
ffffffff800030e7:	e8 44 fa ff ff       	callq  ffffffff80002b30 <printf_>
        return rsp;
ffffffff800030ec:	eb 9f                	jmp    ffffffff8000308d <interrupt_handler+0x1d>
ffffffff800030ee:	66 90                	xchg   %ax,%ax
            serial_write(0x3F8, 'e');
ffffffff800030f0:	be 65 00 00 00       	mov    $0x65,%esi
ffffffff800030f5:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800030fa:	e8 51 e5 ff ff       	callq  ffffffff80001650 <serial_write>
            printf("CPU Exception! INT %d   ERR %x\n", frame->int_no, frame->err_no);
ffffffff800030ff:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff80003106:	48 8b 73 78          	mov    0x78(%rbx),%rsi
ffffffff8000310a:	48 c7 c7 18 46 00 80 	mov    $0xffffffff80004618,%rdi
ffffffff80003111:	31 c0                	xor    %eax,%eax
ffffffff80003113:	e8 18 fa ff ff       	callq  ffffffff80002b30 <printf_>
            printf(_exception_messages[frame->int_no]);
ffffffff80003118:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff8000311c:	48 8b 3c c5 c0 47 00 	mov    -0x7fffb840(,%rax,8),%rdi
ffffffff80003123:	80 
ffffffff80003124:	31 c0                	xor    %eax,%eax
ffffffff80003126:	e8 05 fa ff ff       	callq  ffffffff80002b30 <printf_>
            printf("\n");
ffffffff8000312b:	48 c7 c7 89 46 00 80 	mov    $0xffffffff80004689,%rdi
ffffffff80003132:	31 c0                	xor    %eax,%eax
ffffffff80003134:	e8 f7 f9 ff ff       	callq  ffffffff80002b30 <printf_>
            printf("SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff80003139:	48 8b 8b 98 00 00 00 	mov    0x98(%rbx),%rcx
ffffffff80003140:	48 8b 93 a0 00 00 00 	mov    0xa0(%rbx),%rdx
ffffffff80003147:	48 c7 c7 38 46 00 80 	mov    $0xffffffff80004638,%rdi
ffffffff8000314e:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
ffffffff80003155:	4c 8b 8b 88 00 00 00 	mov    0x88(%rbx),%r9
ffffffff8000315c:	31 c0                	xor    %eax,%eax
ffffffff8000315e:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80003165:	e8 c6 f9 ff ff       	callq  ffffffff80002b30 <printf_>
            printf("rax: %x  rdi: %x", frame->rax, frame->rdi);
ffffffff8000316a:	48 8b 53 48          	mov    0x48(%rbx),%rdx
ffffffff8000316e:	48 8b 73 70          	mov    0x70(%rbx),%rsi
ffffffff80003172:	48 c7 c7 66 46 00 80 	mov    $0xffffffff80004666,%rdi
ffffffff80003179:	31 c0                	xor    %eax,%eax
ffffffff8000317b:	e8 b0 f9 ff ff       	callq  ffffffff80002b30 <printf_>
            asm("cli");
ffffffff80003180:	fa                   	cli    
            asm("hlt");
ffffffff80003181:	f4                   	hlt    
ffffffff80003182:	eb fe                	jmp    ffffffff80003182 <interrupt_handler+0x112>
ffffffff80003184:	0f 1f 40 00          	nopl   0x0(%rax)
                kbd_handle();
ffffffff80003188:	31 c0                	xor    %eax,%eax
ffffffff8000318a:	e8 31 e5 ff ff       	callq  ffffffff800016c0 <kbd_handle>
                break;
ffffffff8000318f:	e9 2e ff ff ff       	jmpq   ffffffff800030c2 <interrupt_handler+0x52>
ffffffff80003194:	0f 1f 40 00          	nopl   0x0(%rax)
            printf("INT: %d  IRQ: %d  \n", frame->int_no, irq);
ffffffff80003198:	48 89 ea             	mov    %rbp,%rdx
ffffffff8000319b:	48 c7 c7 77 46 00 80 	mov    $0xffffffff80004677,%rdi
ffffffff800031a2:	31 c0                	xor    %eax,%eax
ffffffff800031a4:	e8 87 f9 ff ff       	callq  ffffffff80002b30 <printf_>
ffffffff800031a9:	e9 14 ff ff ff       	jmpq   ffffffff800030c2 <interrupt_handler+0x52>
