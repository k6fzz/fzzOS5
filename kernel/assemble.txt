
./bin/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <to_usermode>:
ffffffff80000000:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000003:	48 89 f4             	mov    %rsi,%rsp
ffffffff80000006:	41 bb 02 02 00 00    	mov    $0x202,%r11d
ffffffff8000000c:	0f 07                	sysret 

ffffffff8000000e <enable_sce>:
ffffffff8000000e:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff80000013:	0f 32                	rdmsr  
ffffffff80000015:	83 c8 01             	or     $0x1,%eax
ffffffff80000018:	0f 30                	wrmsr  
ffffffff8000001a:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff8000001f:	0f 32                	rdmsr  
ffffffff80000021:	ba 08 00 18 00       	mov    $0x180008,%edx
ffffffff80000026:	0f 30                	wrmsr  
ffffffff80000028:	c3                   	retq   

ffffffff80000029 <enable_sce.end>:
ffffffff80000029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80000030 <read_cr3>:
ffffffff80000030:	0f 20 d8             	mov    %cr3,%rax
ffffffff80000033:	c3                   	retq   

ffffffff80000034 <write_cr3>:
ffffffff80000034:	0f 22 df             	mov    %rdi,%cr3
ffffffff80000037:	c3                   	retq   

ffffffff80000038 <vmm_flush_tlb>:
ffffffff80000038:	0f 01 3f             	invlpg (%rdi)
ffffffff8000003b:	c3                   	retq   

ffffffff8000003c <vmm_flush_tlb.end>:
ffffffff8000003c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000040 <gdt_load>:
ffffffff80000040:	0f 01 17             	lgdt   (%rdi)
ffffffff80000043:	55                   	push   %rbp
ffffffff80000044:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000047:	6a 10                	pushq  $0x10
ffffffff80000049:	55                   	push   %rbp
ffffffff8000004a:	9c                   	pushfq 
ffffffff8000004b:	6a 08                	pushq  $0x8
ffffffff8000004d:	68 54 00 00 80       	pushq  $0xffffffff80000054
ffffffff80000052:	48 cf                	iretq  

ffffffff80000054 <gdt_load.trampoline>:
ffffffff80000054:	5d                   	pop    %rbp
ffffffff80000055:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80000059:	8e d8                	mov    %eax,%ds
ffffffff8000005b:	8e c0                	mov    %eax,%es
ffffffff8000005d:	8e e0                	mov    %eax,%fs
ffffffff8000005f:	8e e8                	mov    %eax,%gs
ffffffff80000061:	8e d0                	mov    %eax,%ss
ffffffff80000063:	66 8b 06             	mov    (%rsi),%ax
ffffffff80000066:	0f 00 d8             	ltr    %ax
ffffffff80000069:	c3                   	retq   

ffffffff8000006a <gdt_load.end>:
ffffffff8000006a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000070 <read_cr2>:
ffffffff80000070:	0f 20 d0             	mov    %cr2,%rax
ffffffff80000073:	c3                   	retq   

ffffffff80000074 <_interrupt_common>:
ffffffff80000074:	fc                   	cld    
ffffffff80000075:	50                   	push   %rax
ffffffff80000076:	53                   	push   %rbx
ffffffff80000077:	51                   	push   %rcx
ffffffff80000078:	52                   	push   %rdx
ffffffff80000079:	56                   	push   %rsi
ffffffff8000007a:	57                   	push   %rdi
ffffffff8000007b:	55                   	push   %rbp
ffffffff8000007c:	41 50                	push   %r8
ffffffff8000007e:	41 51                	push   %r9
ffffffff80000080:	41 52                	push   %r10
ffffffff80000082:	41 53                	push   %r11
ffffffff80000084:	41 54                	push   %r12
ffffffff80000086:	41 55                	push   %r13
ffffffff80000088:	41 56                	push   %r14
ffffffff8000008a:	41 57                	push   %r15
ffffffff8000008c:	48 89 e7             	mov    %rsp,%rdi
ffffffff8000008f:	e8 8c 33 00 00       	callq  ffffffff80003420 <interrupt_handler>
ffffffff80000094:	48 89 c4             	mov    %rax,%rsp
ffffffff80000097:	41 5f                	pop    %r15
ffffffff80000099:	41 5e                	pop    %r14
ffffffff8000009b:	41 5d                	pop    %r13
ffffffff8000009d:	41 5c                	pop    %r12
ffffffff8000009f:	41 5b                	pop    %r11
ffffffff800000a1:	41 5a                	pop    %r10
ffffffff800000a3:	41 59                	pop    %r9
ffffffff800000a5:	41 58                	pop    %r8
ffffffff800000a7:	5d                   	pop    %rbp
ffffffff800000a8:	5f                   	pop    %rdi
ffffffff800000a9:	5e                   	pop    %rsi
ffffffff800000aa:	5a                   	pop    %rdx
ffffffff800000ab:	59                   	pop    %rcx
ffffffff800000ac:	5b                   	pop    %rbx
ffffffff800000ad:	58                   	pop    %rax
ffffffff800000ae:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800000b2:	48 cf                	iretq  

ffffffff800000b4 <_interrupt0>:
ffffffff800000b4:	6a 00                	pushq  $0x0
ffffffff800000b6:	6a 00                	pushq  $0x0
ffffffff800000b8:	eb ba                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000ba <_interrupt1>:
ffffffff800000ba:	6a 00                	pushq  $0x0
ffffffff800000bc:	6a 01                	pushq  $0x1
ffffffff800000be:	eb b4                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000c0 <_interrupt2>:
ffffffff800000c0:	6a 00                	pushq  $0x0
ffffffff800000c2:	6a 02                	pushq  $0x2
ffffffff800000c4:	eb ae                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000c6 <_interrupt3>:
ffffffff800000c6:	6a 00                	pushq  $0x0
ffffffff800000c8:	6a 03                	pushq  $0x3
ffffffff800000ca:	eb a8                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000cc <_interrupt4>:
ffffffff800000cc:	6a 00                	pushq  $0x0
ffffffff800000ce:	6a 04                	pushq  $0x4
ffffffff800000d0:	eb a2                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000d2 <_interrupt5>:
ffffffff800000d2:	6a 00                	pushq  $0x0
ffffffff800000d4:	6a 05                	pushq  $0x5
ffffffff800000d6:	eb 9c                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000d8 <_interrupt6>:
ffffffff800000d8:	6a 00                	pushq  $0x0
ffffffff800000da:	6a 06                	pushq  $0x6
ffffffff800000dc:	eb 96                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000de <_interrupt7>:
ffffffff800000de:	6a 00                	pushq  $0x0
ffffffff800000e0:	6a 07                	pushq  $0x7
ffffffff800000e2:	eb 90                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000e4 <_interrupt8>:
ffffffff800000e4:	6a 08                	pushq  $0x8
ffffffff800000e6:	eb 8c                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000e8 <_interrupt9>:
ffffffff800000e8:	6a 00                	pushq  $0x0
ffffffff800000ea:	6a 09                	pushq  $0x9
ffffffff800000ec:	eb 86                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000ee <_interrupt10>:
ffffffff800000ee:	6a 0a                	pushq  $0xa
ffffffff800000f0:	eb 82                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000f2 <_interrupt11>:
ffffffff800000f2:	6a 0b                	pushq  $0xb
ffffffff800000f4:	e9 7b ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800000f9 <_interrupt12>:
ffffffff800000f9:	6a 0c                	pushq  $0xc
ffffffff800000fb:	e9 74 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000100 <_interrupt13>:
ffffffff80000100:	6a 0d                	pushq  $0xd
ffffffff80000102:	e9 6d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000107 <_interrupt14>:
ffffffff80000107:	6a 0e                	pushq  $0xe
ffffffff80000109:	e9 66 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000010e <_interrupt15>:
ffffffff8000010e:	6a 00                	pushq  $0x0
ffffffff80000110:	6a 0f                	pushq  $0xf
ffffffff80000112:	e9 5d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000117 <_interrupt16>:
ffffffff80000117:	6a 00                	pushq  $0x0
ffffffff80000119:	6a 10                	pushq  $0x10
ffffffff8000011b:	e9 54 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000120 <_interrupt17>:
ffffffff80000120:	6a 11                	pushq  $0x11
ffffffff80000122:	e9 4d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000127 <_interrupt18>:
ffffffff80000127:	6a 00                	pushq  $0x0
ffffffff80000129:	6a 12                	pushq  $0x12
ffffffff8000012b:	e9 44 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000130 <_interrupt19>:
ffffffff80000130:	6a 00                	pushq  $0x0
ffffffff80000132:	6a 13                	pushq  $0x13
ffffffff80000134:	e9 3b ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000139 <_interrupt20>:
ffffffff80000139:	6a 00                	pushq  $0x0
ffffffff8000013b:	6a 14                	pushq  $0x14
ffffffff8000013d:	e9 32 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000142 <_interrupt21>:
ffffffff80000142:	6a 00                	pushq  $0x0
ffffffff80000144:	6a 15                	pushq  $0x15
ffffffff80000146:	e9 29 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000014b <_interrupt22>:
ffffffff8000014b:	6a 00                	pushq  $0x0
ffffffff8000014d:	6a 16                	pushq  $0x16
ffffffff8000014f:	e9 20 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000154 <_interrupt23>:
ffffffff80000154:	6a 00                	pushq  $0x0
ffffffff80000156:	6a 17                	pushq  $0x17
ffffffff80000158:	e9 17 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000015d <_interrupt24>:
ffffffff8000015d:	6a 00                	pushq  $0x0
ffffffff8000015f:	6a 18                	pushq  $0x18
ffffffff80000161:	e9 0e ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000166 <_interrupt25>:
ffffffff80000166:	6a 00                	pushq  $0x0
ffffffff80000168:	6a 19                	pushq  $0x19
ffffffff8000016a:	e9 05 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000016f <_interrupt26>:
ffffffff8000016f:	6a 00                	pushq  $0x0
ffffffff80000171:	6a 1a                	pushq  $0x1a
ffffffff80000173:	e9 fc fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000178 <_interrupt27>:
ffffffff80000178:	6a 00                	pushq  $0x0
ffffffff8000017a:	6a 1b                	pushq  $0x1b
ffffffff8000017c:	e9 f3 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000181 <_interrupt28>:
ffffffff80000181:	6a 00                	pushq  $0x0
ffffffff80000183:	6a 1c                	pushq  $0x1c
ffffffff80000185:	e9 ea fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000018a <_interrupt29>:
ffffffff8000018a:	6a 00                	pushq  $0x0
ffffffff8000018c:	6a 1d                	pushq  $0x1d
ffffffff8000018e:	e9 e1 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000193 <_interrupt30>:
ffffffff80000193:	6a 1e                	pushq  $0x1e
ffffffff80000195:	e9 da fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000019a <_interrupt31>:
ffffffff8000019a:	6a 00                	pushq  $0x0
ffffffff8000019c:	6a 1f                	pushq  $0x1f
ffffffff8000019e:	e9 d1 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001a3 <_interrupt32>:
ffffffff800001a3:	6a 00                	pushq  $0x0
ffffffff800001a5:	6a 20                	pushq  $0x20
ffffffff800001a7:	e9 c8 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001ac <_interrupt33>:
ffffffff800001ac:	6a 00                	pushq  $0x0
ffffffff800001ae:	6a 21                	pushq  $0x21
ffffffff800001b0:	e9 bf fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001b5 <_interrupt34>:
ffffffff800001b5:	6a 00                	pushq  $0x0
ffffffff800001b7:	6a 22                	pushq  $0x22
ffffffff800001b9:	e9 b6 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001be <_interrupt35>:
ffffffff800001be:	6a 00                	pushq  $0x0
ffffffff800001c0:	6a 23                	pushq  $0x23
ffffffff800001c2:	e9 ad fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001c7 <_interrupt36>:
ffffffff800001c7:	6a 00                	pushq  $0x0
ffffffff800001c9:	6a 24                	pushq  $0x24
ffffffff800001cb:	e9 a4 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001d0 <_interrupt37>:
ffffffff800001d0:	6a 00                	pushq  $0x0
ffffffff800001d2:	6a 25                	pushq  $0x25
ffffffff800001d4:	e9 9b fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001d9 <_interrupt38>:
ffffffff800001d9:	6a 00                	pushq  $0x0
ffffffff800001db:	6a 26                	pushq  $0x26
ffffffff800001dd:	e9 92 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001e2 <_interrupt39>:
ffffffff800001e2:	6a 00                	pushq  $0x0
ffffffff800001e4:	6a 27                	pushq  $0x27
ffffffff800001e6:	e9 89 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001eb <_interrupt40>:
ffffffff800001eb:	6a 00                	pushq  $0x0
ffffffff800001ed:	6a 28                	pushq  $0x28
ffffffff800001ef:	e9 80 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001f4 <_interrupt41>:
ffffffff800001f4:	6a 00                	pushq  $0x0
ffffffff800001f6:	6a 29                	pushq  $0x29
ffffffff800001f8:	e9 77 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001fd <_interrupt42>:
ffffffff800001fd:	6a 00                	pushq  $0x0
ffffffff800001ff:	6a 2a                	pushq  $0x2a
ffffffff80000201:	e9 6e fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000206 <_interrupt43>:
ffffffff80000206:	6a 00                	pushq  $0x0
ffffffff80000208:	6a 2b                	pushq  $0x2b
ffffffff8000020a:	e9 65 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000020f <_interrupt44>:
ffffffff8000020f:	6a 00                	pushq  $0x0
ffffffff80000211:	6a 2c                	pushq  $0x2c
ffffffff80000213:	e9 5c fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000218 <_interrupt45>:
ffffffff80000218:	6a 00                	pushq  $0x0
ffffffff8000021a:	6a 2d                	pushq  $0x2d
ffffffff8000021c:	e9 53 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000221 <_interrupt46>:
ffffffff80000221:	6a 00                	pushq  $0x0
ffffffff80000223:	6a 2e                	pushq  $0x2e
ffffffff80000225:	e9 4a fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000022a <_interrupt47>:
ffffffff8000022a:	6a 00                	pushq  $0x0
ffffffff8000022c:	6a 2f                	pushq  $0x2f
ffffffff8000022e:	e9 41 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000233 <_interrupt127>:
ffffffff80000233:	6a 00                	pushq  $0x0
ffffffff80000235:	6a 7f                	pushq  $0x7f
ffffffff80000237:	e9 38 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000023c <_interrupt128>:
ffffffff8000023c:	6a 00                	pushq  $0x0
ffffffff8000023e:	68 80 00 00 00       	pushq  $0x80
ffffffff80000243:	e9 2c fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000248 <isr_stub_table>:
ffffffff80000248:	b4 00 00 80 ff ff ff ff ba 00 00 80 ff ff ff ff     ................
ffffffff80000258:	c0 00 00 80 ff ff ff ff c6 00 00 80 ff ff ff ff     ................
ffffffff80000268:	cc 00 00 80 ff ff ff ff d2 00 00 80 ff ff ff ff     ................
ffffffff80000278:	d8 00 00 80 ff ff ff ff de 00 00 80 ff ff ff ff     ................
ffffffff80000288:	e4 00 00 80 ff ff ff ff e8 00 00 80 ff ff ff ff     ................
ffffffff80000298:	ee 00 00 80 ff ff ff ff f2 00 00 80 ff ff ff ff     ................
ffffffff800002a8:	f9 00 00 80 ff ff ff ff 00 01 00 80 ff ff ff ff     ................
ffffffff800002b8:	07 01 00 80 ff ff ff ff 0e 01 00 80 ff ff ff ff     ................
ffffffff800002c8:	17 01 00 80 ff ff ff ff 20 01 00 80 ff ff ff ff     ........ .......
ffffffff800002d8:	27 01 00 80 ff ff ff ff 30 01 00 80 ff ff ff ff     '.......0.......
ffffffff800002e8:	39 01 00 80 ff ff ff ff 42 01 00 80 ff ff ff ff     9.......B.......
ffffffff800002f8:	4b 01 00 80 ff ff ff ff 54 01 00 80 ff ff ff ff     K.......T.......
ffffffff80000308:	5d 01 00 80 ff ff ff ff 66 01 00 80 ff ff ff ff     ].......f.......
ffffffff80000318:	6f 01 00 80 ff ff ff ff 78 01 00 80 ff ff ff ff     o.......x.......
ffffffff80000328:	81 01 00 80 ff ff ff ff 8a 01 00 80 ff ff ff ff     ................
ffffffff80000338:	93 01 00 80 ff ff ff ff 9a 01 00 80 ff ff ff ff     ................
ffffffff80000348:	a3 01 00 80 ff ff ff ff ac 01 00 80 ff ff ff ff     ................
ffffffff80000358:	b5 01 00 80 ff ff ff ff be 01 00 80 ff ff ff ff     ................
ffffffff80000368:	c7 01 00 80 ff ff ff ff d0 01 00 80 ff ff ff ff     ................
ffffffff80000378:	d9 01 00 80 ff ff ff ff e2 01 00 80 ff ff ff ff     ................
ffffffff80000388:	eb 01 00 80 ff ff ff ff f4 01 00 80 ff ff ff ff     ................
ffffffff80000398:	fd 01 00 80 ff ff ff ff 06 02 00 80 ff ff ff ff     ................
ffffffff800003a8:	0f 02 00 80 ff ff ff ff 18 02 00 80 ff ff ff ff     ................
ffffffff800003b8:	21 02 00 80 ff ff ff ff 2a 02 00 80 ff ff ff ff     !.......*.......
ffffffff800003c8:	33 02 00 80 ff ff ff ff 3c 02 00 80 ff ff ff ff     3.......<.......

ffffffff800003d8 <idt_load>:
ffffffff800003d8:	0f 01 1f             	lidt   (%rdi)
ffffffff800003db:	fb                   	sti    
ffffffff800003dc:	c3                   	retq   

ffffffff800003dd <int_test>:
ffffffff800003dd:	cd 7f                	int    $0x7f
ffffffff800003df:	c3                   	retq   

ffffffff800003e0 <user_init>:
extern void enable_sce();

void user_init()
{

}
ffffffff800003e0:	f3 c3                	repz retq 
ffffffff800003e2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800003e9:	00 00 00 00 
ffffffff800003ed:	0f 1f 00             	nopl   (%rax)

ffffffff800003f0 <user_enter>:


void user_enter(void* func, uint8_t* stack)
{

ffffffff800003f0:	f3 c3                	repz retq 
ffffffff800003f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800003f9:	00 00 00 
ffffffff800003fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000400 <outb>:
#include <stdint.h>
#include <stddef.h>

void outb(uint16_t port, uint8_t val)
{
    asm volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80000400:	89 f0                	mov    %esi,%eax
ffffffff80000402:	89 fa                	mov    %edi,%edx
ffffffff80000404:	ee                   	out    %al,(%dx)
}
ffffffff80000405:	c3                   	retq   
ffffffff80000406:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000040d:	00 00 00 

ffffffff80000410 <inb>:

uint8_t inb(uint16_t port)
{
    uint8_t ret;
    asm volatile ( "inb %1, %0"
ffffffff80000410:	89 fa                	mov    %edi,%edx
ffffffff80000412:	ec                   	in     (%dx),%al
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
}
ffffffff80000413:	c3                   	retq   
ffffffff80000414:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000041b:	00 00 00 00 
ffffffff8000041f:	90                   	nop

ffffffff80000420 <io_wait>:
    asm volatile ( "inb %1, %0"
ffffffff80000420:	e4 80                	in     $0x80,%al

void io_wait()
{
    inb(0x80);
ffffffff80000422:	c3                   	retq   
ffffffff80000423:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000042a:	00 00 00 
ffffffff8000042d:	0f 1f 00             	nopl   (%rax)

ffffffff80000430 <schedule>:
ffffffff80000430:	f3 c3                	repz retq 
ffffffff80000432:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000439:	00 00 00 00 
ffffffff8000043d:	0f 1f 00             	nopl   (%rax)

ffffffff80000440 <scheduler_init>:
}

void scheduler_init()
{

ffffffff80000440:	f3 c3                	repz retq 
ffffffff80000442:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000449:	00 00 00 
ffffffff8000044c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000450 <stivale2_get_tag>:
};



void *stivale2_get_tag(struct stivale2_struct *stivale2_struct, uint64_t id) {
    struct stivale2_tag *current_tag = (void *)stivale2_struct->tags;
ffffffff80000450:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
    for (;;) {
        if (current_tag == NULL) {
ffffffff80000457:	48 85 c0             	test   %rax,%rax
ffffffff8000045a:	74 1a                	je     ffffffff80000476 <stivale2_get_tag+0x26>
            return NULL;
        }
        if (current_tag->identifier == id) {
ffffffff8000045c:	48 3b 30             	cmp    (%rax),%rsi
ffffffff8000045f:	75 0c                	jne    ffffffff8000046d <stivale2_get_tag+0x1d>
ffffffff80000461:	eb 1d                	jmp    ffffffff80000480 <stivale2_get_tag+0x30>
ffffffff80000463:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80000468:	48 39 30             	cmp    %rsi,(%rax)
ffffffff8000046b:	74 09                	je     ffffffff80000476 <stivale2_get_tag+0x26>
            return current_tag;
        }
        current_tag = (void *)current_tag->next;
ffffffff8000046d:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff80000471:	48 85 c0             	test   %rax,%rax
ffffffff80000474:	75 f2                	jne    ffffffff80000468 <stivale2_get_tag+0x18>
    }
}
ffffffff80000476:	f3 c3                	repz retq 
ffffffff80000478:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000047f:	00 
ffffffff80000480:	f3 c3                	repz retq 
ffffffff80000482:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000489:	00 00 00 00 
ffffffff8000048d:	0f 1f 00             	nopl   (%rax)

ffffffff80000490 <_start>:
    struct stivale2_tag *current_tag = (void *)stivale2_struct->tags;
ffffffff80000490:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
        if (current_tag == NULL) {
ffffffff80000497:	48 85 c0             	test   %rax,%rax
ffffffff8000049a:	74 2c                	je     ffffffff800004c8 <_start+0x38>
        if (current_tag->identifier == id) {
ffffffff8000049c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8000049f:	48 be 74 09 3b 23 c3 	movabs $0xc2b3f4c3233b0974,%rsi
ffffffff800004a6:	f4 b3 c2 
ffffffff800004a9:	48 39 f2             	cmp    %rsi,%rdx
ffffffff800004ac:	0f 84 31 01 00 00    	je     ffffffff800005e3 <_start+0x153>
ffffffff800004b2:	48 89 c1             	mov    %rax,%rcx
ffffffff800004b5:	eb 05                	jmp    ffffffff800004bc <_start+0x2c>
ffffffff800004b7:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800004ba:	74 0f                	je     ffffffff800004cb <_start+0x3b>
        current_tag = (void *)current_tag->next;
ffffffff800004bc:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800004c0:	48 85 c9             	test   %rcx,%rcx
ffffffff800004c3:	75 f2                	jne    ffffffff800004b7 <_start+0x27>
ffffffff800004c5:	0f 1f 00             	nopl   (%rax)

    // Check if the tag was actually found.
    if (term_str_tag == NULL) {
        // It wasn't found, just hang...
        for (;;) {
            asm ("hlt");
ffffffff800004c8:	f4                   	hlt    
ffffffff800004c9:	eb fd                	jmp    ffffffff800004c8 <_start+0x38>
        }
    }

    void* term_write_ptr = (void *)term_str_tag->term_write;
    term_write = term_write_ptr;
ffffffff800004cb:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff800004cf:	48 89 0d 42 9a 00 00 	mov    %rcx,0x9a42(%rip)        # ffffffff80009f18 <term_write>
        if (current_tag->identifier == id) {
ffffffff800004d6:	48 b9 fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rcx
ffffffff800004dd:	61 64 50 
ffffffff800004e0:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800004e3:	0f 84 1f 01 00 00    	je     ffffffff80000608 <_start+0x178>
ffffffff800004e9:	48 89 c1             	mov    %rax,%rcx
ffffffff800004ec:	48 be fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rsi
ffffffff800004f3:	61 64 50 
ffffffff800004f6:	eb 05                	jmp    ffffffff800004fd <_start+0x6d>
ffffffff800004f8:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800004fb:	74 1e                	je     ffffffff8000051b <_start+0x8b>
        current_tag = (void *)current_tag->next;
ffffffff800004fd:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000501:	48 85 c9             	test   %rcx,%rcx
ffffffff80000504:	75 f2                	jne    ffffffff800004f8 <_start+0x68>
    //printf("Terminal Initialized\n");

    //Grab the Framebuffer
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000506:	48 c7 05 e7 99 00 00 	movq   $0x0,0x99e7(%rip)        # ffffffff80009ef8 <boot_info+0x18>
ffffffff8000050d:	00 00 00 00 
ffffffff80000511:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (boot_info.tag_framebuffer == NULL)
    {
    //    printf("Framebuffer Not Found\n");
        for( ;; ) 
            asm("hlt");
ffffffff80000518:	f4                   	hlt    
ffffffff80000519:	eb fd                	jmp    ffffffff80000518 <_start+0x88>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff8000051b:	48 89 0d d6 99 00 00 	mov    %rcx,0x99d6(%rip)        # ffffffff80009ef8 <boot_info+0x18>
        if (current_tag->identifier == id) {
ffffffff80000522:	48 b9 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rcx
ffffffff80000529:	f7 87 21 
ffffffff8000052c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000052f:	0f 84 c7 00 00 00    	je     ffffffff800005fc <_start+0x16c>
ffffffff80000535:	48 89 c1             	mov    %rax,%rcx
ffffffff80000538:	48 be 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rsi
ffffffff8000053f:	f7 87 21 
        current_tag = (void *)current_tag->next;
ffffffff80000542:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000546:	48 85 c9             	test   %rcx,%rcx
ffffffff80000549:	0f 84 84 00 00 00    	je     ffffffff800005d3 <_start+0x143>
        if (current_tag->identifier == id) {
ffffffff8000054f:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000552:	75 ee                	jne    ffffffff80000542 <_start+0xb2>
    }
    //printf("Framebuffer found at %x\n", boot_info.tag_framebuffer->framebuffer_addr);

    //Memory Map
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000554:	48 89 0d 95 99 00 00 	mov    %rcx,0x9995(%rip)        # ffffffff80009ef0 <boot_info+0x10>
        if (current_tag->identifier == id) {
ffffffff8000055b:	48 b9 f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rcx
ffffffff80000562:	78 0d 06 
ffffffff80000565:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000568:	0f 84 85 00 00 00    	je     ffffffff800005f3 <_start+0x163>
ffffffff8000056e:	48 89 c1             	mov    %rax,%rcx
ffffffff80000571:	48 be f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rsi
ffffffff80000578:	78 0d 06 
ffffffff8000057b:	eb 05                	jmp    ffffffff80000582 <_start+0xf2>
ffffffff8000057d:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000580:	74 09                	je     ffffffff8000058b <_start+0xfb>
        current_tag = (void *)current_tag->next;
ffffffff80000582:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000586:	48 85 c9             	test   %rcx,%rcx
ffffffff80000589:	75 f2                	jne    ffffffff8000057d <_start+0xed>
            asm("hlt");
    }
    //printf("Memory Map at %x\n", boot_info.tag_memmap);

    //Kernel Base Address
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff8000058b:	48 89 0d 4e 99 00 00 	mov    %rcx,0x994e(%rip)        # ffffffff80009ee0 <boot_info>
        if (current_tag->identifier == id) {
ffffffff80000592:	48 b9 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rcx
ffffffff80000599:	86 17 9e 
ffffffff8000059c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000059f:	74 1a                	je     ffffffff800005bb <_start+0x12b>
ffffffff800005a1:	48 ba 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rdx
ffffffff800005a8:	86 17 9e 
ffffffff800005ab:	eb 05                	jmp    ffffffff800005b2 <_start+0x122>
ffffffff800005ad:	48 39 10             	cmp    %rdx,(%rax)
ffffffff800005b0:	74 09                	je     ffffffff800005bb <_start+0x12b>
        current_tag = (void *)current_tag->next;
ffffffff800005b2:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff800005b6:	48 85 c0             	test   %rax,%rax
ffffffff800005b9:	75 f2                	jne    ffffffff800005ad <_start+0x11d>
{
ffffffff800005bb:	52                   	push   %rdx
    }
    //printf("Kernel Physical Base Address %x\n", boot_info.tag_kernel_base_address->physical_base_address);
    //printf("Kernel Virtual Base Address  %x\n", boot_info.tag_kernel_base_address->virtual_base_address);
    //printf("--------\n");

    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff800005bc:	48 89 05 45 99 00 00 	mov    %rax,0x9945(%rip)        # ffffffff80009f08 <boot_info+0x28>

    kernel();
ffffffff800005c3:	31 c0                	xor    %eax,%eax
ffffffff800005c5:	e8 86 2c 00 00       	callq  ffffffff80003250 <kernel>
ffffffff800005ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)


    // We should never get here, but just in case...
    for (;;) {
        asm ("hlt");
ffffffff800005d0:	f4                   	hlt    
ffffffff800005d1:	eb fd                	jmp    ffffffff800005d0 <_start+0x140>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005d3:	48 c7 05 12 99 00 00 	movq   $0x0,0x9912(%rip)        # ffffffff80009ef0 <boot_info+0x10>
ffffffff800005da:	00 00 00 00 
ffffffff800005de:	66 90                	xchg   %ax,%ax
            asm("hlt");
ffffffff800005e0:	f4                   	hlt    
ffffffff800005e1:	eb fd                	jmp    ffffffff800005e0 <_start+0x150>
    term_write = term_write_ptr;
ffffffff800005e3:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800005e7:	48 89 0d 2a 99 00 00 	mov    %rcx,0x992a(%rip)        # ffffffff80009f18 <term_write>
ffffffff800005ee:	e9 f6 fe ff ff       	jmpq   ffffffff800004e9 <_start+0x59>
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff800005f3:	48 89 05 e6 98 00 00 	mov    %rax,0x98e6(%rip)        # ffffffff80009ee0 <boot_info>
ffffffff800005fa:	eb a5                	jmp    ffffffff800005a1 <_start+0x111>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005fc:	48 89 05 ed 98 00 00 	mov    %rax,0x98ed(%rip)        # ffffffff80009ef0 <boot_info+0x10>
ffffffff80000603:	e9 66 ff ff ff       	jmpq   ffffffff8000056e <_start+0xde>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000608:	48 89 05 e9 98 00 00 	mov    %rax,0x98e9(%rip)        # ffffffff80009ef8 <boot_info+0x18>
ffffffff8000060f:	e9 21 ff ff ff       	jmpq   ffffffff80000535 <_start+0xa5>
ffffffff80000614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000061b:	00 00 00 
ffffffff8000061e:	66 90                	xchg   %ax,%ax

ffffffff80000620 <vmm_create_page_table>:
struct PageTable* kernel_cr3 = {0};

uint64_t magic = 0xdeadbeef;

struct PageTable* vmm_create_page_table()
{
ffffffff80000620:	53                   	push   %rbx
    void* page = pmm_allocpage();   //get a page
ffffffff80000621:	31 c0                	xor    %eax,%eax
ffffffff80000623:	e8 08 0d 00 00       	callq  ffffffff80001330 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000628:	48 85 c0             	test   %rax,%rax
    void* page = pmm_allocpage();   //get a page
ffffffff8000062b:	48 89 c3             	mov    %rax,%rbx
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000062e:	74 0f                	je     ffffffff8000063f <vmm_create_page_table+0x1f>

    memset((uint8_t*)page, 0, 4096);    //clear the page
ffffffff80000630:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff80000635:	31 f6                	xor    %esi,%esi
ffffffff80000637:	48 89 c7             	mov    %rax,%rdi
ffffffff8000063a:	e8 b1 2b 00 00       	callq  ffffffff800031f0 <memset>
    return (struct PageTable*)page;
    
    //return (struct PageTable*)phys_to_hh_data((uint64_t)page);
}
ffffffff8000063f:	48 89 d8             	mov    %rbx,%rax
ffffffff80000642:	5b                   	pop    %rbx
ffffffff80000643:	c3                   	retq   
ffffffff80000644:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000064b:	00 00 00 00 
ffffffff8000064f:	90                   	nop

ffffffff80000650 <vmm_map_page>:
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
    }
}

void vmm_map_page(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000650:	41 57                	push   %r15
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000652:	49 89 f7             	mov    %rsi,%r15
{
ffffffff80000655:	41 56                	push   %r14
ffffffff80000657:	41 55                	push   %r13
    vaddr >>= 9;
ffffffff80000659:	49 89 f5             	mov    %rsi,%r13
{
ffffffff8000065c:	41 54                	push   %r12
ffffffff8000065e:	55                   	push   %rbp
ffffffff8000065f:	53                   	push   %rbx
    vaddr >>= 12;
ffffffff80000660:	48 89 f3             	mov    %rsi,%rbx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff80000663:	48 c1 ee 24          	shr    $0x24,%rsi
    vaddr >>= 12;
ffffffff80000667:	48 c1 eb 0c          	shr    $0xc,%rbx
    vaddr >>= 9;
ffffffff8000066b:	49 c1 ed 15          	shr    $0x15,%r13
ffffffff8000066f:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
{
ffffffff80000675:	48 83 ec 08          	sub    $0x8,%rsp
    vaddr >>= 9;
ffffffff80000679:	49 c1 ef 1e          	shr    $0x1e,%r15
ffffffff8000067d:	4c 8d 34 37          	lea    (%rdi,%rsi,1),%r14
    index1 = vaddr & 0x1ff;
ffffffff80000681:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
    index2 = vaddr & 0x1ff;
ffffffff80000687:	41 81 e5 ff 01 00 00 	and    $0x1ff,%r13d
    index3 = vaddr & 0x1ff;
ffffffff8000068e:	41 81 e7 ff 01 00 00 	and    $0x1ff,%r15d
{
ffffffff80000695:	48 89 d5             	mov    %rdx,%rbp
ffffffff80000698:	49 89 cc             	mov    %rcx,%r12
    if(pagemap->entry[index] & 1)
ffffffff8000069b:	49 8b 06             	mov    (%r14),%rax
ffffffff8000069e:	a8 01                	test   $0x1,%al
ffffffff800006a0:	74 5e                	je     ffffffff80000700 <vmm_map_page+0xb0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800006a2:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff800006a8:	4e 8d 34 f8          	lea    (%rax,%r15,8),%r14
    if(pagemap->entry[index] & 1)
ffffffff800006ac:	49 8b 06             	mov    (%r14),%rax
ffffffff800006af:	a8 01                	test   $0x1,%al
ffffffff800006b1:	74 3d                	je     ffffffff800006f0 <vmm_map_page+0xa0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800006b3:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff800006b9:	4e 8d 2c e8          	lea    (%rax,%r13,8),%r13
    if(pagemap->entry[index] & 1)
ffffffff800006bd:	49 8b 45 00          	mov    0x0(%r13),%rax
ffffffff800006c1:	a8 01                	test   $0x1,%al
ffffffff800006c3:	75 0e                	jne    ffffffff800006d3 <vmm_map_page+0x83>
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006c5:	31 c0                	xor    %eax,%eax
ffffffff800006c7:	e8 54 ff ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        pagemap->entry[index] = newentry | flags;
ffffffff800006cc:	4c 09 e0             	or     %r12,%rax
ffffffff800006cf:	49 89 45 00          	mov    %rax,0x0(%r13)
    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);
    PML1 = vmm_get_pagemap(PML2, index2, flags);

    PML1->entry[index1] = physical | flags;
ffffffff800006d3:	4c 09 e5             	or     %r12,%rbp
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800006d6:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML1->entry[index1] = physical | flags;
ffffffff800006dc:	48 89 2c d8          	mov    %rbp,(%rax,%rbx,8)

    //vmm_flush_tlb((void*)virtual);

}
ffffffff800006e0:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800006e4:	5b                   	pop    %rbx
ffffffff800006e5:	5d                   	pop    %rbp
ffffffff800006e6:	41 5c                	pop    %r12
ffffffff800006e8:	41 5d                	pop    %r13
ffffffff800006ea:	41 5e                	pop    %r14
ffffffff800006ec:	41 5f                	pop    %r15
ffffffff800006ee:	c3                   	retq   
ffffffff800006ef:	90                   	nop
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006f0:	31 c0                	xor    %eax,%eax
ffffffff800006f2:	e8 29 ff ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        pagemap->entry[index] = newentry | flags;
ffffffff800006f7:	4c 09 e0             	or     %r12,%rax
ffffffff800006fa:	49 89 06             	mov    %rax,(%r14)
ffffffff800006fd:	eb b4                	jmp    ffffffff800006b3 <vmm_map_page+0x63>
ffffffff800006ff:	90                   	nop
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff80000700:	31 c0                	xor    %eax,%eax
ffffffff80000702:	e8 19 ff ff ff       	callq  ffffffff80000620 <vmm_create_page_table>
        pagemap->entry[index] = newentry | flags;
ffffffff80000707:	4c 09 e0             	or     %r12,%rax
ffffffff8000070a:	49 89 06             	mov    %rax,(%r14)
ffffffff8000070d:	eb 93                	jmp    ffffffff800006a2 <vmm_map_page+0x52>
ffffffff8000070f:	90                   	nop

ffffffff80000710 <vmm_pagewalk>:
uint64_t vmm_pagewalk(uint64_t vaddr, uint64_t* cr3)
{
    uint64_t* PML4 = (uint64_t*)(phys_to_hh_data((uint64_t)cr3));
    
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
ffffffff80000710:	49 89 f8             	mov    %rdi,%r8
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000713:	48 89 f9             	mov    %rdi,%rcx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000716:	48 89 fa             	mov    %rdi,%rdx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000719:	48 c1 ef 27          	shr    $0x27,%rdi
    index4 = vaddr & 0x1ff;
   
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff8000071d:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80000724:	80 ff ff 
{
ffffffff80000727:	53                   	push   %rbx
    index4 = vaddr & 0x1ff;
ffffffff80000728:	81 e7 ff 01 00 00    	and    $0x1ff,%edi
    vaddr >>= 9;
ffffffff8000072e:	48 c1 ea 1e          	shr    $0x1e,%rdx
    vaddr >>= 9;
ffffffff80000732:	48 c1 e9 15          	shr    $0x15,%rcx
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff80000736:	48 8d 34 fe          	lea    (%rsi,%rdi,8),%rsi
    index3 = vaddr & 0x1ff;
ffffffff8000073a:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    index2 = vaddr & 0x1ff;
ffffffff80000740:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
    vaddr >>= 12;
ffffffff80000746:	49 c1 e8 0c          	shr    $0xc,%r8
    return addr - 0xFFFF800000000000;
}

static inline uint64_t phys_to_hh_data(uint64_t addr)
{
    return 0xFFFF800000000000 + addr;
ffffffff8000074a:	48 8b 1c 06          	mov    (%rsi,%rax,1),%rbx
    index1 = vaddr & 0x1ff;
ffffffff8000074e:	41 81 e0 ff 01 00 00 	and    $0x1ff,%r8d
ffffffff80000755:	48 01 c3             	add    %rax,%rbx
ffffffff80000758:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PDE = (uint64_t*)((phys_to_hh_data(PDPTE[index3]) >> 12) * 4096);
ffffffff8000075b:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff80000762:	48 8b 1c d6          	mov    (%rsi,%rdx,8),%rbx
ffffffff80000766:	48 01 c3             	add    %rax,%rbx
ffffffff80000769:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PTE = (uint64_t*)((phys_to_hh_data(PDE[index2]) >> 12) * 4096);
ffffffff8000076c:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff80000773:	48 8b 1c ce          	mov    (%rsi,%rcx,8),%rbx
ffffffff80000777:	48 01 c3             	add    %rax,%rbx
ffffffff8000077a:	48 89 de             	mov    %rbx,%rsi
    return addr - 0xFFFF800000000000;
ffffffff8000077d:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff80000784:	80 00 00 
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff80000787:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
    return 0xFFFF800000000000 + addr;
ffffffff8000078e:	4a 03 04 c6          	add    (%rsi,%r8,8),%rax

    uint64_t pageaddr = hh_data_to_phys((uint64_t)PD);
    
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff80000792:	48 89 fe             	mov    %rdi,%rsi
ffffffff80000795:	48 c7 c7 a0 45 00 80 	mov    $0xffffffff800045a0,%rdi
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff8000079c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    return addr - 0xFFFF800000000000;
ffffffff800007a2:	48 01 c3             	add    %rax,%rbx
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff800007a5:	31 c0                	xor    %eax,%eax
ffffffff800007a7:	49 89 d9             	mov    %rbx,%r9
ffffffff800007aa:	e8 21 27 00 00       	callq  ffffffff80002ed0 <printf_>
    
    
    pageaddr >>= 12;
    pageaddr *= 4096;
ffffffff800007af:	48 89 d8             	mov    %rbx,%rax

    return pageaddr;
}
ffffffff800007b2:	5b                   	pop    %rbx
ffffffff800007b3:	c3                   	retq   
ffffffff800007b4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800007bb:	00 00 00 00 
ffffffff800007bf:	90                   	nop

ffffffff800007c0 <vmm_init>:

void vmm_init()
{
ffffffff800007c0:	55                   	push   %rbp
ffffffff800007c1:	53                   	push   %rbx
    kernel_cr3 = (struct PageTable*)read_cr3();
ffffffff800007c2:	31 c0                	xor    %eax,%eax
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
 
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
    uint64_t kernel_virt = boot_info.tag_kernel_base_address->virtual_base_address;
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff800007c4:	48 c7 c3 c0 f3 00 80 	mov    $0xffffffff8000f3c0,%rbx
{
ffffffff800007cb:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff800007cf:	48 89 dd             	mov    %rbx,%rbp
    kernel_cr3 = (struct PageTable*)read_cr3();
ffffffff800007d2:	e8 59 f8 ff ff       	callq  ffffffff80000030 <read_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff800007d7:	48 c7 c7 b4 45 00 80 	mov    $0xffffffff800045b4,%rdi
ffffffff800007de:	48 89 c6             	mov    %rax,%rsi
    kernel_cr3 = (struct PageTable*)read_cr3();
ffffffff800007e1:	48 89 05 58 da 00 00 	mov    %rax,0xda58(%rip)        # ffffffff8000e240 <kernel_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff800007e8:	31 c0                	xor    %eax,%eax
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff800007ea:	48 81 ed 00 00 00 80 	sub    $0xffffffff80000000,%rbp
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff800007f1:	e8 da 26 00 00       	callq  ffffffff80002ed0 <printf_>
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff800007f6:	48 8b 05 e3 96 00 00 	mov    0x96e3(%rip),%rax        # ffffffff80009ee0 <boot_info>

    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff800007fd:	48 c7 c7 38 46 00 80 	mov    $0xffffffff80004638,%rdi
ffffffff80000804:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80000808:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff8000080c:	31 c0                	xor    %eax,%eax
ffffffff8000080e:	e8 bd 26 00 00       	callq  ffffffff80002ed0 <printf_>

    printf("Kernel: %p - %p Size: %d\n", &_start_of_kernel, &_end_of_kernel, kernel_size);
ffffffff80000813:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000816:	48 89 da             	mov    %rbx,%rdx
ffffffff80000819:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000820:	48 c7 c7 bd 45 00 80 	mov    $0xffffffff800045bd,%rdi
ffffffff80000827:	31 c0                	xor    %eax,%eax
ffffffff80000829:	e8 a2 26 00 00       	callq  ffffffff80002ed0 <printf_>
    printf("Text:   %p - %p \n", &_start_of_text, &_end_of_text);
ffffffff8000082e:	48 c7 c2 6e 35 00 80 	mov    $0xffffffff8000356e,%rdx
ffffffff80000835:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff8000083c:	48 c7 c7 d7 45 00 80 	mov    $0xffffffff800045d7,%rdi
ffffffff80000843:	31 c0                	xor    %eax,%eax
ffffffff80000845:	e8 86 26 00 00       	callq  ffffffff80002ed0 <printf_>
    printf("Data:   %p - %p \n", &_start_of_data, &_end_of_data);
ffffffff8000084a:	48 c7 c2 e0 7e 00 80 	mov    $0xffffffff80007ee0,%rdx
ffffffff80000851:	48 c7 c6 fc 68 00 80 	mov    $0xffffffff800068fc,%rsi
ffffffff80000858:	48 c7 c7 e9 45 00 80 	mov    $0xffffffff800045e9,%rdi
ffffffff8000085f:	31 c0                	xor    %eax,%eax
ffffffff80000861:	e8 6a 26 00 00       	callq  ffffffff80002ed0 <printf_>
    printf("ROData: %p - %p \n", &_start_of_rodata, &_end_of_rodata);
ffffffff80000866:	48 c7 c2 20 4e 00 80 	mov    $0xffffffff80004e20,%rdx
ffffffff8000086d:	48 c7 c6 a0 45 00 80 	mov    $0xffffffff800045a0,%rsi
ffffffff80000874:	48 c7 c7 fb 45 00 80 	mov    $0xffffffff800045fb,%rdi
ffffffff8000087b:	31 c0                	xor    %eax,%eax
ffffffff8000087d:	e8 4e 26 00 00       	callq  ffffffff80002ed0 <printf_>
    printf("BSS:    %p - %p \n", &_start_of_bss, &_end_of_bss);
ffffffff80000882:	48 c7 c2 c0 f3 00 80 	mov    $0xffffffff8000f3c0,%rdx
ffffffff80000889:	48 c7 c6 e0 7e 00 80 	mov    $0xffffffff80007ee0,%rsi
ffffffff80000890:	48 c7 c7 0d 46 00 80 	mov    $0xffffffff8000460d,%rdi
ffffffff80000897:	31 c0                	xor    %eax,%eax
ffffffff80000899:	e8 32 26 00 00       	callq  ffffffff80002ed0 <printf_>

    //vmm_pagewalk((uint64_t)&_start_of_kernel, (uint64_t*)read_cr3());
    //vmm_pagewalk((uint64_t)&_end_of_kernel, (uint64_t*)read_cr3());

    //Create the Kernel PML4 table
    RootPageDirectory = vmm_create_page_table();
ffffffff8000089e:	31 c0                	xor    %eax,%eax
ffffffff800008a0:	e8 7b fd ff ff       	callq  ffffffff80000620 <vmm_create_page_table>

    printf("Root = %p\n", RootPageDirectory);
ffffffff800008a5:	48 c7 c7 1f 46 00 80 	mov    $0xffffffff8000461f,%rdi
ffffffff800008ac:	48 89 c6             	mov    %rax,%rsi
    RootPageDirectory = vmm_create_page_table();
ffffffff800008af:	48 89 05 92 d9 00 00 	mov    %rax,0xd992(%rip)        # ffffffff8000e248 <RootPageDirectory>
    printf("Root = %p\n", RootPageDirectory);
ffffffff800008b6:	31 c0                	xor    %eax,%eax
ffffffff800008b8:	e8 13 26 00 00       	callq  ffffffff80002ed0 <printf_>
    //for(uint64_t i = 0; i < pmm_info.totalmem; i += 4096)
    //{
    //    vmm_map_page(RootPageDirectory, 0xFFFF00000000 + i, i, PTE_PRESENT | PTE_READWRITE);
    //}

    vmm_map_page(kernel_cr3, 0xFFFFFFFFC0001000, (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff800008bd:	31 c0                	xor    %eax,%eax
ffffffff800008bf:	e8 6c 0a 00 00       	callq  ffffffff80001330 <pmm_allocpage>
ffffffff800008c4:	48 8b 3d 75 d9 00 00 	mov    0xd975(%rip),%rdi        # ffffffff8000e240 <kernel_cr3>
ffffffff800008cb:	48 89 c2             	mov    %rax,%rdx
ffffffff800008ce:	48 c7 c6 00 10 00 c0 	mov    $0xffffffffc0001000,%rsi
ffffffff800008d5:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff800008da:	e8 71 fd ff ff       	callq  ffffffff80000650 <vmm_map_page>

    uint64_t* value = (uint64_t*)0xFFFFFFFFC0001000;

    *value = 0xdeadbeef;
ffffffff800008df:	b8 ef be ad de       	mov    $0xdeadbeef,%eax

    printf("Magic: %p\n", *value);
ffffffff800008e4:	48 c7 c7 2a 46 00 80 	mov    $0xffffffff8000462a,%rdi
    *value = 0xdeadbeef;
ffffffff800008eb:	48 89 04 25 00 10 00 	mov    %rax,0xffffffffc0001000
ffffffff800008f2:	c0 

    //vmm_pagewalk((uint64_t)&_start_of_kernel, (uint64_t*)RootPageDirectory);
    
}
ffffffff800008f3:	48 83 c4 08          	add    $0x8,%rsp
    printf("Magic: %p\n", *value);
ffffffff800008f7:	48 89 c6             	mov    %rax,%rsi
}
ffffffff800008fa:	5b                   	pop    %rbx
ffffffff800008fb:	5d                   	pop    %rbp
    printf("Magic: %p\n", *value);
ffffffff800008fc:	31 c0                	xor    %eax,%eax
ffffffff800008fe:	e9 cd 25 00 00       	jmpq   ffffffff80002ed0 <printf_>
ffffffff80000903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000090a:	00 00 00 
ffffffff8000090d:	0f 1f 00             	nopl   (%rax)

ffffffff80000910 <liballoc_lock>:

extern struct PageTable* kernel_cr3;

int liballoc_lock()
{
    asm("cli");
ffffffff80000910:	fa                   	cli    
    return 0;
}
ffffffff80000911:	31 c0                	xor    %eax,%eax
ffffffff80000913:	c3                   	retq   
ffffffff80000914:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000091b:	00 00 00 00 
ffffffff8000091f:	90                   	nop

ffffffff80000920 <liballoc_unlock>:


int liballoc_unlock()
{
    asm("sti");
ffffffff80000920:	fb                   	sti    
    return 0;
}
ffffffff80000921:	31 c0                	xor    %eax,%eax
ffffffff80000923:	c3                   	retq   
ffffffff80000924:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000092b:	00 00 00 00 
ffffffff8000092f:	90                   	nop

ffffffff80000930 <liballoc_free>:

int liballoc_free(void* page, size_t count)
{
    
}
ffffffff80000930:	f3 c3                	repz retq 
ffffffff80000932:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000939:	00 00 00 00 
ffffffff8000093d:	0f 1f 00             	nopl   (%rax)

ffffffff80000940 <liballoc_alloc>:

void* liballoc_alloc(size_t count)
{
    for(int i = 0; i < count; i++)
ffffffff80000940:	48 85 ff             	test   %rdi,%rdi
ffffffff80000943:	74 6b                	je     ffffffff800009b0 <liballoc_alloc+0x70>
{
ffffffff80000945:	55                   	push   %rbp
ffffffff80000946:	53                   	push   %rbx
ffffffff80000947:	89 fd                	mov    %edi,%ebp
    for(int i = 0; i < count; i++)
ffffffff80000949:	31 db                	xor    %ebx,%ebx
{
ffffffff8000094b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8000094f:	90                   	nop
    {
        vmm_map_page(kernel_cr3, ((uint64_t)kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000950:	31 c0                	xor    %eax,%eax
    for(int i = 0; i < count; i++)
ffffffff80000952:	83 c3 01             	add    $0x1,%ebx
        vmm_map_page(kernel_cr3, ((uint64_t)kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000955:	e8 d6 09 00 00       	callq  ffffffff80001330 <pmm_allocpage>
ffffffff8000095a:	48 8b 0d bf 95 00 00 	mov    0x95bf(%rip),%rcx        # ffffffff80009f20 <kernel_heap_top>
ffffffff80000961:	48 8b 3d d8 d8 00 00 	mov    0xd8d8(%rip),%rdi        # ffffffff8000e240 <kernel_cr3>
ffffffff80000968:	48 89 c2             	mov    %rax,%rdx
ffffffff8000096b:	48 8d b1 00 10 00 00 	lea    0x1000(%rcx),%rsi
ffffffff80000972:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80000977:	e8 d4 fc ff ff       	callq  ffffffff80000650 <vmm_map_page>
        kernel_heap_top += 4096;
ffffffff8000097c:	48 8b 05 9d 95 00 00 	mov    0x959d(%rip),%rax        # ffffffff80009f20 <kernel_heap_top>
ffffffff80000983:	48 05 00 80 00 00    	add    $0x8000,%rax
    for(int i = 0; i < count; i++)
ffffffff80000989:	39 eb                	cmp    %ebp,%ebx
        kernel_heap_top += 4096;
ffffffff8000098b:	48 89 05 8e 95 00 00 	mov    %rax,0x958e(%rip)        # ffffffff80009f20 <kernel_heap_top>
    for(int i = 0; i < count; i++)
ffffffff80000992:	75 bc                	jne    ffffffff80000950 <liballoc_alloc+0x10>
    }
    return (void*)(phys_to_hh_data((uint64_t)kernel_heap_top));
ffffffff80000994:	48 83 c4 08          	add    $0x8,%rsp
{
ffffffff80000998:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8000099f:	80 ff ff 
ffffffff800009a2:	48 01 d0             	add    %rdx,%rax
ffffffff800009a5:	5b                   	pop    %rbx
ffffffff800009a6:	5d                   	pop    %rbp
ffffffff800009a7:	c3                   	retq   
ffffffff800009a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800009af:	00 
ffffffff800009b0:	48 8b 05 69 95 00 00 	mov    0x9569(%rip),%rax        # ffffffff80009f20 <kernel_heap_top>
ffffffff800009b7:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff800009be:	80 ff ff 
ffffffff800009c1:	48 01 d0             	add    %rdx,%rax
ffffffff800009c4:	c3                   	retq   
ffffffff800009c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800009cc:	00 00 00 
ffffffff800009cf:	90                   	nop

ffffffff800009d0 <allocate_new_page>:
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
		st += sizeof(struct liballoc_minor);
ffffffff800009d0:	83 c7 50             	add    $0x50,%edi
{
ffffffff800009d3:	53                   	push   %rbx
ffffffff800009d4:	bb 10 00 00 00       	mov    $0x10,%ebx
ffffffff800009d9:	89 f8                	mov    %edi,%eax

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff800009db:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
ffffffff800009e1:	c1 e8 0c             	shr    $0xc,%eax
			st  = st / (l_pageSize);
		else
			st  = st / (l_pageSize) + 1;
ffffffff800009e4:	83 ff 01             	cmp    $0x1,%edi
ffffffff800009e7:	83 d8 ff             	sbb    $0xffffffff,%eax
ffffffff800009ea:	83 f8 10             	cmp    $0x10,%eax
ffffffff800009ed:	0f 43 d8             	cmovae %eax,%ebx

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff800009f0:	89 df                	mov    %ebx,%edi
ffffffff800009f2:	e8 49 ff ff ff       	callq  ffffffff80000940 <liballoc_alloc>

		if ( maj == NULL ) 
ffffffff800009f7:	48 85 c0             	test   %rax,%rax
ffffffff800009fa:	74 34                	je     ffffffff80000a30 <allocate_new_page+0x60>
			return NULL;	// uh oh, we ran out of memory.
		}
		
		maj->prev 	= NULL;
		maj->next 	= NULL;
		maj->pages 	= st;
ffffffff800009fc:	89 58 10             	mov    %ebx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff800009ff:	c1 e3 0c             	shl    $0xc,%ebx
		maj->prev 	= NULL;
ffffffff80000a02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80000a09:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80000a10:	00 
		maj->size 	= st * l_pageSize;
ffffffff80000a11:	89 58 14             	mov    %ebx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80000a14:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff80000a1b:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000a22:	00 

		l_allocated += maj->size;
ffffffff80000a23:	48 01 1d 46 d8 00 00 	add    %rbx,0xd846(%rip)        # ffffffff8000e270 <l_allocated>
		FLUSH();
		#endif
	
		
      return maj;
}
ffffffff80000a2a:	5b                   	pop    %rbx
ffffffff80000a2b:	c3                   	retq   
ffffffff80000a2c:	0f 1f 40 00          	nopl   0x0(%rax)
			l_warningCount += 1;
ffffffff80000a30:	48 83 05 28 d8 00 00 	addq   $0x1,0xd828(%rip)        # ffffffff8000e260 <l_warningCount>
ffffffff80000a37:	01 
}
ffffffff80000a38:	5b                   	pop    %rbx
ffffffff80000a39:	c3                   	retq   
ffffffff80000a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000a40 <kmalloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff80000a40:	41 57                	push   %r15
ffffffff80000a42:	41 56                	push   %r14
ffffffff80000a44:	41 55                	push   %r13
ffffffff80000a46:	41 54                	push   %r12
ffffffff80000a48:	49 89 fd             	mov    %rdi,%r13
ffffffff80000a4b:	55                   	push   %rbp
ffffffff80000a4c:	53                   	push   %rbx
ffffffff80000a4d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000a51:	eb 1a                	jmp    ffffffff80000a6d <kmalloc+0x2d>
ffffffff80000a53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80000a58:	31 c0                	xor    %eax,%eax
		return PREFIX(malloc)(1);
ffffffff80000a5a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		l_warningCount += 1;
ffffffff80000a60:	48 83 05 f8 d7 00 00 	addq   $0x1,0xd7f8(%rip)        # ffffffff8000e260 <l_warningCount>
ffffffff80000a67:	01 
		liballoc_unlock();
ffffffff80000a68:	e8 b3 fe ff ff       	callq  ffffffff80000920 <liballoc_unlock>
		size += ALIGNMENT + ALIGN_INFO;
ffffffff80000a6d:	4d 8d 65 20          	lea    0x20(%r13),%r12
	liballoc_lock();
ffffffff80000a71:	31 c0                	xor    %eax,%eax
ffffffff80000a73:	e8 98 fe ff ff       	callq  ffffffff80000910 <liballoc_lock>
	if ( size == 0 )
ffffffff80000a78:	4d 85 e4             	test   %r12,%r12
ffffffff80000a7b:	74 db                	je     ffffffff80000a58 <kmalloc+0x18>
	}
	

	if ( l_memRoot == NULL )
ffffffff80000a7d:	48 8b 35 fc d7 00 00 	mov    0xd7fc(%rip),%rsi        # ffffffff8000e280 <l_memRoot>
ffffffff80000a84:	48 85 f6             	test   %rsi,%rsi
ffffffff80000a87:	0f 84 c3 02 00 00    	je     ffffffff80000d50 <kmalloc+0x310>

	maj = l_memRoot;
	startedBet = 0;
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80000a8d:	48 8b 15 e4 d7 00 00 	mov    0xd7e4(%rip),%rdx        # ffffffff8000e278 <l_bestBet>
ffffffff80000a94:	49 8d 5d 48          	lea    0x48(%r13),%rbx
ffffffff80000a98:	48 85 d2             	test   %rdx,%rdx
ffffffff80000a9b:	0f 84 3f 02 00 00    	je     ffffffff80000ce0 <kmalloc+0x2a0>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000aa1:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000aa4:	8b 4a 18             	mov    0x18(%rdx),%ecx

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
		{
			maj = l_bestBet;
			startedBet = 1;
ffffffff80000aa7:	41 bf 01 00 00 00    	mov    $0x1,%r15d
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000aad:	41 89 c6             	mov    %eax,%r14d
ffffffff80000ab0:	41 29 ce             	sub    %ecx,%r14d
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80000ab3:	49 39 de             	cmp    %rbx,%r14
ffffffff80000ab6:	0f 86 b4 01 00 00    	jbe    ffffffff80000c70 <kmalloc+0x230>
		}
	}
	
	while ( maj != NULL )
	{
		diff  = maj->size - maj->usage;	
ffffffff80000abc:	29 c8                	sub    %ecx,%eax
										// free memory in the block

		if ( bestSize < diff )
ffffffff80000abe:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000ac1:	76 0a                	jbe    ffffffff80000acd <kmalloc+0x8d>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff80000ac3:	48 89 15 ae d7 00 00 	mov    %rdx,0xd7ae(%rip)        # ffffffff8000e278 <l_bestBet>
ffffffff80000aca:	49 89 c6             	mov    %rax,%r14
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000acd:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ad0:	73 22                	jae    ffffffff80000af4 <kmalloc+0xb4>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80000ad2:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff80000ad6:	48 85 c0             	test   %rax,%rax
ffffffff80000ad9:	0f 84 b9 00 00 00    	je     ffffffff80000b98 <kmalloc+0x158>
ffffffff80000adf:	48 89 c2             	mov    %rax,%rdx
ffffffff80000ae2:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000ae5:	8b 4a 18             	mov    0x18(%rdx),%ecx
		diff  = maj->size - maj->usage;	
ffffffff80000ae8:	29 c8                	sub    %ecx,%eax
		if ( bestSize < diff )
ffffffff80000aea:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000aed:	77 d4                	ja     ffffffff80000ac3 <kmalloc+0x83>
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000aef:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000af2:	72 de                	jb     ffffffff80000ad2 <kmalloc+0x92>
ffffffff80000af4:	48 89 d5             	mov    %rdx,%rbp
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80000af7:	48 8b 55 20          	mov    0x20(%rbp),%rdx
ffffffff80000afb:	48 85 d2             	test   %rdx,%rdx
ffffffff80000afe:	0f 84 7d 01 00 00    	je     ffffffff80000c81 <kmalloc+0x241>
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
		diff -= (uintptr_t)maj;
ffffffff80000b04:	48 89 d0             	mov    %rdx,%rax
ffffffff80000b07:	48 29 e8             	sub    %rbp,%rax
		diff -= sizeof(struct liballoc_major);
ffffffff80000b0a:	48 83 e8 28          	sub    $0x28,%rax

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff80000b0e:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000b11:	0f 83 62 02 00 00    	jae    ffffffff80000d79 <kmalloc+0x339>
		
			// Looping within the block now...
		while ( min != NULL )
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80000b17:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000b1b:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000b1e:	48 85 c9             	test   %rcx,%rcx
ffffffff80000b21:	74 25                	je     ffffffff80000b48 <kmalloc+0x108>
				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
					diff -= (uintptr_t)min;
ffffffff80000b23:	48 89 c8             	mov    %rcx,%rax
ffffffff80000b26:	48 29 d0             	sub    %rdx,%rax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000b29:	48 83 e8 28          	sub    $0x28,%rax
					diff -= min->size;
ffffffff80000b2d:	48 29 f0             	sub    %rsi,%rax
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000b30:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000b33:	0f 83 b7 00 00 00    	jae    ffffffff80000bf0 <kmalloc+0x1b0>
ffffffff80000b39:	48 89 ca             	mov    %rcx,%rdx
				if ( min->next == NULL )
ffffffff80000b3c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000b40:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000b43:	48 85 c9             	test   %rcx,%rcx
ffffffff80000b46:	75 db                	jne    ffffffff80000b23 <kmalloc+0xe3>
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80000b48:	8b 45 14             	mov    0x14(%rbp),%eax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000b4b:	48 8d 44 05 d8       	lea    -0x28(%rbp,%rax,1),%rax
ffffffff80000b50:	48 29 d0             	sub    %rdx,%rax
					diff -= min->size; 
ffffffff80000b53:	48 29 f0             	sub    %rsi,%rax
					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000b56:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000b59:	0f 83 99 01 00 00    	jae    ffffffff80000cf8 <kmalloc+0x2b8>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff80000b5f:	48 8b 55 08          	mov    0x8(%rbp),%rdx
ffffffff80000b63:	48 85 d2             	test   %rdx,%rdx
ffffffff80000b66:	0f 85 76 ff ff ff    	jne    ffffffff80000ae2 <kmalloc+0xa2>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff80000b6c:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000b70:	74 5e                	je     ffffffff80000bd0 <kmalloc+0x190>
				startedBet = 0;
				continue;
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000b72:	44 89 e7             	mov    %r12d,%edi
ffffffff80000b75:	e8 56 fe ff ff       	callq  ffffffff800009d0 <allocate_new_page>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000b7a:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000b7d:	48 89 c2             	mov    %rax,%rdx
ffffffff80000b80:	48 89 45 08          	mov    %rax,0x8(%rbp)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000b84:	0f 84 e1 01 00 00    	je     ffffffff80000d6b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000b8a:	48 89 28             	mov    %rbp,(%rax)
ffffffff80000b8d:	e9 50 ff ff ff       	jmpq   ffffffff80000ae2 <kmalloc+0xa2>
ffffffff80000b92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80000b98:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000b9c:	74 32                	je     ffffffff80000bd0 <kmalloc+0x190>
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000b9e:	44 89 e7             	mov    %r12d,%edi
ffffffff80000ba1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80000ba6:	e8 25 fe ff ff       	callq  ffffffff800009d0 <allocate_new_page>
ffffffff80000bab:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000bb0:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000bb3:	48 89 c5             	mov    %rax,%rbp
ffffffff80000bb6:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000bba:	0f 84 ab 01 00 00    	je     ffffffff80000d6b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000bc0:	48 89 10             	mov    %rdx,(%rax)
ffffffff80000bc3:	e9 2f ff ff ff       	jmpq   ffffffff80000af7 <kmalloc+0xb7>
ffffffff80000bc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000bcf:	00 
				maj = l_memRoot;
ffffffff80000bd0:	48 8b 15 a9 d6 00 00 	mov    0xd6a9(%rip),%rdx        # ffffffff8000e280 <l_memRoot>
	while ( maj != NULL )
ffffffff80000bd7:	48 85 d2             	test   %rdx,%rdx
ffffffff80000bda:	0f 84 8b 01 00 00    	je     ffffffff80000d6b <kmalloc+0x32b>
ffffffff80000be0:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000be3:	e9 fa fe ff ff       	jmpq   ffffffff80000ae2 <kmalloc+0xa2>
ffffffff80000be8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000bef:	00 
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000bf0:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
						l_inuse += size;
ffffffff80000bf4:	4c 01 25 6d d6 00 00 	add    %r12,0xd66d(%rip)        # ffffffff8000e268 <l_inuse>
						new_min->next = min->next;
ffffffff80000bfb:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
						min->next->prev = new_min;
ffffffff80000bff:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000c03:	48 8d 43 28          	lea    0x28(%rbx),%rax
						new_min->magic = LIBALLOC_MAGIC;
ffffffff80000c07:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
						ALIGN( p );
ffffffff80000c0e:	48 83 c3 60          	add    $0x60,%rbx
						new_min->prev = min;
ffffffff80000c12:	48 89 53 c8          	mov    %rdx,-0x38(%rbx)
						new_min->size = size;
ffffffff80000c16:	44 89 63 e4          	mov    %r12d,-0x1c(%rbx)
						new_min->req_size = req_size;
ffffffff80000c1a:	44 89 6b e8          	mov    %r13d,-0x18(%rbx)
						new_min->block = maj;
ffffffff80000c1e:	48 89 6b d8          	mov    %rbp,-0x28(%rbx)
						min->next->prev = new_min;
ffffffff80000c22:	48 89 01             	mov    %rax,(%rcx)
						min->next = new_min;
ffffffff80000c25:	48 89 42 08          	mov    %rax,0x8(%rdx)
						ALIGN( p );
ffffffff80000c29:	48 89 da             	mov    %rbx,%rdx
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000c2c:	41 8d 44 24 28       	lea    0x28(%r12),%eax
ffffffff80000c31:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80000c34:	83 e2 0f             	and    $0xf,%edx
ffffffff80000c37:	0f 84 93 00 00 00    	je     ffffffff80000cd0 <kmalloc+0x290>
ffffffff80000c3d:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000c42:	48 29 d0             	sub    %rdx,%rax
ffffffff80000c45:	48 01 c3             	add    %rax,%rbx
ffffffff80000c48:	83 c0 10             	add    $0x10,%eax
ffffffff80000c4b:	88 43 f0             	mov    %al,-0x10(%rbx)
						liballoc_unlock();		// release the lock
ffffffff80000c4e:	31 c0                	xor    %eax,%eax
ffffffff80000c50:	e8 cb fc ff ff       	callq  ffffffff80000920 <liballoc_unlock>
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
}
ffffffff80000c55:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80000c59:	48 89 d8             	mov    %rbx,%rax
ffffffff80000c5c:	5b                   	pop    %rbx
ffffffff80000c5d:	5d                   	pop    %rbp
ffffffff80000c5e:	41 5c                	pop    %r12
ffffffff80000c60:	41 5d                	pop    %r13
ffffffff80000c62:	41 5e                	pop    %r14
ffffffff80000c64:	41 5f                	pop    %r15
ffffffff80000c66:	c3                   	retq   
ffffffff80000c67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80000c6e:	00 00 
ffffffff80000c70:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80000c73:	8b 4e 18             	mov    0x18(%rsi),%ecx
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80000c76:	48 89 f2             	mov    %rsi,%rdx
	startedBet = 0;
ffffffff80000c79:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000c7c:	e9 3b fe ff ff       	jmpq   ffffffff80000abc <kmalloc+0x7c>
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80000c81:	48 8d 45 28          	lea    0x28(%rbp),%rax
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80000c85:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 		= NULL;
ffffffff80000c8c:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80000c93:	00 
			maj->first->next 		= NULL;
ffffffff80000c94:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff80000c9b:	00 
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80000c9c:	48 89 45 20          	mov    %rax,0x20(%rbp)
			ALIGN( p );
ffffffff80000ca0:	48 8d 5d 60          	lea    0x60(%rbp),%rbx
			maj->first->block 	= maj;
ffffffff80000ca4:	48 89 6d 38          	mov    %rbp,0x38(%rbp)
			maj->first->size 	= size;
ffffffff80000ca8:	44 89 65 44          	mov    %r12d,0x44(%rbp)
			maj->first->req_size 	= req_size;
ffffffff80000cac:	44 89 6d 48          	mov    %r13d,0x48(%rbp)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80000cb0:	41 8d 44 24 28       	lea    0x28(%r12),%eax
			l_inuse += size;
ffffffff80000cb5:	4c 01 25 ac d5 00 00 	add    %r12,0xd5ac(%rip)        # ffffffff8000e268 <l_inuse>
			ALIGN( p );
ffffffff80000cbc:	48 89 da             	mov    %rbx,%rdx
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80000cbf:	01 45 18             	add    %eax,0x18(%rbp)
			ALIGN( p );
ffffffff80000cc2:	83 e2 0f             	and    $0xf,%edx
ffffffff80000cc5:	0f 85 72 ff ff ff    	jne    ffffffff80000c3d <kmalloc+0x1fd>
ffffffff80000ccb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
						ALIGN( p );
ffffffff80000cd0:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000cd5:	e9 71 ff ff ff       	jmpq   ffffffff80000c4b <kmalloc+0x20b>
ffffffff80000cda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000ce0:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80000ce3:	8b 4e 18             	mov    0x18(%rsi),%ecx
	if ( l_bestBet != NULL )
ffffffff80000ce6:	48 89 f2             	mov    %rsi,%rdx
	unsigned long long bestSize = 0;
ffffffff80000ce9:	45 31 f6             	xor    %r14d,%r14d
	startedBet = 0;
ffffffff80000cec:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000cef:	e9 c8 fd ff ff       	jmpq   ffffffff80000abc <kmalloc+0x7c>
ffffffff80000cf4:	0f 1f 40 00          	nopl   0x0(%rax)
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000cf8:	48 01 d6             	add    %rdx,%rsi
						l_inuse += size;
ffffffff80000cfb:	4c 01 25 66 d5 00 00 	add    %r12,0xd566(%rip)        # ffffffff8000e268 <l_inuse>
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000d02:	48 8d 46 28          	lea    0x28(%rsi),%rax
						ALIGN( p );
ffffffff80000d06:	48 8d 5e 60          	lea    0x60(%rsi),%rbx
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000d0a:	48 89 42 08          	mov    %rax,0x8(%rdx)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000d0e:	41 8d 44 24 28       	lea    0x28(%r12),%eax
						min->next->prev = min;
ffffffff80000d13:	48 89 56 28          	mov    %rdx,0x28(%rsi)
						ALIGN( p );
ffffffff80000d17:	48 89 da             	mov    %rbx,%rdx
						min->next = NULL;
ffffffff80000d1a:	48 c7 46 30 00 00 00 	movq   $0x0,0x30(%rsi)
ffffffff80000d21:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff80000d22:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						min->block = maj;
ffffffff80000d29:	48 89 6e 38          	mov    %rbp,0x38(%rsi)
						min->size = size;
ffffffff80000d2d:	44 89 66 44          	mov    %r12d,0x44(%rsi)
						min->req_size = req_size;
ffffffff80000d31:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000d35:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80000d38:	83 e2 0f             	and    $0xf,%edx
ffffffff80000d3b:	0f 85 fc fe ff ff    	jne    ffffffff80000c3d <kmalloc+0x1fd>
						ALIGN( p );
ffffffff80000d41:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000d46:	e9 00 ff ff ff       	jmpq   ffffffff80000c4b <kmalloc+0x20b>
ffffffff80000d4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		l_memRoot = allocate_new_page( size );
ffffffff80000d50:	44 89 e7             	mov    %r12d,%edi
ffffffff80000d53:	e8 78 fc ff ff       	callq  ffffffff800009d0 <allocate_new_page>
		if ( l_memRoot == NULL )
ffffffff80000d58:	48 85 c0             	test   %rax,%rax
		l_memRoot = allocate_new_page( size );
ffffffff80000d5b:	48 89 c6             	mov    %rax,%rsi
ffffffff80000d5e:	48 89 05 1b d5 00 00 	mov    %rax,0xd51b(%rip)        # ffffffff8000e280 <l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80000d65:	0f 85 22 fd ff ff    	jne    ffffffff80000a8d <kmalloc+0x4d>
		  liballoc_unlock();
ffffffff80000d6b:	31 c0                	xor    %eax,%eax
		  return NULL;
ffffffff80000d6d:	31 db                	xor    %ebx,%ebx
		  liballoc_unlock();
ffffffff80000d6f:	e8 ac fb ff ff       	callq  ffffffff80000920 <liballoc_unlock>
		  return NULL;
ffffffff80000d74:	e9 dc fe ff ff       	jmpq   ffffffff80000c55 <kmalloc+0x215>
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80000d79:	48 8d 45 28          	lea    0x28(%rbp),%rax
ffffffff80000d7d:	48 89 02             	mov    %rax,(%rdx)
			maj->first->prev->next = maj->first;
ffffffff80000d80:	48 89 55 30          	mov    %rdx,0x30(%rbp)
			maj->first = maj->first->prev;
ffffffff80000d84:	48 89 45 20          	mov    %rax,0x20(%rbp)
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80000d88:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 	= NULL;
ffffffff80000d8f:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80000d96:	00 
ffffffff80000d97:	e9 04 ff ff ff       	jmpq   ffffffff80000ca0 <kmalloc+0x260>
ffffffff80000d9c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000da0 <kfree>:
void PREFIX(free)(void *ptr)
{
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80000da0:	48 85 ff             	test   %rdi,%rdi
ffffffff80000da3:	0f 84 d7 00 00 00    	je     ffffffff80000e80 <kfree+0xe0>
{
ffffffff80000da9:	53                   	push   %rbx
		FLUSH();
		#endif
		return;
	}

	UNALIGN( ptr );
ffffffff80000daa:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80000daf:	48 89 fb             	mov    %rdi,%rbx
ffffffff80000db2:	48 29 c3             	sub    %rax,%rbx
ffffffff80000db5:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80000db9:	48 0f 43 df          	cmovae %rdi,%rbx

	liballoc_lock();		// lockit
ffffffff80000dbd:	31 c0                	xor    %eax,%eax
ffffffff80000dbf:	e8 4c fb ff ff       	callq  ffffffff80000910 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000dc4:	8b 43 f0             	mov    -0x10(%rbx),%eax
	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80000dc7:	48 8d 73 d8          	lea    -0x28(%rbx),%rsi
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000dcb:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80000dd0:	74 2e                	je     ffffffff80000e00 <kfree+0x60>
	{
		l_errorCount += 1;

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000dd2:	89 c2                	mov    %eax,%edx
		l_errorCount += 1;
ffffffff80000dd4:	48 83 05 7c d4 00 00 	addq   $0x1,0xd47c(%rip)        # ffffffff8000e258 <l_errorCount>
ffffffff80000ddb:	01 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000ddc:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
		if ( 
ffffffff80000de2:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80000de8:	0f 84 82 00 00 00    	je     ffffffff80000e70 <kfree+0xd0>
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80000dee:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff80000df2:	74 7c                	je     ffffffff80000e70 <kfree+0xd0>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80000df4:	3c de                	cmp    $0xde,%al
ffffffff80000df6:	74 78                	je     ffffffff80000e70 <kfree+0xd0>
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
}
ffffffff80000df8:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff80000df9:	31 c0                	xor    %eax,%eax
ffffffff80000dfb:	e9 20 fb ff ff       	jmpq   ffffffff80000920 <liballoc_unlock>
		maj = min->block;
ffffffff80000e00:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
		l_inuse -= min->size;
ffffffff80000e04:	8b 53 f4             	mov    -0xc(%rbx),%edx
ffffffff80000e07:	48 29 15 5a d4 00 00 	sub    %rdx,0xd45a(%rip)        # ffffffff8000e268 <l_inuse>
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80000e0e:	8b 4f 18             	mov    0x18(%rdi),%ecx
ffffffff80000e11:	29 d1                	sub    %edx,%ecx
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80000e13:	48 8b 53 e0          	mov    -0x20(%rbx),%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80000e17:	89 c8                	mov    %ecx,%eax
ffffffff80000e19:	48 8b 4b d8          	mov    -0x28(%rbx),%rcx
ffffffff80000e1d:	83 e8 28             	sub    $0x28,%eax
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80000e20:	48 85 d2             	test   %rdx,%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80000e23:	89 47 18             	mov    %eax,0x18(%rdi)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff80000e26:	c7 43 f0 ad de ad de 	movl   $0xdeaddead,-0x10(%rbx)
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80000e2d:	74 06                	je     ffffffff80000e35 <kfree+0x95>
ffffffff80000e2f:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff80000e32:	48 8b 0e             	mov    (%rsi),%rcx
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80000e35:	48 85 c9             	test   %rcx,%rcx
ffffffff80000e38:	74 56                	je     ffffffff80000e90 <kfree+0xf0>
ffffffff80000e3a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80000e3e:	48 8b 57 20          	mov    0x20(%rdi),%rdx
	if ( maj->first == NULL )	// Block completely unused.
ffffffff80000e42:	48 85 d2             	test   %rdx,%rdx
ffffffff80000e45:	48 8b 0d 2c d4 00 00 	mov    0xd42c(%rip),%rcx        # ffffffff8000e278 <l_bestBet>
ffffffff80000e4c:	74 52                	je     ffffffff80000ea0 <kfree+0x100>
		if ( l_bestBet != NULL )
ffffffff80000e4e:	48 85 c9             	test   %rcx,%rcx
ffffffff80000e51:	74 a5                	je     ffffffff80000df8 <kfree+0x58>
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80000e53:	8b 51 14             	mov    0x14(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80000e56:	8b 77 14             	mov    0x14(%rdi),%esi
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80000e59:	2b 51 18             	sub    0x18(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80000e5c:	29 c6                	sub    %eax,%esi
			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff80000e5e:	39 f2                	cmp    %esi,%edx
ffffffff80000e60:	7d 96                	jge    ffffffff80000df8 <kfree+0x58>
ffffffff80000e62:	48 89 3d 0f d4 00 00 	mov    %rdi,0xd40f(%rip)        # ffffffff8000e278 <l_bestBet>
ffffffff80000e69:	eb 8d                	jmp    ffffffff80000df8 <kfree+0x58>
ffffffff80000e6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			l_possibleOverruns += 1;
ffffffff80000e70:	48 83 05 d8 d3 00 00 	addq   $0x1,0xd3d8(%rip)        # ffffffff8000e250 <l_possibleOverruns>
ffffffff80000e77:	01 
		liballoc_unlock();		// release the lock
ffffffff80000e78:	31 c0                	xor    %eax,%eax
}
ffffffff80000e7a:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff80000e7b:	e9 a0 fa ff ff       	jmpq   ffffffff80000920 <liballoc_unlock>
		l_warningCount += 1;
ffffffff80000e80:	48 83 05 d8 d3 00 00 	addq   $0x1,0xd3d8(%rip)        # ffffffff8000e260 <l_warningCount>
ffffffff80000e87:	01 
ffffffff80000e88:	c3                   	retq   
ffffffff80000e89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80000e90:	48 89 57 20          	mov    %rdx,0x20(%rdi)
ffffffff80000e94:	eb ac                	jmp    ffffffff80000e42 <kfree+0xa2>
ffffffff80000e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000e9d:	00 00 00 
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80000ea0:	48 39 3d d9 d3 00 00 	cmp    %rdi,0xd3d9(%rip)        # ffffffff8000e280 <l_memRoot>
ffffffff80000ea7:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff80000eab:	74 3b                	je     ffffffff80000ee8 <kfree+0x148>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80000ead:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80000eb0:	74 46                	je     ffffffff80000ef8 <kfree+0x158>
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80000eb2:	48 8b 17             	mov    (%rdi),%rdx
ffffffff80000eb5:	48 85 d2             	test   %rdx,%rdx
ffffffff80000eb8:	74 08                	je     ffffffff80000ec2 <kfree+0x122>
ffffffff80000eba:	48 89 42 08          	mov    %rax,0x8(%rdx)
ffffffff80000ebe:	48 8b 47 08          	mov    0x8(%rdi),%rax
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff80000ec2:	48 85 c0             	test   %rax,%rax
ffffffff80000ec5:	74 03                	je     ffffffff80000eca <kfree+0x12a>
ffffffff80000ec7:	48 89 10             	mov    %rdx,(%rax)
		liballoc_free( maj, maj->pages );
ffffffff80000eca:	8b 77 10             	mov    0x10(%rdi),%esi
		l_allocated -= maj->size;
ffffffff80000ecd:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff80000ed0:	48 29 05 99 d3 00 00 	sub    %rax,0xd399(%rip)        # ffffffff8000e270 <l_allocated>
		liballoc_free( maj, maj->pages );
ffffffff80000ed7:	e8 54 fa ff ff       	callq  ffffffff80000930 <liballoc_free>
ffffffff80000edc:	e9 17 ff ff ff       	jmpq   ffffffff80000df8 <kfree+0x58>
ffffffff80000ee1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80000ee8:	48 89 05 91 d3 00 00 	mov    %rax,0xd391(%rip)        # ffffffff8000e280 <l_memRoot>
ffffffff80000eef:	eb bc                	jmp    ffffffff80000ead <kfree+0x10d>
ffffffff80000ef1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80000ef8:	48 c7 05 75 d3 00 00 	movq   $0x0,0xd375(%rip)        # ffffffff8000e278 <l_bestBet>
ffffffff80000eff:	00 00 00 00 
ffffffff80000f03:	eb ad                	jmp    ffffffff80000eb2 <kfree+0x112>
ffffffff80000f05:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000f0c:	00 00 00 00 

ffffffff80000f10 <kcalloc>:
void* PREFIX(calloc)(size_t nobj, size_t size)
{
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff80000f10:	0f af fe             	imul   %esi,%edi
{
ffffffff80000f13:	53                   	push   %rbx
       
       p = PREFIX(malloc)( real_size );
ffffffff80000f14:	48 63 df             	movslq %edi,%rbx
ffffffff80000f17:	48 89 df             	mov    %rbx,%rdi
ffffffff80000f1a:	e8 21 fb ff ff       	callq  ffffffff80000a40 <kmalloc>
	for ( i = 0; i < n ; i++)
ffffffff80000f1f:	48 85 db             	test   %rbx,%rbx
ffffffff80000f22:	74 1b                	je     ffffffff80000f3f <kcalloc+0x2f>
ffffffff80000f24:	31 c9                	xor    %ecx,%ecx
ffffffff80000f26:	31 d2                	xor    %edx,%edx
ffffffff80000f28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000f2f:	00 
		((char*)s)[i] = c;
ffffffff80000f30:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
	for ( i = 0; i < n ; i++)
ffffffff80000f34:	8d 51 01             	lea    0x1(%rcx),%edx
ffffffff80000f37:	48 39 d3             	cmp    %rdx,%rbx
ffffffff80000f3a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80000f3d:	77 f1                	ja     ffffffff80000f30 <kcalloc+0x20>

       liballoc_memset( p, 0, real_size );

       return p;
}
ffffffff80000f3f:	5b                   	pop    %rbx
ffffffff80000f40:	c3                   	retq   
ffffffff80000f41:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000f48:	00 00 00 00 
ffffffff80000f4c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000f50 <krealloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff80000f50:	41 54                	push   %r12
ffffffff80000f52:	55                   	push   %rbp
ffffffff80000f53:	53                   	push   %rbx
ffffffff80000f54:	48 89 fb             	mov    %rdi,%rbx
ffffffff80000f57:	48 83 ec 10          	sub    $0x10,%rsp
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff80000f5b:	48 85 f6             	test   %rsi,%rsi
ffffffff80000f5e:	0f 84 54 01 00 00    	je     ffffffff800010b8 <krealloc+0x168>
		PREFIX(free)( p );
		return NULL;
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80000f64:	48 85 ff             	test   %rdi,%rdi
ffffffff80000f67:	49 89 f4             	mov    %rsi,%r12
ffffffff80000f6a:	0f 84 e0 00 00 00    	je     ffffffff80001050 <krealloc+0x100>

	// Unalign the pointer if required.
	ptr = p;
	UNALIGN(ptr);
ffffffff80000f70:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80000f75:	48 89 fd             	mov    %rdi,%rbp
ffffffff80000f78:	48 29 c5             	sub    %rax,%rbp
ffffffff80000f7b:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80000f7f:	48 0f 43 ef          	cmovae %rdi,%rbp

	liballoc_lock();		// lockit
ffffffff80000f83:	31 c0                	xor    %eax,%eax
ffffffff80000f85:	e8 86 f9 ff ff       	callq  ffffffff80000910 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000f8a:	8b 45 f0             	mov    -0x10(%rbp),%eax
		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80000f8d:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80000f91:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80000f96:	0f 85 c4 00 00 00    	jne    ffffffff80001060 <krealloc+0x110>
		
		// Definitely a memory block.
		
		real_size = min->req_size;

		if ( real_size >= size ) 
ffffffff80000f9c:	8b 6d f8             	mov    -0x8(%rbp),%ebp
ffffffff80000f9f:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80000fa2:	0f 83 90 00 00 00    	jae    ffffffff80001038 <krealloc+0xe8>
			min->req_size = size;
			liballoc_unlock();
			return p;
		}

	liballoc_unlock();
ffffffff80000fa8:	31 c0                	xor    %eax,%eax
ffffffff80000faa:	e8 71 f9 ff ff       	callq  ffffffff80000920 <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80000faf:	4c 89 e7             	mov    %r12,%rdi
ffffffff80000fb2:	e8 89 fa ff ff       	callq  ffffffff80000a40 <kmalloc>
  while ( n >= sizeof(unsigned int) )
ffffffff80000fb7:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff80000fbb:	0f 86 e7 00 00 00    	jbe    ffffffff800010a8 <krealloc+0x158>
ffffffff80000fc1:	48 83 ed 04          	sub    $0x4,%rbp
ffffffff80000fc5:	31 d2                	xor    %edx,%edx
ffffffff80000fc7:	48 89 ef             	mov    %rbp,%rdi
ffffffff80000fca:	48 c1 ef 02          	shr    $0x2,%rdi
ffffffff80000fce:	48 8d 34 bd 04 00 00 	lea    0x4(,%rdi,4),%rsi
ffffffff80000fd5:	00 
ffffffff80000fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000fdd:	00 00 00 
      *ldest++ = *lsrc++;
ffffffff80000fe0:	8b 0c 13             	mov    (%rbx,%rdx,1),%ecx
ffffffff80000fe3:	89 0c 10             	mov    %ecx,(%rax,%rdx,1)
ffffffff80000fe6:	48 83 c2 04          	add    $0x4,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff80000fea:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80000fed:	75 f1                	jne    ffffffff80000fe0 <krealloc+0x90>
ffffffff80000fef:	48 f7 df             	neg    %rdi
ffffffff80000ff2:	4c 8d 04 13          	lea    (%rbx,%rdx,1),%r8
ffffffff80000ff6:	48 01 c2             	add    %rax,%rdx
ffffffff80000ff9:	48 8d 6c bd 00       	lea    0x0(%rbp,%rdi,4),%rbp
  while ( n > 0 )
ffffffff80000ffe:	48 85 ed             	test   %rbp,%rbp
ffffffff80001001:	74 14                	je     ffffffff80001017 <krealloc+0xc7>
ffffffff80001003:	31 c9                	xor    %ecx,%ecx
      *cdest++ = *csrc++;
ffffffff80001005:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff8000100a:	40 88 34 0a          	mov    %sil,(%rdx,%rcx,1)
ffffffff8000100e:	48 83 c1 01          	add    $0x1,%rcx
  while ( n > 0 )
ffffffff80001012:	48 39 e9             	cmp    %rbp,%rcx
ffffffff80001015:	75 ee                	jne    ffffffff80001005 <krealloc+0xb5>
	liballoc_memcpy( ptr, p, real_size );
	PREFIX(free)( p );
ffffffff80001017:	48 89 df             	mov    %rbx,%rdi
ffffffff8000101a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8000101f:	e8 7c fd ff ff       	callq  ffffffff80000da0 <kfree>
ffffffff80001024:	48 8b 44 24 08       	mov    0x8(%rsp),%rax

	return ptr;
}
ffffffff80001029:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000102d:	5b                   	pop    %rbx
ffffffff8000102e:	5d                   	pop    %rbp
ffffffff8000102f:	41 5c                	pop    %r12
ffffffff80001031:	c3                   	retq   
ffffffff80001032:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			min->req_size = size;
ffffffff80001038:	44 89 62 20          	mov    %r12d,0x20(%rdx)
			liballoc_unlock();
ffffffff8000103c:	31 c0                	xor    %eax,%eax
ffffffff8000103e:	e8 dd f8 ff ff       	callq  ffffffff80000920 <liballoc_unlock>
			return p;
ffffffff80001043:	48 89 d8             	mov    %rbx,%rax
}
ffffffff80001046:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000104a:	5b                   	pop    %rbx
ffffffff8000104b:	5d                   	pop    %rbp
ffffffff8000104c:	41 5c                	pop    %r12
ffffffff8000104e:	c3                   	retq   
ffffffff8000104f:	90                   	nop
ffffffff80001050:	48 83 c4 10          	add    $0x10,%rsp
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001054:	48 89 f7             	mov    %rsi,%rdi
}
ffffffff80001057:	5b                   	pop    %rbx
ffffffff80001058:	5d                   	pop    %rbp
ffffffff80001059:	41 5c                	pop    %r12
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8000105b:	e9 e0 f9 ff ff       	jmpq   ffffffff80000a40 <kmalloc>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001060:	89 c2                	mov    %eax,%edx
			l_errorCount += 1;
ffffffff80001062:	48 83 05 ee d1 00 00 	addq   $0x1,0xd1ee(%rip)        # ffffffff8000e258 <l_errorCount>
ffffffff80001069:	01 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000106a:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
			if ( 
ffffffff80001070:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80001076:	74 20                	je     ffffffff80001098 <krealloc+0x148>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001078:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff8000107c:	74 1a                	je     ffffffff80001098 <krealloc+0x148>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff8000107e:	3c de                	cmp    $0xde,%al
ffffffff80001080:	74 16                	je     ffffffff80001098 <krealloc+0x148>
			liballoc_unlock();		// release the lock
ffffffff80001082:	31 c0                	xor    %eax,%eax
ffffffff80001084:	e8 97 f8 ff ff       	callq  ffffffff80000920 <liballoc_unlock>
}
ffffffff80001089:	48 83 c4 10          	add    $0x10,%rsp
			return NULL;
ffffffff8000108d:	31 c0                	xor    %eax,%eax
}
ffffffff8000108f:	5b                   	pop    %rbx
ffffffff80001090:	5d                   	pop    %rbp
ffffffff80001091:	41 5c                	pop    %r12
ffffffff80001093:	c3                   	retq   
ffffffff80001094:	0f 1f 40 00          	nopl   0x0(%rax)
				l_possibleOverruns += 1;
ffffffff80001098:	48 83 05 b0 d1 00 00 	addq   $0x1,0xd1b0(%rip)        # ffffffff8000e250 <l_possibleOverruns>
ffffffff8000109f:	01 
ffffffff800010a0:	eb e0                	jmp    ffffffff80001082 <krealloc+0x132>
ffffffff800010a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff800010a8:	48 89 c2             	mov    %rax,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff800010ab:	49 89 d8             	mov    %rbx,%r8
ffffffff800010ae:	e9 4b ff ff ff       	jmpq   ffffffff80000ffe <krealloc+0xae>
ffffffff800010b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		PREFIX(free)( p );
ffffffff800010b8:	e8 e3 fc ff ff       	callq  ffffffff80000da0 <kfree>
		return NULL;
ffffffff800010bd:	31 c0                	xor    %eax,%eax
ffffffff800010bf:	eb 85                	jmp    ffffffff80001046 <krealloc+0xf6>
ffffffff800010c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800010c8:	00 00 00 
ffffffff800010cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800010d0 <pmm_init>:
    return NULL;
}*/

//Initialize the Physical Memory Manager
void pmm_init()
{
ffffffff800010d0:	41 57                	push   %r15
ffffffff800010d2:	41 56                	push   %r14
ffffffff800010d4:	41 55                	push   %r13
ffffffff800010d6:	41 54                	push   %r12
ffffffff800010d8:	55                   	push   %rbp
ffffffff800010d9:	53                   	push   %rbx
ffffffff800010da:	48 83 ec 08          	sub    $0x8,%rsp
    //memory map helper variables
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff800010de:	48 8b 05 0b 8e 00 00 	mov    0x8e0b(%rip),%rax        # ffffffff80009ef0 <boot_info+0x10>
ffffffff800010e5:	4c 8b 68 10          	mov    0x10(%rax),%r13
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
    //uint8_t* type = NULL;

    //iterate through the memory map, find the largest memory segment, calculate total memory size
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800010e9:	4d 85 ed             	test   %r13,%r13
ffffffff800010ec:	0f 84 a6 00 00 00    	je     ffffffff80001198 <pmm_init+0xc8>
ffffffff800010f2:	31 db                	xor    %ebx,%ebx
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
ffffffff800010f4:	45 31 ff             	xor    %r15d,%r15d
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
ffffffff800010f7:	45 31 e4             	xor    %r12d,%r12d
ffffffff800010fa:	49 c7 c6 40 9f 00 80 	mov    $0xffffffff80009f40,%r14
ffffffff80001101:	eb 0c                	jmp    ffffffff8000110f <pmm_init+0x3f>
ffffffff80001103:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80001108:	48 8b 05 e1 8d 00 00 	mov    0x8de1(%rip),%rax        # ffffffff80009ef0 <boot_info+0x10>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];
        //type = pmm_get_mmap_type(current_entry->type);
        printf("Addr: 0x%x  Size: %d  Type: %x\n", current_entry->base, current_entry->length, current_entry->type);
ffffffff8000110f:	48 8d 14 5b          	lea    (%rbx,%rbx,2),%rdx
ffffffff80001113:	48 c7 c7 68 46 00 80 	mov    $0xffffffff80004668,%rdi
ffffffff8000111a:	48 8d 2c d0          	lea    (%rax,%rdx,8),%rbp
ffffffff8000111e:	31 c0                	xor    %eax,%eax
ffffffff80001120:	8b 4d 28             	mov    0x28(%rbp),%ecx
ffffffff80001123:	48 8b 55 20          	mov    0x20(%rbp),%rdx
ffffffff80001127:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff8000112b:	e8 a0 1d 00 00       	callq  ffffffff80002ed0 <printf_>

        //Calculate total memory
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff80001130:	49 8b 06             	mov    (%r14),%rax
ffffffff80001133:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
ffffffff80001137:	48 01 c8             	add    %rcx,%rax
        {
            continue;
        }

        //Capture the largest segment size
        if(current_entry->length > mmap_largest_segment_size)
ffffffff8000113a:	83 7d 28 01          	cmpl   $0x1,0x28(%rbp)
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff8000113e:	49 89 06             	mov    %rax,(%r14)
        if(current_entry->length > mmap_largest_segment_size)
ffffffff80001141:	75 0c                	jne    ffffffff8000114f <pmm_init+0x7f>
ffffffff80001143:	4c 39 f9             	cmp    %r15,%rcx
ffffffff80001146:	76 07                	jbe    ffffffff8000114f <pmm_init+0x7f>
        {
            mmap_largest_segment_base = current_entry->base;
ffffffff80001148:	4c 8b 65 18          	mov    0x18(%rbp),%r12
ffffffff8000114c:	49 89 cf             	mov    %rcx,%r15
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff8000114f:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80001153:	49 39 dd             	cmp    %rbx,%r13
ffffffff80001156:	75 b0                	jne    ffffffff80001108 <pmm_init+0x38>
            mmap_largest_segment_size = current_entry->length;
        }
    };

    //Populate the PMM state variables
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001158:	48 89 c2             	mov    %rax,%rdx
ffffffff8000115b:	48 c1 ea 0c          	shr    $0xc,%rdx
ffffffff8000115f:	48 89 15 ea 8d 00 00 	mov    %rdx,0x8dea(%rip)        # ffffffff80009f50 <pmm_info+0x10>
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001166:	48 89 15 db 8d 00 00 	mov    %rdx,0x8ddb(%rip)        # ffffffff80009f48 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff8000116d:	48 89 c2             	mov    %rax,%rdx
ffffffff80001170:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff80001174:	48 83 c2 01          	add    $0x1,%rdx
    
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001178:	48 39 d1             	cmp    %rdx,%rcx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff8000117b:	48 89 15 de 8d 00 00 	mov    %rdx,0x8dde(%rip)        # ffffffff80009f60 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001182:	73 4c                	jae    ffffffff800011d0 <pmm_init+0x100>
        {
            printf("Bitmap too large");
ffffffff80001184:	48 c7 c7 da 46 00 80 	mov    $0xffffffff800046da,%rdi
ffffffff8000118b:	31 c0                	xor    %eax,%eax
ffffffff8000118d:	e8 3e 1d 00 00       	callq  ffffffff80002ed0 <printf_>
ffffffff80001192:	eb fe                	jmp    ffffffff80001192 <pmm_init+0xc2>
ffffffff80001194:	0f 1f 40 00          	nopl   0x0(%rax)
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001198:	48 8b 05 a1 8d 00 00 	mov    0x8da1(%rip),%rax        # ffffffff80009f40 <pmm_info>
ffffffff8000119f:	48 89 c2             	mov    %rax,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff800011a2:	48 c1 e8 0f          	shr    $0xf,%rax
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800011a6:	48 c1 ea 0c          	shr    $0xc,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff800011aa:	48 83 c0 01          	add    $0x1,%rax
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff800011ae:	48 89 15 93 8d 00 00 	mov    %rdx,0x8d93(%rip)        # ffffffff80009f48 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff800011b5:	48 89 05 a4 8d 00 00 	mov    %rax,0x8da4(%rip)        # ffffffff80009f60 <pmm_info+0x20>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800011bc:	48 89 15 8d 8d 00 00 	mov    %rdx,0x8d8d(%rip)        # ffffffff80009f50 <pmm_info+0x10>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff800011c3:	48 8b 04 25 08 00 00 	mov    0x8,%rax
ffffffff800011ca:	00 
ffffffff800011cb:	0f 0b                	ud2    
ffffffff800011cd:	0f 1f 00             	nopl   (%rax)
ffffffff800011d0:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff800011d7:	80 ff ff 
            for(;;){}   //hang
        }
    
    pmm_info.bitmap = (uint8_t*)phys_to_hh_data(mmap_largest_segment_base); 

    printf("Total Memory (KB): %d\n", (pmm_info.totalmem/1024));
ffffffff800011da:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff800011de:	48 c7 c7 eb 46 00 80 	mov    $0xffffffff800046eb,%rdi
ffffffff800011e5:	49 01 d4             	add    %rdx,%r12
ffffffff800011e8:	48 89 c6             	mov    %rax,%rsi
ffffffff800011eb:	31 c0                	xor    %eax,%eax
ffffffff800011ed:	4c 89 25 64 8d 00 00 	mov    %r12,0x8d64(%rip)        # ffffffff80009f58 <pmm_info+0x18>
ffffffff800011f4:	e8 d7 1c 00 00       	callq  ffffffff80002ed0 <printf_>
    printf("Total Pages: %d   Used Pages: %d\n", pmm_info.totalpages, pmm_info.usedpages);
ffffffff800011f9:	48 8b 15 48 8d 00 00 	mov    0x8d48(%rip),%rdx        # ffffffff80009f48 <pmm_info+0x8>
ffffffff80001200:	48 8b 35 49 8d 00 00 	mov    0x8d49(%rip),%rsi        # ffffffff80009f50 <pmm_info+0x10>
ffffffff80001207:	48 c7 c7 88 46 00 80 	mov    $0xffffffff80004688,%rdi
ffffffff8000120e:	31 c0                	xor    %eax,%eax
ffffffff80001210:	e8 bb 1c 00 00       	callq  ffffffff80002ed0 <printf_>
    printf("Bitmap Addr: %p  Bitmap Size (bytes): %d\n", pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001215:	48 8b 15 44 8d 00 00 	mov    0x8d44(%rip),%rdx        # ffffffff80009f60 <pmm_info+0x20>
ffffffff8000121c:	48 8b 35 35 8d 00 00 	mov    0x8d35(%rip),%rsi        # ffffffff80009f58 <pmm_info+0x18>
ffffffff80001223:	31 c0                	xor    %eax,%eax
ffffffff80001225:	48 c7 c7 b0 46 00 80 	mov    $0xffffffff800046b0,%rdi
ffffffff8000122c:	e8 9f 1c 00 00       	callq  ffffffff80002ed0 <printf_>

    //Set all bitmap bits to 1
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff80001231:	48 83 3d 27 8d 00 00 	cmpq   $0x0,0x8d27(%rip)        # ffffffff80009f60 <pmm_info+0x20>
ffffffff80001238:	00 
ffffffff80001239:	74 1d                	je     ffffffff80001258 <pmm_init+0x188>
ffffffff8000123b:	31 c0                	xor    %eax,%eax
ffffffff8000123d:	0f 1f 00             	nopl   (%rax)
        {
        pmm_info.bitmap[i] = 0xff;
ffffffff80001240:	48 8b 15 11 8d 00 00 	mov    0x8d11(%rip),%rdx        # ffffffff80009f58 <pmm_info+0x18>
ffffffff80001247:	c6 04 02 ff          	movb   $0xff,(%rdx,%rax,1)
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff8000124b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000124f:	48 39 05 0a 8d 00 00 	cmp    %rax,0x8d0a(%rip)        # ffffffff80009f60 <pmm_info+0x20>
ffffffff80001256:	77 e8                	ja     ffffffff80001240 <pmm_init+0x170>
    

    //printf("Number of MMAP Entries: %d\n", mmap_entries);

    //Iterate through the memory map again, unset bitmap for available memory
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001258:	31 f6                	xor    %esi,%esi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff8000125a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
ffffffff80001260:	eb 0f                	jmp    ffffffff80001271 <pmm_init+0x1a1>
ffffffff80001262:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001268:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000126c:	48 39 de             	cmp    %rbx,%rsi
ffffffff8000126f:	74 69                	je     ffffffff800012da <pmm_init+0x20a>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];

        if(current_entry->type == 1)
ffffffff80001271:	48 8b 15 78 8c 00 00 	mov    0x8c78(%rip),%rdx        # ffffffff80009ef0 <boot_info+0x10>
ffffffff80001278:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
ffffffff8000127c:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
ffffffff80001280:	83 78 28 01          	cmpl   $0x1,0x28(%rax)
ffffffff80001284:	75 e2                	jne    ffffffff80001268 <pmm_init+0x198>
        {
            uint64_t pages = current_entry->length / 4096;
ffffffff80001286:	48 8b 50 20          	mov    0x20(%rax),%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff8000128a:	48 8b 40 18          	mov    0x18(%rax),%rax
            uint64_t pages = current_entry->length / 4096;
ffffffff8000128e:	48 c1 ea 0c          	shr    $0xc,%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff80001292:	48 c1 e8 0c          	shr    $0xc,%rax
            //printf("Index: %d  Pages: %d\n", align, pages);

            for(uint64_t j = 0; j < pages; j++)
ffffffff80001296:	48 85 d2             	test   %rdx,%rdx
ffffffff80001299:	74 cd                	je     ffffffff80001268 <pmm_init+0x198>
ffffffff8000129b:	48 01 c2             	add    %rax,%rdx
ffffffff8000129e:	66 90                	xchg   %ax,%ax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800012a0:	48 89 c7             	mov    %rax,%rdi
ffffffff800012a3:	89 c1                	mov    %eax,%ecx
ffffffff800012a5:	45 89 c1             	mov    %r8d,%r9d
ffffffff800012a8:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff800012ac:	48 03 3d a5 8c 00 00 	add    0x8ca5(%rip),%rdi        # ffffffff80009f58 <pmm_info+0x18>
ffffffff800012b3:	83 e1 07             	and    $0x7,%ecx
ffffffff800012b6:	41 d3 e1             	shl    %cl,%r9d
                //uint64_t bitindex = align % 8;
                //pmm_info.bitmap[byteindex] &= ~(1 << bitindex);
                
                bitmap_unset(pmm_info.bitmap, align);

                align++;                    //increment page index
ffffffff800012b9:	48 83 c0 01          	add    $0x1,%rax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800012bd:	44 89 c9             	mov    %r9d,%ecx
ffffffff800012c0:	f7 d1                	not    %ecx
ffffffff800012c2:	20 0f                	and    %cl,(%rdi)
                pmm_info.usedpages--;       //decrement used page counter
ffffffff800012c4:	48 83 2d 7c 8c 00 00 	subq   $0x1,0x8c7c(%rip)        # ffffffff80009f48 <pmm_info+0x8>
ffffffff800012cb:	01 
            for(uint64_t j = 0; j < pages; j++)
ffffffff800012cc:	48 39 d0             	cmp    %rdx,%rax
ffffffff800012cf:	75 cf                	jne    ffffffff800012a0 <pmm_init+0x1d0>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800012d1:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800012d5:	48 39 de             	cmp    %rbx,%rsi
ffffffff800012d8:	75 97                	jne    ffffffff80001271 <pmm_init+0x1a1>
            }
        }
    }

    //Make certain the NULL page is unavailable
    bitmap_set(pmm_info.bitmap, 0);
ffffffff800012da:	48 8b 05 77 8c 00 00 	mov    0x8c77(%rip),%rax        # ffffffff80009f58 <pmm_info+0x18>
    pmm_info.usedpages++;

    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800012e1:	48 c7 c7 02 47 00 80 	mov    $0xffffffff80004702,%rdi
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800012e8:	80 08 01             	orb    $0x1,(%rax)
    pmm_info.usedpages++;
ffffffff800012eb:	48 8b 05 56 8c 00 00 	mov    0x8c56(%rip),%rax        # ffffffff80009f48 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800012f2:	48 8b 35 57 8c 00 00 	mov    0x8c57(%rip),%rsi        # ffffffff80009f50 <pmm_info+0x10>
    pmm_info.usedpages++;
ffffffff800012f9:	48 83 c0 01          	add    $0x1,%rax
ffffffff800012fd:	48 89 05 44 8c 00 00 	mov    %rax,0x8c44(%rip)        # ffffffff80009f48 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff80001304:	48 29 c6             	sub    %rax,%rsi
ffffffff80001307:	31 c0                	xor    %eax,%eax
ffffffff80001309:	e8 c2 1b 00 00       	callq  ffffffff80002ed0 <printf_>
    printf("PMM Initialized\n");

}
ffffffff8000130e:	48 83 c4 08          	add    $0x8,%rsp
    printf("PMM Initialized\n");
ffffffff80001312:	48 c7 c7 17 47 00 80 	mov    $0xffffffff80004717,%rdi
ffffffff80001319:	31 c0                	xor    %eax,%eax
}
ffffffff8000131b:	5b                   	pop    %rbx
ffffffff8000131c:	5d                   	pop    %rbp
ffffffff8000131d:	41 5c                	pop    %r12
ffffffff8000131f:	41 5d                	pop    %r13
ffffffff80001321:	41 5e                	pop    %r14
ffffffff80001323:	41 5f                	pop    %r15
    printf("PMM Initialized\n");
ffffffff80001325:	e9 a6 1b 00 00       	jmpq   ffffffff80002ed0 <printf_>
ffffffff8000132a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80001330 <pmm_allocpage>:


void* pmm_allocpage()
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff80001330:	48 8b 35 11 8c 00 00 	mov    0x8c11(%rip),%rsi        # ffffffff80009f48 <pmm_info+0x8>
ffffffff80001337:	48 3b 35 12 8c 00 00 	cmp    0x8c12(%rip),%rsi        # ffffffff80009f50 <pmm_info+0x10>
ffffffff8000133e:	73 68                	jae    ffffffff800013a8 <pmm_allocpage+0x78>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001340:	48 8b 3d 19 8c 00 00 	mov    0x8c19(%rip),%rdi        # ffffffff80009f60 <pmm_info+0x20>
ffffffff80001347:	4c 8b 05 0a 8c 00 00 	mov    0x8c0a(%rip),%r8        # ffffffff80009f58 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff8000134e:	48 85 ff             	test   %rdi,%rdi
ffffffff80001351:	74 26                	je     ffffffff80001379 <pmm_allocpage+0x49>
ffffffff80001353:	31 c9                	xor    %ecx,%ecx
        if(bitmap[i] != 0xff)
ffffffff80001355:	41 0f b6 14 08       	movzbl (%r8,%rcx,1),%edx
ffffffff8000135a:	80 fa ff             	cmp    $0xff,%dl
ffffffff8000135d:	74 11                	je     ffffffff80001370 <pmm_allocpage+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff8000135f:	31 c0                	xor    %eax,%eax
                if(!(bitmap[i] & (1 << j)))
ffffffff80001361:	0f a3 c2             	bt     %eax,%edx
ffffffff80001364:	73 2a                	jae    ffffffff80001390 <pmm_allocpage+0x60>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001366:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000136a:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8000136e:	75 f1                	jne    ffffffff80001361 <pmm_allocpage+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001370:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80001374:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80001377:	75 dc                	jne    ffffffff80001355 <pmm_allocpage+0x25>

    pmm_info.usedpages++;
ffffffff80001379:	48 83 c6 01          	add    $0x1,%rsi
    for(uint64_t i = 0; i < size; i++)
ffffffff8000137d:	31 c0                	xor    %eax,%eax
    pmm_info.usedpages++;
ffffffff8000137f:	48 89 35 c2 8b 00 00 	mov    %rsi,0x8bc2(%rip)        # ffffffff80009f48 <pmm_info+0x8>

    return (void*)(index * PAGE_SIZE);
ffffffff80001386:	c3                   	retq   
ffffffff80001387:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000138e:	00 00 
                    return (i * 8) + j;
ffffffff80001390:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
    pmm_info.usedpages++;
ffffffff80001394:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001398:	48 89 35 a9 8b 00 00 	mov    %rsi,0x8ba9(%rip)        # ffffffff80009f48 <pmm_info+0x8>
ffffffff8000139f:	48 c1 e0 0c          	shl    $0xc,%rax
    return (void*)(index * PAGE_SIZE);
ffffffff800013a3:	c3                   	retq   
ffffffff800013a4:	0f 1f 40 00          	nopl   0x0(%rax)
        return NULL;
ffffffff800013a8:	31 c0                	xor    %eax,%eax
}
ffffffff800013aa:	c3                   	retq   
ffffffff800013ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800013b0 <pmm_freepage>:
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800013b0:	48 89 fa             	mov    %rdi,%rdx


void pmm_freepage(void* page)
{
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800013b3:	48 c1 ef 0c          	shr    $0xc,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800013b7:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800013bc:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff800013c0:	48 03 15 91 8b 00 00 	add    0x8b91(%rip),%rdx        # ffffffff80009f58 <pmm_info+0x18>
ffffffff800013c7:	89 f9                	mov    %edi,%ecx
ffffffff800013c9:	83 e1 07             	and    $0x7,%ecx
ffffffff800013cc:	d3 e0                	shl    %cl,%eax
ffffffff800013ce:	f7 d0                	not    %eax
ffffffff800013d0:	20 02                	and    %al,(%rdx)
    bitmap_unset(pmm_info.bitmap, index);
    pmm_info.usedpages--;
ffffffff800013d2:	48 83 2d 6e 8b 00 00 	subq   $0x1,0x8b6e(%rip)        # ffffffff80009f48 <pmm_info+0x8>
ffffffff800013d9:	01 
}
ffffffff800013da:	c3                   	retq   
ffffffff800013db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800013e0 <pmm_allocpages>:

void* pmm_allocpages(uint64_t count)
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff800013e0:	4c 8b 15 61 8b 00 00 	mov    0x8b61(%rip),%r10        # ffffffff80009f48 <pmm_info+0x8>
ffffffff800013e7:	4c 3b 15 62 8b 00 00 	cmp    0x8b62(%rip),%r10        # ffffffff80009f50 <pmm_info+0x10>
ffffffff800013ee:	73 73                	jae    ffffffff80001463 <pmm_allocpages+0x83>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff800013f0:	48 8b 05 69 8b 00 00 	mov    0x8b69(%rip),%rax        # ffffffff80009f60 <pmm_info+0x20>
ffffffff800013f7:	4c 8b 05 5a 8b 00 00 	mov    0x8b5a(%rip),%r8        # ffffffff80009f58 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff800013fe:	48 85 c0             	test   %rax,%rax
ffffffff80001401:	74 28                	je     ffffffff8000142b <pmm_allocpages+0x4b>
ffffffff80001403:	31 f6                	xor    %esi,%esi
        if(bitmap[i] != 0xff)
ffffffff80001405:	41 0f b6 0c 30       	movzbl (%r8,%rsi,1),%ecx
ffffffff8000140a:	80 f9 ff             	cmp    $0xff,%cl
ffffffff8000140d:	74 11                	je     ffffffff80001420 <pmm_allocpages+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff8000140f:	31 d2                	xor    %edx,%edx
                if(!(bitmap[i] & (1 << j)))
ffffffff80001411:	0f a3 d1             	bt     %edx,%ecx
ffffffff80001414:	73 5a                	jae    ffffffff80001470 <pmm_allocpages+0x90>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001416:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000141a:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8000141e:	75 f1                	jne    ffffffff80001411 <pmm_allocpages+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001420:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001424:	48 39 f0             	cmp    %rsi,%rax
ffffffff80001427:	75 dc                	jne    ffffffff80001405 <pmm_allocpages+0x25>
    return 0;
ffffffff80001429:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff8000142b:	48 85 ff             	test   %rdi,%rdi
ffffffff8000142e:	74 50                	je     ffffffff80001480 <pmm_allocpages+0xa0>
ffffffff80001430:	31 d2                	xor    %edx,%edx
    {
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff80001432:	41 f6 00 01          	testb  $0x1,(%r8)
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001436:	41 b9 01 00 00 00    	mov    $0x1,%r9d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000143c:	74 25                	je     ffffffff80001463 <pmm_allocpages+0x83>
    for(uint64_t i = 0; i < count; i++)
ffffffff8000143e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80001442:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80001445:	74 39                	je     ffffffff80001480 <pmm_allocpages+0xa0>
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001447:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000144a:	45 89 cb             	mov    %r9d,%r11d
ffffffff8000144d:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80001451:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff80001456:	89 d1                	mov    %edx,%ecx
ffffffff80001458:	83 e1 08             	and    $0x8,%ecx
ffffffff8000145b:	41 d3 e3             	shl    %cl,%r11d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000145e:	44 85 de             	test   %r11d,%esi
ffffffff80001461:	75 db                	jne    ffffffff8000143e <pmm_allocpages+0x5e>
        return NULL;
ffffffff80001463:	31 c0                	xor    %eax,%eax
    }

    pmm_info.usedpages += count;

    return (void*)(index * PAGE_SIZE);
}
ffffffff80001465:	c3                   	retq   
ffffffff80001466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000146d:	00 00 00 
                    return (i * 8) + j;
ffffffff80001470:	48 8d 04 f2          	lea    (%rdx,%rsi,8),%rax
ffffffff80001474:	eb b5                	jmp    ffffffff8000142b <pmm_allocpages+0x4b>
ffffffff80001476:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000147d:	00 00 00 
    pmm_info.usedpages += count;
ffffffff80001480:	4c 01 d7             	add    %r10,%rdi
    return (void*)(index * PAGE_SIZE);
ffffffff80001483:	48 c1 e0 0c          	shl    $0xc,%rax
    pmm_info.usedpages += count;
ffffffff80001487:	48 89 3d ba 8a 00 00 	mov    %rdi,0x8aba(%rip)        # ffffffff80009f48 <pmm_info+0x8>
    return (void*)(index * PAGE_SIZE);
ffffffff8000148e:	c3                   	retq   
ffffffff8000148f:	90                   	nop

ffffffff80001490 <pmm_freepages>:

uint64_t pmm_freepages(void* page, uint64_t count)
{
    uint64_t pg = (uint64_t)page;

    for(uint64_t i=0; i < count; i++)
ffffffff80001490:	48 85 f6             	test   %rsi,%rsi
ffffffff80001493:	74 44                	je     ffffffff800014d9 <pmm_freepages+0x49>
ffffffff80001495:	45 31 c0             	xor    %r8d,%r8d
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001498:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8000149e:	66 90                	xchg   %ax,%ax
ffffffff800014a0:	48 89 f8             	mov    %rdi,%rax
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800014a3:	48 89 f9             	mov    %rdi,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800014a6:	44 89 ca             	mov    %r9d,%edx
ffffffff800014a9:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff800014ad:	48 03 05 a4 8a 00 00 	add    0x8aa4(%rip),%rax        # ffffffff80009f58 <pmm_info+0x18>
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800014b4:	48 c1 e9 0c          	shr    $0xc,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800014b8:	83 e1 07             	and    $0x7,%ecx
    for(uint64_t i=0; i < count; i++)
ffffffff800014bb:	49 83 c0 01          	add    $0x1,%r8
    {
        pmm_freepage((void*)pg);
        pg += 0x1000;
ffffffff800014bf:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800014c6:	d3 e2                	shl    %cl,%edx
ffffffff800014c8:	f7 d2                	not    %edx
ffffffff800014ca:	20 10                	and    %dl,(%rax)
    pmm_info.usedpages--;
ffffffff800014cc:	48 83 2d 74 8a 00 00 	subq   $0x1,0x8a74(%rip)        # ffffffff80009f48 <pmm_info+0x8>
ffffffff800014d3:	01 
    for(uint64_t i=0; i < count; i++)
ffffffff800014d4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff800014d7:	75 c7                	jne    ffffffff800014a0 <pmm_freepages+0x10>
    }

    return 0;
}
ffffffff800014d9:	31 c0                	xor    %eax,%eax
ffffffff800014db:	c3                   	retq   
ffffffff800014dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800014e0 <pmm_get_free_memory>:

uint64_t pmm_get_free_memory()
{
    return (pmm_info.totalpages - pmm_info.usedpages) * PAGE_SIZE;
ffffffff800014e0:	48 8b 05 69 8a 00 00 	mov    0x8a69(%rip),%rax        # ffffffff80009f50 <pmm_info+0x10>
ffffffff800014e7:	48 2b 05 5a 8a 00 00 	sub    0x8a5a(%rip),%rax        # ffffffff80009f48 <pmm_info+0x8>
ffffffff800014ee:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff800014f2:	c3                   	retq   
ffffffff800014f3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800014fa:	00 00 00 00 
ffffffff800014fe:	66 90                	xchg   %ax,%ax

ffffffff80001500 <pmm_get_total_memory>:

uint64_t pmm_get_total_memory()
{   
    return (pmm_info.totalpages) * PAGE_SIZE;
ffffffff80001500:	48 8b 05 49 8a 00 00 	mov    0x8a49(%rip),%rax        # ffffffff80009f50 <pmm_info+0x10>
ffffffff80001507:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8000150b:	c3                   	retq   
ffffffff8000150c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001510 <fb_init>:



void fb_init()
{
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001510:	48 8b 15 e1 89 00 00 	mov    0x89e1(%rip),%rdx        # ffffffff80009ef8 <boot_info+0x18>
ffffffff80001517:	48 8b 42 10          	mov    0x10(%rdx),%rax
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff8000151b:	0f b7 4a 18          	movzwl 0x18(%rdx),%ecx
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff8000151f:	0f b7 72 1c          	movzwl 0x1c(%rdx),%esi
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001523:	48 89 05 46 8a 00 00 	mov    %rax,0x8a46(%rip)        # ffffffff80009f70 <fb_info>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff8000152a:	0f b7 42 1a          	movzwl 0x1a(%rdx),%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000152e:	0f b7 52 1e          	movzwl 0x1e(%rdx),%edx
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80001532:	66 89 0d 41 8a 00 00 	mov    %cx,0x8a41(%rip)        # ffffffff80009f7a <fb_info+0xa>
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff80001539:	66 89 35 3c 8a 00 00 	mov    %si,0x8a3c(%rip)        # ffffffff80009f7c <fb_info+0xc>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80001540:	66 89 05 31 8a 00 00 	mov    %ax,0x8a31(%rip)        # ffffffff80009f78 <fb_info+0x8>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001547:	0f af c1             	imul   %ecx,%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000154a:	66 89 15 2d 8a 00 00 	mov    %dx,0x8a2d(%rip)        # ffffffff80009f7e <fb_info+0xe>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001551:	89 05 29 8a 00 00    	mov    %eax,0x8a29(%rip)        # ffffffff80009f80 <fb_info+0x10>

    //printf("FB Height: %d  FB Width: %d\n", fb_info.height, fb_info.width);
    //printf("FB BPP: %d   FB Pitch: %d\n", fb_info.bpp, fb_info.pitch);

    //fb_putpixel(100,100,FB_COLOR_WHITE);
}
ffffffff80001557:	c3                   	retq   
ffffffff80001558:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000155f:	00 

ffffffff80001560 <fb_putpixel>:

void fb_putpixel(uint32_t x, uint32_t y, enum fb_color col)
{
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001560:	0f b7 0d 17 8a 00 00 	movzwl 0x8a17(%rip),%ecx        # ffffffff80009f7e <fb_info+0xe>
ffffffff80001567:	0f b7 05 0e 8a 00 00 	movzwl 0x8a0e(%rip),%eax        # ffffffff80009f7c <fb_info+0xc>
{
ffffffff8000156e:	41 89 d0             	mov    %edx,%r8d
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001571:	31 d2                	xor    %edx,%edx
ffffffff80001573:	66 c1 e9 03          	shr    $0x3,%cx
ffffffff80001577:	66 f7 f1             	div    %cx
ffffffff8000157a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8000157d:	0f af c6             	imul   %esi,%eax
ffffffff80001580:	8d 14 38             	lea    (%rax,%rdi,1),%edx
    //if(index > fb_info.max_pixels) return;
    *((uint32_t*)fb_info.base + index) = col;
ffffffff80001583:	48 8b 05 e6 89 00 00 	mov    0x89e6(%rip),%rax        # ffffffff80009f70 <fb_info>
ffffffff8000158a:	44 89 04 90          	mov    %r8d,(%rax,%rdx,4)
}
ffffffff8000158e:	c3                   	retq   
ffffffff8000158f:	90                   	nop

ffffffff80001590 <fb_clearscreen>:

void fb_clearscreen(enum fb_color col)
{
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80001590:	0f b7 05 e1 89 00 00 	movzwl 0x89e1(%rip),%eax        # ffffffff80009f78 <fb_info+0x8>
ffffffff80001597:	0f b7 15 dc 89 00 00 	movzwl 0x89dc(%rip),%edx        # ffffffff80009f7a <fb_info+0xa>
ffffffff8000159e:	0f af c2             	imul   %edx,%eax
ffffffff800015a1:	85 c0                	test   %eax,%eax
ffffffff800015a3:	48 63 c8             	movslq %eax,%rcx
ffffffff800015a6:	74 1f                	je     ffffffff800015c7 <fb_clearscreen+0x37>
    {
        *((uint32_t*)fb_info.base + i) = col;
ffffffff800015a8:	48 8b 15 c1 89 00 00 	mov    0x89c1(%rip),%rdx        # ffffffff80009f70 <fb_info>
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800015af:	31 c0                	xor    %eax,%eax
ffffffff800015b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800015b8:	48 83 c0 01          	add    $0x1,%rax
        *((uint32_t*)fb_info.base + i) = col;
ffffffff800015bc:	89 3a                	mov    %edi,(%rdx)
ffffffff800015be:	48 83 c2 04          	add    $0x4,%rdx
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800015c2:	48 39 c8             	cmp    %rcx,%rax
ffffffff800015c5:	75 f1                	jne    ffffffff800015b8 <fb_clearscreen+0x28>
    }
}
ffffffff800015c7:	f3 c3                	repz retq 
ffffffff800015c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800015d0 <fb_drawline>:

void fb_drawline(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, enum fb_color col)
{

ffffffff800015d0:	f3 c3                	repz retq 
ffffffff800015d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800015d9:	00 00 00 
ffffffff800015dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800015e0 <console_input>:

    //write the output buffer to screen
}

void console_input(KEY_INFO_t key)
{
ffffffff800015e0:	89 f8                	mov    %edi,%eax
ffffffff800015e2:	0f b6 fc             	movzbl %ah,%edi
    con_input_buffer.index++;
ffffffff800015e5:	48 8b 05 e4 99 00 00 	mov    0x99e4(%rip),%rax        # ffffffff8000afd0 <con_input_buffer+0x10>
ffffffff800015ec:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800015f0:	48 89 15 d9 99 00 00 	mov    %rdx,0x99d9(%rip)        # ffffffff8000afd0 <con_input_buffer+0x10>
    con_input_buffer.buffer[con_input_buffer.index] = key.ascii;
ffffffff800015f7:	48 8b 15 c2 99 00 00 	mov    0x99c2(%rip),%rdx        # ffffffff8000afc0 <con_input_buffer>
ffffffff800015fe:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
    

    con_output_buffer.buffer[con_output_buffer.index] = key.ascii;
ffffffff80001603:	48 8b 05 a6 99 00 00 	mov    0x99a6(%rip),%rax        # ffffffff8000afb0 <con_output_buffer+0x10>
ffffffff8000160a:	48 8b 15 8f 99 00 00 	mov    0x998f(%rip),%rdx        # ffffffff8000afa0 <con_output_buffer>
ffffffff80001611:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
    con_output_buffer.index++;
ffffffff80001615:	48 8b 05 94 99 00 00 	mov    0x9994(%rip),%rax        # ffffffff8000afb0 <con_output_buffer+0x10>
ffffffff8000161c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001620:	48 89 15 89 99 00 00 	mov    %rdx,0x9989(%rip)        # ffffffff8000afb0 <con_output_buffer+0x10>
    con_output_buffer.buffer[con_output_buffer.index] = 0x00;
ffffffff80001627:	48 8b 15 72 99 00 00 	mov    0x9972(%rip),%rdx        # ffffffff8000afa0 <con_output_buffer>
ffffffff8000162e:	c6 44 02 01 00       	movb   $0x0,0x1(%rdx,%rax,1)
    return;
ffffffff80001633:	c3                   	retq   
ffffffff80001634:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000163b:	00 00 00 00 
ffffffff8000163f:	90                   	nop

ffffffff80001640 <putchar>:
    switch(c)
ffffffff80001640:	40 80 ff 0a          	cmp    $0xa,%dil
ffffffff80001644:	0f 84 f6 00 00 00    	je     ffffffff80001740 <putchar+0x100>
ffffffff8000164a:	40 80 ff 0d          	cmp    $0xd,%dil
ffffffff8000164e:	0f 84 ec 00 00 00    	je     ffffffff80001740 <putchar+0x100>
ffffffff80001654:	40 80 ff 09          	cmp    $0x9,%dil
ffffffff80001658:	0f 84 be 00 00 00    	je     ffffffff8000171c <putchar+0xdc>
{
ffffffff8000165e:	41 57                	push   %r15
ffffffff80001660:	41 56                	push   %r14
ffffffff80001662:	89 f8                	mov    %edi,%eax
ffffffff80001664:	41 55                	push   %r13
ffffffff80001666:	41 54                	push   %r12
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001668:	48 c1 e0 04          	shl    $0x4,%rax
{
ffffffff8000166c:	55                   	push   %rbp
ffffffff8000166d:	53                   	push   %rbx
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff8000166e:	25 f0 0f 00 00       	and    $0xff0,%eax
ffffffff80001673:	4c 8d a8 24 6a 00 80 	lea    -0x7fff95dc(%rax),%r13
ffffffff8000167a:	48 05 34 6a 00 80    	add    $0xffffffff80006a34,%rax
{
ffffffff80001680:	48 83 ec 18          	sub    $0x18,%rsp
    console_drawchar(c, console_info.cursor_x, console_info.cursor_y, console_info.foreground_color, console_info.background_color);
ffffffff80001684:	8b 0d 5e 99 00 00    	mov    0x995e(%rip),%ecx        # ffffffff8000afe8 <console_info+0x8>
ffffffff8000168a:	0f b7 1d 61 99 00 00 	movzwl 0x9961(%rip),%ebx        # ffffffff8000aff2 <console_info+0x12>
ffffffff80001691:	44 8b 25 54 99 00 00 	mov    0x9954(%rip),%r12d        # ffffffff8000afec <console_info+0xc>
ffffffff80001698:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8000169d:	89 0c 24             	mov    %ecx,(%rsp)
ffffffff800016a0:	0f b7 0d 49 99 00 00 	movzwl 0x9949(%rip),%ecx        # ffffffff8000aff0 <console_info+0x10>
ffffffff800016a7:	8d 69 08             	lea    0x8(%rcx),%ebp
ffffffff800016aa:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
ffffffff800016ae:	66 90                	xchg   %ax,%ax
        row = glyph[i];
ffffffff800016b0:	45 0f b6 75 00       	movzbl 0x0(%r13),%r14d
ffffffff800016b5:	44 8b 7c 24 04       	mov    0x4(%rsp),%r15d
ffffffff800016ba:	eb 1d                	jmp    ffffffff800016d9 <putchar+0x99>
ffffffff800016bc:	0f 1f 40 00          	nopl   0x0(%rax)
                fb_putpixel(x+j, y+i, background);
ffffffff800016c0:	44 89 ff             	mov    %r15d,%edi
ffffffff800016c3:	44 89 e2             	mov    %r12d,%edx
ffffffff800016c6:	89 de                	mov    %ebx,%esi
ffffffff800016c8:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff800016cc:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, background);
ffffffff800016cf:	e8 8c fe ff ff       	callq  ffffffff80001560 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff800016d4:	44 39 fd             	cmp    %r15d,%ebp
ffffffff800016d7:	74 1e                	je     ffffffff800016f7 <putchar+0xb7>
            if(row & 0x80)
ffffffff800016d9:	45 84 f6             	test   %r14b,%r14b
ffffffff800016dc:	79 e2                	jns    ffffffff800016c0 <putchar+0x80>
                fb_putpixel(x+j, y+i, foreground);
ffffffff800016de:	8b 14 24             	mov    (%rsp),%edx
ffffffff800016e1:	44 89 ff             	mov    %r15d,%edi
ffffffff800016e4:	89 de                	mov    %ebx,%esi
ffffffff800016e6:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff800016ea:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, foreground);
ffffffff800016ed:	e8 6e fe ff ff       	callq  ffffffff80001560 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff800016f2:	44 39 fd             	cmp    %r15d,%ebp
ffffffff800016f5:	75 e2                	jne    ffffffff800016d9 <putchar+0x99>
ffffffff800016f7:	49 83 c5 01          	add    $0x1,%r13
ffffffff800016fb:	83 c3 01             	add    $0x1,%ebx
    for (uint32_t i = 0; i < 16; i++)
ffffffff800016fe:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff80001703:	75 ab                	jne    ffffffff800016b0 <putchar+0x70>
    console_info.cursor_x += 8;
ffffffff80001705:	66 83 05 e3 98 00 00 	addw   $0x8,0x98e3(%rip)        # ffffffff8000aff0 <console_info+0x10>
ffffffff8000170c:	08 
}
ffffffff8000170d:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001711:	5b                   	pop    %rbx
ffffffff80001712:	5d                   	pop    %rbp
ffffffff80001713:	41 5c                	pop    %r12
ffffffff80001715:	41 5d                	pop    %r13
ffffffff80001717:	41 5e                	pop    %r14
ffffffff80001719:	41 5f                	pop    %r15
ffffffff8000171b:	c3                   	retq   
            if(console_info.cursor_x += (PSF1_FONT_HEIGHT * 4) < fb_info.width)
ffffffff8000171c:	31 c0                	xor    %eax,%eax
ffffffff8000171e:	66 83 3d 54 88 00 00 	cmpw   $0x40,0x8854(%rip)        # ffffffff80009f7a <fb_info+0xa>
ffffffff80001725:	40 
ffffffff80001726:	0f 97 c0             	seta   %al
ffffffff80001729:	66 03 05 c0 98 00 00 	add    0x98c0(%rip),%ax        # ffffffff8000aff0 <console_info+0x10>
ffffffff80001730:	74 20                	je     ffffffff80001752 <putchar+0x112>
                console_info.cursor_x += (8*4);
ffffffff80001732:	83 c0 20             	add    $0x20,%eax
ffffffff80001735:	66 89 05 b4 98 00 00 	mov    %ax,0x98b4(%rip)        # ffffffff8000aff0 <console_info+0x10>
                return;
ffffffff8000173c:	c3                   	retq   
ffffffff8000173d:	0f 1f 00             	nopl   (%rax)
    console_info.cursor_x = 0;
ffffffff80001740:	31 d2                	xor    %edx,%edx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001742:	66 83 05 a8 98 00 00 	addw   $0x10,0x98a8(%rip)        # ffffffff8000aff2 <console_info+0x12>
ffffffff80001749:	10 
    console_info.cursor_x = 0;
ffffffff8000174a:	66 89 15 9f 98 00 00 	mov    %dx,0x989f(%rip)        # ffffffff8000aff0 <console_info+0x10>
ffffffff80001751:	c3                   	retq   
                console_info.cursor_x += (8*4);
ffffffff80001752:	b8 20 00 00 00       	mov    $0x20,%eax
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001757:	66 83 05 93 98 00 00 	addw   $0x10,0x9893(%rip)        # ffffffff8000aff2 <console_info+0x12>
ffffffff8000175e:	10 
                console_info.cursor_x += (8*4);
ffffffff8000175f:	66 89 05 8a 98 00 00 	mov    %ax,0x988a(%rip)        # ffffffff8000aff0 <console_info+0x10>
ffffffff80001766:	c3                   	retq   
ffffffff80001767:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000176e:	00 00 

ffffffff80001770 <console_init>:
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001770:	0f b7 05 01 88 00 00 	movzwl 0x8801(%rip),%eax        # ffffffff80009f78 <fb_info+0x8>
    uint64_t index = y * fb_info.width;
ffffffff80001777:	0f b7 3d fc 87 00 00 	movzwl 0x87fc(%rip),%edi        # ffffffff80009f7a <fb_info+0xa>
    console_info.font = (struct PSF1_FONT*)&_binary_zapl16_psf_start;
ffffffff8000177e:	48 c7 05 6f 98 00 00 	movq   $0xffffffff80006a20,0x986f(%rip)        # ffffffff8000aff8 <console_info+0x18>
ffffffff80001785:	20 6a 00 80 
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff80001789:	c7 05 55 98 00 00 ff 	movl   $0xffffffff,0x9855(%rip)        # ffffffff8000afe8 <console_info+0x8>
ffffffff80001790:	ff ff ff 
    console_info.background_color = FB_COLOR_BLACK;
ffffffff80001793:	c7 05 4f 98 00 00 00 	movl   $0xff000000,0x984f(%rip)        # ffffffff8000afec <console_info+0xc>
ffffffff8000179a:	00 00 ff 
    console_info.cursor_x = 0;
ffffffff8000179d:	c7 05 49 98 00 00 00 	movl   $0x0,0x9849(%rip)        # ffffffff8000aff0 <console_info+0x10>
ffffffff800017a4:	00 00 00 
    con_output_buffer.buffer = console_buffer;
ffffffff800017a7:	48 c7 05 ee 97 00 00 	movq   $0xffffffff80009fa0,0x97ee(%rip)        # ffffffff8000afa0 <con_output_buffer>
ffffffff800017ae:	a0 9f 00 80 
    con_output_buffer.buffer_size = sizeof(console_buffer);
ffffffff800017b2:	48 c7 05 eb 97 00 00 	movq   $0x1000,0x97eb(%rip)        # ffffffff8000afa8 <con_output_buffer+0x8>
ffffffff800017b9:	00 10 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff800017bd:	89 c2                	mov    %eax,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff800017bf:	66 c1 e8 02          	shr    $0x2,%ax
    con_output_buffer.index = 0;
ffffffff800017c3:	48 c7 05 e2 97 00 00 	movq   $0x0,0x97e2(%rip)        # ffffffff8000afb0 <con_output_buffer+0x10>
ffffffff800017ca:	00 00 00 00 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff800017ce:	0f b7 c0             	movzwl %ax,%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff800017d1:	66 c1 ea 04          	shr    $0x4,%dx
    con_input_buffer.buffer = cmd_buffer;
ffffffff800017d5:	48 c7 05 e0 97 00 00 	movq   $0xffffffff8000b000,0x97e0(%rip)        # ffffffff8000afc0 <con_input_buffer>
ffffffff800017dc:	00 b0 00 80 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff800017e0:	8d 04 40             	lea    (%rax,%rax,2),%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff800017e3:	0f b7 d2             	movzwl %dx,%edx
    con_input_buffer.buffer_size = sizeof(cmd_buffer);
ffffffff800017e6:	48 c7 05 d7 97 00 00 	movq   $0x100,0x97d7(%rip)        # ffffffff8000afc8 <con_input_buffer+0x8>
ffffffff800017ed:	00 01 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff800017f1:	89 15 ed 97 00 00    	mov    %edx,0x97ed(%rip)        # ffffffff8000afe4 <console_info+0x4>
    uint64_t index = y * fb_info.width;
ffffffff800017f7:	48 89 f9             	mov    %rdi,%rcx
    console_draw_hline(console_info.start_pos, FB_COLOR_YELLOW);
ffffffff800017fa:	48 63 d0             	movslq %eax,%rdx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff800017fd:	89 05 dd 97 00 00    	mov    %eax,0x97dd(%rip)        # ffffffff8000afe0 <console_info>
    uint64_t index = y * fb_info.width;
ffffffff80001803:	48 0f af d7          	imul   %rdi,%rdx
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001807:	66 85 ff             	test   %di,%di
ffffffff8000180a:	74 53                	je     ffffffff8000185f <console_init+0xef>
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff8000180c:	48 8b 35 5d 87 00 00 	mov    0x875d(%rip),%rsi        # ffffffff80009f70 <fb_info>
ffffffff80001813:	83 e9 01             	sub    $0x1,%ecx
ffffffff80001816:	4c 8d 46 04          	lea    0x4(%rsi),%r8
ffffffff8000181a:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff8000181e:	48 01 ca             	add    %rcx,%rdx
ffffffff80001821:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001825:	0f 1f 00             	nopl   (%rax)
ffffffff80001828:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff8000182e:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001832:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001835:	75 f1                	jne    ffffffff80001828 <console_init+0xb8>
    console_draw_hline(console_info.start_pos + 1, FB_COLOR_YELLOW);
ffffffff80001837:	8b 05 a3 97 00 00    	mov    0x97a3(%rip),%eax        # ffffffff8000afe0 <console_info>
ffffffff8000183d:	8d 50 01             	lea    0x1(%rax),%edx
    uint64_t index = y * fb_info.width;
ffffffff80001840:	48 0f af d7          	imul   %rdi,%rdx
ffffffff80001844:	48 01 d1             	add    %rdx,%rcx
ffffffff80001847:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff8000184b:	49 8d 14 88          	lea    (%r8,%rcx,4),%rdx
ffffffff8000184f:	90                   	nop
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001850:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001856:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff8000185a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000185d:	75 f1                	jne    ffffffff80001850 <console_init+0xe0>
    kbd_set_target(console_input);
ffffffff8000185f:	48 c7 c7 e0 15 00 80 	mov    $0xffffffff800015e0,%rdi
ffffffff80001866:	e9 c5 01 00 00       	jmpq   ffffffff80001a30 <kbd_set_target>
ffffffff8000186b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001870 <console_exec>:
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001870:	0f b7 05 03 87 00 00 	movzwl 0x8703(%rip),%eax        # ffffffff80009f7a <fb_info+0xa>
ffffffff80001877:	8b 15 63 97 00 00    	mov    0x9763(%rip),%edx        # ffffffff8000afe0 <console_info>
ffffffff8000187d:	8d 34 42             	lea    (%rdx,%rax,2),%esi
ffffffff80001880:	0f b7 15 f1 86 00 00 	movzwl 0x86f1(%rip),%edx        # ffffffff80009f78 <fb_info+0x8>
ffffffff80001887:	0f af d0             	imul   %eax,%edx
ffffffff8000188a:	39 d6                	cmp    %edx,%esi
ffffffff8000188c:	7d 2d                	jge    ffffffff800018bb <console_exec+0x4b>
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff8000188e:	48 8b 3d db 86 00 00 	mov    0x86db(%rip),%rdi        # ffffffff80009f70 <fb_info>
ffffffff80001895:	83 ea 01             	sub    $0x1,%edx
ffffffff80001898:	4c 63 c6             	movslq %esi,%r8
ffffffff8000189b:	29 f2                	sub    %esi,%edx
ffffffff8000189d:	8b 0d 49 97 00 00    	mov    0x9749(%rip),%ecx        # ffffffff8000afec <console_info+0xc>
ffffffff800018a3:	4c 01 c2             	add    %r8,%rdx
ffffffff800018a6:	4a 8d 04 87          	lea    (%rdi,%r8,4),%rax
ffffffff800018aa:	48 8d 54 97 04       	lea    0x4(%rdi,%rdx,4),%rdx
ffffffff800018af:	90                   	nop
ffffffff800018b0:	89 08                	mov    %ecx,(%rax)
ffffffff800018b2:	48 83 c0 04          	add    $0x4,%rax
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff800018b6:	48 39 d0             	cmp    %rdx,%rax
ffffffff800018b9:	75 f5                	jne    ffffffff800018b0 <console_exec+0x40>
}
ffffffff800018bb:	f3 c3                	repz retq 
ffffffff800018bd:	0f 1f 00             	nopl   (%rax)

ffffffff800018c0 <serial_init>:
#include "serial.h"
#include "../../io/io.h"


uint64_t serial_init(uint16_t port)
{
ffffffff800018c0:	41 55                	push   %r13
ffffffff800018c2:	41 54                	push   %r12
    outb(port + 1, 0x00);
ffffffff800018c4:	44 8d 67 01          	lea    0x1(%rdi),%r12d
{
ffffffff800018c8:	55                   	push   %rbp
ffffffff800018c9:	53                   	push   %rbx
ffffffff800018ca:	89 fb                	mov    %edi,%ebx
    outb(port + 3, 0x80);
ffffffff800018cc:	8d 6b 03             	lea    0x3(%rbx),%ebp
    outb(port + 1, 0x00);
ffffffff800018cf:	45 0f b7 e4          	movzwl %r12w,%r12d
ffffffff800018d3:	31 f6                	xor    %esi,%esi
{
ffffffff800018d5:	48 83 ec 08          	sub    $0x8,%rsp
    outb(port + 1, 0x00);
ffffffff800018d9:	44 89 e7             	mov    %r12d,%edi
    outb(port + 0, 0x00);
ffffffff800018dc:	44 0f b7 eb          	movzwl %bx,%r13d
    outb(port + 3, 0x80);
ffffffff800018e0:	0f b7 ed             	movzwl %bp,%ebp
    outb(port + 1, 0x00);
ffffffff800018e3:	e8 18 eb ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 3, 0x80);
ffffffff800018e8:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff800018ed:	89 ef                	mov    %ebp,%edi
ffffffff800018ef:	e8 0c eb ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 0, 0x00);
ffffffff800018f4:	31 f6                	xor    %esi,%esi
ffffffff800018f6:	44 89 ef             	mov    %r13d,%edi
ffffffff800018f9:	e8 02 eb ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 1, 0x00);
ffffffff800018fe:	31 f6                	xor    %esi,%esi
ffffffff80001900:	44 89 e7             	mov    %r12d,%edi
ffffffff80001903:	e8 f8 ea ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 3, 0x03);
ffffffff80001908:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8000190d:	89 ef                	mov    %ebp,%edi
ffffffff8000190f:	e8 ec ea ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 2, 0xC7);
ffffffff80001914:	8d 7b 02             	lea    0x2(%rbx),%edi
    outb(port + 4, 0x0B);
ffffffff80001917:	83 c3 04             	add    $0x4,%ebx
    outb(port + 2, 0xC7);
ffffffff8000191a:	be c7 00 00 00       	mov    $0xc7,%esi
    outb(port + 4, 0x0B);
ffffffff8000191f:	0f b7 db             	movzwl %bx,%ebx
    outb(port + 2, 0xC7);
ffffffff80001922:	0f b7 ff             	movzwl %di,%edi
ffffffff80001925:	e8 d6 ea ff ff       	callq  ffffffff80000400 <outb>
    outb(port + 4, 0x0B);
ffffffff8000192a:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff8000192f:	89 df                	mov    %ebx,%edi
ffffffff80001931:	e8 ca ea ff ff       	callq  ffffffff80000400 <outb>

    if(inb(port + 0) != 0xAE)
ffffffff80001936:	44 89 ef             	mov    %r13d,%edi
ffffffff80001939:	e8 d2 ea ff ff       	callq  ffffffff80000410 <inb>
ffffffff8000193e:	3c ae                	cmp    $0xae,%al
ffffffff80001940:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001945:	74 11                	je     ffffffff80001958 <serial_init+0x98>
        return 1;
    }

    outb(port + 4, 0x0F);
    return 0;
}
ffffffff80001947:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000194b:	48 89 d0             	mov    %rdx,%rax
ffffffff8000194e:	5b                   	pop    %rbx
ffffffff8000194f:	5d                   	pop    %rbp
ffffffff80001950:	41 5c                	pop    %r12
ffffffff80001952:	41 5d                	pop    %r13
ffffffff80001954:	c3                   	retq   
ffffffff80001955:	0f 1f 00             	nopl   (%rax)
    outb(port + 4, 0x0F);
ffffffff80001958:	89 df                	mov    %ebx,%edi
ffffffff8000195a:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff8000195f:	e8 9c ea ff ff       	callq  ffffffff80000400 <outb>
}
ffffffff80001964:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff80001968:	31 d2                	xor    %edx,%edx
}
ffffffff8000196a:	5b                   	pop    %rbx
ffffffff8000196b:	48 89 d0             	mov    %rdx,%rax
ffffffff8000196e:	5d                   	pop    %rbp
ffffffff8000196f:	41 5c                	pop    %r12
ffffffff80001971:	41 5d                	pop    %r13
ffffffff80001973:	c3                   	retq   
ffffffff80001974:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000197b:	00 00 00 00 
ffffffff8000197f:	90                   	nop

ffffffff80001980 <serial_received>:

uint64_t serial_received(uint16_t port)
{
    return inb(port + 5) & 1;
ffffffff80001980:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001983:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001987:	0f b7 ff             	movzwl %di,%edi
ffffffff8000198a:	e8 81 ea ff ff       	callq  ffffffff80000410 <inb>
}
ffffffff8000198f:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001993:	83 e0 01             	and    $0x1,%eax
}
ffffffff80001996:	c3                   	retq   
ffffffff80001997:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000199e:	00 00 

ffffffff800019a0 <serial_read>:

uint8_t serial_read(uint16_t port)
{
ffffffff800019a0:	55                   	push   %rbp
ffffffff800019a1:	53                   	push   %rbx
ffffffff800019a2:	0f b7 ef             	movzwl %di,%ebp
ffffffff800019a5:	83 c7 05             	add    $0x5,%edi
ffffffff800019a8:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800019ac:	0f b7 df             	movzwl %di,%ebx
ffffffff800019af:	90                   	nop
    return inb(port + 5) & 1;
ffffffff800019b0:	89 df                	mov    %ebx,%edi
ffffffff800019b2:	e8 59 ea ff ff       	callq  ffffffff80000410 <inb>
    while(serial_received(port) == 0);
ffffffff800019b7:	a8 01                	test   $0x1,%al
ffffffff800019b9:	74 f5                	je     ffffffff800019b0 <serial_read+0x10>

    return inb(port);
}
ffffffff800019bb:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port);
ffffffff800019bf:	89 ef                	mov    %ebp,%edi
}
ffffffff800019c1:	5b                   	pop    %rbx
ffffffff800019c2:	5d                   	pop    %rbp
    return inb(port);
ffffffff800019c3:	e9 48 ea ff ff       	jmpq   ffffffff80000410 <inb>
ffffffff800019c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800019cf:	00 

ffffffff800019d0 <serial_is_tx_empty>:

uint64_t serial_is_tx_empty(uint16_t port)
{
    return inb(port + 5) & 0x20;
ffffffff800019d0:	83 c7 05             	add    $0x5,%edi
{
ffffffff800019d3:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff800019d7:	0f b7 ff             	movzwl %di,%edi
ffffffff800019da:	e8 31 ea ff ff       	callq  ffffffff80000410 <inb>
ffffffff800019df:	83 e0 20             	and    $0x20,%eax
}
ffffffff800019e2:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff800019e6:	0f b6 c0             	movzbl %al,%eax
}
ffffffff800019e9:	c3                   	retq   
ffffffff800019ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff800019f0 <serial_write>:

void serial_write(uint16_t port, uint8_t data)
{
ffffffff800019f0:	41 54                	push   %r12
ffffffff800019f2:	44 0f b7 e7          	movzwl %di,%r12d
ffffffff800019f6:	83 c7 05             	add    $0x5,%edi
ffffffff800019f9:	55                   	push   %rbp
ffffffff800019fa:	89 f5                	mov    %esi,%ebp
ffffffff800019fc:	53                   	push   %rbx
ffffffff800019fd:	0f b7 df             	movzwl %di,%ebx
    return inb(port + 5) & 0x20;
ffffffff80001a00:	89 df                	mov    %ebx,%edi
ffffffff80001a02:	e8 09 ea ff ff       	callq  ffffffff80000410 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80001a07:	a8 20                	test   $0x20,%al
ffffffff80001a09:	74 f5                	je     ffffffff80001a00 <serial_write+0x10>
    outb(port, data);
ffffffff80001a0b:	5b                   	pop    %rbx
    outb(port, data);
ffffffff80001a0c:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80001a10:	44 89 e7             	mov    %r12d,%edi
ffffffff80001a13:	5d                   	pop    %rbp
ffffffff80001a14:	41 5c                	pop    %r12
    outb(port, data);
ffffffff80001a16:	e9 e5 e9 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001a1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001a20 <kbd_init>:


void kbd_init()
{

}
ffffffff80001a20:	f3 c3                	repz retq 
ffffffff80001a22:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001a29:	00 00 00 00 
ffffffff80001a2d:	0f 1f 00             	nopl   (%rax)

ffffffff80001a30 <kbd_set_target>:

void kbd_set_target(void* handler)
{
    kbd_handler = handler;
ffffffff80001a30:	48 89 3d 51 c8 00 00 	mov    %rdi,0xc851(%rip)        # ffffffff8000e288 <kbd_handler>
    kbd_active = 1;
ffffffff80001a37:	c6 05 52 c8 00 00 01 	movb   $0x1,0xc852(%rip)        # ffffffff8000e290 <kbd_active>
}
ffffffff80001a3e:	c3                   	retq   
ffffffff80001a3f:	90                   	nop

ffffffff80001a40 <kbd_translate>:

uint8_t kbd_translate(uint8_t scancode, uint8_t uppercase)
{
    if(scancode > 58) return 0;
ffffffff80001a40:	31 c0                	xor    %eax,%eax
ffffffff80001a42:	40 80 ff 3a          	cmp    $0x3a,%dil
ffffffff80001a46:	77 14                	ja     ffffffff80001a5c <kbd_translate+0x1c>
ffffffff80001a48:	40 0f b6 ff          	movzbl %dil,%edi

    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80001a4c:	40 84 f6             	test   %sil,%sil
ffffffff80001a4f:	0f b6 87 40 47 00 80 	movzbl -0x7fffb8c0(%rdi),%eax
ffffffff80001a56:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80001a59:	0f 45 c2             	cmovne %edx,%eax

    return kbd_table[scancode];
}
ffffffff80001a5c:	f3 c3                	repz retq 
ffffffff80001a5e:	66 90                	xchg   %ax,%ax

ffffffff80001a60 <kbd_handle>:
void kbd_handle()
{
    uint8_t data;
    KEY_INFO_t key_info;

    if(!kbd_active) return;
ffffffff80001a60:	80 3d 29 c8 00 00 00 	cmpb   $0x0,0xc829(%rip)        # ffffffff8000e290 <kbd_active>
ffffffff80001a67:	75 07                	jne    ffffffff80001a70 <kbd_handle+0x10>
ffffffff80001a69:	f3 c3                	repz retq 
ffffffff80001a6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
{
ffffffff80001a70:	48 83 ec 08          	sub    $0x8,%rsp

    data = inb(0x60);
ffffffff80001a74:	bf 60 00 00 00       	mov    $0x60,%edi
ffffffff80001a79:	e8 92 e9 ff ff       	callq  ffffffff80000410 <inb>

    uint8_t buffer[20];

    switch(data)
ffffffff80001a7e:	3c 36                	cmp    $0x36,%al
ffffffff80001a80:	74 36                	je     ffffffff80001ab8 <kbd_handle+0x58>
ffffffff80001a82:	77 1c                	ja     ffffffff80001aa0 <kbd_handle+0x40>
ffffffff80001a84:	3c 01                	cmp    $0x1,%al
ffffffff80001a86:	0f 84 84 00 00 00    	je     ffffffff80001b10 <kbd_handle+0xb0>
ffffffff80001a8c:	3c 2a                	cmp    $0x2a,%al
ffffffff80001a8e:	75 48                	jne    ffffffff80001ad8 <kbd_handle+0x78>
    {
        case KBD_LEFT_SHIFT:
            lshift_status = 1;
ffffffff80001a90:	c6 05 89 97 00 00 01 	movb   $0x1,0x9789(%rip)        # ffffffff8000b220 <lshift_status>
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
    key_info.scancode = data;

    kbd_handler(key_info);

ffffffff80001a97:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80001a9b:	c3                   	retq   
ffffffff80001a9c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(data)
ffffffff80001aa0:	3c aa                	cmp    $0xaa,%al
ffffffff80001aa2:	74 24                	je     ffffffff80001ac8 <kbd_handle+0x68>
ffffffff80001aa4:	3c b6                	cmp    $0xb6,%al
ffffffff80001aa6:	75 30                	jne    ffffffff80001ad8 <kbd_handle+0x78>
            rshift_status = 0;
ffffffff80001aa8:	c6 05 59 96 00 00 00 	movb   $0x0,0x9659(%rip)        # ffffffff8000b108 <rshift_status>
            return;
ffffffff80001aaf:	eb e6                	jmp    ffffffff80001a97 <kbd_handle+0x37>
ffffffff80001ab1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            rshift_status = 1;
ffffffff80001ab8:	c6 05 49 96 00 00 01 	movb   $0x1,0x9649(%rip)        # ffffffff8000b108 <rshift_status>
            return;
ffffffff80001abf:	eb d6                	jmp    ffffffff80001a97 <kbd_handle+0x37>
ffffffff80001ac1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            lshift_status = 0;
ffffffff80001ac8:	c6 05 51 97 00 00 00 	movb   $0x0,0x9751(%rip)        # ffffffff8000b220 <lshift_status>
            return;
ffffffff80001acf:	eb c6                	jmp    ffffffff80001a97 <kbd_handle+0x37>
ffffffff80001ad1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(scancode > 58) return 0;
ffffffff80001ad8:	31 d2                	xor    %edx,%edx
ffffffff80001ada:	3c 3a                	cmp    $0x3a,%al
ffffffff80001adc:	77 1e                	ja     ffffffff80001afc <kbd_handle+0x9c>
ffffffff80001ade:	0f b6 d0             	movzbl %al,%edx
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80001ae1:	0f b6 35 38 97 00 00 	movzbl 0x9738(%rip),%esi        # ffffffff8000b220 <lshift_status>
ffffffff80001ae8:	0f b6 92 40 47 00 80 	movzbl -0x7fffb8c0(%rdx),%edx
ffffffff80001aef:	40 0a 35 12 96 00 00 	or     0x9612(%rip),%sil        # ffffffff8000b108 <rshift_status>
ffffffff80001af6:	8d 4a e0             	lea    -0x20(%rdx),%ecx
ffffffff80001af9:	0f 45 d1             	cmovne %ecx,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80001afc:	31 c9                	xor    %ecx,%ecx
ffffffff80001afe:	48 83 c4 08          	add    $0x8,%rsp
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80001b02:	88 d5                	mov    %dl,%ch
    key_info.scancode = data;
ffffffff80001b04:	88 c1                	mov    %al,%cl
    kbd_handler(key_info);
ffffffff80001b06:	89 cf                	mov    %ecx,%edi
ffffffff80001b08:	ff 25 7a c7 00 00    	jmpq   *0xc77a(%rip)        # ffffffff8000e288 <kbd_handler>
ffffffff80001b0e:	66 90                	xchg   %ax,%ax
            printf("%d\n", pit_ticks);
ffffffff80001b10:	48 8b 35 89 c8 00 00 	mov    0xc889(%rip),%rsi        # ffffffff8000e3a0 <pit_ticks>
ffffffff80001b17:	48 c7 c7 fe 46 00 80 	mov    $0xffffffff800046fe,%rdi
ffffffff80001b1e:	31 c0                	xor    %eax,%eax
ffffffff80001b20:	48 83 c4 08          	add    $0x8,%rsp
            printf("%d\n", pit_ticks);
ffffffff80001b24:	e9 a7 13 00 00       	jmpq   ffffffff80002ed0 <printf_>
ffffffff80001b29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80001b30 <cpu_init>:

void cpu_init()
{
    uint64_t a,b,c,d;
    __cpuid(0,a,b,c,d);
ffffffff80001b30:	f3 c3                	repz retq 
ffffffff80001b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001b39:	00 00 00 
ffffffff80001b3c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001b40 <acpi_init>:
    struct RSDP20Descriptor* rsdp;

}ACPI_Info;

void acpi_init()
{
ffffffff80001b40:	48 83 ec 18          	sub    $0x18,%rsp
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80001b44:	48 8b 05 bd 83 00 00 	mov    0x83bd(%rip),%rax        # ffffffff80009f08 <boot_info+0x28>
    
    uint8_t test[8] = {'R', 'S', 'P', ' ', 'P', 'T', 'R', ' '};
ffffffff80001b4b:	48 bf 52 53 50 20 50 	movabs $0x2052545020505352,%rdi
ffffffff80001b52:	54 52 20 
ffffffff80001b55:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff80001b5a:	31 d2                	xor    %edx,%edx
ffffffff80001b5c:	b9 52 00 00 00       	mov    $0x52,%ecx
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80001b61:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80001b65:	48 89 05 bc 96 00 00 	mov    %rax,0x96bc(%rip)        # ffffffff8000b228 <ACPI_Info>
    for(uint32_t i = 0; i < 8; i++)
    {
        if(test[i] == ACPI_Info.rsdp->header.signature[i]) 
ffffffff80001b6c:	38 0c 10             	cmp    %cl,(%rax,%rdx,1)
ffffffff80001b6f:	74 0f                	je     ffffffff80001b80 <acpi_init+0x40>
            return;
    }

    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
    
ffffffff80001b71:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001b75:	c3                   	retq   
ffffffff80001b76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001b7d:	00 00 00 
ffffffff80001b80:	48 83 c2 01          	add    $0x1,%rdx
    for(uint32_t i = 0; i < 8; i++)
ffffffff80001b84:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff80001b88:	75 16                	jne    ffffffff80001ba0 <acpi_init+0x60>
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff80001b8a:	0f b6 70 0f          	movzbl 0xf(%rax),%esi
ffffffff80001b8e:	48 c7 c7 80 47 00 80 	mov    $0xffffffff80004780,%rdi
ffffffff80001b95:	31 c0                	xor    %eax,%eax
ffffffff80001b97:	48 83 c4 18          	add    $0x18,%rsp
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff80001b9b:	e9 30 13 00 00       	jmpq   ffffffff80002ed0 <printf_>
ffffffff80001ba0:	0f b6 4c 14 08       	movzbl 0x8(%rsp,%rdx,1),%ecx
ffffffff80001ba5:	eb c5                	jmp    ffffffff80001b6c <acpi_init+0x2c>
ffffffff80001ba7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80001bae:	00 00 

ffffffff80001bb0 <pic_EOI>:

uint64_t ticks;

void pic_EOI(uint8_t IRQ)
{
    if(IRQ >= 8)
ffffffff80001bb0:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80001bb4:	77 12                	ja     ffffffff80001bc8 <pic_EOI+0x18>
    {
        outb(PIC2_CMD, PIC_EOI);
    }
    
    outb(PIC1_CMD, PIC_EOI);
ffffffff80001bb6:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001bbb:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80001bc0:	e9 3b e8 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001bc5:	0f 1f 00             	nopl   (%rax)
{
ffffffff80001bc8:	48 83 ec 08          	sub    $0x8,%rsp
        outb(PIC2_CMD, PIC_EOI);
ffffffff80001bcc:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001bd1:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80001bd6:	e8 25 e8 ff ff       	callq  ffffffff80000400 <outb>
    outb(PIC1_CMD, PIC_EOI);
ffffffff80001bdb:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001be0:	bf 20 00 00 00       	mov    $0x20,%edi
}
ffffffff80001be5:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_CMD, PIC_EOI);
ffffffff80001be9:	e9 12 e8 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001bee:	66 90                	xchg   %ax,%ax

ffffffff80001bf0 <pic_set_mask>:

void pic_set_mask(uint8_t IRQ)
{
ffffffff80001bf0:	55                   	push   %rbp
ffffffff80001bf1:	53                   	push   %rbx
ffffffff80001bf2:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80001bf6:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80001bfa:	76 34                	jbe    ffffffff80001c30 <pic_set_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff80001bfc:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff80001bff:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) | (1 << IRQ);
ffffffff80001c04:	89 df                	mov    %ebx,%edi
ffffffff80001c06:	e8 05 e8 ff ff       	callq  ffffffff80000410 <inb>
    outb(port, value);
}
ffffffff80001c0b:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) | (1 << IRQ);
ffffffff80001c0f:	89 e9                	mov    %ebp,%ecx
ffffffff80001c11:	be 01 00 00 00       	mov    $0x1,%esi
    outb(port, value);
ffffffff80001c16:	89 df                	mov    %ebx,%edi
    value = inb(port) | (1 << IRQ);
ffffffff80001c18:	d3 e6                	shl    %cl,%esi
}
ffffffff80001c1a:	5b                   	pop    %rbx
ffffffff80001c1b:	5d                   	pop    %rbp
    value = inb(port) | (1 << IRQ);
ffffffff80001c1c:	09 f0                	or     %esi,%eax
    outb(port, value);
ffffffff80001c1e:	0f b6 f0             	movzbl %al,%esi
ffffffff80001c21:	e9 da e7 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001c2d:	00 00 00 
ffffffff80001c30:	89 fd                	mov    %edi,%ebp
ffffffff80001c32:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80001c37:	eb cb                	jmp    ffffffff80001c04 <pic_set_mask+0x14>
ffffffff80001c39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80001c40 <pic_clear_mask>:

void pic_clear_mask(uint8_t IRQ)
{
ffffffff80001c40:	55                   	push   %rbp
ffffffff80001c41:	53                   	push   %rbx
ffffffff80001c42:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80001c46:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80001c4a:	76 34                	jbe    ffffffff80001c80 <pic_clear_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff80001c4c:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff80001c4f:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) & ~(1 << IRQ);
ffffffff80001c54:	89 df                	mov    %ebx,%edi
ffffffff80001c56:	e8 b5 e7 ff ff       	callq  ffffffff80000410 <inb>
    outb(port, value);
}
ffffffff80001c5b:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) & ~(1 << IRQ);
ffffffff80001c5f:	89 e9                	mov    %ebp,%ecx
ffffffff80001c61:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    outb(port, value);
ffffffff80001c66:	89 df                	mov    %ebx,%edi
    value = inb(port) & ~(1 << IRQ);
ffffffff80001c68:	d3 c2                	rol    %cl,%edx
}
ffffffff80001c6a:	5b                   	pop    %rbx
ffffffff80001c6b:	5d                   	pop    %rbp
    value = inb(port) & ~(1 << IRQ);
ffffffff80001c6c:	21 d0                	and    %edx,%eax
    outb(port, value);
ffffffff80001c6e:	0f b6 f0             	movzbl %al,%esi
ffffffff80001c71:	e9 8a e7 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001c76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001c7d:	00 00 00 
ffffffff80001c80:	89 fd                	mov    %edi,%ebp
ffffffff80001c82:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80001c87:	eb cb                	jmp    ffffffff80001c54 <pic_clear_mask+0x14>
ffffffff80001c89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80001c90 <pic_disable>:

void pic_disable()
{
ffffffff80001c90:	48 83 ec 08          	sub    $0x8,%rsp
    outb(PIC2_DATA, 0xff);
ffffffff80001c94:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80001c99:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80001c9e:	e8 5d e7 ff ff       	callq  ffffffff80000400 <outb>
    outb(PIC1_DATA, 0xff);
ffffffff80001ca3:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80001ca8:	bf 21 00 00 00       	mov    $0x21,%edi
}
ffffffff80001cad:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_DATA, 0xff);
ffffffff80001cb1:	e9 4a e7 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001cb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001cbd:	00 00 00 

ffffffff80001cc0 <pic_remap>:

void pic_remap()
{
ffffffff80001cc0:	55                   	push   %rbp
ffffffff80001cc1:	53                   	push   %rbx
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80001cc2:	bf 21 00 00 00       	mov    $0x21,%edi
{
ffffffff80001cc7:	48 83 ec 08          	sub    $0x8,%rsp
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80001ccb:	e8 40 e7 ff ff       	callq  ffffffff80000410 <inb>
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80001cd0:	bf a1 00 00 00       	mov    $0xa1,%edi
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80001cd5:	89 c5                	mov    %eax,%ebp
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80001cd7:	e8 34 e7 ff ff       	callq  ffffffff80000410 <inb>

    outb(PIC1_CMD, 0x11);
ffffffff80001cdc:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80001ce1:	bf 20 00 00 00       	mov    $0x20,%edi
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80001ce6:	89 c3                	mov    %eax,%ebx
    outb(PIC1_CMD, 0x11);
ffffffff80001ce8:	e8 13 e7 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001ced:	31 c0                	xor    %eax,%eax
ffffffff80001cef:	e8 2c e7 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_CMD, 0x11);
ffffffff80001cf4:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80001cf9:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80001cfe:	e8 fd e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d03:	31 c0                	xor    %eax,%eax
ffffffff80001d05:	e8 16 e7 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x20);
ffffffff80001d0a:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001d0f:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80001d14:	e8 e7 e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d19:	31 c0                	xor    %eax,%eax
ffffffff80001d1b:	e8 00 e7 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x20);
ffffffff80001d20:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001d25:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80001d2a:	e8 d1 e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d2f:	31 c0                	xor    %eax,%eax
ffffffff80001d31:	e8 ea e6 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x04);
ffffffff80001d36:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80001d3b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80001d40:	e8 bb e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d45:	31 c0                	xor    %eax,%eax
ffffffff80001d47:	e8 d4 e6 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x02);
ffffffff80001d4c:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80001d51:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80001d56:	e8 a5 e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d5b:	31 c0                	xor    %eax,%eax
ffffffff80001d5d:	e8 be e6 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, 0x01);
ffffffff80001d62:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80001d67:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80001d6c:	e8 8f e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d71:	31 c0                	xor    %eax,%eax
ffffffff80001d73:	e8 a8 e6 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, 0x01);
ffffffff80001d78:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80001d7d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80001d82:	e8 79 e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d87:	31 c0                	xor    %eax,%eax
ffffffff80001d89:	e8 92 e6 ff ff       	callq  ffffffff80000420 <io_wait>

    outb(PIC1_DATA, mask1);
ffffffff80001d8e:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80001d92:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80001d97:	e8 64 e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001d9c:	31 c0                	xor    %eax,%eax
ffffffff80001d9e:	e8 7d e6 ff ff       	callq  ffffffff80000420 <io_wait>
    outb(PIC2_DATA, mask2);
ffffffff80001da3:	0f b6 f3             	movzbl %bl,%esi
ffffffff80001da6:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80001dab:	e8 50 e6 ff ff       	callq  ffffffff80000400 <outb>
    io_wait();
ffffffff80001db0:	31 c0                	xor    %eax,%eax
}
ffffffff80001db2:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80001db6:	5b                   	pop    %rbx
ffffffff80001db7:	5d                   	pop    %rbp
    io_wait();
ffffffff80001db8:	e9 63 e6 ff ff       	jmpq   ffffffff80000420 <io_wait>
ffffffff80001dbd:	0f 1f 00             	nopl   (%rax)

ffffffff80001dc0 <pit_init>:



void pit_init(uint64_t freq)
{
ffffffff80001dc0:	53                   	push   %rbx
    if(freq > 1193181)
        working_freq = 1193181;

    uint32_t divisor = 1193180 / working_freq;

    outb(0x43, 0x36);
ffffffff80001dc1:	be 36 00 00 00       	mov    $0x36,%esi
{
ffffffff80001dc6:	48 89 fb             	mov    %rdi,%rbx
    outb(0x43, 0x36);
ffffffff80001dc9:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff80001dce:	e8 2d e6 ff ff       	callq  ffffffff80000400 <outb>
    uint32_t divisor = 1193180 / working_freq;
ffffffff80001dd3:	48 81 fb dd 34 12 00 	cmp    $0x1234dd,%rbx
ffffffff80001dda:	bf dd 34 12 00       	mov    $0x1234dd,%edi
ffffffff80001ddf:	b8 10 27 00 00       	mov    $0x2710,%eax
ffffffff80001de4:	48 0f 46 fb          	cmovbe %rbx,%rdi
ffffffff80001de8:	48 81 ff 10 27 00 00 	cmp    $0x2710,%rdi
ffffffff80001def:	48 0f 42 f8          	cmovb  %rax,%rdi
ffffffff80001df3:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
ffffffff80001df8:	31 d2                	xor    %edx,%edx
ffffffff80001dfa:	48 f7 f7             	div    %rdi
    outb(0x40, divisor & 0xff);
ffffffff80001dfd:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80001e02:	89 c6                	mov    %eax,%esi
ffffffff80001e04:	e8 f7 e5 ff ff       	callq  ffffffff80000400 <outb>
    outb(0x40, divisor >> 8);
ffffffff80001e09:	5b                   	pop    %rbx
    outb(0x40, divisor >> 8);
ffffffff80001e0a:	31 f6                	xor    %esi,%esi
ffffffff80001e0c:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80001e11:	e9 ea e5 ff ff       	jmpq   ffffffff80000400 <outb>
ffffffff80001e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001e1d:	00 00 00 

ffffffff80001e20 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
ffffffff80001e20:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80001e23:	73 04                	jae    ffffffff80001e29 <_out_buffer+0x9>
    ((char*)buffer)[idx] = character;
ffffffff80001e25:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  }
}
ffffffff80001e29:	f3 c3                	repz retq 
ffffffff80001e2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001e30 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
ffffffff80001e30:	f3 c3                	repz retq 
ffffffff80001e32:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001e39:	00 00 00 00 
ffffffff80001e3d:	0f 1f 00             	nopl   (%rax)

ffffffff80001e40 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
ffffffff80001e40:	40 84 ff             	test   %dil,%dil
{
ffffffff80001e43:	48 89 f0             	mov    %rsi,%rax
  if (character) {
ffffffff80001e46:	74 10                	je     ffffffff80001e58 <_out_fct+0x18>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
ffffffff80001e48:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffffff80001e4c:	40 0f be ff          	movsbl %dil,%edi
ffffffff80001e50:	ff 20                	jmpq   *(%rax)
ffffffff80001e52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  }
}
ffffffff80001e58:	f3 c3                	repz retq 
ffffffff80001e5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80001e60 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80001e60:	41 57                	push   %r15
ffffffff80001e62:	41 56                	push   %r14
ffffffff80001e64:	41 55                	push   %r13
ffffffff80001e66:	41 54                	push   %r12
ffffffff80001e68:	49 89 cd             	mov    %rcx,%r13
ffffffff80001e6b:	55                   	push   %rbp
ffffffff80001e6c:	53                   	push   %rbx
ffffffff80001e6d:	48 89 fd             	mov    %rdi,%rbp
ffffffff80001e70:	4c 89 c3             	mov    %r8,%rbx
ffffffff80001e73:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80001e77:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
ffffffff80001e7e:	48 89 34 24          	mov    %rsi,(%rsp)
ffffffff80001e82:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80001e87:	8b 7c 24 60          	mov    0x60(%rsp),%edi
ffffffff80001e8b:	89 c6                	mov    %eax,%esi
ffffffff80001e8d:	89 c1                	mov    %eax,%ecx
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
ffffffff80001e8f:	89 c2                	mov    %eax,%edx
ffffffff80001e91:	83 e6 10             	and    $0x10,%esi
ffffffff80001e94:	83 e1 03             	and    $0x3,%ecx
ffffffff80001e97:	83 e2 02             	and    $0x2,%edx
ffffffff80001e9a:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
ffffffff80001e9e:	75 79                	jne    ffffffff80001f19 <_ntoa_format+0xb9>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80001ea0:	44 8b 54 24 78       	mov    0x78(%rsp),%r10d
ffffffff80001ea5:	41 89 c0             	mov    %eax,%r8d
ffffffff80001ea8:	8b 54 24 70          	mov    0x70(%rsp),%edx
ffffffff80001eac:	41 83 e0 01          	and    $0x1,%r8d
ffffffff80001eb0:	45 85 d2             	test   %r10d,%r10d
ffffffff80001eb3:	0f 85 d7 00 00 00    	jne    ffffffff80001f90 <_ntoa_format+0x130>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001eb9:	49 39 d1             	cmp    %rdx,%r9
ffffffff80001ebc:	73 27                	jae    ffffffff80001ee5 <_ntoa_format+0x85>
ffffffff80001ebe:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001ec2:	75 12                	jne    ffffffff80001ed6 <_ntoa_format+0x76>
ffffffff80001ec4:	e9 b7 02 00 00       	jmpq   ffffffff80002180 <_ntoa_format+0x320>
ffffffff80001ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001ed0:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001ed4:	74 0f                	je     ffffffff80001ee5 <_ntoa_format+0x85>
      buf[len++] = '0';
ffffffff80001ed6:	49 83 c1 01          	add    $0x1,%r9
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001eda:	49 39 d1             	cmp    %rdx,%r9
      buf[len++] = '0';
ffffffff80001edd:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001ee3:	72 eb                	jb     ffffffff80001ed0 <_ntoa_format+0x70>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001ee5:	45 85 c0             	test   %r8d,%r8d
ffffffff80001ee8:	74 2f                	je     ffffffff80001f19 <_ntoa_format+0xb9>
ffffffff80001eea:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff80001eef:	4d 39 ce             	cmp    %r9,%r14
ffffffff80001ef2:	76 25                	jbe    ffffffff80001f19 <_ntoa_format+0xb9>
ffffffff80001ef4:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001ef8:	75 10                	jne    ffffffff80001f0a <_ntoa_format+0xaa>
ffffffff80001efa:	e9 8b 03 00 00       	jmpq   ffffffff8000228a <_ntoa_format+0x42a>
ffffffff80001eff:	90                   	nop
ffffffff80001f00:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001f04:	0f 84 76 02 00 00    	je     ffffffff80002180 <_ntoa_format+0x320>
      buf[len++] = '0';
ffffffff80001f0a:	49 83 c1 01          	add    $0x1,%r9
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001f0e:	4d 39 f1             	cmp    %r14,%r9
      buf[len++] = '0';
ffffffff80001f11:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001f17:	75 e7                	jne    ffffffff80001f00 <_ntoa_format+0xa0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
ffffffff80001f19:	85 f6                	test   %esi,%esi
ffffffff80001f1b:	74 41                	je     ffffffff80001f5e <_ntoa_format+0xfe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80001f1d:	f6 c4 04             	test   $0x4,%ah
ffffffff80001f20:	0f 85 5a 01 00 00    	jne    ffffffff80002080 <_ntoa_format+0x220>
ffffffff80001f26:	4d 85 c9             	test   %r9,%r9
ffffffff80001f29:	0f 85 31 01 00 00    	jne    ffffffff80002060 <_ntoa_format+0x200>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001f2f:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff80001f34:	0f 84 2f 03 00 00    	je     ffffffff80002269 <_ntoa_format+0x409>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001f3a:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80001f3f:	0f 85 37 03 00 00    	jne    ffffffff8000227c <_ntoa_format+0x41c>
      buf[len++] = 'b';
ffffffff80001f45:	c6 03 62             	movb   $0x62,(%rbx)
ffffffff80001f48:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
ffffffff80001f4f:	00 00 
ffffffff80001f51:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80001f56:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
ffffffff80001f5a:	c6 04 33 30          	movb   $0x30,(%rbx,%rsi,1)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff80001f5e:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80001f62:	0f 84 38 02 00 00    	je     ffffffff800021a0 <_ntoa_format+0x340>
    if (negative) {
ffffffff80001f68:	40 84 ff             	test   %dil,%dil
ffffffff80001f6b:	75 4b                	jne    ffffffff80001fb8 <_ntoa_format+0x158>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
ffffffff80001f6d:	a8 04                	test   $0x4,%al
ffffffff80001f6f:	0f 85 a3 01 00 00    	jne    ffffffff80002118 <_ntoa_format+0x2b8>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
ffffffff80001f75:	a8 08                	test   $0x8,%al
ffffffff80001f77:	0f 84 9b 02 00 00    	je     ffffffff80002218 <_ntoa_format+0x3b8>
      buf[len++] = ' ';
ffffffff80001f7d:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80001f81:	42 c6 04 0b 20       	movb   $0x20,(%rbx,%r9,1)
ffffffff80001f86:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80001f8b:	eb 39                	jmp    ffffffff80001fc6 <_ntoa_format+0x166>
ffffffff80001f8d:	0f 1f 00             	nopl   (%rax)
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80001f90:	45 85 c0             	test   %r8d,%r8d
ffffffff80001f93:	0f 84 97 01 00 00    	je     ffffffff80002130 <_ntoa_format+0x2d0>
ffffffff80001f99:	40 84 ff             	test   %dil,%dil
ffffffff80001f9c:	75 04                	jne    ffffffff80001fa2 <_ntoa_format+0x142>
ffffffff80001f9e:	a8 0c                	test   $0xc,%al
ffffffff80001fa0:	74 05                	je     ffffffff80001fa7 <_ntoa_format+0x147>
      width--;
ffffffff80001fa2:	83 6c 24 78 01       	subl   $0x1,0x78(%rsp)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80001fa7:	49 39 d1             	cmp    %rdx,%r9
ffffffff80001faa:	0f 82 0e ff ff ff    	jb     ffffffff80001ebe <_ntoa_format+0x5e>
ffffffff80001fb0:	e9 35 ff ff ff       	jmpq   ffffffff80001eea <_ntoa_format+0x8a>
ffffffff80001fb5:	0f 1f 00             	nopl   (%rax)
      buf[len++] = '-';
ffffffff80001fb8:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80001fbc:	42 c6 04 0b 2d       	movb   $0x2d,(%rbx,%r9,1)
ffffffff80001fc1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80001fc6:	85 c9                	test   %ecx,%ecx
ffffffff80001fc8:	0f 84 fa 00 00 00    	je     ffffffff800020c8 <_ntoa_format+0x268>
ffffffff80001fce:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    for (size_t i = len; i < width; i++) {
ffffffff80001fd3:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
ffffffff80001fd8:	4c 89 fa             	mov    %r15,%rdx
ffffffff80001fdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80001fe0:	49 83 ec 01          	sub    $0x1,%r12
ffffffff80001fe4:	4c 8d 72 01          	lea    0x1(%rdx),%r14
ffffffff80001fe8:	4c 89 e9             	mov    %r13,%rcx
ffffffff80001feb:	42 0f be 3c 23       	movsbl (%rbx,%r12,1),%edi
ffffffff80001ff0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80001ff4:	ff d5                	callq  *%rbp
  while (len) {
ffffffff80001ff6:	4d 85 e4             	test   %r12,%r12
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80001ff9:	4c 89 f2             	mov    %r14,%rdx
  while (len) {
ffffffff80001ffc:	75 e2                	jne    ffffffff80001fe0 <_ntoa_format+0x180>
ffffffff80001ffe:	4c 03 7c 24 10       	add    0x10(%rsp),%r15
  if (flags & FLAGS_LEFT) {
ffffffff80002003:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
ffffffff80002007:	85 c0                	test   %eax,%eax
ffffffff80002009:	74 3a                	je     ffffffff80002045 <_ntoa_format+0x1e5>
    while (idx - start_idx < width) {
ffffffff8000200b:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff80002010:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002013:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
ffffffff80002018:	49 39 d6             	cmp    %rdx,%r14
ffffffff8000201b:	76 28                	jbe    ffffffff80002045 <_ntoa_format+0x1e5>
ffffffff8000201d:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80002020:	49 8d 5f 01          	lea    0x1(%r15),%rbx
ffffffff80002024:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002027:	4c 89 e9             	mov    %r13,%rcx
ffffffff8000202a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000202e:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002033:	ff d5                	callq  *%rbp
    while (idx - start_idx < width) {
ffffffff80002035:	48 89 da             	mov    %rbx,%rdx
ffffffff80002038:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
      out(' ', buffer, idx++, maxlen);
ffffffff8000203d:	49 89 df             	mov    %rbx,%r15
    while (idx - start_idx < width) {
ffffffff80002040:	4c 39 f2             	cmp    %r14,%rdx
ffffffff80002043:	72 db                	jb     ffffffff80002020 <_ntoa_format+0x1c0>
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
ffffffff80002045:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80002049:	4c 89 f8             	mov    %r15,%rax
ffffffff8000204c:	5b                   	pop    %rbx
ffffffff8000204d:	5d                   	pop    %rbp
ffffffff8000204e:	41 5c                	pop    %r12
ffffffff80002050:	41 5d                	pop    %r13
ffffffff80002052:	41 5e                	pop    %r14
ffffffff80002054:	41 5f                	pop    %r15
ffffffff80002056:	c3                   	retq   
ffffffff80002057:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000205e:	00 00 
ffffffff80002060:	8b 54 24 70          	mov    0x70(%rsp),%edx
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80002064:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80002067:	0f 84 e3 00 00 00    	je     ffffffff80002150 <_ntoa_format+0x2f0>
ffffffff8000206d:	8b 54 24 78          	mov    0x78(%rsp),%edx
ffffffff80002071:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80002074:	0f 84 d6 00 00 00    	je     ffffffff80002150 <_ntoa_format+0x2f0>
ffffffff8000207a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002080:	49 83 f9 1f          	cmp    $0x1f,%r9
ffffffff80002084:	0f 96 c2             	setbe  %dl
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002087:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff8000208c:	0f 84 1e 01 00 00    	je     ffffffff800021b0 <_ntoa_format+0x350>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002092:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80002097:	0f 85 a3 00 00 00    	jne    ffffffff80002140 <_ntoa_format+0x2e0>
ffffffff8000209d:	84 d2                	test   %dl,%dl
ffffffff8000209f:	0f 84 9b 00 00 00    	je     ffffffff80002140 <_ntoa_format+0x2e0>
ffffffff800020a5:	49 8d 71 01          	lea    0x1(%r9),%rsi
      buf[len++] = 'b';
ffffffff800020a9:	42 c6 04 0b 62       	movb   $0x62,(%rbx,%r9,1)
ffffffff800020ae:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff800020b3:	48 83 7c 24 10 1f    	cmpq   $0x1f,0x10(%rsp)
ffffffff800020b9:	0f 86 92 fe ff ff    	jbe    ffffffff80001f51 <_ntoa_format+0xf1>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800020bf:	85 c9                	test   %ecx,%ecx
ffffffff800020c1:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff800020c6:	75 3a                	jne    ffffffff80002102 <_ntoa_format+0x2a2>
ffffffff800020c8:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff800020cd:	4c 3b 74 24 10       	cmp    0x10(%rsp),%r14
ffffffff800020d2:	0f 86 50 01 00 00    	jbe    ffffffff80002228 <_ntoa_format+0x3c8>
ffffffff800020d8:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff800020dd:	49 01 d6             	add    %rdx,%r14
ffffffff800020e0:	4c 2b 74 24 10       	sub    0x10(%rsp),%r14
ffffffff800020e5:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff800020e8:	4c 8d 7a 01          	lea    0x1(%rdx),%r15
ffffffff800020ec:	4c 89 e9             	mov    %r13,%rcx
ffffffff800020ef:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800020f3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800020f8:	ff d5                	callq  *%rbp
    for (size_t i = len; i < width; i++) {
ffffffff800020fa:	4d 39 f7             	cmp    %r14,%r15
ffffffff800020fd:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002100:	75 e6                	jne    ffffffff800020e8 <_ntoa_format+0x288>
  while (len) {
ffffffff80002102:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
ffffffff80002108:	0f 85 c5 fe ff ff    	jne    ffffffff80001fd3 <_ntoa_format+0x173>
ffffffff8000210e:	e9 f0 fe ff ff       	jmpq   ffffffff80002003 <_ntoa_format+0x1a3>
ffffffff80002113:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      buf[len++] = '+';  // ignore the space if the '+' exists
ffffffff80002118:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff8000211c:	42 c6 04 0b 2b       	movb   $0x2b,(%rbx,%r9,1)
ffffffff80002121:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002126:	e9 9b fe ff ff       	jmpq   ffffffff80001fc6 <_ntoa_format+0x166>
ffffffff8000212b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002130:	49 39 d1             	cmp    %rdx,%r9
ffffffff80002133:	0f 82 85 fd ff ff    	jb     ffffffff80001ebe <_ntoa_format+0x5e>
ffffffff80002139:	e9 db fd ff ff       	jmpq   ffffffff80001f19 <_ntoa_format+0xb9>
ffffffff8000213e:	66 90                	xchg   %ax,%ax
ffffffff80002140:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80002145:	e9 69 ff ff ff       	jmpq   ffffffff800020b3 <_ntoa_format+0x253>
ffffffff8000214a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (len && (base == 16U)) {
ffffffff80002150:	4d 89 c8             	mov    %r9,%r8
ffffffff80002153:	49 83 e8 01          	sub    $0x1,%r8
ffffffff80002157:	0f 95 c2             	setne  %dl
ffffffff8000215a:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff8000215f:	40 0f 94 c6          	sete   %sil
ffffffff80002163:	40 20 f2             	and    %sil,%dl
ffffffff80002166:	0f 84 d9 00 00 00    	je     ffffffff80002245 <_ntoa_format+0x3e5>
        len--;
ffffffff8000216c:	49 8d 71 fe          	lea    -0x2(%r9),%rsi
ffffffff80002170:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002175:	eb 3e                	jmp    ffffffff800021b5 <_ntoa_format+0x355>
ffffffff80002177:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000217e:	00 00 
  if (flags & FLAGS_HASH) {
ffffffff80002180:	85 f6                	test   %esi,%esi
ffffffff80002182:	74 6c                	je     ffffffff800021f0 <_ntoa_format+0x390>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80002184:	f6 c4 04             	test   $0x4,%ah
ffffffff80002187:	41 b9 20 00 00 00    	mov    $0x20,%r9d
ffffffff8000218d:	0f 84 d1 fe ff ff    	je     ffffffff80002064 <_ntoa_format+0x204>
ffffffff80002193:	e9 e8 fe ff ff       	jmpq   ffffffff80002080 <_ntoa_format+0x220>
ffffffff80002198:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000219f:	00 
ffffffff800021a0:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff800021a7:	00 00 
ffffffff800021a9:	e9 18 fe ff ff       	jmpq   ffffffff80001fc6 <_ntoa_format+0x166>
ffffffff800021ae:	66 90                	xchg   %ax,%ax
ffffffff800021b0:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800021b5:	89 c6                	mov    %eax,%esi
ffffffff800021b7:	83 e6 20             	and    $0x20,%esi
ffffffff800021ba:	75 08                	jne    ffffffff800021c4 <_ntoa_format+0x364>
ffffffff800021bc:	84 d2                	test   %dl,%dl
ffffffff800021be:	0f 85 8e 00 00 00    	jne    ffffffff80002252 <_ntoa_format+0x3f2>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800021c4:	85 f6                	test   %esi,%esi
ffffffff800021c6:	0f 84 e7 fe ff ff    	je     ffffffff800020b3 <_ntoa_format+0x253>
ffffffff800021cc:	84 d2                	test   %dl,%dl
ffffffff800021ce:	0f 84 df fe ff ff    	je     ffffffff800020b3 <_ntoa_format+0x253>
      buf[len++] = 'X';
ffffffff800021d4:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff800021d9:	c6 04 33 58          	movb   $0x58,(%rbx,%rsi,1)
ffffffff800021dd:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800021e1:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff800021e6:	e9 c8 fe ff ff       	jmpq   ffffffff800020b3 <_ntoa_format+0x253>
ffffffff800021eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800021f0:	85 c9                	test   %ecx,%ecx
ffffffff800021f2:	75 3e                	jne    ffffffff80002232 <_ntoa_format+0x3d2>
ffffffff800021f4:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff800021f9:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80002200:	00 00 
ffffffff80002202:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff80002206:	0f 87 cc fe ff ff    	ja     ffffffff800020d8 <_ntoa_format+0x278>
ffffffff8000220c:	e9 bd fd ff ff       	jmpq   ffffffff80001fce <_ntoa_format+0x16e>
ffffffff80002211:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80002218:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff8000221d:	e9 9d fe ff ff       	jmpq   ffffffff800020bf <_ntoa_format+0x25f>
ffffffff80002222:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002228:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff8000222d:	e9 d0 fe ff ff       	jmpq   ffffffff80002102 <_ntoa_format+0x2a2>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002232:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80002237:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000223e:	00 00 
ffffffff80002240:	e9 8e fd ff ff       	jmpq   ffffffff80001fd3 <_ntoa_format+0x173>
      len--;
ffffffff80002245:	4d 89 c1             	mov    %r8,%r9
ffffffff80002248:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000224d:	e9 35 fe ff ff       	jmpq   ffffffff80002087 <_ntoa_format+0x227>
      buf[len++] = 'x';
ffffffff80002252:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80002257:	c6 04 33 78          	movb   $0x78,(%rbx,%rsi,1)
ffffffff8000225b:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000225f:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002264:	e9 4a fe ff ff       	jmpq   ffffffff800020b3 <_ntoa_format+0x253>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002269:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
ffffffff80002270:	00 00 
ffffffff80002272:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002277:	e9 39 ff ff ff       	jmpq   ffffffff800021b5 <_ntoa_format+0x355>
      buf[len++] = '0';
ffffffff8000227c:	c6 03 30             	movb   $0x30,(%rbx)
ffffffff8000227f:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80002285:	e9 de fc ff ff       	jmpq   ffffffff80001f68 <_ntoa_format+0x108>
  if (flags & FLAGS_HASH) {
ffffffff8000228a:	85 f6                	test   %esi,%esi
ffffffff8000228c:	74 17                	je     ffffffff800022a5 <_ntoa_format+0x445>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff8000228e:	f6 c4 04             	test   $0x4,%ah
ffffffff80002291:	0f 84 cd fd ff ff    	je     ffffffff80002064 <_ntoa_format+0x204>
ffffffff80002297:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000229e:	00 00 
ffffffff800022a0:	e9 1a fe ff ff       	jmpq   ffffffff800020bf <_ntoa_format+0x25f>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800022a5:	85 c9                	test   %ecx,%ecx
    for (size_t i = len; i < width; i++) {
ffffffff800022a7:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff800022ae:	00 00 
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800022b0:	0f 85 18 fd ff ff    	jne    ffffffff80001fce <_ntoa_format+0x16e>
    for (size_t i = len; i < width; i++) {
ffffffff800022b6:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff800022ba:	0f 87 18 fe ff ff    	ja     ffffffff800020d8 <_ntoa_format+0x278>
ffffffff800022c0:	e9 09 fd ff ff       	jmpq   ffffffff80001fce <_ntoa_format+0x16e>
ffffffff800022c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800022cc:	00 00 00 00 

ffffffff800022d0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff800022d0:	41 55                	push   %r13
ffffffff800022d2:	41 54                	push   %r12
ffffffff800022d4:	4c 89 c0             	mov    %r8,%rax
ffffffff800022d7:	55                   	push   %rbp
ffffffff800022d8:	53                   	push   %rbx
ffffffff800022d9:	48 89 d3             	mov    %rdx,%rbx
ffffffff800022dc:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff800022e0:	4d 85 c0             	test   %r8,%r8
{
ffffffff800022e3:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff800022e8:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff800022ec:	75 13                	jne    ffffffff80002301 <_ntoa_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff800022ee:	89 ea                	mov    %ebp,%edx
ffffffff800022f0:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800022f3:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff800022f9:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800022fb:	0f 85 7f 00 00 00    	jne    ffffffff80002380 <_ntoa_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002301:	89 ea                	mov    %ebp,%edx
ffffffff80002303:	83 e2 20             	and    $0x20,%edx
ffffffff80002306:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002309:	45 19 db             	sbb    %r11d,%r11d
ffffffff8000230c:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000230f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002313:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002317:	eb 0d                	jmp    ffffffff80002326 <_ntoa_long+0x56>
ffffffff80002319:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002320:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80002324:	77 26                	ja     ffffffff8000234c <_ntoa_long+0x7c>
ffffffff80002326:	31 d2                	xor    %edx,%edx
ffffffff80002328:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff8000232b:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff8000232f:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80002333:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80002337:	44 89 ea             	mov    %r13d,%edx
ffffffff8000233a:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff8000233e:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002342:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002345:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff8000234a:	75 d4                	jne    ffffffff80002320 <_ntoa_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff8000234c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002350:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002354:	48 89 da             	mov    %rbx,%rdx
ffffffff80002357:	55                   	push   %rbp
ffffffff80002358:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff8000235c:	50                   	push   %rax
ffffffff8000235d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002361:	50                   	push   %rax
ffffffff80002362:	41 52                	push   %r10
ffffffff80002364:	41 51                	push   %r9
ffffffff80002366:	4d 89 c1             	mov    %r8,%r9
ffffffff80002369:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff8000236e:	e8 ed fa ff ff       	callq  ffffffff80001e60 <_ntoa_format>
}
ffffffff80002373:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002377:	5b                   	pop    %rbx
ffffffff80002378:	5d                   	pop    %rbp
ffffffff80002379:	41 5c                	pop    %r12
ffffffff8000237b:	41 5d                	pop    %r13
ffffffff8000237d:	c3                   	retq   
ffffffff8000237e:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002380:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002383:	eb c7                	jmp    ffffffff8000234c <_ntoa_long+0x7c>
ffffffff80002385:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000238c:	00 00 00 00 

ffffffff80002390 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002390:	41 55                	push   %r13
ffffffff80002392:	41 54                	push   %r12
ffffffff80002394:	4c 89 c0             	mov    %r8,%rax
ffffffff80002397:	55                   	push   %rbp
ffffffff80002398:	53                   	push   %rbx
ffffffff80002399:	48 89 d3             	mov    %rdx,%rbx
ffffffff8000239c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff800023a0:	4d 85 c0             	test   %r8,%r8
{
ffffffff800023a3:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff800023a8:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff800023ac:	75 13                	jne    ffffffff800023c1 <_ntoa_long_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff800023ae:	89 ea                	mov    %ebp,%edx
ffffffff800023b0:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800023b3:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff800023b9:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800023bb:	0f 85 7f 00 00 00    	jne    ffffffff80002440 <_ntoa_long_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800023c1:	89 ea                	mov    %ebp,%edx
ffffffff800023c3:	83 e2 20             	and    $0x20,%edx
ffffffff800023c6:	83 fa 01             	cmp    $0x1,%edx
ffffffff800023c9:	45 19 db             	sbb    %r11d,%r11d
ffffffff800023cc:	45 31 c0             	xor    %r8d,%r8d
ffffffff800023cf:	41 83 e3 20          	and    $0x20,%r11d
ffffffff800023d3:	41 83 c3 37          	add    $0x37,%r11d
ffffffff800023d7:	eb 0d                	jmp    ffffffff800023e6 <_ntoa_long_long+0x56>
ffffffff800023d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800023e0:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff800023e4:	77 26                	ja     ffffffff8000240c <_ntoa_long_long+0x7c>
ffffffff800023e6:	31 d2                	xor    %edx,%edx
ffffffff800023e8:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800023eb:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff800023ef:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff800023f3:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff800023f7:	44 89 ea             	mov    %r13d,%edx
ffffffff800023fa:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff800023fe:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002402:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002405:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff8000240a:	75 d4                	jne    ffffffff800023e0 <_ntoa_long_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff8000240c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002410:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002414:	48 89 da             	mov    %rbx,%rdx
ffffffff80002417:	55                   	push   %rbp
ffffffff80002418:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff8000241c:	50                   	push   %rax
ffffffff8000241d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002421:	50                   	push   %rax
ffffffff80002422:	41 52                	push   %r10
ffffffff80002424:	41 51                	push   %r9
ffffffff80002426:	4d 89 c1             	mov    %r8,%r9
ffffffff80002429:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff8000242e:	e8 2d fa ff ff       	callq  ffffffff80001e60 <_ntoa_format>
}
ffffffff80002433:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002437:	5b                   	pop    %rbx
ffffffff80002438:	5d                   	pop    %rbp
ffffffff80002439:	41 5c                	pop    %r12
ffffffff8000243b:	41 5d                	pop    %r13
ffffffff8000243d:	c3                   	retq   
ffffffff8000243e:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002440:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002443:	eb c7                	jmp    ffffffff8000240c <_ntoa_long_long+0x7c>
ffffffff80002445:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000244c:	00 00 00 00 

ffffffff80002450 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
ffffffff80002450:	41 57                	push   %r15
ffffffff80002452:	41 56                	push   %r14
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
ffffffff80002454:	48 c7 c0 30 1e 00 80 	mov    $0xffffffff80001e30,%rax
{
ffffffff8000245b:	41 55                	push   %r13
ffffffff8000245d:	41 54                	push   %r12
ffffffff8000245f:	49 89 f7             	mov    %rsi,%r15
ffffffff80002462:	55                   	push   %rbp
ffffffff80002463:	53                   	push   %rbx
ffffffff80002464:	48 89 fd             	mov    %rdi,%rbp
ffffffff80002467:	49 89 d6             	mov    %rdx,%r14
ffffffff8000246a:	49 89 cd             	mov    %rcx,%r13
ffffffff8000246d:	48 83 ec 38          	sub    $0x38,%rsp
    out = _out_null;
ffffffff80002471:	48 85 f6             	test   %rsi,%rsi
ffffffff80002474:	48 0f 44 e8          	cmove  %rax,%rbp
{
ffffffff80002478:	4c 89 04 24          	mov    %r8,(%rsp)
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
ffffffff8000247c:	31 db                	xor    %ebx,%ebx
  while (*format)
ffffffff8000247e:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff80002483:	40 84 ff             	test   %dil,%dil
ffffffff80002486:	74 26                	je     ffffffff800024ae <_vsnprintf+0x5e>
ffffffff80002488:	49 83 c5 01          	add    $0x1,%r13
    if (*format != '%') {
ffffffff8000248c:	40 80 ff 25          	cmp    $0x25,%dil
ffffffff80002490:	74 46                	je     ffffffff800024d8 <_vsnprintf+0x88>
      out(*format, buffer, idx++, maxlen);
ffffffff80002492:	4c 8d 63 01          	lea    0x1(%rbx),%r12
        out(*format, buffer, idx++, maxlen);
ffffffff80002496:	48 89 da             	mov    %rbx,%rdx
ffffffff80002499:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000249c:	4c 89 fe             	mov    %r15,%rsi
ffffffff8000249f:	ff d5                	callq  *%rbp
  while (*format)
ffffffff800024a1:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
        out(*format, buffer, idx++, maxlen);
ffffffff800024a6:	4c 89 e3             	mov    %r12,%rbx
  while (*format)
ffffffff800024a9:	40 84 ff             	test   %dil,%dil
ffffffff800024ac:	75 da                	jne    ffffffff80002488 <_vsnprintf+0x38>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
ffffffff800024ae:	49 8d 56 ff          	lea    -0x1(%r14),%rdx
ffffffff800024b2:	4c 39 f3             	cmp    %r14,%rbx
ffffffff800024b5:	4c 89 f1             	mov    %r14,%rcx
ffffffff800024b8:	4c 89 fe             	mov    %r15,%rsi
ffffffff800024bb:	48 0f 42 d3          	cmovb  %rbx,%rdx
ffffffff800024bf:	31 ff                	xor    %edi,%edi
ffffffff800024c1:	ff d5                	callq  *%rbp

  // return written chars without terminating \0
  return (int)idx;
}
ffffffff800024c3:	48 83 c4 38          	add    $0x38,%rsp
ffffffff800024c7:	89 d8                	mov    %ebx,%eax
ffffffff800024c9:	5b                   	pop    %rbx
ffffffff800024ca:	5d                   	pop    %rbp
ffffffff800024cb:	41 5c                	pop    %r12
ffffffff800024cd:	41 5d                	pop    %r13
ffffffff800024cf:	41 5e                	pop    %r14
ffffffff800024d1:	41 5f                	pop    %r15
ffffffff800024d3:	c3                   	retq   
ffffffff800024d4:	0f 1f 40 00          	nopl   0x0(%rax)
    flags = 0U;
ffffffff800024d8:	31 c9                	xor    %ecx,%ecx
ffffffff800024da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      switch (*format) {
ffffffff800024e0:	41 0f be 45 00       	movsbl 0x0(%r13),%eax
ffffffff800024e5:	49 8d 75 01          	lea    0x1(%r13),%rsi
ffffffff800024e9:	48 89 f7             	mov    %rsi,%rdi
ffffffff800024ec:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff800024ef:	80 fa 10             	cmp    $0x10,%dl
ffffffff800024f2:	77 3c                	ja     ffffffff80002530 <_vsnprintf+0xe0>
ffffffff800024f4:	0f b6 d2             	movzbl %dl,%edx
ffffffff800024f7:	ff 24 d5 20 48 00 80 	jmpq   *-0x7fffb7e0(,%rdx,8)
ffffffff800024fe:	66 90                	xchg   %ax,%ax
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
ffffffff80002500:	83 c9 01             	or     $0x1,%ecx
ffffffff80002503:	49 89 f5             	mov    %rsi,%r13
ffffffff80002506:	eb d8                	jmp    ffffffff800024e0 <_vsnprintf+0x90>
ffffffff80002508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000250f:	00 
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ffffffff80002510:	83 c9 04             	or     $0x4,%ecx
ffffffff80002513:	eb ee                	jmp    ffffffff80002503 <_vsnprintf+0xb3>
ffffffff80002515:	0f 1f 00             	nopl   (%rax)
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ffffffff80002518:	83 c9 02             	or     $0x2,%ecx
ffffffff8000251b:	eb e6                	jmp    ffffffff80002503 <_vsnprintf+0xb3>
ffffffff8000251d:	0f 1f 00             	nopl   (%rax)
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ffffffff80002520:	83 c9 10             	or     $0x10,%ecx
ffffffff80002523:	eb de                	jmp    ffffffff80002503 <_vsnprintf+0xb3>
ffffffff80002525:	0f 1f 00             	nopl   (%rax)
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ffffffff80002528:	83 c9 08             	or     $0x8,%ecx
ffffffff8000252b:	eb d6                	jmp    ffffffff80002503 <_vsnprintf+0xb3>
ffffffff8000252d:	0f 1f 00             	nopl   (%rax)
  return (ch >= '0') && (ch <= '9');
ffffffff80002530:	8d 50 d0             	lea    -0x30(%rax),%edx
    if (_is_digit(*format)) {
ffffffff80002533:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002536:	0f 86 54 02 00 00    	jbe    ffffffff80002790 <_vsnprintf+0x340>
    width = 0U;
ffffffff8000253c:	45 31 e4             	xor    %r12d,%r12d
    else if (*format == '*') {
ffffffff8000253f:	3c 2a                	cmp    $0x2a,%al
ffffffff80002541:	0f 84 75 07 00 00    	je     ffffffff80002cbc <_vsnprintf+0x86c>
    precision = 0U;
ffffffff80002547:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff8000254a:	3c 2e                	cmp    $0x2e,%al
ffffffff8000254c:	0f 84 73 02 00 00    	je     ffffffff800027c5 <_vsnprintf+0x375>
    switch (*format) {
ffffffff80002552:	3c 6a                	cmp    $0x6a,%al
ffffffff80002554:	74 12                	je     ffffffff80002568 <_vsnprintf+0x118>
ffffffff80002556:	0f 8e bc 02 00 00    	jle    ffffffff80002818 <_vsnprintf+0x3c8>
ffffffff8000255c:	3c 6c                	cmp    $0x6c,%al
ffffffff8000255e:	74 30                	je     ffffffff80002590 <_vsnprintf+0x140>
ffffffff80002560:	3c 7a                	cmp    $0x7a,%al
ffffffff80002562:	0f 85 d0 02 00 00    	jne    ffffffff80002838 <_vsnprintf+0x3e8>
ffffffff80002568:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff8000256d:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ffffffff80002571:	80 cd 01             	or     $0x1,%ch
    switch (*format) {
ffffffff80002574:	8d 50 db             	lea    -0x25(%rax),%edx
ffffffff80002577:	80 fa 53             	cmp    $0x53,%dl
ffffffff8000257a:	0f 87 00 02 00 00    	ja     ffffffff80002780 <_vsnprintf+0x330>
ffffffff80002580:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002583:	ff 24 d5 a8 48 00 80 	jmpq   *-0x7fffb758(,%rdx,8)
ffffffff8000258a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if (*format == 'l') {
ffffffff80002590:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002595:	3c 6c                	cmp    $0x6c,%al
ffffffff80002597:	0f 84 98 04 00 00    	je     ffffffff80002a35 <_vsnprintf+0x5e5>
        flags |= FLAGS_LONG;
ffffffff8000259d:	80 cd 01             	or     $0x1,%ch
ffffffff800025a0:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff800025a4:	eb ce                	jmp    ffffffff80002574 <_vsnprintf+0x124>
ffffffff800025a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800025ad:	00 00 00 
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff800025b0:	48 8b 34 24          	mov    (%rsp),%rsi
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
ffffffff800025b4:	83 c9 21             	or     $0x21,%ecx
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff800025b7:	8b 06                	mov    (%rsi),%eax
ffffffff800025b9:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff800025bc:	0f 87 45 08 00 00    	ja     ffffffff80002e07 <_vsnprintf+0x9b7>
ffffffff800025c2:	89 c2                	mov    %eax,%edx
ffffffff800025c4:	48 03 56 10          	add    0x10(%rsi),%rdx
ffffffff800025c8:	83 c0 08             	add    $0x8,%eax
ffffffff800025cb:	89 06                	mov    %eax,(%rsi)
ffffffff800025cd:	51                   	push   %rcx
ffffffff800025ce:	6a 10                	pushq  $0x10
ffffffff800025d0:	45 31 c9             	xor    %r9d,%r9d
ffffffff800025d3:	41 52                	push   %r10
ffffffff800025d5:	6a 10                	pushq  $0x10
ffffffff800025d7:	4c 8b 02             	mov    (%rdx),%r8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff800025da:	48 89 da             	mov    %rbx,%rdx
ffffffff800025dd:	4c 89 f1             	mov    %r14,%rcx
ffffffff800025e0:	4c 89 fe             	mov    %r15,%rsi
ffffffff800025e3:	48 89 ef             	mov    %rbp,%rdi
ffffffff800025e6:	e8 a5 fd ff ff       	callq  ffffffff80002390 <_ntoa_long_long>
ffffffff800025eb:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800025ef:	48 89 c3             	mov    %rax,%rbx
ffffffff800025f2:	e9 87 fe ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
ffffffff800025f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800025fe:	00 00 
ffffffff80002600:	4c 8d 43 01          	lea    0x1(%rbx),%r8
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002604:	83 e1 02             	and    $0x2,%ecx
ffffffff80002607:	4c 89 c0             	mov    %r8,%rax
ffffffff8000260a:	0f 84 47 04 00 00    	je     ffffffff80002a57 <_vsnprintf+0x607>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002610:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002614:	8b 16                	mov    (%rsi),%edx
ffffffff80002616:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002619:	0f 87 34 06 00 00    	ja     ffffffff80002c53 <_vsnprintf+0x803>
ffffffff8000261f:	89 d1                	mov    %edx,%ecx
ffffffff80002621:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80002625:	83 c2 08             	add    $0x8,%edx
ffffffff80002628:	89 16                	mov    %edx,(%rsi)
ffffffff8000262a:	0f be 39             	movsbl (%rcx),%edi
ffffffff8000262d:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffffff80002632:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002635:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8000263a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000263d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002640:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002642:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff80002646:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8000264b:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
ffffffff80002650:	0f 86 e8 02 00 00    	jbe    ffffffff8000293e <_vsnprintf+0x4ee>
ffffffff80002656:	41 8d 4c 24 fe       	lea    -0x2(%r12),%ecx
ffffffff8000265b:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8000265f:	48 89 c2             	mov    %rax,%rdx
ffffffff80002662:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
ffffffff80002667:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff8000266c:	48 01 cb             	add    %rcx,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff8000266f:	4c 8d 62 01          	lea    0x1(%rdx),%r12
ffffffff80002673:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002676:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002679:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8000267e:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002680:	49 39 dc             	cmp    %rbx,%r12
ffffffff80002683:	4c 89 e2             	mov    %r12,%rdx
ffffffff80002686:	75 e7                	jne    ffffffff8000266f <_vsnprintf+0x21f>
ffffffff80002688:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
ffffffff8000268d:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
        break;
ffffffff80002692:	e9 e7 fd ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
ffffffff80002697:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000269e:	00 00 
        out('%', buffer, idx++, maxlen);
ffffffff800026a0:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff800026a4:	48 89 da             	mov    %rbx,%rdx
ffffffff800026a7:	4c 89 f1             	mov    %r14,%rcx
ffffffff800026aa:	4c 89 fe             	mov    %r15,%rsi
ffffffff800026ad:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff800026b2:	4c 89 e3             	mov    %r12,%rbx
ffffffff800026b5:	ff d5                	callq  *%rbp
        break;
ffffffff800026b7:	e9 c2 fd ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
ffffffff800026bc:	0f 1f 40 00          	nopl   0x0(%rax)
        if (*format == 'x' || *format == 'X') {
ffffffff800026c0:	89 c2                	mov    %eax,%edx
ffffffff800026c2:	83 e2 df             	and    $0xffffffdf,%edx
ffffffff800026c5:	80 fa 58             	cmp    $0x58,%dl
ffffffff800026c8:	0f 84 66 02 00 00    	je     ffffffff80002934 <_vsnprintf+0x4e4>
        else if (*format == 'o') {
ffffffff800026ce:	3c 6f                	cmp    $0x6f,%al
ffffffff800026d0:	0f 84 b6 04 00 00    	je     ffffffff80002b8c <_vsnprintf+0x73c>
        else if (*format == 'b') {
ffffffff800026d6:	3c 62                	cmp    $0x62,%al
ffffffff800026d8:	0f 84 20 05 00 00    	je     ffffffff80002bfe <_vsnprintf+0x7ae>
          flags &= ~FLAGS_HASH;   // no hash for dec format
ffffffff800026de:	83 e1 ef             	and    $0xffffffef,%ecx
ffffffff800026e1:	bf 0a 00 00 00       	mov    $0xa,%edi
        if (*format == 'X') {
ffffffff800026e6:	3c 58                	cmp    $0x58,%al
ffffffff800026e8:	0f 84 3c 03 00 00    	je     ffffffff80002a2a <_vsnprintf+0x5da>
        if ((*format != 'i') && (*format != 'd')) {
ffffffff800026ee:	3c 69                	cmp    $0x69,%al
ffffffff800026f0:	74 08                	je     ffffffff800026fa <_vsnprintf+0x2aa>
ffffffff800026f2:	3c 64                	cmp    $0x64,%al
ffffffff800026f4:	0f 85 33 03 00 00    	jne    ffffffff80002a2d <_vsnprintf+0x5dd>
          flags &= ~FLAGS_ZEROPAD;
ffffffff800026fa:	89 ca                	mov    %ecx,%edx
ffffffff800026fc:	83 e2 fe             	and    $0xfffffffe,%edx
ffffffff800026ff:	f6 c5 04             	test   $0x4,%ch
ffffffff80002702:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80002705:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff80002709:	89 ce                	mov    %ecx,%esi
ffffffff8000270b:	81 e6 00 02 00 00    	and    $0x200,%esi
        if ((*format == 'i') || (*format == 'd')) {
ffffffff80002711:	3c 69                	cmp    $0x69,%al
ffffffff80002713:	8b 12                	mov    (%rdx),%edx
ffffffff80002715:	0f 84 b8 02 00 00    	je     ffffffff800029d3 <_vsnprintf+0x583>
ffffffff8000271b:	3c 64                	cmp    $0x64,%al
ffffffff8000271d:	0f 84 b0 02 00 00    	je     ffffffff800029d3 <_vsnprintf+0x583>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002723:	85 f6                	test   %esi,%esi
ffffffff80002725:	0f 85 38 04 00 00    	jne    ffffffff80002b63 <_vsnprintf+0x713>
          else if (flags & FLAGS_LONG) {
ffffffff8000272b:	f6 c5 01             	test   $0x1,%ch
ffffffff8000272e:	0f 85 a1 04 00 00    	jne    ffffffff80002bd5 <_vsnprintf+0x785>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002734:	f6 c1 40             	test   $0x40,%cl
ffffffff80002737:	0f 84 6e 04 00 00    	je     ffffffff80002bab <_vsnprintf+0x75b>
ffffffff8000273d:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002740:	0f 87 d2 05 00 00    	ja     ffffffff80002d18 <_vsnprintf+0x8c8>
ffffffff80002746:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000274a:	89 d0                	mov    %edx,%eax
ffffffff8000274c:	83 c2 08             	add    $0x8,%edx
ffffffff8000274f:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002753:	89 16                	mov    %edx,(%rsi)
ffffffff80002755:	44 0f b6 00          	movzbl (%rax),%r8d
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff80002759:	51                   	push   %rcx
ffffffff8000275a:	41 54                	push   %r12
ffffffff8000275c:	45 31 c9             	xor    %r9d,%r9d
ffffffff8000275f:	41 52                	push   %r10
ffffffff80002761:	57                   	push   %rdi
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002762:	48 89 da             	mov    %rbx,%rdx
ffffffff80002765:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002768:	4c 89 fe             	mov    %r15,%rsi
ffffffff8000276b:	48 89 ef             	mov    %rbp,%rdi
ffffffff8000276e:	e8 5d fb ff ff       	callq  ffffffff800022d0 <_ntoa_long>
ffffffff80002773:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002777:	48 89 c3             	mov    %rax,%rbx
ffffffff8000277a:	e9 ff fc ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
ffffffff8000277f:	90                   	nop
        out(*format, buffer, idx++, maxlen);
ffffffff80002780:	4c 8d 63 01          	lea    0x1(%rbx),%r12
    switch (*format) {
ffffffff80002784:	0f be f8             	movsbl %al,%edi
ffffffff80002787:	e9 0a fd ff ff       	jmpq   ffffffff80002496 <_vsnprintf+0x46>
ffffffff8000278c:	0f 1f 40 00          	nopl   0x0(%rax)
  unsigned int i = 0U;
ffffffff80002790:	45 31 e4             	xor    %r12d,%r12d
ffffffff80002793:	eb 0a                	jmp    ffffffff8000279f <_vsnprintf+0x34f>
ffffffff80002795:	0f 1f 00             	nopl   (%rax)
  while (_is_digit(**str)) {
ffffffff80002798:	49 89 f5             	mov    %rsi,%r13
ffffffff8000279b:	48 83 c6 01          	add    $0x1,%rsi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff8000279f:	43 8d 14 a4          	lea    (%r12,%r12,4),%edx
ffffffff800027a3:	44 8d 64 50 d0       	lea    -0x30(%rax,%rdx,2),%r12d
  while (_is_digit(**str)) {
ffffffff800027a8:	0f be 06             	movsbl (%rsi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff800027ab:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff800027ae:	80 fa 09             	cmp    $0x9,%dl
ffffffff800027b1:	76 e5                	jbe    ffffffff80002798 <_vsnprintf+0x348>
ffffffff800027b3:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff800027b7:	49 89 f5             	mov    %rsi,%r13
    precision = 0U;
ffffffff800027ba:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff800027bd:	3c 2e                	cmp    $0x2e,%al
ffffffff800027bf:	0f 85 8d fd ff ff    	jne    ffffffff80002552 <_vsnprintf+0x102>
      if (_is_digit(*format)) {
ffffffff800027c5:	41 0f be 45 01       	movsbl 0x1(%r13),%eax
      flags |= FLAGS_PRECISION;
ffffffff800027ca:	80 cd 04             	or     $0x4,%ch
  return (ch >= '0') && (ch <= '9');
ffffffff800027cd:	8d 50 d0             	lea    -0x30(%rax),%edx
      if (_is_digit(*format)) {
ffffffff800027d0:	80 fa 09             	cmp    $0x9,%dl
ffffffff800027d3:	76 1e                	jbe    ffffffff800027f3 <_vsnprintf+0x3a3>
      else if (*format == '*') {
ffffffff800027d5:	3c 2a                	cmp    $0x2a,%al
ffffffff800027d7:	0f 84 3f 06 00 00    	je     ffffffff80002e1c <_vsnprintf+0x9cc>
      format++;
ffffffff800027dd:	49 89 fd             	mov    %rdi,%r13
      else if (*format == '*') {
ffffffff800027e0:	48 83 c7 01          	add    $0x1,%rdi
ffffffff800027e4:	e9 69 fd ff ff       	jmpq   ffffffff80002552 <_vsnprintf+0x102>
ffffffff800027e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  while (_is_digit(**str)) {
ffffffff800027f0:	4c 89 ef             	mov    %r13,%rdi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff800027f3:	43 8d 14 92          	lea    (%r10,%r10,4),%edx
ffffffff800027f7:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff800027fb:	44 8d 54 50 d0       	lea    -0x30(%rax,%rdx,2),%r10d
  while (_is_digit(**str)) {
ffffffff80002800:	0f be 47 01          	movsbl 0x1(%rdi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002804:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002807:	80 fa 09             	cmp    $0x9,%dl
ffffffff8000280a:	76 e4                	jbe    ffffffff800027f0 <_vsnprintf+0x3a0>
ffffffff8000280c:	48 83 c7 02          	add    $0x2,%rdi
ffffffff80002810:	e9 3d fd ff ff       	jmpq   ffffffff80002552 <_vsnprintf+0x102>
ffffffff80002815:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002818:	3c 68                	cmp    $0x68,%al
ffffffff8000281a:	75 1c                	jne    ffffffff80002838 <_vsnprintf+0x3e8>
        if (*format == 'h') {
ffffffff8000281c:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002821:	3c 68                	cmp    $0x68,%al
ffffffff80002823:	0f 84 1d 02 00 00    	je     ffffffff80002a46 <_vsnprintf+0x5f6>
        flags |= FLAGS_SHORT;
ffffffff80002829:	80 c9 80             	or     $0x80,%cl
ffffffff8000282c:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002830:	e9 3f fd ff ff       	jmpq   ffffffff80002574 <_vsnprintf+0x124>
ffffffff80002835:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002838:	49 89 fd             	mov    %rdi,%r13
ffffffff8000283b:	e9 34 fd ff ff       	jmpq   ffffffff80002574 <_vsnprintf+0x124>
        const char* p = va_arg(va, char*);
ffffffff80002840:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002844:	8b 16                	mov    (%rsi),%edx
ffffffff80002846:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002849:	0f 87 2e 04 00 00    	ja     ffffffff80002c7d <_vsnprintf+0x82d>
ffffffff8000284f:	89 d0                	mov    %edx,%eax
ffffffff80002851:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002855:	83 c2 08             	add    $0x8,%edx
ffffffff80002858:	89 16                	mov    %edx,(%rsi)
ffffffff8000285a:	4c 8b 08             	mov    (%rax),%r9
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff8000285d:	45 85 d2             	test   %r10d,%r10d
ffffffff80002860:	41 0f be 39          	movsbl (%r9),%edi
ffffffff80002864:	0f 85 54 01 00 00    	jne    ffffffff800029be <_vsnprintf+0x56e>
  for (s = str; *s && maxsize--; ++s);
ffffffff8000286a:	40 84 ff             	test   %dil,%dil
ffffffff8000286d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80002874:	0f 84 b8 03 00 00    	je     ffffffff80002c32 <_vsnprintf+0x7e2>
ffffffff8000287a:	4c 89 c8             	mov    %r9,%rax
ffffffff8000287d:	eb 11                	jmp    ffffffff80002890 <_vsnprintf+0x440>
ffffffff8000287f:	90                   	nop
ffffffff80002880:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002885:	48 29 c2             	sub    %rax,%rdx
ffffffff80002888:	4c 01 ca             	add    %r9,%rdx
ffffffff8000288b:	48 01 f2             	add    %rsi,%rdx
ffffffff8000288e:	74 09                	je     ffffffff80002899 <_vsnprintf+0x449>
ffffffff80002890:	48 83 c0 01          	add    $0x1,%rax
ffffffff80002894:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff80002897:	75 e7                	jne    ffffffff80002880 <_vsnprintf+0x430>
ffffffff80002899:	44 29 c8             	sub    %r9d,%eax
ffffffff8000289c:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (flags & FLAGS_PRECISION) {
ffffffff800028a0:	89 c8                	mov    %ecx,%eax
ffffffff800028a2:	25 00 04 00 00       	and    $0x400,%eax
ffffffff800028a7:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff800028ab:	74 0f                	je     ffffffff800028bc <_vsnprintf+0x46c>
          l = (l < precision ? l : precision);
ffffffff800028ad:	8b 44 24 20          	mov    0x20(%rsp),%eax
ffffffff800028b1:	44 39 d0             	cmp    %r10d,%eax
ffffffff800028b4:	41 0f 47 c2          	cmova  %r10d,%eax
ffffffff800028b8:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (!(flags & FLAGS_LEFT)) {
ffffffff800028bc:	83 e1 02             	and    $0x2,%ecx
ffffffff800028bf:	89 4c 24 24          	mov    %ecx,0x24(%rsp)
ffffffff800028c3:	0f 84 0e 02 00 00    	je     ffffffff80002ad7 <_vsnprintf+0x687>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff800028c9:	40 84 ff             	test   %dil,%dil
ffffffff800028cc:	0f 84 94 00 00 00    	je     ffffffff80002966 <_vsnprintf+0x516>
ffffffff800028d2:	49 29 d9             	sub    %rbx,%r9
ffffffff800028d5:	44 89 64 24 28       	mov    %r12d,0x28(%rsp)
ffffffff800028da:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff800028df:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
ffffffff800028e4:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff800028e9:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
ffffffff800028ee:	49 89 dd             	mov    %rbx,%r13
ffffffff800028f1:	eb 27                	jmp    ffffffff8000291a <_vsnprintf+0x4ca>
ffffffff800028f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          out(*(p++), buffer, idx++, maxlen);
ffffffff800028f8:	4c 89 f1             	mov    %r14,%rcx
ffffffff800028fb:	4c 89 ea             	mov    %r13,%rdx
ffffffff800028fe:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002901:	ff d5                	callq  *%rbp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002903:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002908:	49 8d 5d 01          	lea    0x1(%r13),%rbx
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff8000290c:	41 0f be 7c 05 01    	movsbl 0x1(%r13,%rax,1),%edi
ffffffff80002912:	40 84 ff             	test   %dil,%dil
ffffffff80002915:	74 39                	je     ffffffff80002950 <_vsnprintf+0x500>
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002917:	49 89 dd             	mov    %rbx,%r13
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff8000291a:	45 85 e4             	test   %r12d,%r12d
ffffffff8000291d:	74 d9                	je     ffffffff800028f8 <_vsnprintf+0x4a8>
ffffffff8000291f:	8b 44 24 10          	mov    0x10(%rsp),%eax
ffffffff80002923:	85 c0                	test   %eax,%eax
ffffffff80002925:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002928:	0f 84 68 02 00 00    	je     ffffffff80002b96 <_vsnprintf+0x746>
ffffffff8000292e:	89 54 24 10          	mov    %edx,0x10(%rsp)
ffffffff80002932:	eb c4                	jmp    ffffffff800028f8 <_vsnprintf+0x4a8>
ffffffff80002934:	bf 10 00 00 00       	mov    $0x10,%edi
ffffffff80002939:	e9 a8 fd ff ff       	jmpq   ffffffff800026e6 <_vsnprintf+0x296>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000293e:	4c 89 c3             	mov    %r8,%rbx
ffffffff80002941:	e9 38 fb ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
ffffffff80002946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000294d:	00 00 00 
ffffffff80002950:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff80002955:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
        if (flags & FLAGS_LEFT) {
ffffffff8000295a:	8b 44 24 24          	mov    0x24(%rsp),%eax
ffffffff8000295e:	85 c0                	test   %eax,%eax
ffffffff80002960:	0f 84 18 fb ff ff    	je     ffffffff8000247e <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80002966:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff8000296a:	41 39 cc             	cmp    %ecx,%r12d
ffffffff8000296d:	0f 86 0b fb ff ff    	jbe    ffffffff8000247e <_vsnprintf+0x2e>
ffffffff80002973:	41 83 ec 01          	sub    $0x1,%r12d
ffffffff80002977:	48 89 da             	mov    %rbx,%rdx
ffffffff8000297a:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff8000297f:	44 89 e0             	mov    %r12d,%eax
ffffffff80002982:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002986:	29 c8                	sub    %ecx,%eax
ffffffff80002988:	4c 01 e0             	add    %r12,%rax
ffffffff8000298b:	4d 89 e5             	mov    %r12,%r13
ffffffff8000298e:	48 89 c3             	mov    %rax,%rbx
ffffffff80002991:	eb 09                	jmp    ffffffff8000299c <_vsnprintf+0x54c>
ffffffff80002993:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80002998:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000299c:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000299f:	4c 89 fe             	mov    %r15,%rsi
ffffffff800029a2:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800029a7:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff800029a9:	49 39 dd             	cmp    %rbx,%r13
ffffffff800029ac:	4c 89 ea             	mov    %r13,%rdx
ffffffff800029af:	75 e7                	jne    ffffffff80002998 <_vsnprintf+0x548>
ffffffff800029b1:	4c 89 eb             	mov    %r13,%rbx
ffffffff800029b4:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
        break;
ffffffff800029b9:	e9 c0 fa ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
  for (s = str; *s && maxsize--; ++s);
ffffffff800029be:	40 84 ff             	test   %dil,%dil
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff800029c1:	44 89 d6             	mov    %r10d,%esi
  for (s = str; *s && maxsize--; ++s);
ffffffff800029c4:	0f 84 68 02 00 00    	je     ffffffff80002c32 <_vsnprintf+0x7e2>
ffffffff800029ca:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff800029ce:	e9 a7 fe ff ff       	jmpq   ffffffff8000287a <_vsnprintf+0x42a>
          if (flags & FLAGS_LONG_LONG) {
ffffffff800029d3:	85 f6                	test   %esi,%esi
ffffffff800029d5:	0f 85 bd 03 00 00    	jne    ffffffff80002d98 <_vsnprintf+0x948>
          else if (flags & FLAGS_LONG) {
ffffffff800029db:	f6 c5 01             	test   $0x1,%ch
ffffffff800029de:	0f 85 7e 03 00 00    	jne    ffffffff80002d62 <_vsnprintf+0x912>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff800029e4:	f6 c1 40             	test   $0x40,%cl
ffffffff800029e7:	0f 84 1b 02 00 00    	je     ffffffff80002c08 <_vsnprintf+0x7b8>
ffffffff800029ed:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800029f0:	0f 87 b1 02 00 00    	ja     ffffffff80002ca7 <_vsnprintf+0x857>
ffffffff800029f6:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800029fa:	89 d0                	mov    %edx,%eax
ffffffff800029fc:	83 c2 08             	add    $0x8,%edx
ffffffff800029ff:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002a03:	89 16                	mov    %edx,(%rsi)
ffffffff80002a05:	44 0f be 08          	movsbl (%rax),%r9d
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002a09:	44 89 c8             	mov    %r9d,%eax
ffffffff80002a0c:	51                   	push   %rcx
ffffffff80002a0d:	41 54                	push   %r12
ffffffff80002a0f:	c1 f8 1f             	sar    $0x1f,%eax
ffffffff80002a12:	41 52                	push   %r10
ffffffff80002a14:	57                   	push   %rdi
ffffffff80002a15:	41 89 c0             	mov    %eax,%r8d
ffffffff80002a18:	45 31 c8             	xor    %r9d,%r8d
ffffffff80002a1b:	41 c1 e9 1f          	shr    $0x1f,%r9d
ffffffff80002a1f:	41 29 c0             	sub    %eax,%r8d
ffffffff80002a22:	4d 63 c0             	movslq %r8d,%r8
ffffffff80002a25:	e9 38 fd ff ff       	jmpq   ffffffff80002762 <_vsnprintf+0x312>
          flags |= FLAGS_UPPERCASE;
ffffffff80002a2a:	83 c9 20             	or     $0x20,%ecx
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ffffffff80002a2d:	83 e1 f3             	and    $0xfffffff3,%ecx
ffffffff80002a30:	e9 c5 fc ff ff       	jmpq   ffffffff800026fa <_vsnprintf+0x2aa>
ffffffff80002a35:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_LONG_LONG;
ffffffff80002a3a:	80 cd 03             	or     $0x3,%ch
ffffffff80002a3d:	49 83 c5 03          	add    $0x3,%r13
ffffffff80002a41:	e9 2e fb ff ff       	jmpq   ffffffff80002574 <_vsnprintf+0x124>
ffffffff80002a46:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_CHAR;
ffffffff80002a4b:	80 c9 c0             	or     $0xc0,%cl
ffffffff80002a4e:	49 83 c5 03          	add    $0x3,%r13
ffffffff80002a52:	e9 1d fb ff ff       	jmpq   ffffffff80002574 <_vsnprintf+0x124>
          while (l++ < width) {
ffffffff80002a57:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff80002a5b:	0f 86 de 01 00 00    	jbe    ffffffff80002c3f <_vsnprintf+0x7ef>
ffffffff80002a61:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
ffffffff80002a66:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
ffffffff80002a6b:	4d 89 c5             	mov    %r8,%r13
ffffffff80002a6e:	4c 01 c0             	add    %r8,%rax
ffffffff80002a71:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80002a76:	eb 0f                	jmp    ffffffff80002a87 <_vsnprintf+0x637>
ffffffff80002a78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002a7f:	00 
ffffffff80002a80:	4c 89 eb             	mov    %r13,%rbx
ffffffff80002a83:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80002a87:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002a8a:	48 89 da             	mov    %rbx,%rdx
ffffffff80002a8d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002a90:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002a95:	4d 89 ec             	mov    %r13,%r12
ffffffff80002a98:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002a9a:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff80002a9f:	75 df                	jne    ffffffff80002a80 <_vsnprintf+0x630>
ffffffff80002aa1:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
ffffffff80002aa6:	48 83 c3 02          	add    $0x2,%rbx
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002aaa:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff80002aae:	8b 01                	mov    (%rcx),%eax
ffffffff80002ab0:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80002ab3:	0f 87 d9 01 00 00    	ja     ffffffff80002c92 <_vsnprintf+0x842>
ffffffff80002ab9:	89 c2                	mov    %eax,%edx
ffffffff80002abb:	48 03 51 10          	add    0x10(%rcx),%rdx
ffffffff80002abf:	83 c0 08             	add    $0x8,%eax
ffffffff80002ac2:	89 01                	mov    %eax,(%rcx)
ffffffff80002ac4:	0f be 3a             	movsbl (%rdx),%edi
ffffffff80002ac7:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002aca:	4c 89 e2             	mov    %r12,%rdx
ffffffff80002acd:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002ad0:	ff d5                	callq  *%rbp
ffffffff80002ad2:	e9 a7 f9 ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80002ad7:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff80002adb:	41 39 cc             	cmp    %ecx,%r12d
ffffffff80002ade:	8d 41 01             	lea    0x1(%rcx),%eax
ffffffff80002ae1:	0f 86 63 01 00 00    	jbe    ffffffff80002c4a <_vsnprintf+0x7fa>
ffffffff80002ae7:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
ffffffff80002aec:	4c 8d 43 01          	lea    0x1(%rbx),%r8
ffffffff80002af0:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
ffffffff80002af5:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
ffffffff80002afa:	48 89 da             	mov    %rbx,%rdx
ffffffff80002afd:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff80002b02:	29 c8                	sub    %ecx,%eax
ffffffff80002b04:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80002b09:	4d 89 c5             	mov    %r8,%r13
ffffffff80002b0c:	4c 01 c0             	add    %r8,%rax
ffffffff80002b0f:	49 89 c4             	mov    %rax,%r12
ffffffff80002b12:	eb 08                	jmp    ffffffff80002b1c <_vsnprintf+0x6cc>
ffffffff80002b14:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80002b18:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80002b1c:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002b1f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002b22:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002b27:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002b29:	4d 39 e5             	cmp    %r12,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80002b2c:	4c 89 eb             	mov    %r13,%rbx
ffffffff80002b2f:	4c 89 ea             	mov    %r13,%rdx
          while (l++ < width) {
ffffffff80002b32:	75 e4                	jne    ffffffff80002b18 <_vsnprintf+0x6c8>
ffffffff80002b34:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
ffffffff80002b39:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
ffffffff80002b3e:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
ffffffff80002b43:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffffff80002b48:	41 0f be 39          	movsbl (%r9),%edi
ffffffff80002b4c:	41 8d 44 24 01       	lea    0x1(%r12),%eax
ffffffff80002b51:	89 44 24 20          	mov    %eax,0x20(%rsp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002b55:	40 84 ff             	test   %dil,%dil
ffffffff80002b58:	0f 85 74 fd ff ff    	jne    ffffffff800028d2 <_vsnprintf+0x482>
ffffffff80002b5e:	e9 1b f9 ff ff       	jmpq   ffffffff8000247e <_vsnprintf+0x2e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80002b63:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002b66:	0f 87 97 01 00 00    	ja     ffffffff80002d03 <_vsnprintf+0x8b3>
ffffffff80002b6c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002b70:	89 d0                	mov    %edx,%eax
ffffffff80002b72:	83 c2 08             	add    $0x8,%edx
ffffffff80002b75:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002b79:	89 16                	mov    %edx,(%rsi)
ffffffff80002b7b:	51                   	push   %rcx
ffffffff80002b7c:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002b7f:	41 54                	push   %r12
ffffffff80002b81:	41 52                	push   %r10
ffffffff80002b83:	57                   	push   %rdi
ffffffff80002b84:	4c 8b 00             	mov    (%rax),%r8
ffffffff80002b87:	e9 4e fa ff ff       	jmpq   ffffffff800025da <_vsnprintf+0x18a>
ffffffff80002b8c:	bf 08 00 00 00       	mov    $0x8,%edi
ffffffff80002b91:	e9 97 fe ff ff       	jmpq   ffffffff80002a2d <_vsnprintf+0x5dd>
ffffffff80002b96:	4c 89 e8             	mov    %r13,%rax
ffffffff80002b99:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff80002b9e:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
ffffffff80002ba3:	48 89 c3             	mov    %rax,%rbx
ffffffff80002ba6:	e9 af fd ff ff       	jmpq   ffffffff8000295a <_vsnprintf+0x50a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002bab:	f6 c1 80             	test   $0x80,%cl
ffffffff80002bae:	0f 84 8e 01 00 00    	je     ffffffff80002d42 <_vsnprintf+0x8f2>
ffffffff80002bb4:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002bb7:	0f 87 70 01 00 00    	ja     ffffffff80002d2d <_vsnprintf+0x8dd>
ffffffff80002bbd:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002bc1:	89 d0                	mov    %edx,%eax
ffffffff80002bc3:	83 c2 08             	add    $0x8,%edx
ffffffff80002bc6:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002bca:	89 16                	mov    %edx,(%rsi)
ffffffff80002bcc:	44 0f b7 00          	movzwl (%rax),%r8d
ffffffff80002bd0:	e9 84 fb ff ff       	jmpq   ffffffff80002759 <_vsnprintf+0x309>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80002bd5:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002bd8:	0f 87 8a 00 00 00    	ja     ffffffff80002c68 <_vsnprintf+0x818>
ffffffff80002bde:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002be2:	89 d0                	mov    %edx,%eax
ffffffff80002be4:	83 c2 08             	add    $0x8,%edx
ffffffff80002be7:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002beb:	89 16                	mov    %edx,(%rsi)
ffffffff80002bed:	51                   	push   %rcx
ffffffff80002bee:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002bf1:	41 54                	push   %r12
ffffffff80002bf3:	41 52                	push   %r10
ffffffff80002bf5:	57                   	push   %rdi
ffffffff80002bf6:	4c 8b 00             	mov    (%rax),%r8
ffffffff80002bf9:	e9 64 fb ff ff       	jmpq   ffffffff80002762 <_vsnprintf+0x312>
ffffffff80002bfe:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80002c03:	e9 25 fe ff ff       	jmpq   ffffffff80002a2d <_vsnprintf+0x5dd>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002c08:	f6 c1 80             	test   $0x80,%cl
ffffffff80002c0b:	0f 84 56 02 00 00    	je     ffffffff80002e67 <_vsnprintf+0xa17>
ffffffff80002c11:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002c14:	0f 87 38 02 00 00    	ja     ffffffff80002e52 <_vsnprintf+0xa02>
ffffffff80002c1a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002c1e:	89 d0                	mov    %edx,%eax
ffffffff80002c20:	83 c2 08             	add    $0x8,%edx
ffffffff80002c23:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002c27:	89 16                	mov    %edx,(%rsi)
ffffffff80002c29:	44 0f bf 08          	movswl (%rax),%r9d
ffffffff80002c2d:	e9 d7 fd ff ff       	jmpq   ffffffff80002a09 <_vsnprintf+0x5b9>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002c32:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
ffffffff80002c39:	00 
ffffffff80002c3a:	e9 61 fc ff ff       	jmpq   ffffffff800028a0 <_vsnprintf+0x450>
          while (l++ < width) {
ffffffff80002c3f:	49 89 dc             	mov    %rbx,%r12
ffffffff80002c42:	4c 89 c3             	mov    %r8,%rbx
ffffffff80002c45:	e9 60 fe ff ff       	jmpq   ffffffff80002aaa <_vsnprintf+0x65a>
          while (l++ < width) {
ffffffff80002c4a:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff80002c4e:	e9 02 ff ff ff       	jmpq   ffffffff80002b55 <_vsnprintf+0x705>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002c53:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002c57:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff80002c5b:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff80002c5f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002c63:	e9 c2 f9 ff ff       	jmpq   ffffffff8000262a <_vsnprintf+0x1da>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80002c68:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002c6c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002c70:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002c74:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002c78:	e9 70 ff ff ff       	jmpq   ffffffff80002bed <_vsnprintf+0x79d>
        const char* p = va_arg(va, char*);
ffffffff80002c7d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002c81:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002c85:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002c89:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002c8d:	e9 c8 fb ff ff       	jmpq   ffffffff8000285a <_vsnprintf+0x40a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002c92:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff80002c96:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff80002c9a:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80002c9e:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80002ca2:	e9 1d fe ff ff       	jmpq   ffffffff80002ac4 <_vsnprintf+0x674>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002ca7:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002cab:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002caf:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002cb3:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002cb7:	e9 49 fd ff ff       	jmpq   ffffffff80002a05 <_vsnprintf+0x5b5>
      const int w = va_arg(va, int);
ffffffff80002cbc:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80002cc0:	8b 17                	mov    (%rdi),%edx
ffffffff80002cc2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002cc5:	77 2a                	ja     ffffffff80002cf1 <_vsnprintf+0x8a1>
ffffffff80002cc7:	89 d0                	mov    %edx,%eax
ffffffff80002cc9:	48 03 47 10          	add    0x10(%rdi),%rax
ffffffff80002ccd:	83 c2 08             	add    $0x8,%edx
ffffffff80002cd0:	89 17                	mov    %edx,(%rdi)
ffffffff80002cd2:	44 8b 20             	mov    (%rax),%r12d
      if (w < 0) {
ffffffff80002cd5:	45 85 e4             	test   %r12d,%r12d
ffffffff80002cd8:	79 06                	jns    ffffffff80002ce0 <_vsnprintf+0x890>
        flags |= FLAGS_LEFT;    // reverse padding
ffffffff80002cda:	83 c9 02             	or     $0x2,%ecx
        width = (unsigned int)-w;
ffffffff80002cdd:	41 f7 dc             	neg    %r12d
ffffffff80002ce0:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002ce5:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80002ce9:	49 89 f5             	mov    %rsi,%r13
ffffffff80002cec:	e9 c9 fa ff ff       	jmpq   ffffffff800027ba <_vsnprintf+0x36a>
      const int w = va_arg(va, int);
ffffffff80002cf1:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80002cf5:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff80002cf9:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002cfd:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff80002d01:	eb cf                	jmp    ffffffff80002cd2 <_vsnprintf+0x882>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80002d03:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002d07:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002d0b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002d0f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002d13:	e9 63 fe ff ff       	jmpq   ffffffff80002b7b <_vsnprintf+0x72b>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002d18:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002d1c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002d20:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002d24:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002d28:	e9 28 fa ff ff       	jmpq   ffffffff80002755 <_vsnprintf+0x305>
ffffffff80002d2d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002d31:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002d35:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002d39:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002d3d:	e9 8a fe ff ff       	jmpq   ffffffff80002bcc <_vsnprintf+0x77c>
ffffffff80002d42:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002d45:	0f 87 83 00 00 00    	ja     ffffffff80002dce <_vsnprintf+0x97e>
ffffffff80002d4b:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002d4f:	89 d0                	mov    %edx,%eax
ffffffff80002d51:	83 c2 08             	add    $0x8,%edx
ffffffff80002d54:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002d58:	89 16                	mov    %edx,(%rsi)
ffffffff80002d5a:	44 8b 00             	mov    (%rax),%r8d
ffffffff80002d5d:	e9 f7 f9 ff ff       	jmpq   ffffffff80002759 <_vsnprintf+0x309>
            const long value = va_arg(va, long);
ffffffff80002d62:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002d65:	77 7c                	ja     ffffffff80002de3 <_vsnprintf+0x993>
ffffffff80002d67:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002d6b:	89 d0                	mov    %edx,%eax
ffffffff80002d6d:	83 c2 08             	add    $0x8,%edx
ffffffff80002d70:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002d74:	89 16                	mov    %edx,(%rsi)
ffffffff80002d76:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002d79:	51                   	push   %rcx
ffffffff80002d7a:	41 54                	push   %r12
ffffffff80002d7c:	41 52                	push   %r10
ffffffff80002d7e:	57                   	push   %rdi
ffffffff80002d7f:	4c 89 c8             	mov    %r9,%rax
ffffffff80002d82:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff80002d86:	49 89 c0             	mov    %rax,%r8
ffffffff80002d89:	4d 31 c8             	xor    %r9,%r8
ffffffff80002d8c:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80002d90:	49 29 c0             	sub    %rax,%r8
ffffffff80002d93:	e9 ca f9 ff ff       	jmpq   ffffffff80002762 <_vsnprintf+0x312>
            const long long value = va_arg(va, long long);
ffffffff80002d98:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002d9b:	77 58                	ja     ffffffff80002df5 <_vsnprintf+0x9a5>
ffffffff80002d9d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002da1:	89 d0                	mov    %edx,%eax
ffffffff80002da3:	83 c2 08             	add    $0x8,%edx
ffffffff80002da6:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002daa:	89 16                	mov    %edx,(%rsi)
ffffffff80002dac:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002daf:	51                   	push   %rcx
ffffffff80002db0:	41 54                	push   %r12
ffffffff80002db2:	41 52                	push   %r10
ffffffff80002db4:	57                   	push   %rdi
ffffffff80002db5:	4c 89 c8             	mov    %r9,%rax
ffffffff80002db8:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff80002dbc:	49 89 c0             	mov    %rax,%r8
ffffffff80002dbf:	4d 31 c8             	xor    %r9,%r8
ffffffff80002dc2:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80002dc6:	49 29 c0             	sub    %rax,%r8
ffffffff80002dc9:	e9 0c f8 ff ff       	jmpq   ffffffff800025da <_vsnprintf+0x18a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002dce:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002dd2:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002dd6:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002dda:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002dde:	e9 77 ff ff ff       	jmpq   ffffffff80002d5a <_vsnprintf+0x90a>
            const long value = va_arg(va, long);
ffffffff80002de3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002de7:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002deb:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002def:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002df3:	eb 81                	jmp    ffffffff80002d76 <_vsnprintf+0x926>
            const long long value = va_arg(va, long long);
ffffffff80002df5:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002df9:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002dfd:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002e01:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002e05:	eb a5                	jmp    ffffffff80002dac <_vsnprintf+0x95c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002e07:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e0b:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff80002e0f:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80002e13:	48 89 46 08          	mov    %rax,0x8(%rsi)
ffffffff80002e17:	e9 b1 f7 ff ff       	jmpq   ffffffff800025cd <_vsnprintf+0x17d>
        const int prec = (int)va_arg(va, int);
ffffffff80002e1c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e20:	8b 16                	mov    (%rsi),%edx
ffffffff80002e22:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002e25:	77 5c                	ja     ffffffff80002e83 <_vsnprintf+0xa33>
ffffffff80002e27:	89 d0                	mov    %edx,%eax
ffffffff80002e29:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002e2d:	83 c2 08             	add    $0x8,%edx
ffffffff80002e30:	89 16                	mov    %edx,(%rsi)
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff80002e32:	8b 10                	mov    (%rax),%edx
ffffffff80002e34:	41 ba 00 00 00 00    	mov    $0x0,%r10d
ffffffff80002e3a:	49 8d 7d 03          	lea    0x3(%r13),%rdi
ffffffff80002e3e:	85 d2                	test   %edx,%edx
ffffffff80002e40:	44 0f 49 10          	cmovns (%rax),%r10d
ffffffff80002e44:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
        format++;
ffffffff80002e49:	49 83 c5 02          	add    $0x2,%r13
ffffffff80002e4d:	e9 00 f7 ff ff       	jmpq   ffffffff80002552 <_vsnprintf+0x102>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002e52:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e56:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002e5a:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002e5e:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002e62:	e9 c2 fd ff ff       	jmpq   ffffffff80002c29 <_vsnprintf+0x7d9>
ffffffff80002e67:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002e6a:	77 29                	ja     ffffffff80002e95 <_vsnprintf+0xa45>
ffffffff80002e6c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e70:	89 d0                	mov    %edx,%eax
ffffffff80002e72:	83 c2 08             	add    $0x8,%edx
ffffffff80002e75:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002e79:	89 16                	mov    %edx,(%rsi)
ffffffff80002e7b:	44 8b 08             	mov    (%rax),%r9d
ffffffff80002e7e:	e9 86 fb ff ff       	jmpq   ffffffff80002a09 <_vsnprintf+0x5b9>
        const int prec = (int)va_arg(va, int);
ffffffff80002e83:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e87:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002e8b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002e8f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002e93:	eb 9d                	jmp    ffffffff80002e32 <_vsnprintf+0x9e2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002e95:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e99:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80002e9d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80002ea1:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80002ea5:	eb d4                	jmp    ffffffff80002e7b <_vsnprintf+0xa2b>
ffffffff80002ea7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002eae:	00 00 

ffffffff80002eb0 <_out_char>:
  if (character) {
ffffffff80002eb0:	40 84 ff             	test   %dil,%dil
ffffffff80002eb3:	75 0b                	jne    ffffffff80002ec0 <_out_char+0x10>
}
ffffffff80002eb5:	f3 c3                	repz retq 
ffffffff80002eb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002ebe:	00 00 
    _putchar(character);
ffffffff80002ec0:	40 0f be ff          	movsbl %dil,%edi
ffffffff80002ec4:	e9 c7 01 00 00       	jmpq   ffffffff80003090 <_putchar>
ffffffff80002ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002ed0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
ffffffff80002ed0:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80002ed4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80002ed9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
ffffffff80002ede:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002ee3:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
ffffffff80002ee8:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80002eed:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  va_start(va, format);
ffffffff80002ef2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002ef7:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
{
ffffffff80002efc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002f01:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80002f08:	48 89 f9             	mov    %rdi,%rcx
ffffffff80002f0b:	48 c7 c7 b0 2e 00 80 	mov    $0xffffffff80002eb0,%rdi
{
ffffffff80002f12:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80002f17:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
ffffffff80002f1e:	00 
ffffffff80002f1f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002f24:	e8 27 f5 ff ff       	callq  ffffffff80002450 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80002f29:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002f2d:	c3                   	retq   
ffffffff80002f2e:	66 90                	xchg   %ax,%ax

ffffffff80002f30 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
ffffffff80002f30:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80002f34:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80002f39:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002f3e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80002f43:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffffff80002f48:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002f4d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff80002f54:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002f59:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002f5e:	48 89 f1             	mov    %rsi,%rcx
ffffffff80002f61:	48 89 fe             	mov    %rdi,%rsi
ffffffff80002f64:	48 c7 c7 20 1e 00 80 	mov    $0xffffffff80001e20,%rdi
{
ffffffff80002f6b:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80002f70:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff80002f77:	00 
ffffffff80002f78:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff80002f7d:	e8 ce f4 ff ff       	callq  ffffffff80002450 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80002f82:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002f86:	c3                   	retq   
ffffffff80002f87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002f8e:	00 00 

ffffffff80002f90 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
ffffffff80002f90:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80002f94:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80002f99:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002f9e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80002fa3:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002fa8:	48 89 d1             	mov    %rdx,%rcx
ffffffff80002fab:	48 89 f2             	mov    %rsi,%rdx
  va_start(va, format);
ffffffff80002fae:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002fb3:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002fb8:	48 89 fe             	mov    %rdi,%rsi
ffffffff80002fbb:	48 c7 c7 20 1e 00 80 	mov    $0xffffffff80001e20,%rdi
{
ffffffff80002fc2:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80002fc7:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%rsp)
ffffffff80002fce:	00 
ffffffff80002fcf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80002fd4:	e8 77 f4 ff ff       	callq  ffffffff80002450 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80002fd9:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002fdd:	c3                   	retq   
ffffffff80002fde:	66 90                	xchg   %ax,%ax

ffffffff80002fe0 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
ffffffff80002fe0:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80002fe4:	49 89 f0             	mov    %rsi,%r8
ffffffff80002fe7:	48 89 f9             	mov    %rdi,%rcx
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80002fea:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
ffffffff80002fef:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80002ff6:	48 c7 c7 b0 2e 00 80 	mov    $0xffffffff80002eb0,%rdi
ffffffff80002ffd:	e8 4e f4 ff ff       	callq  ffffffff80002450 <_vsnprintf>
}
ffffffff80003002:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80003006:	c3                   	retq   
ffffffff80003007:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000300e:	00 00 

ffffffff80003010 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
ffffffff80003010:	49 89 c8             	mov    %rcx,%r8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003013:	48 89 d1             	mov    %rdx,%rcx
ffffffff80003016:	48 89 f2             	mov    %rsi,%rdx
ffffffff80003019:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000301c:	48 c7 c7 20 1e 00 80 	mov    $0xffffffff80001e20,%rdi
ffffffff80003023:	e9 28 f4 ff ff       	jmpq   ffffffff80002450 <_vsnprintf>
ffffffff80003028:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000302f:	00 

ffffffff80003030 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
ffffffff80003030:	48 83 ec 68          	sub    $0x68,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003034:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
{
ffffffff80003039:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff8000303e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003043:	4c 8d 44 24 18       	lea    0x18(%rsp),%r8
ffffffff80003048:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
{
ffffffff8000304d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  va_start(va, format);
ffffffff80003052:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff80003057:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff8000305c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003061:	48 89 d1             	mov    %rdx,%rcx
ffffffff80003064:	48 c7 c7 40 1e 00 80 	mov    $0xffffffff80001e40,%rdi
ffffffff8000306b:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff80003072:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
  va_start(va, format);
ffffffff80003077:	c7 44 24 18 18 00 00 	movl   $0x18,0x18(%rsp)
ffffffff8000307e:	00 
ffffffff8000307f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003084:	e8 c7 f3 ff ff       	callq  ffffffff80002450 <_vsnprintf>
  va_end(va);
  return ret;
ffffffff80003089:	48 83 c4 68          	add    $0x68,%rsp
ffffffff8000308d:	c3                   	retq   
ffffffff8000308e:	66 90                	xchg   %ax,%ax

ffffffff80003090 <_putchar>:
#include "../device/console/console.h"

void _putchar(char character)
{
    
    putchar(character);
ffffffff80003090:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80003094:	e9 a7 e5 ff ff       	jmpq   ffffffff80001640 <putchar>
ffffffff80003099:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800030a0 <pagewalk>:
#include <stdint.h>
#include <stddef.h>


void pagewalk()
{
ffffffff800030a0:	eb fe                	jmp    ffffffff800030a0 <pagewalk>
ffffffff800030a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800030a9:	00 00 00 
ffffffff800030ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800030b0 <print_gdt>:
uint8_t ist2[4096];

void print_gdt()
{

}
ffffffff800030b0:	f3 c3                	repz retq 
ffffffff800030b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800030b9:	00 00 00 00 
ffffffff800030bd:	0f 1f 00             	nopl   (%rax)

ffffffff800030c0 <gdt_init>:

void gdt_init()
{
    gdt.null0.raw = 0x00;
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff800030c0:	48 b8 ff ff 00 00 00 	movabs $0xaf9a000000ffff,%rax
ffffffff800030c7:	9a af 00 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);

    gdtr.base = (uint64_t)&gdt;
    gdtr.limit = sizeof(gdt);

    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff800030ca:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff800030cf:	48 c7 c7 a0 e2 00 80 	mov    $0xffffffff8000e2a0,%rdi
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff800030d6:	48 89 05 6b b2 00 00 	mov    %rax,0xb26b(%rip)        # ffffffff8000e348 <gdt+0x8>
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff800030dd:	48 b8 ff ff 00 00 00 	movabs $0xaf92000000ffff,%rax
ffffffff800030e4:	92 af 00 
    gdt.null0.raw = 0x00;
ffffffff800030e7:	48 c7 05 4e b2 00 00 	movq   $0x0,0xb24e(%rip)        # ffffffff8000e340 <gdt>
ffffffff800030ee:	00 00 00 00 
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff800030f2:	48 89 05 57 b2 00 00 	mov    %rax,0xb257(%rip)        # ffffffff8000e350 <gdt+0x10>
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff800030f9:	48 b8 ff ff 00 00 00 	movabs $0xaffa000000ffff,%rax
ffffffff80003100:	fa af 00 
    gdt.null1.raw = 0x00;
ffffffff80003103:	48 c7 05 4a b2 00 00 	movq   $0x0,0xb24a(%rip)        # ffffffff8000e358 <gdt+0x18>
ffffffff8000310a:	00 00 00 00 
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff8000310e:	48 89 05 4b b2 00 00 	mov    %rax,0xb24b(%rip)        # ffffffff8000e360 <gdt+0x20>
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff80003115:	48 b8 ff ff 00 00 00 	movabs $0xaff2000000ffff,%rax
ffffffff8000311c:	f2 af 00 
    gdt.null2.raw = 0x00;
ffffffff8000311f:	48 c7 05 46 b2 00 00 	movq   $0x0,0xb246(%rip)        # ffffffff8000e370 <gdt+0x30>
ffffffff80003126:	00 00 00 00 
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff8000312a:	48 89 05 37 b2 00 00 	mov    %rax,0xb237(%rip)        # ffffffff8000e368 <gdt+0x28>
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003131:	48 c7 c0 c0 e2 00 80 	mov    $0xffffffff8000e2c0,%rax
    gdt.null3.raw = 0x00;
ffffffff80003138:	48 c7 05 35 b2 00 00 	movq   $0x0,0xb235(%rip)        # ffffffff8000e378 <gdt+0x38>
ffffffff8000313f:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003143:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003146:	66 89 05 45 b2 00 00 	mov    %ax,0xb245(%rip)        # ffffffff8000e392 <gdt+0x52>
    gdt.null4.raw = 0x00;
ffffffff8000314d:	48 c7 05 28 b2 00 00 	movq   $0x0,0xb228(%rip)        # ffffffff8000e380 <gdt+0x40>
ffffffff80003154:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003158:	48 c1 ea 10          	shr    $0x10,%rdx
    gdt.null5.raw = 0x00;
ffffffff8000315c:	48 c7 05 21 b2 00 00 	movq   $0x0,0xb221(%rip)        # ffffffff8000e388 <gdt+0x48>
ffffffff80003163:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff80003167:	c6 05 27 b2 00 00 89 	movb   $0x89,0xb227(%rip)        # ffffffff8000e395 <gdt+0x55>
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff8000316e:	88 15 20 b2 00 00    	mov    %dl,0xb220(%rip)        # ffffffff8000e394 <gdt+0x54>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003174:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff80003177:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8000317b:	89 05 17 b2 00 00    	mov    %eax,0xb217(%rip)        # ffffffff8000e398 <gdt+0x58>
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff80003181:	b8 68 00 00 00       	mov    $0x68,%eax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003186:	48 c1 ea 18          	shr    $0x18,%rdx
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff8000318a:	66 89 05 ff b1 00 00 	mov    %ax,0xb1ff(%rip)        # ffffffff8000e390 <gdt+0x50>
    gdt.tss_entry.reserved0 = 0;
ffffffff80003191:	0f b6 05 fe b1 00 00 	movzbl 0xb1fe(%rip),%eax        # ffffffff8000e396 <gdt+0x56>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003198:	88 15 f9 b1 00 00    	mov    %dl,0xb1f9(%rip)        # ffffffff8000e397 <gdt+0x57>
    gdtr.limit = sizeof(gdt);
ffffffff8000319e:	ba 60 00 00 00       	mov    $0x60,%edx
    gdt.tss_entry.reserved1 = 0;
ffffffff800031a3:	c7 05 ef b1 00 00 00 	movl   $0x0,0xb1ef(%rip)        # ffffffff8000e39c <gdt+0x5c>
ffffffff800031aa:	00 00 00 
    tss.reserved0 = 0x00;
ffffffff800031ad:	c7 05 09 b1 00 00 00 	movl   $0x0,0xb109(%rip)        # ffffffff8000e2c0 <tss>
ffffffff800031b4:	00 00 00 
    tss.RSP0 = (uint64_t)stack + sizeof(stack);
ffffffff800031b7:	48 c7 05 02 b1 00 00 	movq   $0xffffffff80009ee0,0xb102(%rip)        # ffffffff8000e2c4 <tss+0x4>
ffffffff800031be:	e0 9e 00 80 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);
ffffffff800031c2:	48 c7 05 17 b1 00 00 	movq   $0xffffffff8000e240,0xb117(%rip)        # ffffffff8000e2e4 <tss+0x24>
ffffffff800031c9:	40 e2 00 80 
    gdtr.base = (uint64_t)&gdt;
ffffffff800031cd:	48 c7 05 ca b0 00 00 	movq   $0xffffffff8000e340,0xb0ca(%rip)        # ffffffff8000e2a2 <gdtr+0x2>
ffffffff800031d4:	40 e3 00 80 
    gdt.tss_entry.reserved0 = 0;
ffffffff800031d8:	83 e0 40             	and    $0x40,%eax
    gdtr.limit = sizeof(gdt);
ffffffff800031db:	66 89 15 be b0 00 00 	mov    %dx,0xb0be(%rip)        # ffffffff8000e2a0 <gdtr>
    gdt.tss_entry.reserved0 = 0;
ffffffff800031e2:	88 05 ae b1 00 00    	mov    %al,0xb1ae(%rip)        # ffffffff8000e396 <gdt+0x56>
    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff800031e8:	e9 53 ce ff ff       	jmpq   ffffffff80000040 <gdt_load>
ffffffff800031ed:	0f 1f 00             	nopl   (%rax)

ffffffff800031f0 <memset>:
#include "kstring.h"

void* memset(void* s, uint64_t c, uint64_t len)
{
    unsigned char* p=s;
    while(len--)
ffffffff800031f0:	48 85 d2             	test   %rdx,%rdx
{
ffffffff800031f3:	48 89 f8             	mov    %rdi,%rax
    while(len--)
ffffffff800031f6:	74 15                	je     ffffffff8000320d <memset+0x1d>
ffffffff800031f8:	48 01 fa             	add    %rdi,%rdx
    unsigned char* p=s;
ffffffff800031fb:	48 89 f9             	mov    %rdi,%rcx
ffffffff800031fe:	66 90                	xchg   %ax,%ax
    {
        *p++ = (unsigned char)c;
ffffffff80003200:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80003204:	40 88 71 ff          	mov    %sil,-0x1(%rcx)
    while(len--)
ffffffff80003208:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8000320b:	75 f3                	jne    ffffffff80003200 <memset+0x10>
    }
    return s;
}
ffffffff8000320d:	f3 c3                	repz retq 
ffffffff8000320f:	90                   	nop

ffffffff80003210 <memcmp>:

int memcmp(const void* str1, const void* str2, size_t n)
{
    if(!n)
        return 0;
ffffffff80003210:	31 c0                	xor    %eax,%eax
    if(!n)
ffffffff80003212:	48 85 d2             	test   %rdx,%rdx
ffffffff80003215:	74 36                	je     ffffffff8000324d <memcmp+0x3d>

    while(--n && *(uint8_t*)str1 == *(uint8_t*)str2)
ffffffff80003217:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000321b:	44 0f b6 06          	movzbl (%rsi),%r8d
ffffffff8000321f:	0f b6 0f             	movzbl (%rdi),%ecx
ffffffff80003222:	74 23                	je     ffffffff80003247 <memcmp+0x37>
ffffffff80003224:	41 38 c8             	cmp    %cl,%r8b
ffffffff80003227:	75 1e                	jne    ffffffff80003247 <memcmp+0x37>
ffffffff80003229:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000322e:	eb 09                	jmp    ffffffff80003239 <memcmp+0x29>
ffffffff80003230:	48 83 c0 01          	add    $0x1,%rax
ffffffff80003234:	44 38 c1             	cmp    %r8b,%cl
ffffffff80003237:	75 0e                	jne    ffffffff80003247 <memcmp+0x37>
ffffffff80003239:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000323c:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff80003240:	44 0f b6 04 06       	movzbl (%rsi,%rax,1),%r8d
ffffffff80003245:	75 e9                	jne    ffffffff80003230 <memcmp+0x20>
    {
        str1 = (uint8_t*)str1 + 1;
        str2 = (uint8_t*)str2 + 1;
    }

    return (*((uint8_t*)str1) - *((uint8_t*)str2));
ffffffff80003247:	0f b6 c1             	movzbl %cl,%eax
ffffffff8000324a:	44 29 c0             	sub    %r8d,%eax
ffffffff8000324d:	f3 c3                	repz retq 
ffffffff8000324f:	90                   	nop

ffffffff80003250 <kernel>:




void kernel()
{
ffffffff80003250:	48 83 ec 08          	sub    $0x8,%rsp

    //printf("Kernel Now\n");
    
    gdt_init();
ffffffff80003254:	31 c0                	xor    %eax,%eax
ffffffff80003256:	e8 65 fe ff ff       	callq  ffffffff800030c0 <gdt_init>
    idt_init();
ffffffff8000325b:	31 c0                	xor    %eax,%eax
ffffffff8000325d:	e8 9e 00 00 00       	callq  ffffffff80003300 <idt_init>
    fb_init();
ffffffff80003262:	31 c0                	xor    %eax,%eax
ffffffff80003264:	e8 a7 e2 ff ff       	callq  ffffffff80001510 <fb_init>
    console_init();
ffffffff80003269:	31 c0                	xor    %eax,%eax
ffffffff8000326b:	e8 00 e5 ff ff       	callq  ffffffff80001770 <console_init>

    pmm_init();
ffffffff80003270:	31 c0                	xor    %eax,%eax
ffffffff80003272:	e8 59 de ff ff       	callq  ffffffff800010d0 <pmm_init>
    vmm_init();
ffffffff80003277:	31 c0                	xor    %eax,%eax
ffffffff80003279:	e8 42 d5 ff ff       	callq  ffffffff800007c0 <vmm_init>

    serial_init(0x3F8);     //COM1
ffffffff8000327e:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80003283:	e8 38 e6 ff ff       	callq  ffffffff800018c0 <serial_init>

    serial_write(0x3F8, 'h');
ffffffff80003288:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8000328d:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80003292:	e8 59 e7 ff ff       	callq  ffffffff800019f0 <serial_write>
    //fb_clearscreen(FB_COLOR_BLUE);

    //int_test();

 
    printf("Kernel Done!\n");
ffffffff80003297:	48 c7 c7 48 4b 00 80 	mov    $0xffffffff80004b48,%rdi
ffffffff8000329e:	31 c0                	xor    %eax,%eax
ffffffff800032a0:	e8 2b fc ff ff       	callq  ffffffff80002ed0 <printf_>
ffffffff800032a5:	eb fe                	jmp    ffffffff800032a5 <kernel+0x55>
ffffffff800032a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800032ae:	00 00 

ffffffff800032b0 <create_descriptor>:

void create_descriptor(uint16_t index, void* isr, uint8_t ist, uint8_t cs, uint8_t attr)
{
    struct idt_entry* entry = &idt[index];

    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800032b0:	0f b7 ff             	movzwl %di,%edi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800032b3:	48 89 f0             	mov    %rsi,%rax
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
    entry->ist = ist;
    entry->kernel_cs = cs;
ffffffff800032b6:	0f b6 c9             	movzbl %cl,%ecx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800032b9:	48 c1 e7 04          	shl    $0x4,%rdi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800032bd:	48 c1 e8 10          	shr    $0x10,%rax
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800032c1:	66 89 b7 c0 e3 00 80 	mov    %si,-0x7fff1c40(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800032c8:	48 c1 ee 20          	shr    $0x20,%rsi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800032cc:	66 89 87 c6 e3 00 80 	mov    %ax,-0x7fff1c3a(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800032d3:	89 b7 c8 e3 00 80    	mov    %esi,-0x7fff1c38(%rdi)
    entry->ist = ist;
ffffffff800032d9:	88 97 c4 e3 00 80    	mov    %dl,-0x7fff1c3c(%rdi)
    entry->kernel_cs = cs;
ffffffff800032df:	66 89 8f c2 e3 00 80 	mov    %cx,-0x7fff1c3e(%rdi)
    entry->attributes = attr;
ffffffff800032e6:	44 88 87 c5 e3 00 80 	mov    %r8b,-0x7fff1c3b(%rdi)
    entry->reserved = 0;
ffffffff800032ed:	c7 87 cc e3 00 80 00 	movl   $0x0,-0x7fff1c34(%rdi)
ffffffff800032f4:	00 00 00 
}
ffffffff800032f7:	c3                   	retq   
ffffffff800032f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800032ff:	00 

ffffffff80003300 <idt_init>:

void idt_init()
{
    //uint64_t idt_ptr = hh_code_to_phys((uint64_t)&idt[0]);
    idtr.base = (uint64_t)&idt[0];
ffffffff80003300:	48 c7 c0 c0 e3 00 80 	mov    $0xffffffff8000e3c0,%rax
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003307:	b9 ff 0f 00 00       	mov    $0xfff,%ecx
{
ffffffff8000330c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80003310:	48 8d b8 f0 02 00 00 	lea    0x2f0(%rax),%rdi
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003317:	66 89 0d 8a b0 00 00 	mov    %cx,0xb08a(%rip)        # ffffffff8000e3a8 <idtr>
    idtr.base = (uint64_t)&idt[0];
ffffffff8000331e:	48 89 05 85 b0 00 00 	mov    %rax,0xb085(%rip)        # ffffffff8000e3aa <idtr+0x2>
ffffffff80003325:	48 c7 c1 48 02 00 80 	mov    $0xffffffff80000248,%rcx
ffffffff8000332c:	0f 1f 40 00          	nopl   0x0(%rax)

    for(uint8_t index = 0; index < 47; index++)
    {
        create_descriptor(index, isr_stub_table[index], 0x00, 0x08, 0x8E);
ffffffff80003330:	48 8b 11             	mov    (%rcx),%rdx
    entry->ist = ist;
ffffffff80003333:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80003337:	48 83 c0 10          	add    $0x10,%rax
    entry->attributes = attr;
ffffffff8000333b:	c6 40 f5 8e          	movb   $0x8e,-0xb(%rax)
    entry->reserved = 0;
ffffffff8000333f:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
ffffffff80003346:	48 83 c1 08          	add    $0x8,%rcx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff8000334a:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000334e:	48 89 d6             	mov    %rdx,%rsi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003351:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80003355:	89 50 f8             	mov    %edx,-0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003358:	48 c1 ee 10          	shr    $0x10,%rsi
    entry->kernel_cs = cs;
ffffffff8000335c:	ba 08 00 00 00       	mov    $0x8,%edx
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003361:	66 89 70 f6          	mov    %si,-0xa(%rax)
    entry->kernel_cs = cs;
ffffffff80003365:	66 89 50 f2          	mov    %dx,-0xe(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80003369:	48 39 f8             	cmp    %rdi,%rax
ffffffff8000336c:	75 c2                	jne    ffffffff80003330 <idt_init+0x30>
    }

    create_descriptor(127, isr_stub_table[48], 0x00, 0x08, 0x8E);
ffffffff8000336e:	48 8b 05 53 d0 ff ff 	mov    -0x2fad(%rip),%rax        # ffffffff800003c8 <isr_stub_table+0x180>
    entry->kernel_cs = cs;
ffffffff80003375:	c7 05 33 b8 00 00 08 	movl   $0x8e000008,0xb833(%rip)        # ffffffff8000ebb2 <idt+0x7f2>
ffffffff8000337c:	00 00 8e 
    entry->reserved = 0;
ffffffff8000337f:	c7 05 33 b8 00 00 00 	movl   $0x0,0xb833(%rip)        # ffffffff8000ebbc <idt+0x7fc>
ffffffff80003386:	00 00 00 
    entry->kernel_cs = cs;
ffffffff80003389:	c7 05 2f b8 00 00 08 	movl   $0x8e000008,0xb82f(%rip)        # ffffffff8000ebc2 <idt+0x802>
ffffffff80003390:	00 00 8e 
    entry->reserved = 0;
ffffffff80003393:	c7 05 2f b8 00 00 00 	movl   $0x0,0xb82f(%rip)        # ffffffff8000ebcc <idt+0x80c>
ffffffff8000339a:	00 00 00 
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff8000339d:	66 89 05 0c b8 00 00 	mov    %ax,0xb80c(%rip)        # ffffffff8000ebb0 <idt+0x7f0>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800033a4:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800033a7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff800033ab:	89 05 07 b8 00 00    	mov    %eax,0xb807(%rip)        # ffffffff8000ebb8 <idt+0x7f8>
    create_descriptor(128, isr_stub_table[49], 0x00, 0x08, 0x8E);
ffffffff800033b1:	48 8b 05 18 d0 ff ff 	mov    -0x2fe8(%rip),%rax        # ffffffff800003d0 <isr_stub_table+0x188>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800033b8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff800033bc:	66 89 15 f3 b7 00 00 	mov    %dx,0xb7f3(%rip)        # ffffffff8000ebb6 <idt+0x7f6>
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800033c3:	66 89 05 f6 b7 00 00 	mov    %ax,0xb7f6(%rip)        # ffffffff8000ebc0 <idt+0x800>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800033ca:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800033cd:	48 c1 e8 20          	shr    $0x20,%rax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800033d1:	48 c1 ea 10          	shr    $0x10,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800033d5:	89 05 ed b7 00 00    	mov    %eax,0xb7ed(%rip)        # ffffffff8000ebc8 <idt+0x808>

    pic_remap();
ffffffff800033db:	31 c0                	xor    %eax,%eax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800033dd:	66 89 15 e2 b7 00 00 	mov    %dx,0xb7e2(%rip)        # ffffffff8000ebc6 <idt+0x806>
    pic_remap();
ffffffff800033e4:	e8 d7 e8 ff ff       	callq  ffffffff80001cc0 <pic_remap>
    pic_disable();
ffffffff800033e9:	31 c0                	xor    %eax,%eax
ffffffff800033eb:	e8 a0 e8 ff ff       	callq  ffffffff80001c90 <pic_disable>

    

    idt_load(&idtr);
ffffffff800033f0:	48 c7 c7 a8 e3 00 80 	mov    $0xffffffff8000e3a8,%rdi
ffffffff800033f7:	e8 dc cf ff ff       	callq  ffffffff800003d8 <idt_load>

    pit_init(10000);
ffffffff800033fc:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff80003401:	e8 ba e9 ff ff       	callq  ffffffff80001dc0 <pit_init>

    pic_clear_mask(1);
ffffffff80003406:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8000340b:	e8 30 e8 ff ff       	callq  ffffffff80001c40 <pic_clear_mask>
    pic_clear_mask(0);
ffffffff80003410:	31 ff                	xor    %edi,%edi


    //__asm__ volatile ("lidt %0" : : "m"(idtr));
    //__asm__ volatile ("sti");
}
ffffffff80003412:	48 83 c4 08          	add    $0x8,%rsp
    pic_clear_mask(0);
ffffffff80003416:	e9 25 e8 ff ff       	jmpq   ffffffff80001c40 <pic_clear_mask>
ffffffff8000341b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80003420 <interrupt_handler>:

uint64_t interrupt_handler(uint64_t rsp)
{
ffffffff80003420:	55                   	push   %rbp
ffffffff80003421:	53                   	push   %rbx
ffffffff80003422:	48 89 fb             	mov    %rdi,%rbx
ffffffff80003425:	48 83 ec 08          	sub    $0x8,%rsp
    struct interrupt_stack_frame* frame = (struct interrupt_stack_frame*)rsp;
    
    if(frame->int_no < 32)
ffffffff80003429:	48 8b 77 78          	mov    0x78(%rdi),%rsi
ffffffff8000342d:	48 83 fe 1f          	cmp    $0x1f,%rsi
ffffffff80003431:	77 1d                	ja     ffffffff80003450 <interrupt_handler+0x30>
    {
        if(frame->cs == 0x08)
ffffffff80003433:	48 83 bf 90 00 00 00 	cmpq   $0x8,0x90(%rdi)
ffffffff8000343a:	08 
ffffffff8000343b:	74 63                	je     ffffffff800034a0 <interrupt_handler+0x80>
    {
        printf("Syscall 127\n");
        return rsp;
    }
    return rsp;
ffffffff8000343d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003441:	48 89 d8             	mov    %rbx,%rax
ffffffff80003444:	5b                   	pop    %rbx
ffffffff80003445:	5d                   	pop    %rbp
ffffffff80003446:	c3                   	retq   
ffffffff80003447:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000344e:	00 00 
    else if (frame->int_no < 48)
ffffffff80003450:	48 83 fe 2f          	cmp    $0x2f,%rsi
ffffffff80003454:	77 32                	ja     ffffffff80003488 <interrupt_handler+0x68>
        uint64_t irq = frame->int_no - 32;
ffffffff80003456:	48 8d 6e e0          	lea    -0x20(%rsi),%rbp
        if(irq > 1)
ffffffff8000345a:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff8000345e:	0f 87 f4 00 00 00    	ja     ffffffff80003558 <interrupt_handler+0x138>
        switch(irq)
ffffffff80003464:	0f 84 de 00 00 00    	je     ffffffff80003548 <interrupt_handler+0x128>
                pit_ticks++;
ffffffff8000346a:	48 83 05 2e af 00 00 	addq   $0x1,0xaf2e(%rip)        # ffffffff8000e3a0 <pit_ticks>
ffffffff80003471:	01 
        pic_EOI(irq);
ffffffff80003472:	89 ef                	mov    %ebp,%edi
ffffffff80003474:	e8 37 e7 ff ff       	callq  ffffffff80001bb0 <pic_EOI>
ffffffff80003479:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000347d:	48 89 d8             	mov    %rbx,%rax
ffffffff80003480:	5b                   	pop    %rbx
ffffffff80003481:	5d                   	pop    %rbp
ffffffff80003482:	c3                   	retq   
ffffffff80003483:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    else if (frame->int_no == 127)
ffffffff80003488:	48 83 fe 7f          	cmp    $0x7f,%rsi
ffffffff8000348c:	75 af                	jne    ffffffff8000343d <interrupt_handler+0x1d>
        printf("Syscall 127\n");
ffffffff8000348e:	48 c7 c7 db 4b 00 80 	mov    $0xffffffff80004bdb,%rdi
ffffffff80003495:	31 c0                	xor    %eax,%eax
ffffffff80003497:	e8 34 fa ff ff       	callq  ffffffff80002ed0 <printf_>
        return rsp;
ffffffff8000349c:	eb 9f                	jmp    ffffffff8000343d <interrupt_handler+0x1d>
ffffffff8000349e:	66 90                	xchg   %ax,%ax
            uint64_t cr2 = read_cr2();
ffffffff800034a0:	31 c0                	xor    %eax,%eax
ffffffff800034a2:	e8 c9 cb ff ff       	callq  ffffffff80000070 <read_cr2>
            serial_write(0x3F8, 'e');
ffffffff800034a7:	be 65 00 00 00       	mov    $0x65,%esi
ffffffff800034ac:	bf f8 03 00 00       	mov    $0x3f8,%edi
            uint64_t cr2 = read_cr2();
ffffffff800034b1:	48 89 c5             	mov    %rax,%rbp
            serial_write(0x3F8, 'e');
ffffffff800034b4:	e8 37 e5 ff ff       	callq  ffffffff800019f0 <serial_write>
            printf("\nCPU Exception! INT %d   ERR %x  CR2 %p\n", frame->int_no, frame->err_no, cr2);
ffffffff800034b9:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff800034c0:	48 8b 73 78          	mov    0x78(%rbx),%rsi
ffffffff800034c4:	48 89 e9             	mov    %rbp,%rcx
ffffffff800034c7:	48 c7 c7 58 4b 00 80 	mov    $0xffffffff80004b58,%rdi
ffffffff800034ce:	31 c0                	xor    %eax,%eax
ffffffff800034d0:	e8 fb f9 ff ff       	callq  ffffffff80002ed0 <printf_>
            printf(_exception_messages[frame->int_no]);
ffffffff800034d5:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff800034d9:	48 8b 3c c5 20 4d 00 	mov    -0x7fffb2e0(,%rax,8),%rdi
ffffffff800034e0:	80 
ffffffff800034e1:	31 c0                	xor    %eax,%eax
ffffffff800034e3:	e8 e8 f9 ff ff       	callq  ffffffff80002ed0 <printf_>
            printf("\n");
ffffffff800034e8:	48 c7 c7 d9 4b 00 80 	mov    $0xffffffff80004bd9,%rdi
ffffffff800034ef:	31 c0                	xor    %eax,%eax
ffffffff800034f1:	e8 da f9 ff ff       	callq  ffffffff80002ed0 <printf_>
            printf("SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff800034f6:	48 8b 8b 98 00 00 00 	mov    0x98(%rbx),%rcx
ffffffff800034fd:	48 8b 93 a0 00 00 00 	mov    0xa0(%rbx),%rdx
ffffffff80003504:	48 c7 c7 88 4b 00 80 	mov    $0xffffffff80004b88,%rdi
ffffffff8000350b:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
ffffffff80003512:	4c 8b 8b 88 00 00 00 	mov    0x88(%rbx),%r9
ffffffff80003519:	31 c0                	xor    %eax,%eax
ffffffff8000351b:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80003522:	e8 a9 f9 ff ff       	callq  ffffffff80002ed0 <printf_>
            printf("rax: %x  rdi: %x", frame->rax, frame->rdi);
ffffffff80003527:	48 8b 53 48          	mov    0x48(%rbx),%rdx
ffffffff8000352b:	48 8b 73 70          	mov    0x70(%rbx),%rsi
ffffffff8000352f:	48 c7 c7 b6 4b 00 80 	mov    $0xffffffff80004bb6,%rdi
ffffffff80003536:	31 c0                	xor    %eax,%eax
ffffffff80003538:	e8 93 f9 ff ff       	callq  ffffffff80002ed0 <printf_>
            asm("cli");
ffffffff8000353d:	fa                   	cli    
            asm("hlt");
ffffffff8000353e:	f4                   	hlt    
ffffffff8000353f:	eb fe                	jmp    ffffffff8000353f <interrupt_handler+0x11f>
ffffffff80003541:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                kbd_handle();
ffffffff80003548:	31 c0                	xor    %eax,%eax
ffffffff8000354a:	e8 11 e5 ff ff       	callq  ffffffff80001a60 <kbd_handle>
                break;
ffffffff8000354f:	e9 1e ff ff ff       	jmpq   ffffffff80003472 <interrupt_handler+0x52>
ffffffff80003554:	0f 1f 40 00          	nopl   0x0(%rax)
            printf("INT: %d  IRQ: %d  \n", frame->int_no, irq);
ffffffff80003558:	48 89 ea             	mov    %rbp,%rdx
ffffffff8000355b:	48 c7 c7 c7 4b 00 80 	mov    $0xffffffff80004bc7,%rdi
ffffffff80003562:	31 c0                	xor    %eax,%eax
ffffffff80003564:	e8 67 f9 ff ff       	callq  ffffffff80002ed0 <printf_>
ffffffff80003569:	e9 04 ff ff ff       	jmpq   ffffffff80003472 <interrupt_handler+0x52>
