
./bin/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <gdt_load>:
ffffffff80000000:	0f 01 17             	lgdt   (%rdi)
ffffffff80000003:	55                   	push   %rbp
ffffffff80000004:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000007:	6a 10                	pushq  $0x10
ffffffff80000009:	55                   	push   %rbp
ffffffff8000000a:	9c                   	pushfq 
ffffffff8000000b:	6a 08                	pushq  $0x8
ffffffff8000000d:	68 14 00 00 80       	pushq  $0xffffffff80000014
ffffffff80000012:	48 cf                	iretq  

ffffffff80000014 <gdt_load.trampoline>:
ffffffff80000014:	5d                   	pop    %rbp
ffffffff80000015:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80000019:	8e d8                	mov    %eax,%ds
ffffffff8000001b:	8e c0                	mov    %eax,%es
ffffffff8000001d:	8e e0                	mov    %eax,%fs
ffffffff8000001f:	8e e8                	mov    %eax,%gs
ffffffff80000021:	8e d0                	mov    %eax,%ss
ffffffff80000023:	66 b8 50 00          	mov    $0x50,%ax
ffffffff80000027:	0f 00 d8             	ltr    %ax
ffffffff8000002a:	c3                   	retq   

ffffffff8000002b <gdt_load.end>:
ffffffff8000002b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000030 <read_cr2>:
ffffffff80000030:	0f 20 d0             	mov    %cr2,%rax
ffffffff80000033:	c3                   	retq   

ffffffff80000034 <_interrupt_common>:
ffffffff80000034:	fc                   	cld    
ffffffff80000035:	50                   	push   %rax
ffffffff80000036:	53                   	push   %rbx
ffffffff80000037:	51                   	push   %rcx
ffffffff80000038:	52                   	push   %rdx
ffffffff80000039:	56                   	push   %rsi
ffffffff8000003a:	57                   	push   %rdi
ffffffff8000003b:	55                   	push   %rbp
ffffffff8000003c:	41 50                	push   %r8
ffffffff8000003e:	41 51                	push   %r9
ffffffff80000040:	41 52                	push   %r10
ffffffff80000042:	41 53                	push   %r11
ffffffff80000044:	41 54                	push   %r12
ffffffff80000046:	41 55                	push   %r13
ffffffff80000048:	41 56                	push   %r14
ffffffff8000004a:	41 57                	push   %r15
ffffffff8000004c:	48 89 e7             	mov    %rsp,%rdi
ffffffff8000004f:	e8 dc 14 00 00       	callq  ffffffff80001530 <interrupt_handler>
ffffffff80000054:	48 89 c4             	mov    %rax,%rsp
ffffffff80000057:	41 5f                	pop    %r15
ffffffff80000059:	41 5e                	pop    %r14
ffffffff8000005b:	41 5d                	pop    %r13
ffffffff8000005d:	41 5c                	pop    %r12
ffffffff8000005f:	41 5b                	pop    %r11
ffffffff80000061:	41 5a                	pop    %r10
ffffffff80000063:	41 59                	pop    %r9
ffffffff80000065:	41 58                	pop    %r8
ffffffff80000067:	5d                   	pop    %rbp
ffffffff80000068:	5f                   	pop    %rdi
ffffffff80000069:	5e                   	pop    %rsi
ffffffff8000006a:	5a                   	pop    %rdx
ffffffff8000006b:	59                   	pop    %rcx
ffffffff8000006c:	5b                   	pop    %rbx
ffffffff8000006d:	58                   	pop    %rax
ffffffff8000006e:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000072:	48 cf                	iretq  

ffffffff80000074 <_interrupt0>:
ffffffff80000074:	6a 00                	pushq  $0x0
ffffffff80000076:	6a 00                	pushq  $0x0
ffffffff80000078:	eb ba                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff8000007a <_interrupt1>:
ffffffff8000007a:	6a 00                	pushq  $0x0
ffffffff8000007c:	6a 01                	pushq  $0x1
ffffffff8000007e:	eb b4                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff80000080 <_interrupt2>:
ffffffff80000080:	6a 00                	pushq  $0x0
ffffffff80000082:	6a 02                	pushq  $0x2
ffffffff80000084:	eb ae                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff80000086 <_interrupt3>:
ffffffff80000086:	6a 00                	pushq  $0x0
ffffffff80000088:	6a 03                	pushq  $0x3
ffffffff8000008a:	eb a8                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff8000008c <_interrupt4>:
ffffffff8000008c:	6a 00                	pushq  $0x0
ffffffff8000008e:	6a 04                	pushq  $0x4
ffffffff80000090:	eb a2                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff80000092 <_interrupt5>:
ffffffff80000092:	6a 00                	pushq  $0x0
ffffffff80000094:	6a 05                	pushq  $0x5
ffffffff80000096:	eb 9c                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff80000098 <_interrupt6>:
ffffffff80000098:	6a 00                	pushq  $0x0
ffffffff8000009a:	6a 06                	pushq  $0x6
ffffffff8000009c:	eb 96                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff8000009e <_interrupt7>:
ffffffff8000009e:	6a 00                	pushq  $0x0
ffffffff800000a0:	6a 07                	pushq  $0x7
ffffffff800000a2:	eb 90                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff800000a4 <_interrupt8>:
ffffffff800000a4:	6a 08                	pushq  $0x8
ffffffff800000a6:	eb 8c                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff800000a8 <_interrupt9>:
ffffffff800000a8:	6a 00                	pushq  $0x0
ffffffff800000aa:	6a 09                	pushq  $0x9
ffffffff800000ac:	eb 86                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff800000ae <_interrupt10>:
ffffffff800000ae:	6a 0a                	pushq  $0xa
ffffffff800000b0:	eb 82                	jmp    ffffffff80000034 <_interrupt_common>

ffffffff800000b2 <_interrupt11>:
ffffffff800000b2:	6a 0b                	pushq  $0xb
ffffffff800000b4:	e9 7b ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000b9 <_interrupt12>:
ffffffff800000b9:	6a 0c                	pushq  $0xc
ffffffff800000bb:	e9 74 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000c0 <_interrupt13>:
ffffffff800000c0:	6a 0d                	pushq  $0xd
ffffffff800000c2:	e9 6d ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000c7 <_interrupt14>:
ffffffff800000c7:	6a 0e                	pushq  $0xe
ffffffff800000c9:	e9 66 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000ce <_interrupt15>:
ffffffff800000ce:	6a 00                	pushq  $0x0
ffffffff800000d0:	6a 0f                	pushq  $0xf
ffffffff800000d2:	e9 5d ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000d7 <_interrupt16>:
ffffffff800000d7:	6a 00                	pushq  $0x0
ffffffff800000d9:	6a 10                	pushq  $0x10
ffffffff800000db:	e9 54 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000e0 <_interrupt17>:
ffffffff800000e0:	6a 11                	pushq  $0x11
ffffffff800000e2:	e9 4d ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000e7 <_interrupt18>:
ffffffff800000e7:	6a 00                	pushq  $0x0
ffffffff800000e9:	6a 12                	pushq  $0x12
ffffffff800000eb:	e9 44 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000f0 <_interrupt19>:
ffffffff800000f0:	6a 00                	pushq  $0x0
ffffffff800000f2:	6a 13                	pushq  $0x13
ffffffff800000f4:	e9 3b ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800000f9 <_interrupt20>:
ffffffff800000f9:	6a 00                	pushq  $0x0
ffffffff800000fb:	6a 14                	pushq  $0x14
ffffffff800000fd:	e9 32 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000102 <_interrupt21>:
ffffffff80000102:	6a 00                	pushq  $0x0
ffffffff80000104:	6a 15                	pushq  $0x15
ffffffff80000106:	e9 29 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff8000010b <_interrupt22>:
ffffffff8000010b:	6a 00                	pushq  $0x0
ffffffff8000010d:	6a 16                	pushq  $0x16
ffffffff8000010f:	e9 20 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000114 <_interrupt23>:
ffffffff80000114:	6a 00                	pushq  $0x0
ffffffff80000116:	6a 17                	pushq  $0x17
ffffffff80000118:	e9 17 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff8000011d <_interrupt24>:
ffffffff8000011d:	6a 00                	pushq  $0x0
ffffffff8000011f:	6a 18                	pushq  $0x18
ffffffff80000121:	e9 0e ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000126 <_interrupt25>:
ffffffff80000126:	6a 00                	pushq  $0x0
ffffffff80000128:	6a 19                	pushq  $0x19
ffffffff8000012a:	e9 05 ff ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff8000012f <_interrupt26>:
ffffffff8000012f:	6a 00                	pushq  $0x0
ffffffff80000131:	6a 1a                	pushq  $0x1a
ffffffff80000133:	e9 fc fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000138 <_interrupt27>:
ffffffff80000138:	6a 00                	pushq  $0x0
ffffffff8000013a:	6a 1b                	pushq  $0x1b
ffffffff8000013c:	e9 f3 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000141 <_interrupt28>:
ffffffff80000141:	6a 00                	pushq  $0x0
ffffffff80000143:	6a 1c                	pushq  $0x1c
ffffffff80000145:	e9 ea fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff8000014a <_interrupt29>:
ffffffff8000014a:	6a 00                	pushq  $0x0
ffffffff8000014c:	6a 1d                	pushq  $0x1d
ffffffff8000014e:	e9 e1 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000153 <_interrupt30>:
ffffffff80000153:	6a 1e                	pushq  $0x1e
ffffffff80000155:	e9 da fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff8000015a <_interrupt31>:
ffffffff8000015a:	6a 00                	pushq  $0x0
ffffffff8000015c:	6a 1f                	pushq  $0x1f
ffffffff8000015e:	e9 d1 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000163 <_interrupt32>:
ffffffff80000163:	6a 00                	pushq  $0x0
ffffffff80000165:	6a 20                	pushq  $0x20
ffffffff80000167:	e9 c8 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff8000016c <_interrupt33>:
ffffffff8000016c:	6a 00                	pushq  $0x0
ffffffff8000016e:	6a 21                	pushq  $0x21
ffffffff80000170:	e9 bf fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000175 <_interrupt34>:
ffffffff80000175:	6a 00                	pushq  $0x0
ffffffff80000177:	6a 22                	pushq  $0x22
ffffffff80000179:	e9 b6 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff8000017e <_interrupt35>:
ffffffff8000017e:	6a 00                	pushq  $0x0
ffffffff80000180:	6a 23                	pushq  $0x23
ffffffff80000182:	e9 ad fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000187 <_interrupt36>:
ffffffff80000187:	6a 00                	pushq  $0x0
ffffffff80000189:	6a 24                	pushq  $0x24
ffffffff8000018b:	e9 a4 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000190 <_interrupt37>:
ffffffff80000190:	6a 00                	pushq  $0x0
ffffffff80000192:	6a 25                	pushq  $0x25
ffffffff80000194:	e9 9b fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000199 <_interrupt38>:
ffffffff80000199:	6a 00                	pushq  $0x0
ffffffff8000019b:	6a 26                	pushq  $0x26
ffffffff8000019d:	e9 92 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001a2 <_interrupt39>:
ffffffff800001a2:	6a 00                	pushq  $0x0
ffffffff800001a4:	6a 27                	pushq  $0x27
ffffffff800001a6:	e9 89 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001ab <_interrupt40>:
ffffffff800001ab:	6a 00                	pushq  $0x0
ffffffff800001ad:	6a 28                	pushq  $0x28
ffffffff800001af:	e9 80 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001b4 <_interrupt41>:
ffffffff800001b4:	6a 00                	pushq  $0x0
ffffffff800001b6:	6a 29                	pushq  $0x29
ffffffff800001b8:	e9 77 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001bd <_interrupt42>:
ffffffff800001bd:	6a 00                	pushq  $0x0
ffffffff800001bf:	6a 2a                	pushq  $0x2a
ffffffff800001c1:	e9 6e fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001c6 <_interrupt43>:
ffffffff800001c6:	6a 00                	pushq  $0x0
ffffffff800001c8:	6a 2b                	pushq  $0x2b
ffffffff800001ca:	e9 65 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001cf <_interrupt44>:
ffffffff800001cf:	6a 00                	pushq  $0x0
ffffffff800001d1:	6a 2c                	pushq  $0x2c
ffffffff800001d3:	e9 5c fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001d8 <_interrupt45>:
ffffffff800001d8:	6a 00                	pushq  $0x0
ffffffff800001da:	6a 2d                	pushq  $0x2d
ffffffff800001dc:	e9 53 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001e1 <_interrupt46>:
ffffffff800001e1:	6a 00                	pushq  $0x0
ffffffff800001e3:	6a 2e                	pushq  $0x2e
ffffffff800001e5:	e9 4a fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001ea <_interrupt47>:
ffffffff800001ea:	6a 00                	pushq  $0x0
ffffffff800001ec:	6a 2f                	pushq  $0x2f
ffffffff800001ee:	e9 41 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001f3 <_interrupt127>:
ffffffff800001f3:	6a 00                	pushq  $0x0
ffffffff800001f5:	6a 7f                	pushq  $0x7f
ffffffff800001f7:	e9 38 fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff800001fc <_interrupt128>:
ffffffff800001fc:	6a 00                	pushq  $0x0
ffffffff800001fe:	68 80 00 00 00       	pushq  $0x80
ffffffff80000203:	e9 2c fe ff ff       	jmpq   ffffffff80000034 <_interrupt_common>

ffffffff80000208 <isr_stub_table>:
ffffffff80000208:	74 00 00 80 ff ff ff ff 7a 00 00 80 ff ff ff ff     t.......z.......
ffffffff80000218:	80 00 00 80 ff ff ff ff 86 00 00 80 ff ff ff ff     ................
ffffffff80000228:	8c 00 00 80 ff ff ff ff 92 00 00 80 ff ff ff ff     ................
ffffffff80000238:	98 00 00 80 ff ff ff ff 9e 00 00 80 ff ff ff ff     ................
ffffffff80000248:	a4 00 00 80 ff ff ff ff a8 00 00 80 ff ff ff ff     ................
ffffffff80000258:	ae 00 00 80 ff ff ff ff b2 00 00 80 ff ff ff ff     ................
ffffffff80000268:	b9 00 00 80 ff ff ff ff c0 00 00 80 ff ff ff ff     ................
ffffffff80000278:	c7 00 00 80 ff ff ff ff ce 00 00 80 ff ff ff ff     ................
ffffffff80000288:	d7 00 00 80 ff ff ff ff e0 00 00 80 ff ff ff ff     ................
ffffffff80000298:	e7 00 00 80 ff ff ff ff f0 00 00 80 ff ff ff ff     ................
ffffffff800002a8:	f9 00 00 80 ff ff ff ff 02 01 00 80 ff ff ff ff     ................
ffffffff800002b8:	0b 01 00 80 ff ff ff ff 14 01 00 80 ff ff ff ff     ................
ffffffff800002c8:	1d 01 00 80 ff ff ff ff 26 01 00 80 ff ff ff ff     ........&.......
ffffffff800002d8:	2f 01 00 80 ff ff ff ff 38 01 00 80 ff ff ff ff     /.......8.......
ffffffff800002e8:	41 01 00 80 ff ff ff ff 4a 01 00 80 ff ff ff ff     A.......J.......
ffffffff800002f8:	53 01 00 80 ff ff ff ff 5a 01 00 80 ff ff ff ff     S.......Z.......
ffffffff80000308:	63 01 00 80 ff ff ff ff 6c 01 00 80 ff ff ff ff     c.......l.......
ffffffff80000318:	75 01 00 80 ff ff ff ff 7e 01 00 80 ff ff ff ff     u.......~.......
ffffffff80000328:	87 01 00 80 ff ff ff ff 90 01 00 80 ff ff ff ff     ................
ffffffff80000338:	99 01 00 80 ff ff ff ff a2 01 00 80 ff ff ff ff     ................
ffffffff80000348:	ab 01 00 80 ff ff ff ff b4 01 00 80 ff ff ff ff     ................
ffffffff80000358:	bd 01 00 80 ff ff ff ff c6 01 00 80 ff ff ff ff     ................
ffffffff80000368:	cf 01 00 80 ff ff ff ff d8 01 00 80 ff ff ff ff     ................
ffffffff80000378:	e1 01 00 80 ff ff ff ff ea 01 00 80 ff ff ff ff     ................
ffffffff80000388:	f3 01 00 80 ff ff ff ff fc 01 00 80 ff ff ff ff     ................

ffffffff80000398 <idt_load>:
ffffffff80000398:	0f 01 1f             	lidt   (%rdi)
ffffffff8000039b:	fb                   	sti    
ffffffff8000039c:	c3                   	retq   

ffffffff8000039d <int_test>:
ffffffff8000039d:	cd 7f                	int    $0x7f
ffffffff8000039f:	c3                   	retq   

ffffffff800003a0 <vmm_read_cr3>:
ffffffff800003a0:	0f 20 d8             	mov    %cr3,%rax
ffffffff800003a3:	c3                   	retq   

ffffffff800003a4 <vmm_write_cr3>:
ffffffff800003a4:	0f 22 df             	mov    %rdi,%cr3
ffffffff800003a7:	c3                   	retq   

ffffffff800003a8 <vmm_flush_tlb>:
ffffffff800003a8:	0f 01 3f             	invlpg (%rdi)
ffffffff800003ab:	c3                   	retq   

ffffffff800003ac <vmm_read_efer>:
ffffffff800003ac:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff800003b1:	0f 32                	rdmsr  
ffffffff800003b3:	c3                   	retq   

ffffffff800003b4 <vmm_enable_nxe>:
ffffffff800003b4:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff800003b9:	0f 32                	rdmsr  
ffffffff800003bb:	0d 00 08 00 00       	or     $0x800,%eax
ffffffff800003c0:	0f 30                	wrmsr  

ffffffff800003c2 <vmm_enable_nxe.end>:
ffffffff800003c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800003c9:	00 00 00 
ffffffff800003cc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800003d0 <switch_to_task>:
ffffffff800003d0:	50                   	push   %rax
ffffffff800003d1:	53                   	push   %rbx
ffffffff800003d2:	51                   	push   %rcx
ffffffff800003d3:	52                   	push   %rdx
ffffffff800003d4:	56                   	push   %rsi
ffffffff800003d5:	57                   	push   %rdi
ffffffff800003d6:	55                   	push   %rbp
ffffffff800003d7:	41 50                	push   %r8
ffffffff800003d9:	41 51                	push   %r9
ffffffff800003db:	41 52                	push   %r10
ffffffff800003dd:	41 53                	push   %r11
ffffffff800003df:	41 54                	push   %r12
ffffffff800003e1:	41 55                	push   %r13
ffffffff800003e3:	41 56                	push   %r14
ffffffff800003e5:	41 57                	push   %r15

ffffffff800003e7 <switch_to_task.end>:
ffffffff800003e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800003ee:	00 00 

ffffffff800003f0 <to_usermode>:
ffffffff800003f0:	48 89 f9             	mov    %rdi,%rcx
ffffffff800003f3:	48 89 f4             	mov    %rsi,%rsp
ffffffff800003f6:	41 bb 02 32 00 00    	mov    $0x3202,%r11d
ffffffff800003fc:	48 0f 07             	rex.W sysret 

ffffffff800003ff <read_msr>:
ffffffff800003ff:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000402:	0f 32                	rdmsr  
ffffffff80000404:	c3                   	retq   

ffffffff80000405 <enable_syscall>:
ffffffff80000405:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff8000040a:	0f 32                	rdmsr  
ffffffff8000040c:	83 c8 01             	or     $0x1,%eax
ffffffff8000040f:	0f 30                	wrmsr  
ffffffff80000411:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff80000416:	0f 32                	rdmsr  
ffffffff80000418:	48 89 fa             	mov    %rdi,%rdx
ffffffff8000041b:	0f 30                	wrmsr  
ffffffff8000041d:	b9 82 00 00 c0       	mov    $0xc0000082,%ecx
ffffffff80000422:	0f 32                	rdmsr  
ffffffff80000424:	48 89 f0             	mov    %rsi,%rax
ffffffff80000427:	48 89 f2             	mov    %rsi,%rdx
ffffffff8000042a:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8000042e:	0f 30                	wrmsr  
ffffffff80000430:	c3                   	retq   

ffffffff80000431 <enable_sce>:
ffffffff80000431:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff80000436:	0f 32                	rdmsr  
ffffffff80000438:	83 c8 01             	or     $0x1,%eax
ffffffff8000043b:	0f 30                	wrmsr  
ffffffff8000043d:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff80000442:	0f 32                	rdmsr  
ffffffff80000444:	ba 08 00 18 00       	mov    $0x180008,%edx
ffffffff80000449:	0f 30                	wrmsr  
ffffffff8000044b:	c3                   	retq   

ffffffff8000044c <__syscall_handler>:
ffffffff8000044c:	53                   	push   %rbx
ffffffff8000044d:	54                   	push   %rsp
ffffffff8000044e:	55                   	push   %rbp
ffffffff8000044f:	41 54                	push   %r12
ffffffff80000451:	41 55                	push   %r13
ffffffff80000453:	41 56                	push   %r14
ffffffff80000455:	41 57                	push   %r15
ffffffff80000457:	51                   	push   %rcx
ffffffff80000458:	e8 d3 2a 00 00       	callq  ffffffff80002f30 <syscall_handler>
ffffffff8000045d:	59                   	pop    %rcx
ffffffff8000045e:	41 5f                	pop    %r15
ffffffff80000460:	41 5e                	pop    %r14
ffffffff80000462:	41 5d                	pop    %r13
ffffffff80000464:	41 5c                	pop    %r12
ffffffff80000466:	5d                   	pop    %rbp
ffffffff80000467:	5c                   	pop    %rsp
ffffffff80000468:	5b                   	pop    %rbx
ffffffff80000469:	48 0f 07             	rex.W sysret 

ffffffff8000046c <__syscall_handler.end>:
ffffffff8000046c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000470 <_elf_start>:
void _elf_start()
{
    for(;;)
    {
        asm("hlt");
ffffffff80000470:	f4                   	hlt    
    for(;;)
ffffffff80000471:	eb fd                	jmp    ffffffff80000470 <_elf_start>
ffffffff80000473:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000047a:	00 00 00 
ffffffff8000047d:	0f 1f 00             	nopl   (%rax)

ffffffff80000480 <_limine_start>:



    for(;;)
    {
        asm("hlt");
ffffffff80000480:	f4                   	hlt    
    for(;;)
ffffffff80000481:	eb fd                	jmp    ffffffff80000480 <_limine_start>
ffffffff80000483:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000048a:	00 00 00 
ffffffff8000048d:	0f 1f 00             	nopl   (%rax)

ffffffff80000490 <_start>:
    .tags = (uintptr_t)&framebuffer_hdr_tag
};


static void *stivale2_get_tag(struct stivale2_struct *stivale2_struct, uint64_t id) {
    struct stivale2_tag *current_tag = (void *)stivale2_struct->tags;
ffffffff80000490:	48 8b 8f 80 00 00 00 	mov    0x80(%rdi),%rcx
    for (;;) {
        if (current_tag == NULL) {
ffffffff80000497:	48 85 c9             	test   %rcx,%rcx
ffffffff8000049a:	0f 84 48 01 00 00    	je     ffffffff800005e8 <_start+0x158>
            return NULL;
        }
        if (current_tag->identifier == id) {
ffffffff800004a0:	48 ba fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rdx
ffffffff800004a7:	61 64 50 
    struct stivale2_tag *current_tag = (void *)stivale2_struct->tags;
ffffffff800004aa:	48 89 c8             	mov    %rcx,%rax
ffffffff800004ad:	eb 0e                	jmp    ffffffff800004bd <_start+0x2d>
ffffffff800004af:	90                   	nop
            return current_tag;
        }
        current_tag = (void *)current_tag->next;
ffffffff800004b0:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff800004b4:	48 85 c0             	test   %rax,%rax
ffffffff800004b7:	0f 84 2b 01 00 00    	je     ffffffff800005e8 <_start+0x158>
        if (current_tag->identifier == id) {
ffffffff800004bd:	48 39 10             	cmp    %rdx,(%rax)
ffffffff800004c0:	75 ee                	jne    ffffffff800004b0 <_start+0x20>
    //void* term_write_ptr = (void *)term_str_tag->term_write;
    //term_write = term_write_ptr;
    //printf("Terminal Initialized\n");

    //Grab the Framebuffer
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800004c2:	48 89 05 cf 88 00 00 	mov    %rax,0x88cf(%rip)        # ffffffff80008d98 <boot_info+0x18>
ffffffff800004c9:	48 89 c8             	mov    %rcx,%rax
        if (current_tag->identifier == id) {
ffffffff800004cc:	48 ba 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rdx
ffffffff800004d3:	f7 87 21 
ffffffff800004d6:	eb 15                	jmp    ffffffff800004ed <_start+0x5d>
ffffffff800004d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800004df:	00 
        current_tag = (void *)current_tag->next;
ffffffff800004e0:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff800004e4:	48 85 c0             	test   %rax,%rax
ffffffff800004e7:	0f 84 0e 01 00 00    	je     ffffffff800005fb <_start+0x16b>
        if (current_tag->identifier == id) {
ffffffff800004ed:	48 39 10             	cmp    %rdx,(%rax)
ffffffff800004f0:	75 ee                	jne    ffffffff800004e0 <_start+0x50>
        for( ;; ) 
            asm("hlt");
    }
 
    //Memory Map
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800004f2:	48 89 05 97 88 00 00 	mov    %rax,0x8897(%rip)        # ffffffff80008d90 <boot_info+0x10>
ffffffff800004f9:	48 89 c8             	mov    %rcx,%rax
        if (current_tag->identifier == id) {
ffffffff800004fc:	48 ba f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rdx
ffffffff80000503:	78 0d 06 
ffffffff80000506:	eb 15                	jmp    ffffffff8000051d <_start+0x8d>
ffffffff80000508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000050f:	00 
        current_tag = (void *)current_tag->next;
ffffffff80000510:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff80000514:	48 85 c0             	test   %rax,%rax
ffffffff80000517:	0f 84 ee 00 00 00    	je     ffffffff8000060b <_start+0x17b>
        if (current_tag->identifier == id) {
ffffffff8000051d:	48 39 10             	cmp    %rdx,(%rax)
ffffffff80000520:	75 ee                	jne    ffffffff80000510 <_start+0x80>
        for( ;; ) 
            asm("hlt");
    }
 
    //Kernel Base Address
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff80000522:	48 89 05 57 88 00 00 	mov    %rax,0x8857(%rip)        # ffffffff80008d80 <boot_info>
ffffffff80000529:	48 89 c8             	mov    %rcx,%rax
        if (current_tag->identifier == id) {
ffffffff8000052c:	48 ba 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rdx
ffffffff80000533:	86 17 9e 
ffffffff80000536:	eb 15                	jmp    ffffffff8000054d <_start+0xbd>
ffffffff80000538:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000053f:	00 
        current_tag = (void *)current_tag->next;
ffffffff80000540:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff80000544:	48 85 c0             	test   %rax,%rax
ffffffff80000547:	0f 84 ce 00 00 00    	je     ffffffff8000061b <_start+0x18b>
        if (current_tag->identifier == id) {
ffffffff8000054d:	48 39 10             	cmp    %rdx,(%rax)
ffffffff80000550:	75 ee                	jne    ffffffff80000540 <_start+0xb0>
        for( ;; ) 
            asm("hlt");
    }

    //ACPI RSDP
    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff80000552:	48 89 05 4f 88 00 00 	mov    %rax,0x884f(%rip)        # ffffffff80008da8 <boot_info+0x28>
ffffffff80000559:	48 89 c8             	mov    %rcx,%rax
        if (current_tag->identifier == id) {
ffffffff8000055c:	48 ba 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rdx
ffffffff80000563:	25 ed b0 
ffffffff80000566:	eb 15                	jmp    ffffffff8000057d <_start+0xed>
ffffffff80000568:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000056f:	00 
        current_tag = (void *)current_tag->next;
ffffffff80000570:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff80000574:	48 85 c0             	test   %rax,%rax
ffffffff80000577:	0f 84 ae 00 00 00    	je     ffffffff8000062b <_start+0x19b>
        if (current_tag->identifier == id) {
ffffffff8000057d:	48 39 10             	cmp    %rdx,(%rax)
ffffffff80000580:	75 ee                	jne    ffffffff80000570 <_start+0xe0>
        for( ;; )
            asm("hlt");
    }
    
    //Higher Half Direct Map
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff80000582:	48 89 05 2f 88 00 00 	mov    %rax,0x882f(%rip)        # ffffffff80008db8 <boot_info+0x38>
ffffffff80000589:	48 89 c8             	mov    %rcx,%rax
        if (current_tag->identifier == id) {
ffffffff8000058c:	48 ba bd b6 47 40 a6 	movabs $0x5df266a64047b6bd,%rdx
ffffffff80000593:	66 f2 5d 
ffffffff80000596:	eb 15                	jmp    ffffffff800005ad <_start+0x11d>
ffffffff80000598:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000059f:	00 
        current_tag = (void *)current_tag->next;
ffffffff800005a0:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff800005a4:	48 85 c0             	test   %rax,%rax
ffffffff800005a7:	0f 84 9e 00 00 00    	je     ffffffff8000064b <_start+0x1bb>
        if (current_tag->identifier == id) {
ffffffff800005ad:	48 39 10             	cmp    %rdx,(%rax)
ffffffff800005b0:	75 ee                	jne    ffffffff800005a0 <_start+0x110>
        for( ;; )
            asm("hlt");
    }

    //Protected Memory Ranges
    boot_info.tag_pmrs = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_PMRS_ID);
ffffffff800005b2:	48 89 05 07 88 00 00 	mov    %rax,0x8807(%rip)        # ffffffff80008dc0 <boot_info+0x40>
        if (current_tag->identifier == id) {
ffffffff800005b9:	48 b8 ce 04 de aa 66 	movabs $0x4b6fe466aade04ce,%rax
ffffffff800005c0:	e4 6f 4b 
ffffffff800005c3:	eb 0c                	jmp    ffffffff800005d1 <_start+0x141>
ffffffff800005c5:	0f 1f 00             	nopl   (%rax)
        current_tag = (void *)current_tag->next;
ffffffff800005c8:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800005cc:	48 85 c9             	test   %rcx,%rcx
ffffffff800005cf:	74 6a                	je     ffffffff8000063b <_start+0x1ab>
        if (current_tag->identifier == id) {
ffffffff800005d1:	48 39 01             	cmp    %rax,(%rcx)
ffffffff800005d4:	75 f2                	jne    ffffffff800005c8 <_start+0x138>
{
ffffffff800005d6:	55                   	push   %rbp
    {
        for( ;; )
            asm("hlt");
    }

    kernel();
ffffffff800005d7:	31 c0                	xor    %eax,%eax
    boot_info.tag_modules = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MODULES_ID);
ffffffff800005d9:	48 89 0d c0 87 00 00 	mov    %rcx,0x87c0(%rip)        # ffffffff80008da0 <boot_info+0x20>
{
ffffffff800005e0:	48 89 e5             	mov    %rsp,%rbp
    kernel();
ffffffff800005e3:	e8 58 12 00 00       	callq  ffffffff80001840 <kernel>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800005e8:	45 31 c9             	xor    %r9d,%r9d
ffffffff800005eb:	4c 89 0d a6 87 00 00 	mov    %r9,0x87a6(%rip)        # ffffffff80008d98 <boot_info+0x18>
ffffffff800005f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            asm("hlt");
ffffffff800005f8:	f4                   	hlt    
        for( ;; ) 
ffffffff800005f9:	eb fd                	jmp    ffffffff800005f8 <_start+0x168>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005fb:	31 c0                	xor    %eax,%eax
ffffffff800005fd:	48 89 05 8c 87 00 00 	mov    %rax,0x878c(%rip)        # ffffffff80008d90 <boot_info+0x10>
    if (boot_info.tag_memmap == NULL)
ffffffff80000604:	0f 1f 40 00          	nopl   0x0(%rax)
            asm("hlt");
ffffffff80000608:	f4                   	hlt    
        for( ;; ) 
ffffffff80000609:	eb fd                	jmp    ffffffff80000608 <_start+0x178>
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff8000060b:	31 d2                	xor    %edx,%edx
ffffffff8000060d:	48 89 15 6c 87 00 00 	mov    %rdx,0x876c(%rip)        # ffffffff80008d80 <boot_info>
    if (boot_info.tag_kernel_base_address == NULL)
ffffffff80000614:	0f 1f 40 00          	nopl   0x0(%rax)
            asm("hlt");
ffffffff80000618:	f4                   	hlt    
        for( ;; ) 
ffffffff80000619:	eb fd                	jmp    ffffffff80000618 <_start+0x188>
    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff8000061b:	31 c9                	xor    %ecx,%ecx
ffffffff8000061d:	48 89 0d 84 87 00 00 	mov    %rcx,0x8784(%rip)        # ffffffff80008da8 <boot_info+0x28>
    if (boot_info.tag_rsdp == NULL)
ffffffff80000624:	0f 1f 40 00          	nopl   0x0(%rax)
            asm("hlt");
ffffffff80000628:	f4                   	hlt    
        for( ;; )
ffffffff80000629:	eb fd                	jmp    ffffffff80000628 <_start+0x198>
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff8000062b:	31 f6                	xor    %esi,%esi
ffffffff8000062d:	48 89 35 84 87 00 00 	mov    %rsi,0x8784(%rip)        # ffffffff80008db8 <boot_info+0x38>
    if (boot_info.tag_hhdm == NULL)
ffffffff80000634:	0f 1f 40 00          	nopl   0x0(%rax)
            asm("hlt");
ffffffff80000638:	f4                   	hlt    
        for( ;; )
ffffffff80000639:	eb fd                	jmp    ffffffff80000638 <_start+0x1a8>
    boot_info.tag_modules = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MODULES_ID);
ffffffff8000063b:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000063e:	4c 89 05 5b 87 00 00 	mov    %r8,0x875b(%rip)        # ffffffff80008da0 <boot_info+0x20>
    if (boot_info.tag_modules == NULL)
ffffffff80000645:	0f 1f 00             	nopl   (%rax)
            asm("hlt");
ffffffff80000648:	f4                   	hlt    
        for( ;; )
ffffffff80000649:	eb fd                	jmp    ffffffff80000648 <_start+0x1b8>
    boot_info.tag_pmrs = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_PMRS_ID);
ffffffff8000064b:	31 ff                	xor    %edi,%edi
ffffffff8000064d:	48 89 3d 6c 87 00 00 	mov    %rdi,0x876c(%rip)        # ffffffff80008dc0 <boot_info+0x40>
    if (boot_info.tag_pmrs == NULL)
ffffffff80000654:	0f 1f 40 00          	nopl   0x0(%rax)
            asm("hlt");
ffffffff80000658:	f4                   	hlt    
        for( ;; )
ffffffff80000659:	eb fd                	jmp    ffffffff80000658 <_start+0x1c8>
ffffffff8000065b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000660 <acpi_init>:
    struct RSDP20Descriptor* rsdp;

}ACPI_Info;

void acpi_init()
{
ffffffff80000660:	55                   	push   %rbp
ffffffff80000661:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000664:	48 83 ec 10          	sub    $0x10,%rsp
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80000668:	48 8b 05 39 87 00 00 	mov    0x8739(%rip),%rax        # ffffffff80008da8 <boot_info+0x28>
ffffffff8000066f:	48 8b 50 10          	mov    0x10(%rax),%rdx
    
    uint8_t test[8] = {'R', 'S', 'P', ' ', 'P', 'T', 'R', ' '};
ffffffff80000673:	48 b8 52 53 50 20 50 	movabs $0x2052545020505352,%rax
ffffffff8000067a:	54 52 20 
ffffffff8000067d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80000681:	31 c0                	xor    %eax,%eax
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80000683:	48 89 15 56 97 00 00 	mov    %rdx,0x9756(%rip)        # ffffffff80009de0 <ACPI_Info>
    for(uint32_t i = 0; i < 8; i++)
    {
        if(test[i] == ACPI_Info.rsdp->header.signature[i]) 
ffffffff8000068a:	0f b6 0c 02          	movzbl (%rdx,%rax,1),%ecx
ffffffff8000068e:	38 4c 05 f8          	cmp    %cl,-0x8(%rbp,%rax,1)
ffffffff80000692:	74 0c                	je     ffffffff800006a0 <acpi_init+0x40>
            return;
    }

    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
    
ffffffff80000694:	c9                   	leaveq 
ffffffff80000695:	c3                   	retq   
ffffffff80000696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000069d:	00 00 00 
    for(uint32_t i = 0; i < 8; i++)
ffffffff800006a0:	48 83 c0 01          	add    $0x1,%rax
ffffffff800006a4:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff800006a8:	75 e0                	jne    ffffffff8000068a <acpi_init+0x2a>
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff800006aa:	0f b6 72 0f          	movzbl 0xf(%rdx),%esi
ffffffff800006ae:	48 c7 c7 a0 52 00 80 	mov    $0xffffffff800052a0,%rdi
ffffffff800006b5:	31 c0                	xor    %eax,%eax
ffffffff800006b7:	c9                   	leaveq 
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff800006b8:	e9 73 39 00 00       	jmpq   ffffffff80004030 <printf_>
ffffffff800006bd:	0f 1f 00             	nopl   (%rax)

ffffffff800006c0 <console_input>:
    //write the output buffer to screen
}

void console_input(KEY_INFO_t key)
{
    con_input_buffer.index++;
ffffffff800006c0:	48 8b 05 79 97 00 00 	mov    0x9779(%rip),%rax        # ffffffff80009e40 <con_input_buffer+0x10>
ffffffff800006c7:	66 c1 ef 08          	shr    $0x8,%di
ffffffff800006cb:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800006cf:	48 89 15 6a 97 00 00 	mov    %rdx,0x976a(%rip)        # ffffffff80009e40 <con_input_buffer+0x10>
    con_input_buffer.buffer[con_input_buffer.index] = key.ascii;
ffffffff800006d6:	48 8b 15 53 97 00 00 	mov    0x9753(%rip),%rdx        # ffffffff80009e30 <con_input_buffer>
ffffffff800006dd:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
    

    con_output_buffer.buffer[con_output_buffer.index] = key.ascii;
ffffffff800006e2:	48 8b 05 87 98 00 00 	mov    0x9887(%rip),%rax        # ffffffff80009f70 <con_output_buffer+0x10>
ffffffff800006e9:	48 8b 15 70 98 00 00 	mov    0x9870(%rip),%rdx        # ffffffff80009f60 <con_output_buffer>
ffffffff800006f0:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
    con_output_buffer.index++;
ffffffff800006f4:	48 8b 05 75 98 00 00 	mov    0x9875(%rip),%rax        # ffffffff80009f70 <con_output_buffer+0x10>
ffffffff800006fb:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800006ff:	48 89 15 6a 98 00 00 	mov    %rdx,0x986a(%rip)        # ffffffff80009f70 <con_output_buffer+0x10>
    con_output_buffer.buffer[con_output_buffer.index] = 0x00;
ffffffff80000706:	48 8b 15 53 98 00 00 	mov    0x9853(%rip),%rdx        # ffffffff80009f60 <con_output_buffer>
ffffffff8000070d:	c6 44 02 01 00       	movb   $0x0,0x1(%rdx,%rax,1)
    return;
ffffffff80000712:	c3                   	retq   
ffffffff80000713:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000071a:	00 00 00 00 
ffffffff8000071e:	66 90                	xchg   %ax,%ax

ffffffff80000720 <putchar>:
    switch(c)
ffffffff80000720:	40 80 ff 0a          	cmp    $0xa,%dil
ffffffff80000724:	0f 84 36 01 00 00    	je     ffffffff80000860 <putchar+0x140>
ffffffff8000072a:	40 80 ff 0d          	cmp    $0xd,%dil
ffffffff8000072e:	0f 84 fc 00 00 00    	je     ffffffff80000830 <putchar+0x110>
ffffffff80000734:	40 80 ff 09          	cmp    $0x9,%dil
ffffffff80000738:	0f 84 cd 00 00 00    	je     ffffffff8000080b <putchar+0xeb>
{
ffffffff8000073e:	55                   	push   %rbp
ffffffff8000073f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000742:	41 57                	push   %r15
ffffffff80000744:	41 56                	push   %r14
ffffffff80000746:	41 55                	push   %r13
    switch(c)
ffffffff80000748:	44 0f b6 ef          	movzbl %dil,%r13d
{
ffffffff8000074c:	41 54                	push   %r12
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff8000074e:	41 c1 e5 04          	shl    $0x4,%r13d
{
ffffffff80000752:	53                   	push   %rbx
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80000753:	41 83 c5 04          	add    $0x4,%r13d
ffffffff80000757:	4d 63 ed             	movslq %r13d,%r13
ffffffff8000075a:	49 8d 8d 58 78 00 80 	lea    -0x7fff87a8(%r13),%rcx
{
ffffffff80000761:	48 83 ec 28          	sub    $0x28,%rsp
    console_drawchar(c, console_info.cursor_x, console_info.cursor_y, console_info.foreground_color, console_info.background_color);
ffffffff80000765:	8b 05 9d 96 00 00    	mov    0x969d(%rip),%eax        # ffffffff80009e08 <console_info+0x8>
ffffffff8000076b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8000076f:	0f b7 1d 9c 96 00 00 	movzwl 0x969c(%rip),%ebx        # ffffffff80009e12 <console_info+0x12>
ffffffff80000776:	44 8b 35 8f 96 00 00 	mov    0x968f(%rip),%r14d        # ffffffff80009e0c <console_info+0xc>
ffffffff8000077d:	89 45 cc             	mov    %eax,-0x34(%rbp)
ffffffff80000780:	0f b7 05 89 96 00 00 	movzwl 0x9689(%rip),%eax        # ffffffff80009e10 <console_info+0x10>
ffffffff80000787:	8d 4b 10             	lea    0x10(%rbx),%ecx
ffffffff8000078a:	89 45 c8             	mov    %eax,-0x38(%rbp)
    for (uint32_t i = 0; i < 16; i++)
ffffffff8000078d:	44 8d 60 08          	lea    0x8(%rax),%r12d
ffffffff80000791:	89 4d bc             	mov    %ecx,-0x44(%rbp)
ffffffff80000794:	0f 1f 40 00          	nopl   0x0(%rax)
        row = glyph[i];
ffffffff80000798:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000079c:	44 8b 7d c8          	mov    -0x38(%rbp),%r15d
ffffffff800007a0:	44 0f b6 28          	movzbl (%rax),%r13d
        for (uint32_t j = 0; j < 8; j++)
ffffffff800007a4:	eb 23                	jmp    ffffffff800007c9 <putchar+0xa9>
ffffffff800007a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800007ad:	00 00 00 
                fb_putpixel(x+j, y+i, background);
ffffffff800007b0:	44 89 ff             	mov    %r15d,%edi
ffffffff800007b3:	44 89 f2             	mov    %r14d,%edx
ffffffff800007b6:	89 de                	mov    %ebx,%esi
        for (uint32_t j = 0; j < 8; j++)
ffffffff800007b8:	41 83 c7 01          	add    $0x1,%r15d
                fb_putpixel(x+j, y+i, background);
ffffffff800007bc:	e8 2f 04 00 00       	callq  ffffffff80000bf0 <fb_putpixel>
            row = row << 1;
ffffffff800007c1:	45 01 ed             	add    %r13d,%r13d
        for (uint32_t j = 0; j < 8; j++)
ffffffff800007c4:	45 39 fc             	cmp    %r15d,%r12d
ffffffff800007c7:	74 1e                	je     ffffffff800007e7 <putchar+0xc7>
            if(row & 0x80)
ffffffff800007c9:	45 84 ed             	test   %r13b,%r13b
ffffffff800007cc:	79 e2                	jns    ffffffff800007b0 <putchar+0x90>
                fb_putpixel(x+j, y+i, foreground);
ffffffff800007ce:	8b 55 cc             	mov    -0x34(%rbp),%edx
ffffffff800007d1:	44 89 ff             	mov    %r15d,%edi
ffffffff800007d4:	89 de                	mov    %ebx,%esi
        for (uint32_t j = 0; j < 8; j++)
ffffffff800007d6:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff800007da:	45 01 ed             	add    %r13d,%r13d
                fb_putpixel(x+j, y+i, foreground);
ffffffff800007dd:	e8 0e 04 00 00       	callq  ffffffff80000bf0 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff800007e2:	45 39 fc             	cmp    %r15d,%r12d
ffffffff800007e5:	75 e2                	jne    ffffffff800007c9 <putchar+0xa9>
    for (uint32_t i = 0; i < 16; i++)
ffffffff800007e7:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
ffffffff800007ec:	83 c3 01             	add    $0x1,%ebx
ffffffff800007ef:	39 5d bc             	cmp    %ebx,-0x44(%rbp)
ffffffff800007f2:	75 a4                	jne    ffffffff80000798 <putchar+0x78>
    console_info.cursor_x += 8;
ffffffff800007f4:	66 83 05 14 96 00 00 	addw   $0x8,0x9614(%rip)        # ffffffff80009e10 <console_info+0x10>
ffffffff800007fb:	08 
}
ffffffff800007fc:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80000800:	5b                   	pop    %rbx
ffffffff80000801:	41 5c                	pop    %r12
ffffffff80000803:	41 5d                	pop    %r13
ffffffff80000805:	41 5e                	pop    %r14
ffffffff80000807:	41 5f                	pop    %r15
ffffffff80000809:	5d                   	pop    %rbp
ffffffff8000080a:	c3                   	retq   
            if((console_info.cursor_x += (PSF1_FONT_WIDTH * 4)) < fb_info.width)
ffffffff8000080b:	0f b7 05 fe 95 00 00 	movzwl 0x95fe(%rip),%eax        # ffffffff80009e10 <console_info+0x10>
ffffffff80000812:	0f b7 15 71 a7 00 00 	movzwl 0xa771(%rip),%edx        # ffffffff8000af8a <fb_info+0xa>
ffffffff80000819:	8d 48 20             	lea    0x20(%rax),%ecx
ffffffff8000081c:	66 39 d1             	cmp    %dx,%cx
ffffffff8000081f:	0f 83 46 01 00 00    	jae    ffffffff8000096b <putchar+0x24b>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80000825:	83 c0 40             	add    $0x40,%eax
ffffffff80000828:	66 89 05 e1 95 00 00 	mov    %ax,0x95e1(%rip)        # ffffffff80009e10 <console_info+0x10>
                return;
ffffffff8000082f:	c3                   	retq   
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80000830:	0f b7 05 db 95 00 00 	movzwl 0x95db(%rip),%eax        # ffffffff80009e12 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80000837:	0f b7 15 4a a7 00 00 	movzwl 0xa74a(%rip),%edx        # ffffffff8000af88 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff8000083e:	31 f6                	xor    %esi,%esi
ffffffff80000840:	66 89 35 c9 95 00 00 	mov    %si,0x95c9(%rip)        # ffffffff80009e10 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80000847:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff8000084a:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff8000084d:	66 89 05 be 95 00 00 	mov    %ax,0x95be(%rip)        # ffffffff80009e12 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80000854:	0f b7 c0             	movzwl %ax,%eax
ffffffff80000857:	39 c1                	cmp    %eax,%ecx
ffffffff80000859:	0f 8e 9c 00 00 00    	jle    ffffffff800008fb <putchar+0x1db>
ffffffff8000085f:	c3                   	retq   
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80000860:	0f b7 05 ab 95 00 00 	movzwl 0x95ab(%rip),%eax        # ffffffff80009e12 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80000867:	0f b7 15 1a a7 00 00 	movzwl 0xa71a(%rip),%edx        # ffffffff8000af88 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff8000086e:	31 ff                	xor    %edi,%edi
ffffffff80000870:	66 89 3d 99 95 00 00 	mov    %di,0x9599(%rip)        # ffffffff80009e10 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80000877:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff8000087a:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff8000087d:	66 89 05 8e 95 00 00 	mov    %ax,0x958e(%rip)        # ffffffff80009e12 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80000884:	0f b7 c0             	movzwl %ax,%eax
ffffffff80000887:	39 c1                	cmp    %eax,%ecx
ffffffff80000889:	7f d4                	jg     ffffffff8000085f <putchar+0x13f>
    start_index = fb_info.width * 16 * 4;
ffffffff8000088b:	0f b7 05 f8 a6 00 00 	movzwl 0xa6f8(%rip),%eax        # ffffffff8000af8a <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80000892:	4c 8b 0d e7 a6 00 00 	mov    0xa6e7(%rip),%r9        # ffffffff8000af80 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80000899:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff8000089c:	89 c1                	mov    %eax,%ecx
ffffffff8000089e:	c1 e1 06             	shl    $0x6,%ecx
ffffffff800008a1:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff800008a4:	4c 63 d2             	movslq %edx,%r10
    end_index = fb_info.height * fb_info.width - 1;
ffffffff800008a7:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800008aa:	4d 89 d0             	mov    %r10,%r8
    end_index = fb_info.height * fb_info.width - 1;
ffffffff800008ad:	48 63 f2             	movslq %edx,%rsi
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800008b0:	49 29 c8             	sub    %rcx,%r8
ffffffff800008b3:	74 1a                	je     ffffffff800008cf <putchar+0x1af>
ffffffff800008b5:	4b 8d 3c 81          	lea    (%r9,%r8,4),%rdi
ffffffff800008b9:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff800008bd:	4c 89 c8             	mov    %r9,%rax
        base[i] = base[start_index + i];
ffffffff800008c0:	8b 14 08             	mov    (%rax,%rcx,1),%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800008c3:	48 83 c0 04          	add    $0x4,%rax
        base[i] = base[start_index + i];
ffffffff800008c7:	89 50 fc             	mov    %edx,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800008ca:	48 39 f8             	cmp    %rdi,%rax
ffffffff800008cd:	75 f1                	jne    ffffffff800008c0 <putchar+0x1a0>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff800008cf:	49 8d 40 01          	lea    0x1(%r8),%rax
ffffffff800008d3:	48 39 f0             	cmp    %rsi,%rax
ffffffff800008d6:	0f 83 2e 01 00 00    	jae    ffffffff80000a0a <putchar+0x2ea>
ffffffff800008dc:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
ffffffff800008e0:	4b 8d 4c 91 fc       	lea    -0x4(%r9,%r10,4),%rcx
ffffffff800008e5:	0f 1f 00             	nopl   (%rax)
        base[i] = console_info.background_color;
ffffffff800008e8:	8b 15 1e 95 00 00    	mov    0x951e(%rip),%edx        # ffffffff80009e0c <console_info+0xc>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff800008ee:	48 83 c0 04          	add    $0x4,%rax
        base[i] = console_info.background_color;
ffffffff800008f2:	89 50 fc             	mov    %edx,-0x4(%rax)
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff800008f5:	48 39 c8             	cmp    %rcx,%rax
ffffffff800008f8:	75 ee                	jne    ffffffff800008e8 <putchar+0x1c8>
ffffffff800008fa:	c3                   	retq   
    start_index = fb_info.width * 16 * 4;
ffffffff800008fb:	0f b7 05 88 a6 00 00 	movzwl 0xa688(%rip),%eax        # ffffffff8000af8a <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80000902:	4c 8b 0d 77 a6 00 00 	mov    0xa677(%rip),%r9        # ffffffff8000af80 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80000909:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff8000090c:	89 c1                	mov    %eax,%ecx
ffffffff8000090e:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80000911:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80000914:	4c 63 d2             	movslq %edx,%r10
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80000917:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff8000091a:	4d 89 d0             	mov    %r10,%r8
    end_index = fb_info.height * fb_info.width - 1;
ffffffff8000091d:	48 63 f2             	movslq %edx,%rsi
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80000920:	49 29 c8             	sub    %rcx,%r8
ffffffff80000923:	74 1a                	je     ffffffff8000093f <putchar+0x21f>
ffffffff80000925:	4b 8d 3c 81          	lea    (%r9,%r8,4),%rdi
ffffffff80000929:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff8000092d:	4c 89 c8             	mov    %r9,%rax
        base[i] = base[start_index + i];
ffffffff80000930:	8b 14 08             	mov    (%rax,%rcx,1),%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80000933:	48 83 c0 04          	add    $0x4,%rax
        base[i] = base[start_index + i];
ffffffff80000937:	89 50 fc             	mov    %edx,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff8000093a:	48 39 f8             	cmp    %rdi,%rax
ffffffff8000093d:	75 f1                	jne    ffffffff80000930 <putchar+0x210>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff8000093f:	49 8d 40 01          	lea    0x1(%r8),%rax
ffffffff80000943:	48 39 f0             	cmp    %rsi,%rax
ffffffff80000946:	0f 83 bd 00 00 00    	jae    ffffffff80000a09 <putchar+0x2e9>
ffffffff8000094c:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
ffffffff80000950:	4b 8d 4c 91 fc       	lea    -0x4(%r9,%r10,4),%rcx
ffffffff80000955:	0f 1f 00             	nopl   (%rax)
        base[i] = console_info.background_color;
ffffffff80000958:	8b 15 ae 94 00 00    	mov    0x94ae(%rip),%edx        # ffffffff80009e0c <console_info+0xc>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff8000095e:	48 83 c0 04          	add    $0x4,%rax
        base[i] = console_info.background_color;
ffffffff80000962:	89 50 fc             	mov    %edx,-0x4(%rax)
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80000965:	48 39 c8             	cmp    %rcx,%rax
ffffffff80000968:	75 ee                	jne    ffffffff80000958 <putchar+0x238>
ffffffff8000096a:	c3                   	retq   
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff8000096b:	0f b7 05 a0 94 00 00 	movzwl 0x94a0(%rip),%eax        # ffffffff80009e12 <console_info+0x12>
    console_info.cursor_x = 0;
ffffffff80000972:	31 c9                	xor    %ecx,%ecx
ffffffff80000974:	66 89 0d 95 94 00 00 	mov    %cx,0x9495(%rip)        # ffffffff80009e10 <console_info+0x10>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff8000097b:	0f b7 0d 06 a6 00 00 	movzwl 0xa606(%rip),%ecx        # ffffffff8000af88 <fb_info+0x8>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80000982:	83 c0 10             	add    $0x10,%eax
ffffffff80000985:	66 89 05 86 94 00 00 	mov    %ax,0x9486(%rip)        # ffffffff80009e12 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff8000098c:	8d 71 f1             	lea    -0xf(%rcx),%esi
ffffffff8000098f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80000992:	39 c6                	cmp    %eax,%esi
ffffffff80000994:	7e 0d                	jle    ffffffff800009a3 <putchar+0x283>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80000996:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff8000099b:	66 89 05 6e 94 00 00 	mov    %ax,0x946e(%rip)        # ffffffff80009e10 <console_info+0x10>
                return;
ffffffff800009a2:	c3                   	retq   
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff800009a3:	0f af ca             	imul   %edx,%ecx
    start_index = fb_info.width * 16 * 4;
ffffffff800009a6:	89 d0                	mov    %edx,%eax
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff800009a8:	4c 8b 05 d1 a5 00 00 	mov    0xa5d1(%rip),%r8        # ffffffff8000af80 <fb_info>
    start_index = fb_info.width * 16 * 4;
ffffffff800009af:	c1 e0 06             	shl    $0x6,%eax
ffffffff800009b2:	48 98                	cltq   
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff800009b4:	4c 63 d1             	movslq %ecx,%r10
    end_index = fb_info.height * fb_info.width - 1;
ffffffff800009b7:	83 e9 01             	sub    $0x1,%ecx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800009ba:	4d 89 d1             	mov    %r10,%r9
    end_index = fb_info.height * fb_info.width - 1;
ffffffff800009bd:	48 63 c9             	movslq %ecx,%rcx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800009c0:	49 29 c1             	sub    %rax,%r9
ffffffff800009c3:	74 1e                	je     ffffffff800009e3 <putchar+0x2c3>
ffffffff800009c5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff800009cc:	00 
ffffffff800009cd:	4b 8d 3c 88          	lea    (%r8,%r9,4),%rdi
ffffffff800009d1:	4c 89 c0             	mov    %r8,%rax
        base[i] = base[start_index + i];
ffffffff800009d4:	8b 34 02             	mov    (%rdx,%rax,1),%esi
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800009d7:	48 83 c0 04          	add    $0x4,%rax
        base[i] = base[start_index + i];
ffffffff800009db:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff800009de:	48 39 f8             	cmp    %rdi,%rax
ffffffff800009e1:	75 f1                	jne    ffffffff800009d4 <putchar+0x2b4>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff800009e3:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff800009e7:	48 39 c8             	cmp    %rcx,%rax
ffffffff800009ea:	73 aa                	jae    ffffffff80000996 <putchar+0x276>
ffffffff800009ec:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff800009f0:	4b 8d 4c 90 fc       	lea    -0x4(%r8,%r10,4),%rcx
        base[i] = console_info.background_color;
ffffffff800009f5:	8b 15 11 94 00 00    	mov    0x9411(%rip),%edx        # ffffffff80009e0c <console_info+0xc>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff800009fb:	48 83 c0 04          	add    $0x4,%rax
        base[i] = console_info.background_color;
ffffffff800009ff:	89 50 fc             	mov    %edx,-0x4(%rax)
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80000a02:	48 39 c1             	cmp    %rax,%rcx
ffffffff80000a05:	75 ee                	jne    ffffffff800009f5 <putchar+0x2d5>
ffffffff80000a07:	eb 8d                	jmp    ffffffff80000996 <putchar+0x276>
ffffffff80000a09:	c3                   	retq   
ffffffff80000a0a:	c3                   	retq   
ffffffff80000a0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000a10 <putstring>:
{
ffffffff80000a10:	55                   	push   %rbp
ffffffff80000a11:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000a14:	53                   	push   %rbx
ffffffff80000a15:	48 89 fb             	mov    %rdi,%rbx
ffffffff80000a18:	48 83 ec 08          	sub    $0x8,%rsp
    while(*str)
ffffffff80000a1c:	0f b6 3f             	movzbl (%rdi),%edi
ffffffff80000a1f:	40 84 ff             	test   %dil,%dil
ffffffff80000a22:	74 16                	je     ffffffff80000a3a <putstring+0x2a>
ffffffff80000a24:	0f 1f 40 00          	nopl   0x0(%rax)
        putchar(*str);
ffffffff80000a28:	e8 f3 fc ff ff       	callq  ffffffff80000720 <putchar>
    while(*str)
ffffffff80000a2d:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
        str++;
ffffffff80000a31:	48 83 c3 01          	add    $0x1,%rbx
    while(*str)
ffffffff80000a35:	40 84 ff             	test   %dil,%dil
ffffffff80000a38:	75 ee                	jne    ffffffff80000a28 <putstring+0x18>
}
ffffffff80000a3a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80000a3e:	c9                   	leaveq 
ffffffff80000a3f:	c3                   	retq   

ffffffff80000a40 <console_init>:
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80000a40:	0f b7 05 41 a5 00 00 	movzwl 0xa541(%rip),%eax        # ffffffff8000af88 <fb_info+0x8>
    uint64_t index = y * fb_info.width;
ffffffff80000a47:	0f b7 3d 3c a5 00 00 	movzwl 0xa53c(%rip),%edi        # ffffffff8000af8a <fb_info+0xa>
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff80000a4e:	48 be ff ff ff ff 00 	movabs $0xff000000ffffffff,%rsi
ffffffff80000a55:	00 00 ff 
    console_info.font = (struct PSF1_FONT*)&_binary_zapl16_psf_start;
ffffffff80000a58:	48 c7 05 b5 93 00 00 	movq   $0xffffffff80007858,0x93b5(%rip)        # ffffffff80009e18 <console_info+0x18>
ffffffff80000a5f:	58 78 00 80 
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff80000a63:	48 89 35 9e 93 00 00 	mov    %rsi,0x939e(%rip)        # ffffffff80009e08 <console_info+0x8>
    console_info.cursor_x = 0;
ffffffff80000a6a:	c7 05 9c 93 00 00 00 	movl   $0x0,0x939c(%rip)        # ffffffff80009e10 <console_info+0x10>
ffffffff80000a71:	00 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80000a74:	89 c2                	mov    %eax,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80000a76:	66 c1 e8 02          	shr    $0x2,%ax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80000a7a:	66 c1 ea 04          	shr    $0x4,%dx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80000a7e:	0f b7 c0             	movzwl %ax,%eax
    con_output_buffer.buffer = console_buffer;
ffffffff80000a81:	48 c7 05 d4 94 00 00 	movq   $0xffffffff80009f80,0x94d4(%rip)        # ffffffff80009f60 <con_output_buffer>
ffffffff80000a88:	80 9f 00 80 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80000a8c:	0f b7 d2             	movzwl %dx,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80000a8f:	8d 04 40             	lea    (%rax,%rax,2),%eax
    con_output_buffer.buffer_size = sizeof(console_buffer);
ffffffff80000a92:	48 c7 05 cb 94 00 00 	movq   $0x1000,0x94cb(%rip)        # ffffffff80009f68 <con_output_buffer+0x8>
ffffffff80000a99:	00 10 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80000a9d:	89 15 61 93 00 00    	mov    %edx,0x9361(%rip)        # ffffffff80009e04 <console_info+0x4>
    console_draw_hline(console_info.start_pos, FB_COLOR_YELLOW);
ffffffff80000aa3:	48 63 d0             	movslq %eax,%rdx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80000aa6:	89 05 54 93 00 00    	mov    %eax,0x9354(%rip)        # ffffffff80009e00 <console_info>
    uint64_t index = y * fb_info.width;
ffffffff80000aac:	48 0f af d7          	imul   %rdi,%rdx
    con_output_buffer.index = 0;
ffffffff80000ab0:	48 c7 05 b5 94 00 00 	movq   $0x0,0x94b5(%rip)        # ffffffff80009f70 <con_output_buffer+0x10>
ffffffff80000ab7:	00 00 00 00 
    con_input_buffer.buffer = cmd_buffer;
ffffffff80000abb:	48 c7 05 6a 93 00 00 	movq   $0xffffffff80009e60,0x936a(%rip)        # ffffffff80009e30 <con_input_buffer>
ffffffff80000ac2:	60 9e 00 80 
    con_input_buffer.buffer_size = sizeof(cmd_buffer);
ffffffff80000ac6:	48 c7 05 67 93 00 00 	movq   $0x100,0x9367(%rip)        # ffffffff80009e38 <con_input_buffer+0x8>
ffffffff80000acd:	00 01 00 00 
    for(int i = 0; i < fb_info.width; i++)
ffffffff80000ad1:	66 85 ff             	test   %di,%di
ffffffff80000ad4:	74 59                	je     ffffffff80000b2f <console_init+0xef>
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80000ad6:	48 8b 35 a3 a4 00 00 	mov    0xa4a3(%rip),%rsi        # ffffffff8000af80 <fb_info>
ffffffff80000add:	44 8d 47 ff          	lea    -0x1(%rdi),%r8d
ffffffff80000ae1:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80000ae5:	48 8d 4e 04          	lea    0x4(%rsi),%rcx
ffffffff80000ae9:	4c 01 c2             	add    %r8,%rdx
ffffffff80000aec:	48 8d 14 91          	lea    (%rcx,%rdx,4),%rdx
ffffffff80000af0:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
    for(int i = 0; i < fb_info.width; i++)
ffffffff80000af6:	48 83 c0 04          	add    $0x4,%rax
ffffffff80000afa:	48 39 d0             	cmp    %rdx,%rax
ffffffff80000afd:	75 f1                	jne    ffffffff80000af0 <console_init+0xb0>
    console_draw_hline(console_info.start_pos + 1, FB_COLOR_YELLOW);
ffffffff80000aff:	8b 05 fb 92 00 00    	mov    0x92fb(%rip),%eax        # ffffffff80009e00 <console_info>
ffffffff80000b05:	8d 50 01             	lea    0x1(%rax),%edx
    uint64_t index = y * fb_info.width;
ffffffff80000b08:	48 0f af d7          	imul   %rdi,%rdx
    for(int i = 0; i < fb_info.width; i++)
ffffffff80000b0c:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80000b10:	4c 01 c2             	add    %r8,%rdx
ffffffff80000b13:	48 8d 14 91          	lea    (%rcx,%rdx,4),%rdx
ffffffff80000b17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80000b1e:	00 00 
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80000b20:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
    for(int i = 0; i < fb_info.width; i++)
ffffffff80000b26:	48 83 c0 04          	add    $0x4,%rax
ffffffff80000b2a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80000b2d:	75 f1                	jne    ffffffff80000b20 <console_init+0xe0>
    kbd_set_target(console_input);
ffffffff80000b2f:	48 c7 c7 c0 06 00 80 	mov    $0xffffffff800006c0,%rdi
ffffffff80000b36:	e9 55 01 00 00       	jmpq   ffffffff80000c90 <kbd_set_target>
ffffffff80000b3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000b40 <console_exec>:
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80000b40:	0f b7 05 43 a4 00 00 	movzwl 0xa443(%rip),%eax        # ffffffff8000af8a <fb_info+0xa>
ffffffff80000b47:	8b 15 b3 92 00 00    	mov    0x92b3(%rip),%edx        # ffffffff80009e00 <console_info>
ffffffff80000b4d:	8d 0c 42             	lea    (%rdx,%rax,2),%ecx
ffffffff80000b50:	0f b7 15 31 a4 00 00 	movzwl 0xa431(%rip),%edx        # ffffffff8000af88 <fb_info+0x8>
ffffffff80000b57:	0f af d0             	imul   %eax,%edx
ffffffff80000b5a:	39 d1                	cmp    %edx,%ecx
ffffffff80000b5c:	7d 2c                	jge    ffffffff80000b8a <console_exec+0x4a>
ffffffff80000b5e:	48 63 f9             	movslq %ecx,%rdi
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff80000b61:	48 8b 35 18 a4 00 00 	mov    0xa418(%rip),%rsi        # ffffffff8000af80 <fb_info>
ffffffff80000b68:	29 ca                	sub    %ecx,%edx
ffffffff80000b6a:	48 01 fa             	add    %rdi,%rdx
ffffffff80000b6d:	48 8d 04 be          	lea    (%rsi,%rdi,4),%rax
ffffffff80000b71:	48 8d 0c 96          	lea    (%rsi,%rdx,4),%rcx
ffffffff80000b75:	0f 1f 00             	nopl   (%rax)
ffffffff80000b78:	8b 15 8e 92 00 00    	mov    0x928e(%rip),%edx        # ffffffff80009e0c <console_info+0xc>
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80000b7e:	48 83 c0 04          	add    $0x4,%rax
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff80000b82:	89 50 fc             	mov    %edx,-0x4(%rax)
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80000b85:	48 39 c8             	cmp    %rcx,%rax
ffffffff80000b88:	75 ee                	jne    ffffffff80000b78 <console_exec+0x38>
}
ffffffff80000b8a:	c3                   	retq   
ffffffff80000b8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000b90 <cpu_init>:
#include "cpu.h"

void cpu_init()
{
ffffffff80000b90:	55                   	push   %rbp
    uint64_t a,b,c,d;
    __cpuid(0,a,b,c,d);
ffffffff80000b91:	31 c0                	xor    %eax,%eax
{
ffffffff80000b93:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000b96:	53                   	push   %rbx
    __cpuid(0,a,b,c,d);
ffffffff80000b97:	0f a2                	cpuid  
ffffffff80000b99:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80000b9d:	c9                   	leaveq 
ffffffff80000b9e:	c3                   	retq   
ffffffff80000b9f:	90                   	nop

ffffffff80000ba0 <fb_init>:

struct fb_info fb_info;

void fb_init()
{
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80000ba0:	48 8b 0d f1 81 00 00 	mov    0x81f1(%rip),%rcx        # ffffffff80008d98 <boot_info+0x18>
ffffffff80000ba7:	48 8b 41 10          	mov    0x10(%rcx),%rax
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80000bab:	44 0f b7 41 18       	movzwl 0x18(%rcx),%r8d
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80000bb0:	0f b7 79 1c          	movzwl 0x1c(%rcx),%edi
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80000bb4:	48 89 05 c5 a3 00 00 	mov    %rax,0xa3c5(%rip)        # ffffffff8000af80 <fb_info>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80000bbb:	0f b7 41 1a          	movzwl 0x1a(%rcx),%eax
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80000bbf:	4c 89 c6             	mov    %r8,%rsi
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80000bc2:	49 c1 e0 10          	shl    $0x10,%r8
ffffffff80000bc6:	0f b7 49 1e          	movzwl 0x1e(%rcx),%ecx
ffffffff80000bca:	48 c1 e7 20          	shl    $0x20,%rdi
ffffffff80000bce:	48 89 c2             	mov    %rax,%rdx
ffffffff80000bd1:	4c 09 c0             	or     %r8,%rax
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80000bd4:	0f af d6             	imul   %esi,%edx
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80000bd7:	48 c1 e1 30          	shl    $0x30,%rcx
ffffffff80000bdb:	48 09 f8             	or     %rdi,%rax
ffffffff80000bde:	48 09 c8             	or     %rcx,%rax
ffffffff80000be1:	48 89 05 a0 a3 00 00 	mov    %rax,0xa3a0(%rip)        # ffffffff8000af88 <fb_info+0x8>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80000be8:	89 15 a2 a3 00 00    	mov    %edx,0xa3a2(%rip)        # ffffffff8000af90 <fb_info+0x10>
    //printf("FB Base: %p", fb_info.base);
    //printf("FB Height: %d  FB Width: %d\n", fb_info.height, fb_info.width);
    //printf("FB BPP: %d   FB Pitch: %d\n", fb_info.bpp, fb_info.pitch);

    //fb_putpixel(100,100,FB_COLOR_WHITE);
}
ffffffff80000bee:	c3                   	retq   
ffffffff80000bef:	90                   	nop

ffffffff80000bf0 <fb_putpixel>:

void fb_putpixel(uint32_t x, uint32_t y, enum fb_color col)
{
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80000bf0:	0f b7 0d 97 a3 00 00 	movzwl 0xa397(%rip),%ecx        # ffffffff8000af8e <fb_info+0xe>
ffffffff80000bf7:	0f b7 05 8e a3 00 00 	movzwl 0xa38e(%rip),%eax        # ffffffff8000af8c <fb_info+0xc>
{
ffffffff80000bfe:	41 89 f0             	mov    %esi,%r8d
ffffffff80000c01:	89 d6                	mov    %edx,%esi
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80000c03:	31 d2                	xor    %edx,%edx
ffffffff80000c05:	66 c1 e9 03          	shr    $0x3,%cx
ffffffff80000c09:	66 f7 f1             	div    %cx
ffffffff80000c0c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80000c0f:	41 0f af c0          	imul   %r8d,%eax
ffffffff80000c13:	8d 14 38             	lea    (%rax,%rdi,1),%edx
    //if(index > fb_info.max_pixels) return;
    *((uint32_t*)fb_info.base + index) = col;
ffffffff80000c16:	48 8b 05 63 a3 00 00 	mov    0xa363(%rip),%rax        # ffffffff8000af80 <fb_info>
ffffffff80000c1d:	89 34 90             	mov    %esi,(%rax,%rdx,4)
}
ffffffff80000c20:	c3                   	retq   
ffffffff80000c21:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000c28:	00 00 00 00 
ffffffff80000c2c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000c30 <fb_clearscreen>:

void fb_clearscreen(enum fb_color col)
{
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80000c30:	0f b7 05 51 a3 00 00 	movzwl 0xa351(%rip),%eax        # ffffffff8000af88 <fb_info+0x8>
ffffffff80000c37:	0f b7 15 4c a3 00 00 	movzwl 0xa34c(%rip),%edx        # ffffffff8000af8a <fb_info+0xa>
ffffffff80000c3e:	0f af c2             	imul   %edx,%eax
ffffffff80000c41:	48 63 c8             	movslq %eax,%rcx
ffffffff80000c44:	85 c0                	test   %eax,%eax
ffffffff80000c46:	74 1f                	je     ffffffff80000c67 <fb_clearscreen+0x37>
    {
        *((uint32_t*)fb_info.base + i) = col;
ffffffff80000c48:	48 8b 15 31 a3 00 00 	mov    0xa331(%rip),%rdx        # ffffffff8000af80 <fb_info>
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80000c4f:	31 c0                	xor    %eax,%eax
ffffffff80000c51:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80000c58:	48 83 c0 01          	add    $0x1,%rax
        *((uint32_t*)fb_info.base + i) = col;
ffffffff80000c5c:	89 3a                	mov    %edi,(%rdx)
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80000c5e:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80000c62:	48 39 c8             	cmp    %rcx,%rax
ffffffff80000c65:	75 f1                	jne    ffffffff80000c58 <fb_clearscreen+0x28>
    }
}
ffffffff80000c67:	c3                   	retq   
ffffffff80000c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000c6f:	00 

ffffffff80000c70 <fb_drawline>:

void fb_drawline(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, enum fb_color col)
{

ffffffff80000c70:	c3                   	retq   
ffffffff80000c71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000c78:	00 00 00 
ffffffff80000c7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000c80 <kbd_init>:


void kbd_init()
{

}
ffffffff80000c80:	c3                   	retq   
ffffffff80000c81:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000c88:	00 00 00 00 
ffffffff80000c8c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000c90 <kbd_set_target>:

void kbd_set_target(void* handler)
{
    kbd_handler = handler;
ffffffff80000c90:	48 89 3d 31 a4 00 00 	mov    %rdi,0xa431(%rip)        # ffffffff8000b0c8 <kbd_handler>
    kbd_active = 1;
ffffffff80000c97:	c6 05 32 a4 00 00 01 	movb   $0x1,0xa432(%rip)        # ffffffff8000b0d0 <kbd_active>
}
ffffffff80000c9e:	c3                   	retq   
ffffffff80000c9f:	90                   	nop

ffffffff80000ca0 <kbd_translate>:

uint8_t kbd_translate(uint8_t scancode, uint8_t uppercase)
{
    if(scancode > 58) return 0;
ffffffff80000ca0:	31 c0                	xor    %eax,%eax
ffffffff80000ca2:	40 80 ff 3a          	cmp    $0x3a,%dil
ffffffff80000ca6:	77 14                	ja     ffffffff80000cbc <kbd_translate+0x1c>

    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80000ca8:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80000cac:	40 84 f6             	test   %sil,%sil
ffffffff80000caf:	0f b6 87 40 53 00 80 	movzbl -0x7fffacc0(%rdi),%eax
ffffffff80000cb6:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80000cb9:	0f 45 c2             	cmovne %edx,%eax

    return kbd_table[scancode];
}
ffffffff80000cbc:	c3                   	retq   
ffffffff80000cbd:	0f 1f 00             	nopl   (%rax)

ffffffff80000cc0 <kbd_handle>:
void kbd_handle()
{
    uint8_t data;
    KEY_INFO_t key_info;

    if(!kbd_active) return;
ffffffff80000cc0:	80 3d 09 a4 00 00 00 	cmpb   $0x0,0xa409(%rip)        # ffffffff8000b0d0 <kbd_active>
ffffffff80000cc7:	75 07                	jne    ffffffff80000cd0 <kbd_handle+0x10>
ffffffff80000cc9:	c3                   	retq   
ffffffff80000cca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
{
ffffffff80000cd0:	55                   	push   %rbp

    data = inb(0x60);
ffffffff80000cd1:	bf 60 00 00 00       	mov    $0x60,%edi
{
ffffffff80000cd6:	48 89 e5             	mov    %rsp,%rbp
    data = inb(0x60);
ffffffff80000cd9:	e8 42 0b 00 00       	callq  ffffffff80001820 <inb>

    uint8_t buffer[20];

    switch(data)
ffffffff80000cde:	3c 36                	cmp    $0x36,%al
ffffffff80000ce0:	74 4e                	je     ffffffff80000d30 <kbd_handle+0x70>
ffffffff80000ce2:	77 14                	ja     ffffffff80000cf8 <kbd_handle+0x38>
ffffffff80000ce4:	3c 01                	cmp    $0x1,%al
ffffffff80000ce6:	74 28                	je     ffffffff80000d10 <kbd_handle+0x50>
ffffffff80000ce8:	3c 2a                	cmp    $0x2a,%al
ffffffff80000cea:	75 53                	jne    ffffffff80000d3f <kbd_handle+0x7f>
    {
        case KBD_LEFT_SHIFT:
            lshift_status = 1;
ffffffff80000cec:	c6 05 ce a3 00 00 01 	movb   $0x1,0xa3ce(%rip)        # ffffffff8000b0c1 <lshift_status>
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
    key_info.scancode = data;

    kbd_handler(key_info);

ffffffff80000cf3:	5d                   	pop    %rbp
ffffffff80000cf4:	c3                   	retq   
ffffffff80000cf5:	0f 1f 00             	nopl   (%rax)
    switch(data)
ffffffff80000cf8:	3c aa                	cmp    $0xaa,%al
ffffffff80000cfa:	74 74                	je     ffffffff80000d70 <kbd_handle+0xb0>
ffffffff80000cfc:	3c b6                	cmp    $0xb6,%al
ffffffff80000cfe:	75 39                	jne    ffffffff80000d39 <kbd_handle+0x79>
            rshift_status = 0;
ffffffff80000d00:	c6 05 b9 a3 00 00 00 	movb   $0x0,0xa3b9(%rip)        # ffffffff8000b0c0 <rshift_status>
ffffffff80000d07:	5d                   	pop    %rbp
ffffffff80000d08:	c3                   	retq   
ffffffff80000d09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            printf("%d\n", pit_ticks);
ffffffff80000d10:	48 8b 35 c9 e5 00 00 	mov    0xe5c9(%rip),%rsi        # ffffffff8000f2e0 <pit_ticks>
ffffffff80000d17:	48 c7 c7 f0 57 00 80 	mov    $0xffffffff800057f0,%rdi
ffffffff80000d1e:	31 c0                	xor    %eax,%eax
ffffffff80000d20:	5d                   	pop    %rbp
            printf("%d\n", pit_ticks);
ffffffff80000d21:	e9 0a 33 00 00       	jmpq   ffffffff80004030 <printf_>
ffffffff80000d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000d2d:	00 00 00 
            rshift_status = 1;
ffffffff80000d30:	c6 05 89 a3 00 00 01 	movb   $0x1,0xa389(%rip)        # ffffffff8000b0c0 <rshift_status>
ffffffff80000d37:	5d                   	pop    %rbp
ffffffff80000d38:	c3                   	retq   
    if(scancode > 58) return 0;
ffffffff80000d39:	31 d2                	xor    %edx,%edx
ffffffff80000d3b:	3c 3a                	cmp    $0x3a,%al
ffffffff80000d3d:	77 21                	ja     ffffffff80000d60 <kbd_handle+0xa0>
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80000d3f:	0f b6 d0             	movzbl %al,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80000d42:	0f b6 0d 78 a3 00 00 	movzbl 0xa378(%rip),%ecx        # ffffffff8000b0c1 <lshift_status>
ffffffff80000d49:	0f b6 35 70 a3 00 00 	movzbl 0xa370(%rip),%esi        # ffffffff8000b0c0 <rshift_status>
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80000d50:	0f b6 92 40 53 00 80 	movzbl -0x7fffacc0(%rdx),%edx
ffffffff80000d57:	40 08 f1             	or     %sil,%cl
ffffffff80000d5a:	8d 7a e0             	lea    -0x20(%rdx),%edi
ffffffff80000d5d:	0f 45 d7             	cmovne %edi,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80000d60:	31 c9                	xor    %ecx,%ecx
ffffffff80000d62:	5d                   	pop    %rbp
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80000d63:	88 d5                	mov    %dl,%ch
    key_info.scancode = data;
ffffffff80000d65:	88 c1                	mov    %al,%cl
    kbd_handler(key_info);
ffffffff80000d67:	89 cf                	mov    %ecx,%edi
ffffffff80000d69:	ff 25 59 a3 00 00    	jmpq   *0xa359(%rip)        # ffffffff8000b0c8 <kbd_handler>
ffffffff80000d6f:	90                   	nop
            lshift_status = 0;
ffffffff80000d70:	c6 05 4a a3 00 00 00 	movb   $0x0,0xa34a(%rip)        # ffffffff8000b0c1 <lshift_status>
ffffffff80000d77:	5d                   	pop    %rbp
ffffffff80000d78:	c3                   	retq   
ffffffff80000d79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80000d80 <pic_EOI>:

uint64_t ticks;

void pic_EOI(uint8_t IRQ)
{
    if(IRQ >= 8)
ffffffff80000d80:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80000d84:	77 12                	ja     ffffffff80000d98 <pic_EOI+0x18>
    {
        outb(PIC2_CMD, PIC_EOI);
    }
    
    outb(PIC1_CMD, PIC_EOI);
ffffffff80000d86:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80000d8b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80000d90:	e9 7b 0a 00 00       	jmpq   ffffffff80001810 <outb>
ffffffff80000d95:	0f 1f 00             	nopl   (%rax)
{
ffffffff80000d98:	55                   	push   %rbp
        outb(PIC2_CMD, PIC_EOI);
ffffffff80000d99:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80000d9e:	bf a0 00 00 00       	mov    $0xa0,%edi
{
ffffffff80000da3:	48 89 e5             	mov    %rsp,%rbp
        outb(PIC2_CMD, PIC_EOI);
ffffffff80000da6:	e8 65 0a 00 00       	callq  ffffffff80001810 <outb>
    outb(PIC1_CMD, PIC_EOI);
ffffffff80000dab:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80000db0:	bf 20 00 00 00       	mov    $0x20,%edi
}
ffffffff80000db5:	5d                   	pop    %rbp
    outb(PIC1_CMD, PIC_EOI);
ffffffff80000db6:	e9 55 0a 00 00       	jmpq   ffffffff80001810 <outb>
ffffffff80000dbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000dc0 <pic_set_mask>:

void pic_set_mask(uint8_t IRQ)
{
ffffffff80000dc0:	55                   	push   %rbp
ffffffff80000dc1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000dc4:	41 54                	push   %r12
ffffffff80000dc6:	53                   	push   %rbx
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80000dc7:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80000dcb:	76 33                	jbe    ffffffff80000e00 <pic_set_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff80000dcd:	44 8d 67 f8          	lea    -0x8(%rdi),%r12d
ffffffff80000dd1:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) | (1 << IRQ);
ffffffff80000dd6:	89 df                	mov    %ebx,%edi
ffffffff80000dd8:	e8 43 0a 00 00       	callq  ffffffff80001820 <inb>
ffffffff80000ddd:	44 89 e1             	mov    %r12d,%ecx
ffffffff80000de0:	ba 01 00 00 00       	mov    $0x1,%edx
    outb(port, value);
ffffffff80000de5:	89 df                	mov    %ebx,%edi
    value = inb(port) | (1 << IRQ);
ffffffff80000de7:	d3 e2                	shl    %cl,%edx
}
ffffffff80000de9:	5b                   	pop    %rbx
ffffffff80000dea:	41 5c                	pop    %r12
    value = inb(port) | (1 << IRQ);
ffffffff80000dec:	09 d0                	or     %edx,%eax
}
ffffffff80000dee:	5d                   	pop    %rbp
    outb(port, value);
ffffffff80000def:	0f b6 f0             	movzbl %al,%esi
ffffffff80000df2:	e9 19 0a 00 00       	jmpq   ffffffff80001810 <outb>
ffffffff80000df7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80000dfe:	00 00 
ffffffff80000e00:	41 89 fc             	mov    %edi,%r12d
ffffffff80000e03:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80000e08:	eb cc                	jmp    ffffffff80000dd6 <pic_set_mask+0x16>
ffffffff80000e0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000e10 <pic_clear_mask>:

void pic_clear_mask(uint8_t IRQ)
{
ffffffff80000e10:	55                   	push   %rbp
ffffffff80000e11:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000e14:	41 54                	push   %r12
ffffffff80000e16:	53                   	push   %rbx
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80000e17:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80000e1b:	76 23                	jbe    ffffffff80000e40 <pic_clear_mask+0x30>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff80000e1d:	44 8d 67 f8          	lea    -0x8(%rdi),%r12d
ffffffff80000e21:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) & ~(1 << IRQ);
ffffffff80000e26:	89 df                	mov    %ebx,%edi
ffffffff80000e28:	e8 f3 09 00 00       	callq  ffffffff80001820 <inb>
    outb(port, value);
ffffffff80000e2d:	89 df                	mov    %ebx,%edi
}
ffffffff80000e2f:	5b                   	pop    %rbx
    value = inb(port) & ~(1 << IRQ);
ffffffff80000e30:	44 0f b3 e0          	btr    %r12d,%eax
}
ffffffff80000e34:	41 5c                	pop    %r12
ffffffff80000e36:	5d                   	pop    %rbp
    outb(port, value);
ffffffff80000e37:	0f b6 f0             	movzbl %al,%esi
ffffffff80000e3a:	e9 d1 09 00 00       	jmpq   ffffffff80001810 <outb>
ffffffff80000e3f:	90                   	nop
ffffffff80000e40:	41 89 fc             	mov    %edi,%r12d
ffffffff80000e43:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80000e48:	eb dc                	jmp    ffffffff80000e26 <pic_clear_mask+0x16>
ffffffff80000e4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000e50 <pic_disable>:

void pic_disable()
{
ffffffff80000e50:	55                   	push   %rbp
    outb(PIC2_DATA, 0xff);
ffffffff80000e51:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80000e56:	bf a1 00 00 00       	mov    $0xa1,%edi
{
ffffffff80000e5b:	48 89 e5             	mov    %rsp,%rbp
    outb(PIC2_DATA, 0xff);
ffffffff80000e5e:	e8 ad 09 00 00       	callq  ffffffff80001810 <outb>
    outb(PIC1_DATA, 0xff);
ffffffff80000e63:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80000e68:	bf 21 00 00 00       	mov    $0x21,%edi
}
ffffffff80000e6d:	5d                   	pop    %rbp
    outb(PIC1_DATA, 0xff);
ffffffff80000e6e:	e9 9d 09 00 00       	jmpq   ffffffff80001810 <outb>
ffffffff80000e73:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000e7a:	00 00 00 00 
ffffffff80000e7e:	66 90                	xchg   %ax,%ax

ffffffff80000e80 <pic_remap>:

void pic_remap()
{
ffffffff80000e80:	55                   	push   %rbp
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80000e81:	bf 21 00 00 00       	mov    $0x21,%edi
{
ffffffff80000e86:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000e89:	41 54                	push   %r12
ffffffff80000e8b:	53                   	push   %rbx
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80000e8c:	e8 8f 09 00 00       	callq  ffffffff80001820 <inb>
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80000e91:	bf a1 00 00 00       	mov    $0xa1,%edi
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80000e96:	41 89 c4             	mov    %eax,%r12d
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80000e99:	e8 82 09 00 00       	callq  ffffffff80001820 <inb>

    outb(PIC1_CMD, 0x11);
ffffffff80000e9e:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80000ea3:	bf 20 00 00 00       	mov    $0x20,%edi
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80000ea8:	89 c3                	mov    %eax,%ebx
    outb(PIC1_CMD, 0x11);
ffffffff80000eaa:	e8 61 09 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000eaf:	31 c0                	xor    %eax,%eax
ffffffff80000eb1:	e8 7a 09 00 00       	callq  ffffffff80001830 <io_wait>
    outb(PIC2_CMD, 0x11);
ffffffff80000eb6:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80000ebb:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80000ec0:	e8 4b 09 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000ec5:	31 c0                	xor    %eax,%eax
ffffffff80000ec7:	e8 64 09 00 00       	callq  ffffffff80001830 <io_wait>

    outb(PIC1_DATA, 0x20);
ffffffff80000ecc:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80000ed1:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80000ed6:	e8 35 09 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000edb:	31 c0                	xor    %eax,%eax
ffffffff80000edd:	e8 4e 09 00 00       	callq  ffffffff80001830 <io_wait>
    outb(PIC2_DATA, 0x20);
ffffffff80000ee2:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80000ee7:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80000eec:	e8 1f 09 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000ef1:	31 c0                	xor    %eax,%eax
ffffffff80000ef3:	e8 38 09 00 00       	callq  ffffffff80001830 <io_wait>

    outb(PIC1_DATA, 0x04);
ffffffff80000ef8:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80000efd:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80000f02:	e8 09 09 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000f07:	31 c0                	xor    %eax,%eax
ffffffff80000f09:	e8 22 09 00 00       	callq  ffffffff80001830 <io_wait>
    outb(PIC2_DATA, 0x02);
ffffffff80000f0e:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80000f13:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80000f18:	e8 f3 08 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000f1d:	31 c0                	xor    %eax,%eax
ffffffff80000f1f:	e8 0c 09 00 00       	callq  ffffffff80001830 <io_wait>

    outb(PIC1_DATA, 0x01);
ffffffff80000f24:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80000f29:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80000f2e:	e8 dd 08 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000f33:	31 c0                	xor    %eax,%eax
ffffffff80000f35:	e8 f6 08 00 00       	callq  ffffffff80001830 <io_wait>
    outb(PIC2_DATA, 0x01);
ffffffff80000f3a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80000f3f:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80000f44:	e8 c7 08 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000f49:	31 c0                	xor    %eax,%eax
ffffffff80000f4b:	e8 e0 08 00 00       	callq  ffffffff80001830 <io_wait>

    outb(PIC1_DATA, mask1);
ffffffff80000f50:	41 0f b6 f4          	movzbl %r12b,%esi
ffffffff80000f54:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80000f59:	e8 b2 08 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
ffffffff80000f5e:	31 c0                	xor    %eax,%eax
ffffffff80000f60:	e8 cb 08 00 00       	callq  ffffffff80001830 <io_wait>
    outb(PIC2_DATA, mask2);
ffffffff80000f65:	0f b6 f3             	movzbl %bl,%esi
ffffffff80000f68:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80000f6d:	e8 9e 08 00 00       	callq  ffffffff80001810 <outb>
    io_wait();
}
ffffffff80000f72:	5b                   	pop    %rbx
    io_wait();
ffffffff80000f73:	31 c0                	xor    %eax,%eax
}
ffffffff80000f75:	41 5c                	pop    %r12
ffffffff80000f77:	5d                   	pop    %rbp
    io_wait();
ffffffff80000f78:	e9 b3 08 00 00       	jmpq   ffffffff80001830 <io_wait>
ffffffff80000f7d:	0f 1f 00             	nopl   (%rax)

ffffffff80000f80 <pit_init>:



void pit_init(uint64_t freq)
{
ffffffff80000f80:	55                   	push   %rbp
    uint64_t working_freq = freq;
    if(freq < 10000)
        working_freq = 10000;
    
    if(freq > 1193181)
ffffffff80000f81:	b8 dd 34 12 00       	mov    $0x1234dd,%eax
        working_freq = 1193181;

    uint32_t divisor = 1193180 / working_freq;

    outb(0x43, 0x36);
ffffffff80000f86:	be 36 00 00 00       	mov    $0x36,%esi
{
ffffffff80000f8b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000f8e:	53                   	push   %rbx
ffffffff80000f8f:	48 83 ec 08          	sub    $0x8,%rsp
    if(freq > 1193181)
ffffffff80000f93:	48 39 c7             	cmp    %rax,%rdi
ffffffff80000f96:	48 0f 47 f8          	cmova  %rax,%rdi
    uint32_t divisor = 1193180 / working_freq;
ffffffff80000f9a:	b8 10 27 00 00       	mov    $0x2710,%eax
ffffffff80000f9f:	48 39 c7             	cmp    %rax,%rdi
ffffffff80000fa2:	48 0f 42 f8          	cmovb  %rax,%rdi
ffffffff80000fa6:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
ffffffff80000fab:	31 d2                	xor    %edx,%edx
ffffffff80000fad:	48 f7 f7             	div    %rdi
    outb(0x43, 0x36);
ffffffff80000fb0:	bf 43 00 00 00       	mov    $0x43,%edi
    uint32_t divisor = 1193180 / working_freq;
ffffffff80000fb5:	48 89 c3             	mov    %rax,%rbx
    outb(0x43, 0x36);
ffffffff80000fb8:	e8 53 08 00 00       	callq  ffffffff80001810 <outb>
    outb(0x40, divisor & 0xff);
ffffffff80000fbd:	89 de                	mov    %ebx,%esi
ffffffff80000fbf:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80000fc4:	e8 47 08 00 00       	callq  ffffffff80001810 <outb>
    outb(0x40, divisor >> 8);
ffffffff80000fc9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    outb(0x40, divisor >> 8);
ffffffff80000fcd:	31 f6                	xor    %esi,%esi
ffffffff80000fcf:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80000fd4:	c9                   	leaveq 
    outb(0x40, divisor >> 8);
ffffffff80000fd5:	e9 36 08 00 00       	jmpq   ffffffff80001810 <outb>
ffffffff80000fda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000fe0 <serial_init>:
#include <io.h>

char serial_buffer[256];

uint64_t serial_init(uint16_t port)
{
ffffffff80000fe0:	55                   	push   %rbp
    outb(port + 1, 0x00);
ffffffff80000fe1:	31 f6                	xor    %esi,%esi
{
ffffffff80000fe3:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000fe6:	41 56                	push   %r14
ffffffff80000fe8:	41 55                	push   %r13
    outb(port + 1, 0x00);
ffffffff80000fea:	44 8d 6f 01          	lea    0x1(%rdi),%r13d
{
ffffffff80000fee:	41 54                	push   %r12
    outb(port + 1, 0x00);
ffffffff80000ff0:	45 0f b7 ed          	movzwl %r13w,%r13d
{
ffffffff80000ff4:	53                   	push   %rbx
ffffffff80000ff5:	89 fb                	mov    %edi,%ebx
    outb(port + 1, 0x00);
ffffffff80000ff7:	44 89 ef             	mov    %r13d,%edi
    outb(port + 3, 0x80);
ffffffff80000ffa:	44 8d 63 03          	lea    0x3(%rbx),%r12d
    outb(port + 0, 0x00);
ffffffff80000ffe:	44 0f b7 f3          	movzwl %bx,%r14d
    outb(port + 3, 0x80);
ffffffff80001002:	45 0f b7 e4          	movzwl %r12w,%r12d
    outb(port + 1, 0x00);
ffffffff80001006:	e8 05 08 00 00       	callq  ffffffff80001810 <outb>
    outb(port + 3, 0x80);
ffffffff8000100b:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80001010:	44 89 e7             	mov    %r12d,%edi
ffffffff80001013:	e8 f8 07 00 00       	callq  ffffffff80001810 <outb>
    outb(port + 0, 0x00);
ffffffff80001018:	31 f6                	xor    %esi,%esi
ffffffff8000101a:	44 89 f7             	mov    %r14d,%edi
ffffffff8000101d:	e8 ee 07 00 00       	callq  ffffffff80001810 <outb>
    outb(port + 1, 0x00);
ffffffff80001022:	31 f6                	xor    %esi,%esi
ffffffff80001024:	44 89 ef             	mov    %r13d,%edi
ffffffff80001027:	e8 e4 07 00 00       	callq  ffffffff80001810 <outb>
    outb(port + 3, 0x03);
ffffffff8000102c:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80001031:	44 89 e7             	mov    %r12d,%edi
ffffffff80001034:	e8 d7 07 00 00       	callq  ffffffff80001810 <outb>
    outb(port + 2, 0xC7);
ffffffff80001039:	8d 7b 02             	lea    0x2(%rbx),%edi
    outb(port + 4, 0x0B);
ffffffff8000103c:	83 c3 04             	add    $0x4,%ebx
    outb(port + 2, 0xC7);
ffffffff8000103f:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff80001044:	0f b7 ff             	movzwl %di,%edi
    outb(port + 4, 0x0B);
ffffffff80001047:	0f b7 db             	movzwl %bx,%ebx
    outb(port + 2, 0xC7);
ffffffff8000104a:	e8 c1 07 00 00       	callq  ffffffff80001810 <outb>
    outb(port + 4, 0x0B);
ffffffff8000104f:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80001054:	89 df                	mov    %ebx,%edi
ffffffff80001056:	e8 b5 07 00 00       	callq  ffffffff80001810 <outb>

    if(inb(port + 0) != 0xAE)
ffffffff8000105b:	44 89 f7             	mov    %r14d,%edi
ffffffff8000105e:	e8 bd 07 00 00       	callq  ffffffff80001820 <inb>
ffffffff80001063:	89 c2                	mov    %eax,%edx
ffffffff80001065:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000106a:	80 fa ae             	cmp    $0xae,%dl
ffffffff8000106d:	74 11                	je     ffffffff80001080 <serial_init+0xa0>
        return 1;
    }

    outb(port + 4, 0x0F);
    return 0;
}
ffffffff8000106f:	5b                   	pop    %rbx
ffffffff80001070:	41 5c                	pop    %r12
ffffffff80001072:	41 5d                	pop    %r13
ffffffff80001074:	41 5e                	pop    %r14
ffffffff80001076:	5d                   	pop    %rbp
ffffffff80001077:	c3                   	retq   
ffffffff80001078:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000107f:	00 
    outb(port + 4, 0x0F);
ffffffff80001080:	89 df                	mov    %ebx,%edi
ffffffff80001082:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80001087:	e8 84 07 00 00       	callq  ffffffff80001810 <outb>
}
ffffffff8000108c:	5b                   	pop    %rbx
    return 0;
ffffffff8000108d:	31 c0                	xor    %eax,%eax
}
ffffffff8000108f:	41 5c                	pop    %r12
ffffffff80001091:	41 5d                	pop    %r13
ffffffff80001093:	41 5e                	pop    %r14
ffffffff80001095:	5d                   	pop    %rbp
ffffffff80001096:	c3                   	retq   
ffffffff80001097:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000109e:	00 00 

ffffffff800010a0 <serial_received>:

uint64_t serial_received(uint16_t port)
{
ffffffff800010a0:	55                   	push   %rbp
    return inb(port + 5) & 1;
ffffffff800010a1:	83 c7 05             	add    $0x5,%edi
ffffffff800010a4:	0f b7 ff             	movzwl %di,%edi
{
ffffffff800010a7:	48 89 e5             	mov    %rsp,%rbp
    return inb(port + 5) & 1;
ffffffff800010aa:	e8 71 07 00 00       	callq  ffffffff80001820 <inb>
}
ffffffff800010af:	5d                   	pop    %rbp
    return inb(port + 5) & 1;
ffffffff800010b0:	83 e0 01             	and    $0x1,%eax
}
ffffffff800010b3:	c3                   	retq   
ffffffff800010b4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800010bb:	00 00 00 00 
ffffffff800010bf:	90                   	nop

ffffffff800010c0 <serial_read>:

uint8_t serial_read(uint16_t port)
{
ffffffff800010c0:	55                   	push   %rbp
ffffffff800010c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800010c4:	41 54                	push   %r12
    while(serial_received(port) == 0);
ffffffff800010c6:	44 0f b7 e7          	movzwl %di,%r12d
    return inb(port + 5) & 1;
ffffffff800010ca:	83 c7 05             	add    $0x5,%edi
{
ffffffff800010cd:	53                   	push   %rbx
    return inb(port + 5) & 1;
ffffffff800010ce:	0f b7 df             	movzwl %di,%ebx
ffffffff800010d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800010d8:	89 df                	mov    %ebx,%edi
ffffffff800010da:	e8 41 07 00 00       	callq  ffffffff80001820 <inb>
    while(serial_received(port) == 0);
ffffffff800010df:	a8 01                	test   $0x1,%al
ffffffff800010e1:	74 f5                	je     ffffffff800010d8 <serial_read+0x18>

    return inb(port);
}
ffffffff800010e3:	5b                   	pop    %rbx
    return inb(port);
ffffffff800010e4:	44 89 e7             	mov    %r12d,%edi
}
ffffffff800010e7:	41 5c                	pop    %r12
ffffffff800010e9:	5d                   	pop    %rbp
    return inb(port);
ffffffff800010ea:	e9 31 07 00 00       	jmpq   ffffffff80001820 <inb>
ffffffff800010ef:	90                   	nop

ffffffff800010f0 <serial_is_tx_empty>:

uint64_t serial_is_tx_empty(uint16_t port)
{
ffffffff800010f0:	55                   	push   %rbp
    return inb(port + 5) & 0x20;
ffffffff800010f1:	83 c7 05             	add    $0x5,%edi
ffffffff800010f4:	0f b7 ff             	movzwl %di,%edi
{
ffffffff800010f7:	48 89 e5             	mov    %rsp,%rbp
    return inb(port + 5) & 0x20;
ffffffff800010fa:	e8 21 07 00 00       	callq  ffffffff80001820 <inb>
}
ffffffff800010ff:	5d                   	pop    %rbp
    return inb(port + 5) & 0x20;
ffffffff80001100:	83 e0 20             	and    $0x20,%eax
}
ffffffff80001103:	c3                   	retq   
ffffffff80001104:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000110b:	00 00 00 00 
ffffffff8000110f:	90                   	nop

ffffffff80001110 <serial_write>:

void serial_write(uint16_t port, uint8_t data)
{
ffffffff80001110:	55                   	push   %rbp
ffffffff80001111:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001114:	41 55                	push   %r13
    while(serial_is_tx_empty(port) == 0);
ffffffff80001116:	44 0f b7 ef          	movzwl %di,%r13d
    return inb(port + 5) & 0x20;
ffffffff8000111a:	83 c7 05             	add    $0x5,%edi
{
ffffffff8000111d:	41 54                	push   %r12
ffffffff8000111f:	41 89 f4             	mov    %esi,%r12d
ffffffff80001122:	53                   	push   %rbx
    return inb(port + 5) & 0x20;
ffffffff80001123:	0f b7 df             	movzwl %di,%ebx
{
ffffffff80001126:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8000112a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    return inb(port + 5) & 0x20;
ffffffff80001130:	89 df                	mov    %ebx,%edi
ffffffff80001132:	e8 e9 06 00 00       	callq  ffffffff80001820 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80001137:	a8 20                	test   $0x20,%al
ffffffff80001139:	74 f5                	je     ffffffff80001130 <serial_write+0x20>
    outb(port, data);
}
ffffffff8000113b:	48 83 c4 08          	add    $0x8,%rsp
    outb(port, data);
ffffffff8000113f:	41 0f b6 f4          	movzbl %r12b,%esi
ffffffff80001143:	44 89 ef             	mov    %r13d,%edi
}
ffffffff80001146:	5b                   	pop    %rbx
ffffffff80001147:	41 5c                	pop    %r12
ffffffff80001149:	41 5d                	pop    %r13
ffffffff8000114b:	5d                   	pop    %rbp
    outb(port, data);
ffffffff8000114c:	e9 bf 06 00 00       	jmpq   ffffffff80001810 <outb>
ffffffff80001151:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001158:	00 00 00 00 
ffffffff8000115c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001160 <serial_write_str>:

void serial_write_str(uint16_t port, char* data)
{
ffffffff80001160:	55                   	push   %rbp
ffffffff80001161:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001164:	41 57                	push   %r15
ffffffff80001166:	41 56                	push   %r14
ffffffff80001168:	41 55                	push   %r13
ffffffff8000116a:	41 54                	push   %r12
ffffffff8000116c:	53                   	push   %rbx
ffffffff8000116d:	48 83 ec 08          	sub    $0x8,%rsp
    uint8_t i = 0;
    while(data[i] != 0)
ffffffff80001171:	44 0f b6 26          	movzbl (%rsi),%r12d
ffffffff80001175:	45 84 e4             	test   %r12b,%r12b
ffffffff80001178:	74 3e                	je     ffffffff800011b8 <serial_write_str+0x58>
    {
        serial_write(port, data[i]);
ffffffff8000117a:	44 0f b7 ff          	movzwl %di,%r15d
    return inb(port + 5) & 0x20;
ffffffff8000117e:	83 c7 05             	add    $0x5,%edi
ffffffff80001181:	49 89 f6             	mov    %rsi,%r14
    uint8_t i = 0;
ffffffff80001184:	45 31 ed             	xor    %r13d,%r13d
    return inb(port + 5) & 0x20;
ffffffff80001187:	0f b7 df             	movzwl %di,%ebx
ffffffff8000118a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001190:	89 df                	mov    %ebx,%edi
ffffffff80001192:	e8 89 06 00 00       	callq  ffffffff80001820 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80001197:	a8 20                	test   $0x20,%al
ffffffff80001199:	74 f5                	je     ffffffff80001190 <serial_write_str+0x30>
    outb(port, data);
ffffffff8000119b:	44 89 e6             	mov    %r12d,%esi
ffffffff8000119e:	44 89 ff             	mov    %r15d,%edi
        //if(data[i] == '\n') serial_write(port, '\r');
        i++;
ffffffff800011a1:	41 83 c5 01          	add    $0x1,%r13d
    outb(port, data);
ffffffff800011a5:	e8 66 06 00 00       	callq  ffffffff80001810 <outb>
    while(data[i] != 0)
ffffffff800011aa:	41 0f b6 c5          	movzbl %r13b,%eax
ffffffff800011ae:	45 0f b6 24 06       	movzbl (%r14,%rax,1),%r12d
ffffffff800011b3:	45 84 e4             	test   %r12b,%r12b
ffffffff800011b6:	75 d8                	jne    ffffffff80001190 <serial_write_str+0x30>
    }
ffffffff800011b8:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800011bc:	5b                   	pop    %rbx
ffffffff800011bd:	41 5c                	pop    %r12
ffffffff800011bf:	41 5d                	pop    %r13
ffffffff800011c1:	41 5e                	pop    %r14
ffffffff800011c3:	41 5f                	pop    %r15
ffffffff800011c5:	5d                   	pop    %rbp
ffffffff800011c6:	c3                   	retq   
ffffffff800011c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800011ce:	00 00 

ffffffff800011d0 <stty_sendcmd>:
#include <serial.h>



void stty_sendcmd(uint16_t cmd)
{
ffffffff800011d0:	55                   	push   %rbp
    serial_write(SERIAL_PORT1, 0x1B);
ffffffff800011d1:	be 1b 00 00 00       	mov    $0x1b,%esi
ffffffff800011d6:	bf f8 03 00 00       	mov    $0x3f8,%edi
{
ffffffff800011db:	48 89 e5             	mov    %rsp,%rbp
    serial_write(SERIAL_PORT1, 0x1B);
ffffffff800011de:	e8 2d ff ff ff       	callq  ffffffff80001110 <serial_write>
    serial_write(SERIAL_PORT1, 0x5B);
ffffffff800011e3:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff800011e8:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800011ed:	e8 1e ff ff ff       	callq  ffffffff80001110 <serial_write>
    serial_write(SERIAL_PORT1, '[');
ffffffff800011f2:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff800011f7:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800011fc:	e8 0f ff ff ff       	callq  ffffffff80001110 <serial_write>
    serial_write(SERIAL_PORT1, 'H');
ffffffff80001201:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80001206:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8000120b:	e8 00 ff ff ff       	callq  ffffffff80001110 <serial_write>
    serial_write(SERIAL_PORT1, '~');
ffffffff80001210:	be 7e 00 00 00       	mov    $0x7e,%esi
ffffffff80001215:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8000121a:	5d                   	pop    %rbp
    serial_write(SERIAL_PORT1, '~');
ffffffff8000121b:	e9 f0 fe ff ff       	jmpq   ffffffff80001110 <serial_write>

ffffffff80001220 <load_elf>:
//#include <memory.h>

uint64_t load_elf(void* ptr)
{

ffffffff80001220:	c3                   	retq   
ffffffff80001221:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001228:	00 00 00 
ffffffff8000122b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001230 <oct2bin>:

uint64_t oct2bin(uint8_t* str, uint16_t size)
{
    uint64_t n = 0;
    uint8_t* c = str;
    while (size-- > 0)
ffffffff80001230:	8d 46 ff             	lea    -0x1(%rsi),%eax
ffffffff80001233:	66 85 f6             	test   %si,%si
ffffffff80001236:	74 30                	je     ffffffff80001268 <oct2bin+0x38>
ffffffff80001238:	0f b7 c0             	movzwl %ax,%eax
    uint64_t n = 0;
ffffffff8000123b:	31 d2                	xor    %edx,%edx
ffffffff8000123d:	48 8d 4c 07 01       	lea    0x1(%rdi,%rax,1),%rcx
ffffffff80001242:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    {
        n *= 8;
        n += *c - '0';
ffffffff80001248:	0f b6 07             	movzbl (%rdi),%eax
        c++;
ffffffff8000124b:	48 83 c7 01          	add    $0x1,%rdi
        n += *c - '0';
ffffffff8000124f:	83 e8 30             	sub    $0x30,%eax
ffffffff80001252:	48 98                	cltq   
ffffffff80001254:	48 8d 14 d0          	lea    (%rax,%rdx,8),%rdx
    while (size-- > 0)
ffffffff80001258:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8000125b:	75 eb                	jne    ffffffff80001248 <oct2bin+0x18>
    }
    return n;
}
ffffffff8000125d:	48 89 d0             	mov    %rdx,%rax
ffffffff80001260:	c3                   	retq   
ffffffff80001261:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    uint64_t n = 0;
ffffffff80001268:	31 d2                	xor    %edx,%edx
}
ffffffff8000126a:	48 89 d0             	mov    %rdx,%rax
ffffffff8000126d:	c3                   	retq   
ffffffff8000126e:	66 90                	xchg   %ax,%ax

ffffffff80001270 <gdt_init>:
uint8_t ist2[4096];

void gdt_init()
{
    gdt.null0.raw = 0x00;
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80001270:	48 b8 ff ff 00 00 00 	movabs $0xaf9a000000ffff,%rax
ffffffff80001277:	9a af 00 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);

    gdtr.base = (uint64_t)&gdt;
    gdtr.limit = sizeof(gdt);

    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff8000127a:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff8000127f:	48 c7 c7 e0 f1 00 80 	mov    $0xffffffff8000f1e0,%rdi
    gdt.null0.raw = 0x00;
ffffffff80001286:	48 c7 05 ef df 00 00 	movq   $0x0,0xdfef(%rip)        # ffffffff8000f280 <gdt>
ffffffff8000128d:	00 00 00 00 
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80001291:	48 89 05 f0 df 00 00 	mov    %rax,0xdff0(%rip)        # ffffffff8000f288 <gdt+0x8>
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff80001298:	48 b8 ff ff 00 00 00 	movabs $0xaf92000000ffff,%rax
ffffffff8000129f:	92 af 00 
ffffffff800012a2:	48 89 05 e7 df 00 00 	mov    %rax,0xdfe7(%rip)        # ffffffff8000f290 <gdt+0x10>
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff800012a9:	48 b8 ff ff 00 00 00 	movabs $0xaffa000000ffff,%rax
ffffffff800012b0:	fa af 00 
ffffffff800012b3:	48 89 05 ee df 00 00 	mov    %rax,0xdfee(%rip)        # ffffffff8000f2a8 <gdt+0x28>
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff800012ba:	48 b8 ff ff 00 00 00 	movabs $0xaff2000000ffff,%rax
ffffffff800012c1:	f2 af 00 
ffffffff800012c4:	48 89 05 d5 df 00 00 	mov    %rax,0xdfd5(%rip)        # ffffffff8000f2a0 <gdt+0x20>
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff800012cb:	48 c7 c0 00 f2 00 80 	mov    $0xffffffff8000f200,%rax
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff800012d2:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff800012d5:	66 89 05 f6 df 00 00 	mov    %ax,0xdff6(%rip)        # ffffffff8000f2d2 <gdt+0x52>
    gdt.null1.raw = 0x00;
ffffffff800012dc:	48 c7 05 b1 df 00 00 	movq   $0x0,0xdfb1(%rip)        # ffffffff8000f298 <gdt+0x18>
ffffffff800012e3:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff800012e7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff800012eb:	88 15 e3 df 00 00    	mov    %dl,0xdfe3(%rip)        # ffffffff8000f2d4 <gdt+0x54>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800012f1:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff800012f4:	48 c1 e8 20          	shr    $0x20,%rax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800012f8:	48 c1 ea 18          	shr    $0x18,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff800012fc:	89 05 d6 df 00 00    	mov    %eax,0xdfd6(%rip)        # ffffffff8000f2d8 <gdt+0x58>
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff80001302:	b8 68 00 00 00       	mov    $0x68,%eax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80001307:	88 15 ca df 00 00    	mov    %dl,0xdfca(%rip)        # ffffffff8000f2d7 <gdt+0x57>
    gdtr.limit = sizeof(gdt);
ffffffff8000130d:	ba 60 00 00 00       	mov    $0x60,%edx
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff80001312:	66 89 05 b7 df 00 00 	mov    %ax,0xdfb7(%rip)        # ffffffff8000f2d0 <gdt+0x50>
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff80001319:	8b 05 b5 df 00 00    	mov    0xdfb5(%rip),%eax        # ffffffff8000f2d4 <gdt+0x54>
    gdt.null2.raw = 0x00;
ffffffff8000131f:	48 c7 05 86 df 00 00 	movq   $0x0,0xdf86(%rip)        # ffffffff8000f2b0 <gdt+0x30>
ffffffff80001326:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff8000132a:	25 ff 00 40 ff       	and    $0xff4000ff,%eax
    gdt.null3.raw = 0x00;
ffffffff8000132f:	48 c7 05 7e df 00 00 	movq   $0x0,0xdf7e(%rip)        # ffffffff8000f2b8 <gdt+0x38>
ffffffff80001336:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff8000133a:	80 cc 89             	or     $0x89,%ah
    gdt.null4.raw = 0x00;
ffffffff8000133d:	48 c7 05 78 df 00 00 	movq   $0x0,0xdf78(%rip)        # ffffffff8000f2c0 <gdt+0x40>
ffffffff80001344:	00 00 00 00 
    gdt.null5.raw = 0x00;
ffffffff80001348:	48 c7 05 75 df 00 00 	movq   $0x0,0xdf75(%rip)        # ffffffff8000f2c8 <gdt+0x48>
ffffffff8000134f:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff80001353:	89 05 7b df 00 00    	mov    %eax,0xdf7b(%rip)        # ffffffff8000f2d4 <gdt+0x54>
    gdt.tss_entry.reserved1 = 0;
ffffffff80001359:	c7 05 79 df 00 00 00 	movl   $0x0,0xdf79(%rip)        # ffffffff8000f2dc <gdt+0x5c>
ffffffff80001360:	00 00 00 
    tss.reserved0 = 0x00;
ffffffff80001363:	c7 05 93 de 00 00 00 	movl   $0x0,0xde93(%rip)        # ffffffff8000f200 <tss>
ffffffff8000136a:	00 00 00 
    tss.RSP0 = (uint64_t)stack + sizeof(stack);
ffffffff8000136d:	48 c7 05 8c de 00 00 	movq   $0xffffffff80009de0,0xde8c(%rip)        # ffffffff8000f204 <tss+0x4>
ffffffff80001374:	e0 9d 00 80 
    tss.RSP2 = (uint64_t)rsp2stack + sizeof(rsp2stack);
ffffffff80001378:	48 c7 05 91 de 00 00 	movq   $0xffffffff8000f1e0,0xde91(%rip)        # ffffffff8000f214 <tss+0x14>
ffffffff8000137f:	e0 f1 00 80 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);
ffffffff80001383:	48 c7 05 96 de 00 00 	movq   $0xffffffff8000d1e0,0xde96(%rip)        # ffffffff8000f224 <tss+0x24>
ffffffff8000138a:	e0 d1 00 80 
    gdtr.base = (uint64_t)&gdt;
ffffffff8000138e:	48 c7 05 49 de 00 00 	movq   $0xffffffff8000f280,0xde49(%rip)        # ffffffff8000f1e2 <gdtr+0x2>
ffffffff80001395:	80 f2 00 80 
    gdtr.limit = sizeof(gdt);
ffffffff80001399:	66 89 15 40 de 00 00 	mov    %dx,0xde40(%rip)        # ffffffff8000f1e0 <gdtr>
    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff800013a0:	e9 5b ec ff ff       	jmpq   ffffffff80000000 <gdt_load>
ffffffff800013a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800013ac:	00 00 00 
ffffffff800013af:	90                   	nop

ffffffff800013b0 <create_descriptor>:

void create_descriptor(uint16_t index, void* isr, uint8_t ist, uint8_t cs, uint8_t attr)
{
    struct idt_entry* entry = &idt[index];

    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800013b0:	0f b7 ff             	movzwl %di,%edi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
    entry->ist = ist;
    entry->kernel_cs = cs;
ffffffff800013b3:	0f b6 c9             	movzbl %cl,%ecx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800013b6:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff800013ba:	48 8d 87 00 f3 00 80 	lea    -0x7fff0d00(%rdi),%rax
ffffffff800013c1:	66 89 b7 00 f3 00 80 	mov    %si,-0x7fff0d00(%rdi)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800013c8:	48 89 f7             	mov    %rsi,%rdi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800013cb:	48 c1 ee 20          	shr    $0x20,%rsi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800013cf:	48 c1 ef 10          	shr    $0x10,%rdi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800013d3:	89 70 08             	mov    %esi,0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800013d6:	66 89 78 06          	mov    %di,0x6(%rax)
    entry->ist = ist;
ffffffff800013da:	88 50 04             	mov    %dl,0x4(%rax)
    entry->kernel_cs = cs;
ffffffff800013dd:	66 89 48 02          	mov    %cx,0x2(%rax)
    entry->attributes = attr;
ffffffff800013e1:	44 88 40 05          	mov    %r8b,0x5(%rax)
    entry->reserved = 0;
ffffffff800013e5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
}
ffffffff800013ec:	c3                   	retq   
ffffffff800013ed:	0f 1f 00             	nopl   (%rax)

ffffffff800013f0 <idt_init>:

void idt_init()
{
ffffffff800013f0:	55                   	push   %rbp
    //uint64_t idt_ptr = hh_code_to_phys((uint64_t)&idt[0]);
    idtr.base = (uint64_t)&idt[0];
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff800013f1:	b9 ff 0f 00 00       	mov    $0xfff,%ecx
ffffffff800013f6:	0f b7 3d 63 43 00 00 	movzwl 0x4363(%rip),%edi        # ffffffff80005760 <_page_fault_errors+0x40>
ffffffff800013fd:	49 c7 c0 f0 f5 00 80 	mov    $0xffffffff8000f5f0,%r8
ffffffff80001404:	66 89 0d dd de 00 00 	mov    %cx,0xdedd(%rip)        # ffffffff8000f2e8 <idtr>
ffffffff8000140b:	48 c7 c0 00 f3 00 80 	mov    $0xffffffff8000f300,%rax
ffffffff80001412:	48 c7 c1 08 02 00 80 	mov    $0xffffffff80000208,%rcx
    idtr.base = (uint64_t)&idt[0];
ffffffff80001419:	48 c7 05 c6 de 00 00 	movq   $0xffffffff8000f300,0xdec6(%rip)        # ffffffff8000f2ea <idtr+0x2>
ffffffff80001420:	00 f3 00 80 
{
ffffffff80001424:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001427:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000142e:	00 00 

    for(uint8_t index = 0; index < 47; index++)
    {
        create_descriptor(index, isr_stub_table[index], 0x00, 0x08, 0x8E);
ffffffff80001430:	48 8b 11             	mov    (%rcx),%rdx
    entry->ist = ist;
ffffffff80001433:	66 89 78 04          	mov    %di,0x4(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80001437:	48 83 c0 10          	add    $0x10,%rax
ffffffff8000143b:	48 83 c1 08          	add    $0x8,%rcx
    entry->reserved = 0;
ffffffff8000143f:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80001446:	48 89 d6             	mov    %rdx,%rsi
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80001449:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff8000144d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80001451:	89 50 f8             	mov    %edx,-0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80001454:	48 c1 ee 10          	shr    $0x10,%rsi
    entry->kernel_cs = cs;
ffffffff80001458:	ba 08 00 00 00       	mov    $0x8,%edx
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000145d:	66 89 70 f6          	mov    %si,-0xa(%rax)
    entry->kernel_cs = cs;
ffffffff80001461:	66 89 50 f2          	mov    %dx,-0xe(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80001465:	49 39 c0             	cmp    %rax,%r8
ffffffff80001468:	75 c6                	jne    ffffffff80001430 <idt_init+0x40>
    }

    create_descriptor(127, isr_stub_table[48], 0x00, 0x08, 0x8E);
ffffffff8000146a:	48 8b 05 17 ef ff ff 	mov    -0x10e9(%rip),%rax        # ffffffff80000388 <isr_stub_table+0x180>
    entry->kernel_cs = cs;
ffffffff80001471:	c7 05 77 e6 00 00 08 	movl   $0x8e000008,0xe677(%rip)        # ffffffff8000faf2 <idt+0x7f2>
ffffffff80001478:	00 00 8e 
    entry->reserved = 0;
ffffffff8000147b:	c7 05 77 e6 00 00 00 	movl   $0x0,0xe677(%rip)        # ffffffff8000fafc <idt+0x7fc>
ffffffff80001482:	00 00 00 
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80001485:	66 89 05 64 e6 00 00 	mov    %ax,0xe664(%rip)        # ffffffff8000faf0 <idt+0x7f0>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000148c:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff8000148f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80001493:	89 05 5f e6 00 00    	mov    %eax,0xe65f(%rip)        # ffffffff8000faf8 <idt+0x7f8>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80001499:	48 c1 ea 10          	shr    $0x10,%rdx
    create_descriptor(128, isr_stub_table[49], 0x00, 0x08, 0x8E);
ffffffff8000149d:	48 8b 05 ec ee ff ff 	mov    -0x1114(%rip),%rax        # ffffffff80000390 <isr_stub_table+0x188>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800014a4:	66 89 15 4b e6 00 00 	mov    %dx,0xe64b(%rip)        # ffffffff8000faf6 <idt+0x7f6>
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800014ab:	66 89 05 4e e6 00 00 	mov    %ax,0xe64e(%rip)        # ffffffff8000fb00 <idt+0x800>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800014b2:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800014b5:	48 c1 e8 20          	shr    $0x20,%rax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800014b9:	48 c1 ea 10          	shr    $0x10,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800014bd:	89 05 45 e6 00 00    	mov    %eax,0xe645(%rip)        # ffffffff8000fb08 <idt+0x808>

    pic_remap();
ffffffff800014c3:	31 c0                	xor    %eax,%eax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800014c5:	66 89 15 3a e6 00 00 	mov    %dx,0xe63a(%rip)        # ffffffff8000fb06 <idt+0x806>
    entry->kernel_cs = cs;
ffffffff800014cc:	c7 05 2c e6 00 00 08 	movl   $0x8e000008,0xe62c(%rip)        # ffffffff8000fb02 <idt+0x802>
ffffffff800014d3:	00 00 8e 
    entry->reserved = 0;
ffffffff800014d6:	c7 05 2c e6 00 00 00 	movl   $0x0,0xe62c(%rip)        # ffffffff8000fb0c <idt+0x80c>
ffffffff800014dd:	00 00 00 
    pic_remap();
ffffffff800014e0:	e8 9b f9 ff ff       	callq  ffffffff80000e80 <pic_remap>
    pic_disable();
ffffffff800014e5:	31 c0                	xor    %eax,%eax
ffffffff800014e7:	e8 64 f9 ff ff       	callq  ffffffff80000e50 <pic_disable>

    

    idt_load(&idtr);
ffffffff800014ec:	48 c7 c7 e8 f2 00 80 	mov    $0xffffffff8000f2e8,%rdi
ffffffff800014f3:	e8 a0 ee ff ff       	callq  ffffffff80000398 <idt_load>

    pit_init(10000);
ffffffff800014f8:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff800014fd:	e8 7e fa ff ff       	callq  ffffffff80000f80 <pit_init>

    pic_clear_mask(1);
ffffffff80001502:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80001507:	e8 04 f9 ff ff       	callq  ffffffff80000e10 <pic_clear_mask>
    pic_clear_mask(0);
ffffffff8000150c:	31 ff                	xor    %edi,%edi
ffffffff8000150e:	e8 fd f8 ff ff       	callq  ffffffff80000e10 <pic_clear_mask>

    serial_printf(SERIAL_PORT1, "IDT: %p\n", (uint64_t)&idt);
ffffffff80001513:	48 c7 c2 00 f3 00 80 	mov    $0xffffffff8000f300,%rdx
ffffffff8000151a:	31 c0                	xor    %eax,%eax

    //__asm__ volatile ("lidt %0" : : "m"(idtr));
    //__asm__ volatile ("sti");
}
ffffffff8000151c:	5d                   	pop    %rbp
    serial_printf(SERIAL_PORT1, "IDT: %p\n", (uint64_t)&idt);
ffffffff8000151d:	48 c7 c6 7a 53 00 80 	mov    $0xffffffff8000537a,%rsi
ffffffff80001524:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001529:	e9 c2 2c 00 00       	jmpq   ffffffff800041f0 <serial_printf>
ffffffff8000152e:	66 90                	xchg   %ax,%ax

ffffffff80001530 <interrupt_handler>:

uint64_t interrupt_handler(uint64_t rsp)
{
ffffffff80001530:	55                   	push   %rbp
ffffffff80001531:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001534:	41 54                	push   %r12
ffffffff80001536:	53                   	push   %rbx
    struct interrupt_stack_frame* frame = (struct interrupt_stack_frame*)rsp;
    
    if(frame->int_no < 32)
ffffffff80001537:	48 8b 77 78          	mov    0x78(%rdi),%rsi
{
ffffffff8000153b:	48 89 fb             	mov    %rdi,%rbx
    if(frame->int_no < 32)
ffffffff8000153e:	48 83 fe 1f          	cmp    $0x1f,%rsi
ffffffff80001542:	77 1c                	ja     ffffffff80001560 <interrupt_handler+0x30>
    {
        if(frame->cs == 0x08)
ffffffff80001544:	48 83 bf 90 00 00 00 	cmpq   $0x8,0x90(%rdi)
ffffffff8000154b:	08 
ffffffff8000154c:	74 32                	je     ffffffff80001580 <interrupt_handler+0x50>
    {
        printf("Syscall 127\n");
        return rsp;
    }
    return rsp;
ffffffff8000154e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
ffffffff80001552:	48 89 d8             	mov    %rbx,%rax
ffffffff80001555:	5b                   	pop    %rbx
ffffffff80001556:	41 5c                	pop    %r12
ffffffff80001558:	5d                   	pop    %rbp
ffffffff80001559:	c3                   	retq   
ffffffff8000155a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    else if (frame->int_no < 48)
ffffffff80001560:	48 83 fe 2f          	cmp    $0x2f,%rsi
ffffffff80001564:	0f 86 06 02 00 00    	jbe    ffffffff80001770 <interrupt_handler+0x240>
    else if (frame->int_no == 127)
ffffffff8000156a:	48 83 fe 7f          	cmp    $0x7f,%rsi
ffffffff8000156e:	75 de                	jne    ffffffff8000154e <interrupt_handler+0x1e>
        printf("Syscall 127\n");
ffffffff80001570:	48 c7 c7 a9 53 00 80 	mov    $0xffffffff800053a9,%rdi
ffffffff80001577:	31 c0                	xor    %eax,%eax
ffffffff80001579:	e8 b2 2a 00 00       	callq  ffffffff80004030 <printf_>
        return rsp;
ffffffff8000157e:	eb ce                	jmp    ffffffff8000154e <interrupt_handler+0x1e>
            uint64_t cr2 = read_cr2();
ffffffff80001580:	31 c0                	xor    %eax,%eax
ffffffff80001582:	e8 a9 ea ff ff       	callq  ffffffff80000030 <read_cr2>
            serial_printf(SERIAL_PORT1, "CPU Exception: %d  ERR %x  CR2 %p\r\n", frame->int_no, frame->err_no, cr2);
ffffffff80001587:	48 8b 8b 80 00 00 00 	mov    0x80(%rbx),%rcx
ffffffff8000158e:	48 8b 53 78          	mov    0x78(%rbx),%rdx
ffffffff80001592:	48 c7 c6 28 55 00 80 	mov    $0xffffffff80005528,%rsi
ffffffff80001599:	49 89 c0             	mov    %rax,%r8
ffffffff8000159c:	bf f8 03 00 00       	mov    $0x3f8,%edi
            uint64_t cr2 = read_cr2();
ffffffff800015a1:	49 89 c4             	mov    %rax,%r12
            serial_printf(SERIAL_PORT1, "CPU Exception: %d  ERR %x  CR2 %p\r\n", frame->int_no, frame->err_no, cr2);
ffffffff800015a4:	31 c0                	xor    %eax,%eax
ffffffff800015a6:	e8 45 2c 00 00       	callq  ffffffff800041f0 <serial_printf>
            serial_printf(SERIAL_PORT1, _exception_messages[frame->int_no]);
ffffffff800015ab:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff800015af:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800015b4:	48 8b 34 c5 20 56 00 	mov    -0x7fffa9e0(,%rax,8),%rsi
ffffffff800015bb:	80 
ffffffff800015bc:	31 c0                	xor    %eax,%eax
ffffffff800015be:	e8 2d 2c 00 00       	callq  ffffffff800041f0 <serial_printf>
            serial_printf(SERIAL_PORT1, "\n");
ffffffff800015c3:	31 c0                	xor    %eax,%eax
ffffffff800015c5:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800015ca:	48 c7 c6 38 59 00 80 	mov    $0xffffffff80005938,%rsi
ffffffff800015d1:	e8 1a 2c 00 00       	callq  ffffffff800041f0 <serial_printf>
            if (frame->int_no == 0xE) 
ffffffff800015d6:	48 83 7b 78 0e       	cmpq   $0xe,0x78(%rbx)
ffffffff800015db:	0f 84 fc 01 00 00    	je     ffffffff800017dd <interrupt_handler+0x2ad>
            serial_printf(SERIAL_PORT1, "SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff800015e1:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800015e5:	48 8b 8b a0 00 00 00 	mov    0xa0(%rbx),%rcx
ffffffff800015ec:	31 c0                	xor    %eax,%eax
ffffffff800015ee:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800015f3:	48 8b 93 a8 00 00 00 	mov    0xa8(%rbx),%rdx
ffffffff800015fa:	ff b3 88 00 00 00    	pushq  0x88(%rbx)
ffffffff80001600:	48 c7 c6 50 55 00 80 	mov    $0xffffffff80005550,%rsi
ffffffff80001607:	4c 8b 8b 90 00 00 00 	mov    0x90(%rbx),%r9
ffffffff8000160e:	4c 8b 83 98 00 00 00 	mov    0x98(%rbx),%r8
ffffffff80001615:	e8 d6 2b 00 00       	callq  ffffffff800041f0 <serial_printf>
            serial_printf(SERIAL_PORT1, "rax: %x  rbx: %x  rcx: %x  rdx: %x  rsi: %x  rdi: %x\n", frame->rax, frame->rbx, frame->rcx, frame->rdx, frame->rsi, frame->rdi);
ffffffff8000161a:	48 8b 4b 68          	mov    0x68(%rbx),%rcx
ffffffff8000161e:	48 8b 53 70          	mov    0x70(%rbx),%rdx
ffffffff80001622:	ff 73 48             	pushq  0x48(%rbx)
ffffffff80001625:	ff 73 50             	pushq  0x50(%rbx)
ffffffff80001628:	31 c0                	xor    %eax,%eax
ffffffff8000162a:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8000162f:	48 c7 c6 80 55 00 80 	mov    $0xffffffff80005580,%rsi
ffffffff80001636:	4c 8b 4b 58          	mov    0x58(%rbx),%r9
ffffffff8000163a:	4c 8b 43 60          	mov    0x60(%rbx),%r8
ffffffff8000163e:	e8 ad 2b 00 00       	callq  ffffffff800041f0 <serial_printf>
            serial_printf(SERIAL_PORT1, "r8: %x  r9: %x  r10: %x  r11: %x  r12: %x  r13: %x\n", frame->r8, frame->r9, frame->r10, frame->r11, frame->r12, frame->r13);
ffffffff80001643:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80001647:	48 8b 4b 30          	mov    0x30(%rbx),%rcx
ffffffff8000164b:	31 c0                	xor    %eax,%eax
ffffffff8000164d:	48 8b 53 38          	mov    0x38(%rbx),%rdx
ffffffff80001651:	ff 73 10             	pushq  0x10(%rbx)
ffffffff80001654:	48 c7 c6 b8 55 00 80 	mov    $0xffffffff800055b8,%rsi
ffffffff8000165b:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001660:	ff 73 18             	pushq  0x18(%rbx)
ffffffff80001663:	4c 8b 4b 20          	mov    0x20(%rbx),%r9
ffffffff80001667:	4c 8b 43 28          	mov    0x28(%rbx),%r8
ffffffff8000166b:	e8 80 2b 00 00       	callq  ffffffff800041f0 <serial_printf>
            serial_printf(SERIAL_PORT1, "r14: %x  r15: %x\n", frame->r14, frame->r15);
ffffffff80001670:	48 8b 0b             	mov    (%rbx),%rcx
ffffffff80001673:	48 8b 53 08          	mov    0x8(%rbx),%rdx
ffffffff80001677:	31 c0                	xor    %eax,%eax
ffffffff80001679:	48 c7 c6 83 53 00 80 	mov    $0xffffffff80005383,%rsi
ffffffff80001680:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001685:	e8 66 2b 00 00       	callq  ffffffff800041f0 <serial_printf>
            printf("\nCPU Exception! INT %d   ERR %x  CR2 %p\n", frame->int_no, frame->err_no, cr2);
ffffffff8000168a:	48 8b 73 78          	mov    0x78(%rbx),%rsi
ffffffff8000168e:	4c 89 e1             	mov    %r12,%rcx
ffffffff80001691:	31 c0                	xor    %eax,%eax
ffffffff80001693:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff8000169a:	48 c7 c7 f0 55 00 80 	mov    $0xffffffff800055f0,%rdi
ffffffff800016a1:	e8 8a 29 00 00       	callq  ffffffff80004030 <printf_>
            printf(_exception_messages[frame->int_no]);
ffffffff800016a6:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff800016aa:	48 8b 3c c5 20 56 00 	mov    -0x7fffa9e0(,%rax,8),%rdi
ffffffff800016b1:	80 
ffffffff800016b2:	31 c0                	xor    %eax,%eax
ffffffff800016b4:	e8 77 29 00 00       	callq  ffffffff80004030 <printf_>
            printf("\n");
ffffffff800016b9:	48 c7 c7 38 59 00 80 	mov    $0xffffffff80005938,%rdi
ffffffff800016c0:	31 c0                	xor    %eax,%eax
ffffffff800016c2:	e8 69 29 00 00       	callq  ffffffff80004030 <printf_>
            if (frame->int_no == 0xE) 
ffffffff800016c7:	48 83 7b 78 0e       	cmpq   $0xe,0x78(%rbx)
ffffffff800016cc:	5e                   	pop    %rsi
ffffffff800016cd:	5f                   	pop    %rdi
ffffffff800016ce:	0f 84 e0 00 00 00    	je     ffffffff800017b4 <interrupt_handler+0x284>
            printf("SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff800016d4:	48 8b 8b 98 00 00 00 	mov    0x98(%rbx),%rcx
ffffffff800016db:	48 8b 93 a0 00 00 00 	mov    0xa0(%rbx),%rdx
ffffffff800016e2:	31 c0                	xor    %eax,%eax
ffffffff800016e4:	48 c7 c7 50 55 00 80 	mov    $0xffffffff80005550,%rdi
ffffffff800016eb:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
ffffffff800016f2:	4c 8b 8b 88 00 00 00 	mov    0x88(%rbx),%r9
ffffffff800016f9:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80001700:	e8 2b 29 00 00       	callq  ffffffff80004030 <printf_>
            printf("rax: %x  rbx: %x  rcx: %x  rdx: %x  rsi: %x  rdi: %x\n", frame->rax, frame->rbx, frame->rcx, frame->rdx, frame->rsi, frame->rdi);
ffffffff80001705:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80001709:	48 8b 4b 60          	mov    0x60(%rbx),%rcx
ffffffff8000170d:	31 c0                	xor    %eax,%eax
ffffffff8000170f:	48 8b 53 68          	mov    0x68(%rbx),%rdx
ffffffff80001713:	48 8b 73 70          	mov    0x70(%rbx),%rsi
ffffffff80001717:	ff 73 48             	pushq  0x48(%rbx)
ffffffff8000171a:	48 c7 c7 80 55 00 80 	mov    $0xffffffff80005580,%rdi
ffffffff80001721:	4c 8b 4b 50          	mov    0x50(%rbx),%r9
ffffffff80001725:	4c 8b 43 58          	mov    0x58(%rbx),%r8
ffffffff80001729:	e8 02 29 00 00       	callq  ffffffff80004030 <printf_>
            printf("r8: %x  r9: %x  r10: %x  r11: %x  r12: %x  r13: %x\n", frame->r8, frame->r9, frame->r10, frame->r11, frame->r12, frame->r13);
ffffffff8000172e:	58                   	pop    %rax
ffffffff8000172f:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff80001733:	31 c0                	xor    %eax,%eax
ffffffff80001735:	48 8b 53 30          	mov    0x30(%rbx),%rdx
ffffffff80001739:	48 8b 73 38          	mov    0x38(%rbx),%rsi
ffffffff8000173d:	ff 73 10             	pushq  0x10(%rbx)
ffffffff80001740:	48 c7 c7 b8 55 00 80 	mov    $0xffffffff800055b8,%rdi
ffffffff80001747:	4c 8b 4b 18          	mov    0x18(%rbx),%r9
ffffffff8000174b:	4c 8b 43 20          	mov    0x20(%rbx),%r8
ffffffff8000174f:	e8 dc 28 00 00       	callq  ffffffff80004030 <printf_>
            printf("r14: %x  r15: %x\n", frame->r14, frame->r15);
ffffffff80001754:	48 8b 13             	mov    (%rbx),%rdx
ffffffff80001757:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff8000175b:	31 c0                	xor    %eax,%eax
ffffffff8000175d:	48 c7 c7 83 53 00 80 	mov    $0xffffffff80005383,%rdi
ffffffff80001764:	e8 c7 28 00 00       	callq  ffffffff80004030 <printf_>
            asm("cli");
ffffffff80001769:	fa                   	cli    
            asm("hlt");
ffffffff8000176a:	f4                   	hlt    
ffffffff8000176b:	5a                   	pop    %rdx
ffffffff8000176c:	59                   	pop    %rcx
            for(;;);
ffffffff8000176d:	eb fe                	jmp    ffffffff8000176d <interrupt_handler+0x23d>
ffffffff8000176f:	90                   	nop
        uint64_t irq = frame->int_no - 32;
ffffffff80001770:	4c 8d 66 e0          	lea    -0x20(%rsi),%r12
        if(irq > 1)
ffffffff80001774:	49 83 fc 01          	cmp    $0x1,%r12
ffffffff80001778:	77 27                	ja     ffffffff800017a1 <interrupt_handler+0x271>
        switch(irq)
ffffffff8000177a:	74 1c                	je     ffffffff80001798 <interrupt_handler+0x268>
                pit_ticks++;
ffffffff8000177c:	48 83 05 5c db 00 00 	addq   $0x1,0xdb5c(%rip)        # ffffffff8000f2e0 <pit_ticks>
ffffffff80001783:	01 
        pic_EOI(irq);
ffffffff80001784:	44 89 e7             	mov    %r12d,%edi
ffffffff80001787:	e8 f4 f5 ff ff       	callq  ffffffff80000d80 <pic_EOI>
ffffffff8000178c:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
ffffffff80001790:	48 89 d8             	mov    %rbx,%rax
ffffffff80001793:	5b                   	pop    %rbx
ffffffff80001794:	41 5c                	pop    %r12
ffffffff80001796:	5d                   	pop    %rbp
ffffffff80001797:	c3                   	retq   
                kbd_handle();
ffffffff80001798:	31 c0                	xor    %eax,%eax
ffffffff8000179a:	e8 21 f5 ff ff       	callq  ffffffff80000cc0 <kbd_handle>
                break;
ffffffff8000179f:	eb e3                	jmp    ffffffff80001784 <interrupt_handler+0x254>
            printf("INT: %d  IRQ: %d  \n", frame->int_no, irq);
ffffffff800017a1:	4c 89 e2             	mov    %r12,%rdx
ffffffff800017a4:	48 c7 c7 95 53 00 80 	mov    $0xffffffff80005395,%rdi
ffffffff800017ab:	31 c0                	xor    %eax,%eax
ffffffff800017ad:	e8 7e 28 00 00       	callq  ffffffff80004030 <printf_>
        switch(irq)
ffffffff800017b2:	eb d0                	jmp    ffffffff80001784 <interrupt_handler+0x254>
                printf(_page_fault_errors[frame->err_no]);
ffffffff800017b4:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff800017bb:	48 8b 3c c5 20 57 00 	mov    -0x7fffa8e0(,%rax,8),%rdi
ffffffff800017c2:	80 
ffffffff800017c3:	31 c0                	xor    %eax,%eax
ffffffff800017c5:	e8 66 28 00 00       	callq  ffffffff80004030 <printf_>
                printf("\n");
ffffffff800017ca:	48 c7 c7 38 59 00 80 	mov    $0xffffffff80005938,%rdi
ffffffff800017d1:	31 c0                	xor    %eax,%eax
ffffffff800017d3:	e8 58 28 00 00       	callq  ffffffff80004030 <printf_>
ffffffff800017d8:	e9 f7 fe ff ff       	jmpq   ffffffff800016d4 <interrupt_handler+0x1a4>
                serial_printf(SERIAL_PORT1, _page_fault_errors[frame->err_no]);
ffffffff800017dd:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff800017e4:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800017e9:	48 8b 34 c5 20 57 00 	mov    -0x7fffa8e0(,%rax,8),%rsi
ffffffff800017f0:	80 
ffffffff800017f1:	31 c0                	xor    %eax,%eax
ffffffff800017f3:	e8 f8 29 00 00       	callq  ffffffff800041f0 <serial_printf>
                serial_printf(SERIAL_PORT1, "\n");
ffffffff800017f8:	48 c7 c6 38 59 00 80 	mov    $0xffffffff80005938,%rsi
ffffffff800017ff:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001804:	31 c0                	xor    %eax,%eax
ffffffff80001806:	e8 e5 29 00 00       	callq  ffffffff800041f0 <serial_printf>
ffffffff8000180b:	e9 d1 fd ff ff       	jmpq   ffffffff800015e1 <interrupt_handler+0xb1>

ffffffff80001810 <outb>:
#include <stdint.h>
#include <stddef.h>

void outb(uint16_t port, uint8_t val)
{
    asm volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80001810:	89 f0                	mov    %esi,%eax
ffffffff80001812:	89 fa                	mov    %edi,%edx
ffffffff80001814:	ee                   	out    %al,(%dx)
}
ffffffff80001815:	c3                   	retq   
ffffffff80001816:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000181d:	00 00 00 

ffffffff80001820 <inb>:

uint8_t inb(uint16_t port)
{
    uint8_t ret;
    asm volatile ( "inb %1, %0"
ffffffff80001820:	89 fa                	mov    %edi,%edx
ffffffff80001822:	ec                   	in     (%dx),%al
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
}
ffffffff80001823:	c3                   	retq   
ffffffff80001824:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000182b:	00 00 00 00 
ffffffff8000182f:	90                   	nop

ffffffff80001830 <io_wait>:
    asm volatile ( "inb %1, %0"
ffffffff80001830:	e4 80                	in     $0x80,%al

void io_wait()
{
    inb(0x80);
ffffffff80001832:	c3                   	retq   
ffffffff80001833:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000183a:	00 00 00 
ffffffff8000183d:	0f 1f 00             	nopl   (%rax)

ffffffff80001840 <kernel>:
#include <libk/liballoc.h>
#include "./device/serial/stty.h"
#include "./usermode/usermode.h"

void kernel()
{
ffffffff80001840:	55                   	push   %rbp
    //printf("Kernel Now\n");
    serial_init(0x3F8);     //COM1
ffffffff80001841:	bf f8 03 00 00       	mov    $0x3f8,%edi
{
ffffffff80001846:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001849:	53                   	push   %rbx
ffffffff8000184a:	48 83 ec 08          	sub    $0x8,%rsp
    serial_init(0x3F8);     //COM1
ffffffff8000184e:	e8 8d f7 ff ff       	callq  ffffffff80000fe0 <serial_init>
    gdt_init();
ffffffff80001853:	31 c0                	xor    %eax,%eax
ffffffff80001855:	e8 16 fa ff ff       	callq  ffffffff80001270 <gdt_init>
    idt_init();
ffffffff8000185a:	31 c0                	xor    %eax,%eax
ffffffff8000185c:	e8 8f fb ff ff       	callq  ffffffff800013f0 <idt_init>
    fb_init();
ffffffff80001861:	31 c0                	xor    %eax,%eax
ffffffff80001863:	e8 38 f3 ff ff       	callq  ffffffff80000ba0 <fb_init>
    console_init();
ffffffff80001868:	31 c0                	xor    %eax,%eax
ffffffff8000186a:	e8 d1 f1 ff ff       	callq  ffffffff80000a40 <console_init>

    pmm_init();
ffffffff8000186f:	31 c0                	xor    %eax,%eax
ffffffff80001871:	e8 ca 08 00 00       	callq  ffffffff80002140 <pmm_init>
    vmm_init();
ffffffff80001876:	31 c0                	xor    %eax,%eax
ffffffff80001878:	e8 13 14 00 00       	callq  ffffffff80002c90 <vmm_init>

    user_init();
ffffffff8000187d:	31 c0                	xor    %eax,%eax
ffffffff8000187f:	e8 8c 16 00 00       	callq  ffffffff80002f10 <user_init>
    
    serial_printf(SERIAL_PORT1, "Kernel Physical Base Address %x\n", boot_info.tag_kernel_base_address->physical_base_address);
ffffffff80001884:	48 8b 05 f5 74 00 00 	mov    0x74f5(%rip),%rax        # ffffffff80008d80 <boot_info>
ffffffff8000188b:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001890:	48 c7 c6 68 57 00 80 	mov    $0xffffffff80005768,%rsi
ffffffff80001897:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff8000189b:	31 c0                	xor    %eax,%eax
ffffffff8000189d:	e8 4e 29 00 00       	callq  ffffffff800041f0 <serial_printf>
    serial_printf(SERIAL_PORT1, "Kernel Virtual Base Address  %x\n", boot_info.tag_kernel_base_address->virtual_base_address);
ffffffff800018a2:	48 8b 05 d7 74 00 00 	mov    0x74d7(%rip),%rax        # ffffffff80008d80 <boot_info>
ffffffff800018a9:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800018ae:	48 c7 c6 90 57 00 80 	mov    $0xffffffff80005790,%rsi
ffffffff800018b5:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff800018b9:	31 c0                	xor    %eax,%eax
ffffffff800018bb:	e8 30 29 00 00       	callq  ffffffff800041f0 <serial_printf>

    serial_printf(SERIAL_PORT1, "PMRS Entries:  %d\n", boot_info.tag_pmrs->entries);
ffffffff800018c0:	48 8b 05 f9 74 00 00 	mov    0x74f9(%rip),%rax        # ffffffff80008dc0 <boot_info+0x40>
ffffffff800018c7:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800018cc:	48 c7 c6 e1 57 00 80 	mov    $0xffffffff800057e1,%rsi
ffffffff800018d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff800018d7:	31 c0                	xor    %eax,%eax
ffffffff800018d9:	e8 12 29 00 00       	callq  ffffffff800041f0 <serial_printf>
    for(uint64_t i = 0; i < boot_info.tag_pmrs->entries; i++)
ffffffff800018de:	48 8b 05 db 74 00 00 	mov    0x74db(%rip),%rax        # ffffffff80008dc0 <boot_info+0x40>
ffffffff800018e5:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
ffffffff800018ea:	74 3c                	je     ffffffff80001928 <kernel+0xe8>
ffffffff800018ec:	31 db                	xor    %ebx,%ebx
ffffffff800018ee:	66 90                	xchg   %ax,%ax
    {
        serial_printf(SERIAL_PORT1, "Base: %p,  Length: %x,  Permissions: %d\n", boot_info.tag_pmrs->pmrs[i].base, boot_info.tag_pmrs->pmrs[i].length, boot_info.tag_pmrs->pmrs[i].permissions);
ffffffff800018f0:	48 8d 14 5b          	lea    (%rbx,%rbx,2),%rdx
ffffffff800018f4:	48 c7 c6 b8 57 00 80 	mov    $0xffffffff800057b8,%rsi
ffffffff800018fb:	bf f8 03 00 00       	mov    $0x3f8,%edi
    for(uint64_t i = 0; i < boot_info.tag_pmrs->entries; i++)
ffffffff80001900:	48 83 c3 01          	add    $0x1,%rbx
        serial_printf(SERIAL_PORT1, "Base: %p,  Length: %x,  Permissions: %d\n", boot_info.tag_pmrs->pmrs[i].base, boot_info.tag_pmrs->pmrs[i].length, boot_info.tag_pmrs->pmrs[i].permissions);
ffffffff80001904:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
ffffffff80001908:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff8000190c:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80001910:	4c 8b 40 28          	mov    0x28(%rax),%r8
ffffffff80001914:	31 c0                	xor    %eax,%eax
ffffffff80001916:	e8 d5 28 00 00       	callq  ffffffff800041f0 <serial_printf>
    for(uint64_t i = 0; i < boot_info.tag_pmrs->entries; i++)
ffffffff8000191b:	48 8b 05 9e 74 00 00 	mov    0x749e(%rip),%rax        # ffffffff80008dc0 <boot_info+0x40>
ffffffff80001922:	48 3b 58 10          	cmp    0x10(%rax),%rbx
ffffffff80001926:	72 c8                	jb     ffffffff800018f0 <kernel+0xb0>

    



    printf("Kernel Done!\n"); 
ffffffff80001928:	48 c7 c7 f4 57 00 80 	mov    $0xffffffff800057f4,%rdi
ffffffff8000192f:	31 c0                	xor    %eax,%eax
ffffffff80001931:	e8 fa 26 00 00       	callq  ffffffff80004030 <printf_>

    while(true)
ffffffff80001936:	eb fe                	jmp    ffffffff80001936 <kernel+0xf6>
ffffffff80001938:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000193f:	00 

ffffffff80001940 <allocate_new_page>:


// ***************************************************************

static struct liballoc_major *allocate_new_page( unsigned int size )
{
ffffffff80001940:	55                   	push   %rbp
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
		st += sizeof(struct liballoc_minor);
ffffffff80001941:	83 c7 50             	add    $0x50,%edi

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff80001944:	ba 10 00 00 00       	mov    $0x10,%edx
			st  = st / (l_pageSize);
ffffffff80001949:	89 f8                	mov    %edi,%eax
		if ( (st % l_pageSize) == 0 )
ffffffff8000194b:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
			st  = st / (l_pageSize);
ffffffff80001951:	c1 e8 0c             	shr    $0xc,%eax
{
ffffffff80001954:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001957:	53                   	push   %rbx
ffffffff80001958:	48 83 ec 08          	sub    $0x8,%rsp
		else
			st  = st / (l_pageSize) + 1;
ffffffff8000195c:	83 ff 01             	cmp    $0x1,%edi
ffffffff8000195f:	83 d8 ff             	sbb    $0xffffffff,%eax
							// No, add the buffer. 

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
ffffffff80001962:	39 d0                	cmp    %edx,%eax
ffffffff80001964:	0f 43 d0             	cmovae %eax,%edx
ffffffff80001967:	89 d7                	mov    %edx,%edi
ffffffff80001969:	48 89 fb             	mov    %rdi,%rbx
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff8000196c:	e8 3f 07 00 00       	callq  ffffffff800020b0 <liballoc_alloc>

		if ( maj == NULL ) 
ffffffff80001971:	48 85 c0             	test   %rax,%rax
ffffffff80001974:	74 3a                	je     ffffffff800019b0 <allocate_new_page+0x70>
			return NULL;	// uh oh, we ran out of memory.
		}
		
		maj->prev 	= NULL;
		maj->next 	= NULL;
		maj->pages 	= st;
ffffffff80001976:	89 58 10             	mov    %ebx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff80001979:	c1 e3 0c             	shl    $0xc,%ebx
		maj->usage 	= sizeof(struct liballoc_major);
		maj->first 	= NULL;

		l_allocated += maj->size;
ffffffff8000197c:	48 01 1d 9d e9 00 00 	add    %rbx,0xe99d(%rip)        # ffffffff80010320 <l_allocated>
		maj->prev 	= NULL;
ffffffff80001983:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff8000198a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80001991:	00 
		maj->size 	= st * l_pageSize;
ffffffff80001992:	89 58 14             	mov    %ebx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80001995:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff8000199c:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff800019a3:	00 
		FLUSH();
		#endif
	
		
      return maj;
}
ffffffff800019a4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff800019a8:	c9                   	leaveq 
ffffffff800019a9:	c3                   	retq   
ffffffff800019aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			l_warningCount += 1;
ffffffff800019b0:	48 83 05 58 e9 00 00 	addq   $0x1,0xe958(%rip)        # ffffffff80010310 <l_warningCount>
ffffffff800019b7:	01 
			return NULL;	// uh oh, we ran out of memory.
ffffffff800019b8:	eb ea                	jmp    ffffffff800019a4 <allocate_new_page+0x64>
ffffffff800019ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff800019c0 <kmalloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff800019c0:	55                   	push   %rbp
		size += ALIGNMENT + ALIGN_INFO;
	}
				// So, ideally, we really want an alignment of 0 or 1 in order
				// to save space.
	
	liballoc_lock();
ffffffff800019c1:	31 c0                	xor    %eax,%eax
{
ffffffff800019c3:	48 89 e5             	mov    %rsp,%rbp
ffffffff800019c6:	41 57                	push   %r15
ffffffff800019c8:	41 56                	push   %r14
		size += ALIGNMENT + ALIGN_INFO;
ffffffff800019ca:	4c 8d 77 20          	lea    0x20(%rdi),%r14
{
ffffffff800019ce:	41 55                	push   %r13
ffffffff800019d0:	49 89 fd             	mov    %rdi,%r13
ffffffff800019d3:	41 54                	push   %r12
ffffffff800019d5:	53                   	push   %rbx
ffffffff800019d6:	48 83 ec 18          	sub    $0x18,%rsp
	liballoc_lock();
ffffffff800019da:	e8 a1 06 00 00       	callq  ffffffff80002080 <liballoc_lock>

	if ( size == 0 )
ffffffff800019df:	4d 85 f6             	test   %r14,%r14
ffffffff800019e2:	75 22                	jne    ffffffff80001a06 <kmalloc+0x46>
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff800019e4:	31 c0                	xor    %eax,%eax
		l_warningCount += 1;
ffffffff800019e6:	48 83 05 22 e9 00 00 	addq   $0x1,0xe922(%rip)        # ffffffff80010310 <l_warningCount>
ffffffff800019ed:	01 
		size += ALIGNMENT + ALIGN_INFO;
ffffffff800019ee:	41 be 21 00 00 00    	mov    $0x21,%r14d
		return PREFIX(malloc)(1);
ffffffff800019f4:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		liballoc_unlock();
ffffffff800019fa:	e8 91 06 00 00       	callq  ffffffff80002090 <liballoc_unlock>
	liballoc_lock();
ffffffff800019ff:	31 c0                	xor    %eax,%eax
ffffffff80001a01:	e8 7a 06 00 00       	callq  ffffffff80002080 <liballoc_lock>
	}
	

	if ( l_memRoot == NULL )
ffffffff80001a06:	48 8b 05 23 e9 00 00 	mov    0xe923(%rip),%rax        # ffffffff80010330 <l_memRoot>
ffffffff80001a0d:	48 85 c0             	test   %rax,%rax
ffffffff80001a10:	0f 84 49 02 00 00    	je     ffffffff80001c5f <kmalloc+0x29f>

	maj = l_memRoot;
	startedBet = 0;
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80001a16:	48 8b 1d 0b e9 00 00 	mov    0xe90b(%rip),%rbx        # ffffffff80010328 <l_bestBet>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80001a1d:	4d 8d 65 48          	lea    0x48(%r13),%r12
	if ( l_bestBet != NULL )
ffffffff80001a21:	48 85 db             	test   %rbx,%rbx
ffffffff80001a24:	0f 84 ee 01 00 00    	je     ffffffff80001c18 <kmalloc+0x258>
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80001a2a:	8b 53 14             	mov    0x14(%rbx),%edx
ffffffff80001a2d:	8b 4b 18             	mov    0x18(%rbx),%ecx
		{
			maj = l_bestBet;
			startedBet = 1;
ffffffff80001a30:	41 b8 01 00 00 00    	mov    $0x1,%r8d
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80001a36:	41 89 d7             	mov    %edx,%r15d
ffffffff80001a39:	41 29 cf             	sub    %ecx,%r15d
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80001a3c:	4d 39 fc             	cmp    %r15,%r12
ffffffff80001a3f:	0f 83 bb 01 00 00    	jae    ffffffff80001c00 <kmalloc+0x240>
		}
	}
	
	while ( maj != NULL )
	{
		diff  = maj->size - maj->usage;	
ffffffff80001a45:	89 d0                	mov    %edx,%eax
ffffffff80001a47:	29 c8                	sub    %ecx,%eax
										// free memory in the block

		if ( bestSize < diff )
ffffffff80001a49:	49 39 c7             	cmp    %rax,%r15
ffffffff80001a4c:	73 0a                	jae    ffffffff80001a58 <kmalloc+0x98>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff80001a4e:	48 89 1d d3 e8 00 00 	mov    %rbx,0xe8d3(%rip)        # ffffffff80010328 <l_bestBet>
ffffffff80001a55:	49 89 c7             	mov    %rax,%r15
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80001a58:	4c 39 e0             	cmp    %r12,%rax
ffffffff80001a5b:	73 24                	jae    ffffffff80001a81 <kmalloc+0xc1>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80001a5d:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80001a61:	48 85 c0             	test   %rax,%rax
ffffffff80001a64:	0f 84 26 01 00 00    	je     ffffffff80001b90 <kmalloc+0x1d0>
		diff  = maj->size - maj->usage;	
ffffffff80001a6a:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80001a6d:	8b 48 18             	mov    0x18(%rax),%ecx
ffffffff80001a70:	48 89 c3             	mov    %rax,%rbx
ffffffff80001a73:	89 d0                	mov    %edx,%eax
ffffffff80001a75:	29 c8                	sub    %ecx,%eax
		if ( bestSize < diff )
ffffffff80001a77:	49 39 c7             	cmp    %rax,%r15
ffffffff80001a7a:	72 d2                	jb     ffffffff80001a4e <kmalloc+0x8e>
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80001a7c:	4c 39 e0             	cmp    %r12,%rax
ffffffff80001a7f:	72 dc                	jb     ffffffff80001a5d <kmalloc+0x9d>
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80001a81:	48 8b 43 20          	mov    0x20(%rbx),%rax
ffffffff80001a85:	48 85 c0             	test   %rax,%rax
ffffffff80001a88:	0f 84 f7 01 00 00    	je     ffffffff80001c85 <kmalloc+0x2c5>
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
		diff -= (uintptr_t)maj;
ffffffff80001a8e:	48 89 c2             	mov    %rax,%rdx
ffffffff80001a91:	48 29 da             	sub    %rbx,%rdx
		diff -= sizeof(struct liballoc_major);
ffffffff80001a94:	48 83 ea 28          	sub    $0x28,%rdx

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff80001a98:	4c 39 e2             	cmp    %r12,%rdx
ffffffff80001a9b:	0f 83 40 02 00 00    	jae    ffffffff80001ce1 <kmalloc+0x321>
ffffffff80001aa1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		
			// Looping within the block now...
		while ( min != NULL )
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80001aa8:	48 89 c1             	mov    %rax,%rcx
ffffffff80001aab:	48 8b 40 08          	mov    0x8(%rax),%rax
				{
					// the rest of this block is free...  is it big enough?
					diff = (uintptr_t)(maj) + maj->size;
					diff -= (uintptr_t)min;
					diff -= sizeof( struct liballoc_minor );
					diff -= min->size; 
ffffffff80001aaf:	8b 71 1c             	mov    0x1c(%rcx),%esi
				if ( min->next == NULL )
ffffffff80001ab2:	48 85 c0             	test   %rax,%rax
ffffffff80001ab5:	0f 84 85 00 00 00    	je     ffffffff80001b40 <kmalloc+0x180>
				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
					diff -= (uintptr_t)min;
ffffffff80001abb:	48 89 c2             	mov    %rax,%rdx
ffffffff80001abe:	48 29 ca             	sub    %rcx,%rdx
					diff -= sizeof( struct liballoc_minor );
ffffffff80001ac1:	48 83 ea 28          	sub    $0x28,%rdx
					diff -= min->size;
ffffffff80001ac5:	48 29 f2             	sub    %rsi,%rdx
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80001ac8:	4c 39 e2             	cmp    %r12,%rdx
ffffffff80001acb:	72 db                	jb     ffffffff80001aa8 <kmalloc+0xe8>
					{
						// yay......
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80001acd:	48 01 ce             	add    %rcx,%rsi

						new_min->magic = LIBALLOC_MAGIC;
						new_min->next = min->next;
ffffffff80001ad0:	48 89 46 30          	mov    %rax,0x30(%rsi)
						new_min->prev = min;
						new_min->size = size;
						new_min->req_size = req_size;
						new_min->block = maj;
						min->next->prev = new_min;
ffffffff80001ad4:	48 8b 41 08          	mov    0x8(%rcx),%rax
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80001ad8:	48 8d 56 28          	lea    0x28(%rsi),%rdx
						new_min->magic = LIBALLOC_MAGIC;
ffffffff80001adc:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						new_min->prev = min;
ffffffff80001ae3:	48 89 4e 28          	mov    %rcx,0x28(%rsi)
						new_min->size = size;
ffffffff80001ae7:	44 89 76 44          	mov    %r14d,0x44(%rsi)
						new_min->req_size = req_size;
ffffffff80001aeb:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						new_min->block = maj;
ffffffff80001aef:	48 89 5e 38          	mov    %rbx,0x38(%rsi)
						min->next->prev = new_min;
ffffffff80001af3:	48 89 10             	mov    %rdx,(%rax)
						min->next = new_min;
ffffffff80001af6:	48 89 51 08          	mov    %rdx,0x8(%rcx)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80001afa:	41 8d 46 28          	lea    0x28(%r14),%eax
						
						l_inuse += size;
ffffffff80001afe:	4c 01 35 13 e8 00 00 	add    %r14,0xe813(%rip)        # ffffffff80010318 <l_inuse>
						
						p = (void*)((uintptr_t)new_min + sizeof( struct liballoc_minor ));
						ALIGN( p );
ffffffff80001b05:	48 8d 56 60          	lea    0x60(%rsi),%rdx
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80001b09:	01 43 18             	add    %eax,0x18(%rbx)
						ALIGN( p );
ffffffff80001b0c:	83 e6 0f             	and    $0xf,%esi
ffffffff80001b0f:	0f 85 cb 00 00 00    	jne    ffffffff80001be0 <kmalloc+0x220>
ffffffff80001b15:	48 89 d3             	mov    %rdx,%rbx
ffffffff80001b18:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001b1d:	88 42 f0             	mov    %al,-0x10(%rdx)
						#ifdef DEBUG
						printf( "CASE 4.2: returning %x\n", p); 
						FLUSH();
						#endif
						
						liballoc_unlock();		// release the lock
ffffffff80001b20:	31 c0                	xor    %eax,%eax
ffffffff80001b22:	e8 69 05 00 00       	callq  ffffffff80002090 <liballoc_unlock>
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
}
ffffffff80001b27:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001b2b:	48 89 d8             	mov    %rbx,%rax
ffffffff80001b2e:	5b                   	pop    %rbx
ffffffff80001b2f:	41 5c                	pop    %r12
ffffffff80001b31:	41 5d                	pop    %r13
ffffffff80001b33:	41 5e                	pop    %r14
ffffffff80001b35:	41 5f                	pop    %r15
ffffffff80001b37:	5d                   	pop    %rbp
ffffffff80001b38:	c3                   	retq   
ffffffff80001b39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80001b40:	8b 43 14             	mov    0x14(%rbx),%eax
					diff -= sizeof( struct liballoc_minor );
ffffffff80001b43:	48 8d 44 03 d8       	lea    -0x28(%rbx,%rax,1),%rax
ffffffff80001b48:	48 29 c8             	sub    %rcx,%rax
					diff -= min->size; 
ffffffff80001b4b:	48 29 f0             	sub    %rsi,%rax
					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80001b4e:	4c 39 e0             	cmp    %r12,%rax
ffffffff80001b51:	0f 83 d9 00 00 00    	jae    ffffffff80001c30 <kmalloc+0x270>
		if ( maj->next == NULL ) 
ffffffff80001b57:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80001b5b:	48 85 c0             	test   %rax,%rax
ffffffff80001b5e:	0f 85 06 ff ff ff    	jne    ffffffff80001a6a <kmalloc+0xaa>
			if ( startedBet == 1 )
ffffffff80001b64:	41 83 f8 01          	cmp    $0x1,%r8d
ffffffff80001b68:	74 2c                	je     ffffffff80001b96 <kmalloc+0x1d6>
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80001b6a:	44 89 f7             	mov    %r14d,%edi
ffffffff80001b6d:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
ffffffff80001b71:	e8 ca fd ff ff       	callq  ffffffff80001940 <allocate_new_page>
ffffffff80001b76:	48 89 43 08          	mov    %rax,0x8(%rbx)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80001b7a:	48 85 c0             	test   %rax,%rax
ffffffff80001b7d:	0f 84 f4 00 00 00    	je     ffffffff80001c77 <kmalloc+0x2b7>
			maj->next->prev = maj;
ffffffff80001b83:	48 89 18             	mov    %rbx,(%rax)
	while ( maj != NULL )
ffffffff80001b86:	44 8b 45 cc          	mov    -0x34(%rbp),%r8d
ffffffff80001b8a:	e9 db fe ff ff       	jmpq   ffffffff80001a6a <kmalloc+0xaa>
ffffffff80001b8f:	90                   	nop
			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80001b90:	41 83 f8 01          	cmp    $0x1,%r8d
ffffffff80001b94:	75 1a                	jne    ffffffff80001bb0 <kmalloc+0x1f0>
				maj = l_memRoot;
ffffffff80001b96:	48 8b 05 93 e7 00 00 	mov    0xe793(%rip),%rax        # ffffffff80010330 <l_memRoot>
	while ( maj != NULL )
ffffffff80001b9d:	48 85 c0             	test   %rax,%rax
ffffffff80001ba0:	0f 84 d1 00 00 00    	je     ffffffff80001c77 <kmalloc+0x2b7>
ffffffff80001ba6:	45 31 c0             	xor    %r8d,%r8d
ffffffff80001ba9:	e9 bc fe ff ff       	jmpq   ffffffff80001a6a <kmalloc+0xaa>
ffffffff80001bae:	66 90                	xchg   %ax,%ax
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80001bb0:	44 89 f7             	mov    %r14d,%edi
ffffffff80001bb3:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
ffffffff80001bb7:	e8 84 fd ff ff       	callq  ffffffff80001940 <allocate_new_page>
ffffffff80001bbc:	48 89 43 08          	mov    %rax,0x8(%rbx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80001bc0:	48 85 c0             	test   %rax,%rax
ffffffff80001bc3:	0f 84 ae 00 00 00    	je     ffffffff80001c77 <kmalloc+0x2b7>
			maj->next->prev = maj;
ffffffff80001bc9:	48 89 18             	mov    %rbx,(%rax)
ffffffff80001bcc:	44 8b 45 cc          	mov    -0x34(%rbp),%r8d
ffffffff80001bd0:	48 89 c3             	mov    %rax,%rbx
ffffffff80001bd3:	e9 a9 fe ff ff       	jmpq   ffffffff80001a81 <kmalloc+0xc1>
ffffffff80001bd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001bdf:	00 
						ALIGN( p );
ffffffff80001be0:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001be5:	48 29 f0             	sub    %rsi,%rax
ffffffff80001be8:	48 01 c2             	add    %rax,%rdx
ffffffff80001beb:	83 c0 10             	add    $0x10,%eax
ffffffff80001bee:	48 89 d3             	mov    %rdx,%rbx
ffffffff80001bf1:	e9 27 ff ff ff       	jmpq   ffffffff80001b1d <kmalloc+0x15d>
ffffffff80001bf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001bfd:	00 00 00 
		diff  = maj->size - maj->usage;	
ffffffff80001c00:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80001c03:	8b 48 18             	mov    0x18(%rax),%ecx
	maj = l_memRoot;
ffffffff80001c06:	48 89 c3             	mov    %rax,%rbx
		diff  = maj->size - maj->usage;	
ffffffff80001c09:	45 31 c0             	xor    %r8d,%r8d
ffffffff80001c0c:	e9 34 fe ff ff       	jmpq   ffffffff80001a45 <kmalloc+0x85>
ffffffff80001c11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001c18:	8b 50 14             	mov    0x14(%rax),%edx
ffffffff80001c1b:	8b 48 18             	mov    0x18(%rax),%ecx
	maj = l_memRoot;
ffffffff80001c1e:	48 89 c3             	mov    %rax,%rbx
	unsigned long long bestSize = 0;
ffffffff80001c21:	45 31 ff             	xor    %r15d,%r15d
		diff  = maj->size - maj->usage;	
ffffffff80001c24:	45 31 c0             	xor    %r8d,%r8d
ffffffff80001c27:	e9 19 fe ff ff       	jmpq   ffffffff80001a45 <kmalloc+0x85>
ffffffff80001c2c:	0f 1f 40 00          	nopl   0x0(%rax)
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80001c30:	48 01 ce             	add    %rcx,%rsi
ffffffff80001c33:	48 8d 46 28          	lea    0x28(%rsi),%rax
ffffffff80001c37:	48 89 41 08          	mov    %rax,0x8(%rcx)
						min->next->prev = min;
ffffffff80001c3b:	48 89 4e 28          	mov    %rcx,0x28(%rsi)
						min->next = NULL;
ffffffff80001c3f:	48 c7 46 30 00 00 00 	movq   $0x0,0x30(%rsi)
ffffffff80001c46:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff80001c47:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						min->block = maj;
ffffffff80001c4e:	48 89 5e 38          	mov    %rbx,0x38(%rsi)
						min->size = size;
ffffffff80001c52:	44 89 76 44          	mov    %r14d,0x44(%rsi)
						min->req_size = req_size;
ffffffff80001c56:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80001c5a:	e9 9b fe ff ff       	jmpq   ffffffff80001afa <kmalloc+0x13a>
		l_memRoot = allocate_new_page( size );
ffffffff80001c5f:	44 89 f7             	mov    %r14d,%edi
ffffffff80001c62:	e8 d9 fc ff ff       	callq  ffffffff80001940 <allocate_new_page>
ffffffff80001c67:	48 89 05 c2 e6 00 00 	mov    %rax,0xe6c2(%rip)        # ffffffff80010330 <l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80001c6e:	48 85 c0             	test   %rax,%rax
ffffffff80001c71:	0f 85 9f fd ff ff    	jne    ffffffff80001a16 <kmalloc+0x56>
		  liballoc_unlock();
ffffffff80001c77:	31 c0                	xor    %eax,%eax
		  return NULL;
ffffffff80001c79:	31 db                	xor    %ebx,%ebx
		  liballoc_unlock();
ffffffff80001c7b:	e8 10 04 00 00       	callq  ffffffff80002090 <liballoc_unlock>
		  return NULL;
ffffffff80001c80:	e9 a2 fe ff ff       	jmpq   ffffffff80001b27 <kmalloc+0x167>
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001c85:	48 8d 43 28          	lea    0x28(%rbx),%rax
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80001c89:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001c90:	48 89 43 20          	mov    %rax,0x20(%rbx)
			maj->first->prev 		= NULL;
ffffffff80001c94:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
ffffffff80001c9b:	00 
			maj->first->next 		= NULL;
ffffffff80001c9c:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80001ca3:	00 
			maj->first->block 	= maj;
ffffffff80001ca4:	48 89 5b 38          	mov    %rbx,0x38(%rbx)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80001ca8:	41 8d 46 28          	lea    0x28(%r14),%eax
			ALIGN( p );
ffffffff80001cac:	48 8d 53 60          	lea    0x60(%rbx),%rdx
			maj->first->size 	= size;
ffffffff80001cb0:	44 89 73 44          	mov    %r14d,0x44(%rbx)
			maj->first->req_size 	= req_size;
ffffffff80001cb4:	44 89 6b 48          	mov    %r13d,0x48(%rbx)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80001cb8:	01 43 18             	add    %eax,0x18(%rbx)
			l_inuse += size;
ffffffff80001cbb:	4c 01 35 56 e6 00 00 	add    %r14,0xe656(%rip)        # ffffffff80010318 <l_inuse>
			ALIGN( p );
ffffffff80001cc2:	83 e3 0f             	and    $0xf,%ebx
ffffffff80001cc5:	0f 84 4a fe ff ff    	je     ffffffff80001b15 <kmalloc+0x155>
ffffffff80001ccb:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001cd0:	48 29 d8             	sub    %rbx,%rax
ffffffff80001cd3:	48 01 c2             	add    %rax,%rdx
ffffffff80001cd6:	83 c0 10             	add    $0x10,%eax
ffffffff80001cd9:	48 89 d3             	mov    %rdx,%rbx
ffffffff80001cdc:	e9 3c fe ff ff       	jmpq   ffffffff80001b1d <kmalloc+0x15d>
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001ce1:	48 8d 53 28          	lea    0x28(%rbx),%rdx
ffffffff80001ce5:	48 89 10             	mov    %rdx,(%rax)
			maj->first->prev->next = maj->first;
ffffffff80001ce8:	48 89 43 30          	mov    %rax,0x30(%rbx)
			maj->first = maj->first->prev;
ffffffff80001cec:	48 89 53 20          	mov    %rdx,0x20(%rbx)
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80001cf0:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
			maj->first->prev 	= NULL;
ffffffff80001cf7:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
ffffffff80001cfe:	00 
ffffffff80001cff:	eb a3                	jmp    ffffffff80001ca4 <kmalloc+0x2e4>
ffffffff80001d01:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001d08:	00 00 00 00 
ffffffff80001d0c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001d10 <kfree>:
void PREFIX(free)(void *ptr)
{
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80001d10:	48 85 ff             	test   %rdi,%rdi
ffffffff80001d13:	0f 84 5f 01 00 00    	je     ffffffff80001e78 <kfree+0x168>
{
ffffffff80001d19:	55                   	push   %rbp
		FLUSH();
		#endif
		return;
	}

	UNALIGN( ptr );
ffffffff80001d1a:	48 89 f8             	mov    %rdi,%rax
{
ffffffff80001d1d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001d20:	53                   	push   %rbx
	UNALIGN( ptr );
ffffffff80001d21:	48 89 fb             	mov    %rdi,%rbx
{
ffffffff80001d24:	48 83 ec 08          	sub    $0x8,%rsp
	UNALIGN( ptr );
ffffffff80001d28:	48 0f be 57 f0       	movsbq -0x10(%rdi),%rdx
ffffffff80001d2d:	48 29 d0             	sub    %rdx,%rax
ffffffff80001d30:	48 83 fa 20          	cmp    $0x20,%rdx
ffffffff80001d34:	48 0f 42 d8          	cmovb  %rax,%rbx

	liballoc_lock();		// lockit
ffffffff80001d38:	31 c0                	xor    %eax,%eax
ffffffff80001d3a:	e8 41 03 00 00       	callq  ffffffff80002080 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001d3f:	8b 53 f0             	mov    -0x10(%rbx),%edx
	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80001d42:	48 8d 43 d8          	lea    -0x28(%rbx),%rax
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001d46:	81 fa de c0 01 c0    	cmp    $0xc001c0de,%edx
ffffffff80001d4c:	0f 85 86 00 00 00    	jne    ffffffff80001dd8 <kfree+0xc8>
	#endif
	

		maj = min->block;

		l_inuse -= min->size;
ffffffff80001d52:	8b 50 1c             	mov    0x1c(%rax),%edx
		maj = min->block;
ffffffff80001d55:	48 8b 78 10          	mov    0x10(%rax),%rdi
		l_inuse -= min->size;
ffffffff80001d59:	48 29 15 b8 e5 00 00 	sub    %rdx,0xe5b8(%rip)        # ffffffff80010318 <l_inuse>
ffffffff80001d60:	48 89 d1             	mov    %rdx,%rcx

		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80001d63:	8b 57 18             	mov    0x18(%rdi),%edx
ffffffff80001d66:	29 ca                	sub    %ecx,%edx
		min->magic  = LIBALLOC_DEAD;		// No mojo.

		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80001d68:	48 8b 48 08          	mov    0x8(%rax),%rcx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80001d6c:	83 ea 28             	sub    $0x28,%edx
ffffffff80001d6f:	89 57 18             	mov    %edx,0x18(%rdi)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff80001d72:	c7 40 18 ad de ad de 	movl   $0xdeaddead,0x18(%rax)
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80001d79:	48 85 c9             	test   %rcx,%rcx
ffffffff80001d7c:	0f 84 8e 00 00 00    	je     ffffffff80001e10 <kfree+0x100>
ffffffff80001d82:	48 8b 30             	mov    (%rax),%rsi
ffffffff80001d85:	48 89 31             	mov    %rsi,(%rcx)
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80001d88:	48 8b 00             	mov    (%rax),%rax
ffffffff80001d8b:	48 85 c0             	test   %rax,%rax
ffffffff80001d8e:	0f 84 f4 00 00 00    	je     ffffffff80001e88 <kfree+0x178>
							// minor.


	// We need to clean up after the majors now....

	if ( maj->first == NULL )	// Block completely unused.
ffffffff80001d94:	48 83 7f 20 00       	cmpq   $0x0,0x20(%rdi)
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80001d99:	48 89 48 08          	mov    %rcx,0x8(%rax)
	{
		if ( l_memRoot == maj ) l_memRoot = maj->next;
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80001d9d:	48 8b 05 84 e5 00 00 	mov    0xe584(%rip),%rax        # ffffffff80010328 <l_bestBet>
	if ( maj->first == NULL )	// Block completely unused.
ffffffff80001da4:	0f 84 81 00 00 00    	je     ffffffff80001e2b <kfree+0x11b>

		liballoc_free( maj, maj->pages );
	}
	else
	{
		if ( l_bestBet != NULL )
ffffffff80001daa:	48 85 c0             	test   %rax,%rax
ffffffff80001dad:	74 16                	je     ffffffff80001dc5 <kfree+0xb5>
		{
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001daf:	8b 48 14             	mov    0x14(%rax),%ecx
ffffffff80001db2:	2b 48 18             	sub    0x18(%rax),%ecx
			int majSize = maj->size - maj->usage;
ffffffff80001db5:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff80001db8:	29 d0                	sub    %edx,%eax

			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff80001dba:	39 c1                	cmp    %eax,%ecx
ffffffff80001dbc:	7d 07                	jge    ffffffff80001dc5 <kfree+0xb5>
ffffffff80001dbe:	48 89 3d 63 e5 00 00 	mov    %rdi,0xe563(%rip)        # ffffffff80010328 <l_bestBet>
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
}
ffffffff80001dc5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
		liballoc_unlock();		// release the lock
ffffffff80001dc9:	31 c0                	xor    %eax,%eax
}
ffffffff80001dcb:	c9                   	leaveq 
		liballoc_unlock();		// release the lock
ffffffff80001dcc:	e9 bf 02 00 00       	jmpq   ffffffff80002090 <liballoc_unlock>
ffffffff80001dd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001dd8:	89 d0                	mov    %edx,%eax
		l_errorCount += 1;
ffffffff80001dda:	48 83 05 26 e5 00 00 	addq   $0x1,0xe526(%rip)        # ffffffff80010308 <l_errorCount>
ffffffff80001de1:	01 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001de2:	25 ff ff ff 00       	and    $0xffffff,%eax
		if ( 
ffffffff80001de7:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff80001dec:	74 0c                	je     ffffffff80001dfa <kfree+0xea>
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001dee:	66 81 fa de c0       	cmp    $0xc0de,%dx
ffffffff80001df3:	74 05                	je     ffffffff80001dfa <kfree+0xea>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80001df5:	80 fa de             	cmp    $0xde,%dl
ffffffff80001df8:	75 cb                	jne    ffffffff80001dc5 <kfree+0xb5>
			l_possibleOverruns += 1;
ffffffff80001dfa:	48 83 05 fe e4 00 00 	addq   $0x1,0xe4fe(%rip)        # ffffffff80010300 <l_possibleOverruns>
ffffffff80001e01:	01 
}
ffffffff80001e02:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
		liballoc_unlock();		// release the lock
ffffffff80001e06:	31 c0                	xor    %eax,%eax
}
ffffffff80001e08:	c9                   	leaveq 
		liballoc_unlock();		// release the lock
ffffffff80001e09:	e9 82 02 00 00       	jmpq   ffffffff80002090 <liballoc_unlock>
ffffffff80001e0e:	66 90                	xchg   %ax,%ax
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80001e10:	48 8b 00             	mov    (%rax),%rax
ffffffff80001e13:	48 85 c0             	test   %rax,%rax
ffffffff80001e16:	0f 85 78 ff ff ff    	jne    ffffffff80001d94 <kfree+0x84>
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80001e1c:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
ffffffff80001e23:	00 
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80001e24:	48 8b 05 fd e4 00 00 	mov    0xe4fd(%rip),%rax        # ffffffff80010328 <l_bestBet>
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001e2b:	48 39 3d fe e4 00 00 	cmp    %rdi,0xe4fe(%rip)        # ffffffff80010330 <l_memRoot>
ffffffff80001e32:	48 8b 57 08          	mov    0x8(%rdi),%rdx
ffffffff80001e36:	74 78                	je     ffffffff80001eb0 <kfree+0x1a0>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80001e38:	48 39 f8             	cmp    %rdi,%rax
ffffffff80001e3b:	74 63                	je     ffffffff80001ea0 <kfree+0x190>
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80001e3d:	48 8b 07             	mov    (%rdi),%rax
ffffffff80001e40:	48 85 c0             	test   %rax,%rax
ffffffff80001e43:	74 08                	je     ffffffff80001e4d <kfree+0x13d>
ffffffff80001e45:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff80001e49:	48 8b 57 08          	mov    0x8(%rdi),%rdx
ffffffff80001e4d:	48 85 d2             	test   %rdx,%rdx
ffffffff80001e50:	74 03                	je     ffffffff80001e55 <kfree+0x145>
ffffffff80001e52:	48 89 02             	mov    %rax,(%rdx)
		liballoc_free( maj, maj->pages );
ffffffff80001e55:	8b 77 10             	mov    0x10(%rdi),%esi
		l_allocated -= maj->size;
ffffffff80001e58:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff80001e5b:	48 29 05 be e4 00 00 	sub    %rax,0xe4be(%rip)        # ffffffff80010320 <l_allocated>
		liballoc_free( maj, maj->pages );
ffffffff80001e62:	e8 39 02 00 00       	callq  ffffffff800020a0 <liballoc_free>
}
ffffffff80001e67:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
		liballoc_unlock();		// release the lock
ffffffff80001e6b:	31 c0                	xor    %eax,%eax
}
ffffffff80001e6d:	c9                   	leaveq 
		liballoc_unlock();		// release the lock
ffffffff80001e6e:	e9 1d 02 00 00       	jmpq   ffffffff80002090 <liballoc_unlock>
ffffffff80001e73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		l_warningCount += 1;
ffffffff80001e78:	48 83 05 90 e4 00 00 	addq   $0x1,0xe490(%rip)        # ffffffff80010310 <l_warningCount>
ffffffff80001e7f:	01 
		return;
ffffffff80001e80:	c3                   	retq   
ffffffff80001e81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80001e88:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff80001e8c:	48 8b 05 95 e4 00 00 	mov    0xe495(%rip),%rax        # ffffffff80010328 <l_bestBet>
ffffffff80001e93:	e9 12 ff ff ff       	jmpq   ffffffff80001daa <kfree+0x9a>
ffffffff80001e98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001e9f:	00 
ffffffff80001ea0:	48 c7 05 7d e4 00 00 	movq   $0x0,0xe47d(%rip)        # ffffffff80010328 <l_bestBet>
ffffffff80001ea7:	00 00 00 00 
ffffffff80001eab:	eb 90                	jmp    ffffffff80001e3d <kfree+0x12d>
ffffffff80001ead:	0f 1f 00             	nopl   (%rax)
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001eb0:	48 89 15 79 e4 00 00 	mov    %rdx,0xe479(%rip)        # ffffffff80010330 <l_memRoot>
ffffffff80001eb7:	e9 7c ff ff ff       	jmpq   ffffffff80001e38 <kfree+0x128>
ffffffff80001ebc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001ec0 <kcalloc>:




void* PREFIX(calloc)(size_t nobj, size_t size)
{
ffffffff80001ec0:	55                   	push   %rbp
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff80001ec1:	0f af fe             	imul   %esi,%edi
{
ffffffff80001ec4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001ec7:	53                   	push   %rbx
       
       p = PREFIX(malloc)( real_size );
ffffffff80001ec8:	48 63 df             	movslq %edi,%rbx
ffffffff80001ecb:	48 89 df             	mov    %rbx,%rdi
{
ffffffff80001ece:	48 83 ec 08          	sub    $0x8,%rsp
       p = PREFIX(malloc)( real_size );
ffffffff80001ed2:	e8 e9 fa ff ff       	callq  ffffffff800019c0 <kmalloc>
	for ( i = 0; i < n ; i++)
ffffffff80001ed7:	48 85 db             	test   %rbx,%rbx
ffffffff80001eda:	74 13                	je     ffffffff80001eef <kcalloc+0x2f>
ffffffff80001edc:	31 c9                	xor    %ecx,%ecx
ffffffff80001ede:	31 d2                	xor    %edx,%edx
		((char*)s)[i] = c;
ffffffff80001ee0:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
	for ( i = 0; i < n ; i++)
ffffffff80001ee4:	8d 51 01             	lea    0x1(%rcx),%edx
ffffffff80001ee7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80001eea:	48 39 da             	cmp    %rbx,%rdx
ffffffff80001eed:	72 f1                	jb     ffffffff80001ee0 <kcalloc+0x20>

       liballoc_memset( p, 0, real_size );

       return p;
}
ffffffff80001eef:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80001ef3:	c9                   	leaveq 
ffffffff80001ef4:	c3                   	retq   
ffffffff80001ef5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001efc:	00 00 00 00 

ffffffff80001f00 <krealloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff80001f00:	55                   	push   %rbp
ffffffff80001f01:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001f04:	41 56                	push   %r14
ffffffff80001f06:	41 55                	push   %r13
ffffffff80001f08:	41 54                	push   %r12
ffffffff80001f0a:	53                   	push   %rbx
ffffffff80001f0b:	48 89 fb             	mov    %rdi,%rbx
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff80001f0e:	48 85 f6             	test   %rsi,%rsi
ffffffff80001f11:	0f 84 39 01 00 00    	je     ffffffff80002050 <krealloc+0x150>
ffffffff80001f17:	49 89 f5             	mov    %rsi,%r13
		PREFIX(free)( p );
		return NULL;
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001f1a:	48 85 ff             	test   %rdi,%rdi
ffffffff80001f1d:	0f 84 3d 01 00 00    	je     ffffffff80002060 <krealloc+0x160>

	// Unalign the pointer if required.
	ptr = p;
	UNALIGN(ptr);
ffffffff80001f23:	48 0f be 57 f0       	movsbq -0x10(%rdi),%rdx
ffffffff80001f28:	48 89 f8             	mov    %rdi,%rax
ffffffff80001f2b:	48 29 d0             	sub    %rdx,%rax
ffffffff80001f2e:	48 83 fa 20          	cmp    $0x20,%rdx
ffffffff80001f32:	48 0f 43 c7          	cmovae %rdi,%rax
ffffffff80001f36:	49 89 c4             	mov    %rax,%r12

	liballoc_lock();		// lockit
ffffffff80001f39:	31 c0                	xor    %eax,%eax
ffffffff80001f3b:	e8 40 01 00 00       	callq  ffffffff80002080 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001f40:	41 8b 54 24 f0       	mov    -0x10(%r12),%edx
		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80001f45:	49 8d 44 24 d8       	lea    -0x28(%r12),%rax
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001f4a:	81 fa de c0 01 c0    	cmp    $0xc001c0de,%edx
ffffffff80001f50:	0f 85 92 00 00 00    	jne    ffffffff80001fe8 <krealloc+0xe8>
		
		// Definitely a memory block.
		
		real_size = min->req_size;

		if ( real_size >= size ) 
ffffffff80001f56:	44 8b 70 20          	mov    0x20(%rax),%r14d
ffffffff80001f5a:	4d 39 ee             	cmp    %r13,%r14
ffffffff80001f5d:	0f 83 bd 00 00 00    	jae    ffffffff80002020 <krealloc+0x120>
			min->req_size = size;
			liballoc_unlock();
			return p;
		}

	liballoc_unlock();
ffffffff80001f63:	31 c0                	xor    %eax,%eax
ffffffff80001f65:	e8 26 01 00 00       	callq  ffffffff80002090 <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80001f6a:	4c 89 ef             	mov    %r13,%rdi
ffffffff80001f6d:	e8 4e fa ff ff       	callq  ffffffff800019c0 <kmalloc>
ffffffff80001f72:	49 89 c4             	mov    %rax,%r12
  while ( n >= sizeof(unsigned int) )
ffffffff80001f75:	49 83 fe 03          	cmp    $0x3,%r14
ffffffff80001f79:	0f 86 f1 00 00 00    	jbe    ffffffff80002070 <krealloc+0x170>
ffffffff80001f7f:	49 83 ee 04          	sub    $0x4,%r14
ffffffff80001f83:	31 d2                	xor    %edx,%edx
ffffffff80001f85:	4c 89 f6             	mov    %r14,%rsi
ffffffff80001f88:	48 c1 ee 02          	shr    $0x2,%rsi
ffffffff80001f8c:	48 8d 04 b5 04 00 00 	lea    0x4(,%rsi,4),%rax
ffffffff80001f93:	00 
ffffffff80001f94:	0f 1f 40 00          	nopl   0x0(%rax)
      *ldest++ = *lsrc++;
ffffffff80001f98:	8b 0c 13             	mov    (%rbx,%rdx,1),%ecx
ffffffff80001f9b:	41 89 0c 14          	mov    %ecx,(%r12,%rdx,1)
  while ( n >= sizeof(unsigned int) )
ffffffff80001f9f:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80001fa3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001fa6:	75 f0                	jne    ffffffff80001f98 <krealloc+0x98>
	  n -= sizeof(unsigned int);
ffffffff80001fa8:	48 f7 de             	neg    %rsi
      *ldest++ = *lsrc++;
ffffffff80001fab:	48 8d 3c 13          	lea    (%rbx,%rdx,1),%rdi
ffffffff80001faf:	4c 01 e2             	add    %r12,%rdx
	  n -= sizeof(unsigned int);
ffffffff80001fb2:	4d 8d 34 b6          	lea    (%r14,%rsi,4),%r14
  while ( n > 0 )
ffffffff80001fb6:	31 c9                	xor    %ecx,%ecx
ffffffff80001fb8:	4d 85 f6             	test   %r14,%r14
ffffffff80001fbb:	74 10                	je     ffffffff80001fcd <krealloc+0xcd>
      *cdest++ = *csrc++;
ffffffff80001fbd:	0f b6 04 0f          	movzbl (%rdi,%rcx,1),%eax
ffffffff80001fc1:	88 04 0a             	mov    %al,(%rdx,%rcx,1)
  while ( n > 0 )
ffffffff80001fc4:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80001fc8:	49 39 ce             	cmp    %rcx,%r14
ffffffff80001fcb:	75 f0                	jne    ffffffff80001fbd <krealloc+0xbd>
	liballoc_memcpy( ptr, p, real_size );
	PREFIX(free)( p );
ffffffff80001fcd:	48 89 df             	mov    %rbx,%rdi
ffffffff80001fd0:	e8 3b fd ff ff       	callq  ffffffff80001d10 <kfree>

	return ptr;
}
ffffffff80001fd5:	5b                   	pop    %rbx
ffffffff80001fd6:	4c 89 e0             	mov    %r12,%rax
ffffffff80001fd9:	41 5c                	pop    %r12
ffffffff80001fdb:	41 5d                	pop    %r13
ffffffff80001fdd:	41 5e                	pop    %r14
ffffffff80001fdf:	5d                   	pop    %rbp
ffffffff80001fe0:	c3                   	retq   
ffffffff80001fe1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001fe8:	89 d0                	mov    %edx,%eax
			l_errorCount += 1;
ffffffff80001fea:	48 83 05 16 e3 00 00 	addq   $0x1,0xe316(%rip)        # ffffffff80010308 <l_errorCount>
ffffffff80001ff1:	01 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001ff2:	25 ff ff ff 00       	and    $0xffffff,%eax
			if ( 
ffffffff80001ff7:	3d de c0 01 00       	cmp    $0x1c0de,%eax
ffffffff80001ffc:	74 42                	je     ffffffff80002040 <krealloc+0x140>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001ffe:	66 81 fa de c0       	cmp    $0xc0de,%dx
ffffffff80002003:	74 3b                	je     ffffffff80002040 <krealloc+0x140>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff80002005:	80 fa de             	cmp    $0xde,%dl
ffffffff80002008:	74 36                	je     ffffffff80002040 <krealloc+0x140>
			liballoc_unlock();		// release the lock
ffffffff8000200a:	31 c0                	xor    %eax,%eax
ffffffff8000200c:	e8 7f 00 00 00       	callq  ffffffff80002090 <liballoc_unlock>
		return NULL;
ffffffff80002011:	45 31 e4             	xor    %r12d,%r12d
}
ffffffff80002014:	5b                   	pop    %rbx
ffffffff80002015:	4c 89 e0             	mov    %r12,%rax
ffffffff80002018:	41 5c                	pop    %r12
ffffffff8000201a:	41 5d                	pop    %r13
ffffffff8000201c:	41 5e                	pop    %r14
ffffffff8000201e:	5d                   	pop    %rbp
ffffffff8000201f:	c3                   	retq   
			min->req_size = size;
ffffffff80002020:	44 89 68 20          	mov    %r13d,0x20(%rax)
			return p;
ffffffff80002024:	49 89 dc             	mov    %rbx,%r12
			liballoc_unlock();
ffffffff80002027:	31 c0                	xor    %eax,%eax
ffffffff80002029:	e8 62 00 00 00       	callq  ffffffff80002090 <liballoc_unlock>
}
ffffffff8000202e:	5b                   	pop    %rbx
ffffffff8000202f:	4c 89 e0             	mov    %r12,%rax
ffffffff80002032:	41 5c                	pop    %r12
ffffffff80002034:	41 5d                	pop    %r13
ffffffff80002036:	41 5e                	pop    %r14
ffffffff80002038:	5d                   	pop    %rbp
ffffffff80002039:	c3                   	retq   
ffffffff8000203a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
				l_possibleOverruns += 1;
ffffffff80002040:	48 83 05 b8 e2 00 00 	addq   $0x1,0xe2b8(%rip)        # ffffffff80010300 <l_possibleOverruns>
ffffffff80002047:	01 
ffffffff80002048:	eb c0                	jmp    ffffffff8000200a <krealloc+0x10a>
ffffffff8000204a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		PREFIX(free)( p );
ffffffff80002050:	e8 bb fc ff ff       	callq  ffffffff80001d10 <kfree>
		return NULL;
ffffffff80002055:	eb ba                	jmp    ffffffff80002011 <krealloc+0x111>
ffffffff80002057:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000205e:	00 00 
}
ffffffff80002060:	5b                   	pop    %rbx
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80002061:	48 89 f7             	mov    %rsi,%rdi
}
ffffffff80002064:	41 5c                	pop    %r12
ffffffff80002066:	41 5d                	pop    %r13
ffffffff80002068:	41 5e                	pop    %r14
ffffffff8000206a:	5d                   	pop    %rbp
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8000206b:	e9 50 f9 ff ff       	jmpq   ffffffff800019c0 <kmalloc>
  unsigned int *ldest = (unsigned int*)s1;
ffffffff80002070:	48 89 c2             	mov    %rax,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff80002073:	48 89 df             	mov    %rbx,%rdi
ffffffff80002076:	e9 3b ff ff ff       	jmpq   ffffffff80001fb6 <krealloc+0xb6>
ffffffff8000207b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80002080 <liballoc_lock>:



int liballoc_lock()
{
    asm("cli");
ffffffff80002080:	fa                   	cli    
    return 0;
}
ffffffff80002081:	31 c0                	xor    %eax,%eax
ffffffff80002083:	c3                   	retq   
ffffffff80002084:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000208b:	00 00 00 00 
ffffffff8000208f:	90                   	nop

ffffffff80002090 <liballoc_unlock>:


int liballoc_unlock()
{
    asm("sti");
ffffffff80002090:	fb                   	sti    
    return 0;
}
ffffffff80002091:	31 c0                	xor    %eax,%eax
ffffffff80002093:	c3                   	retq   
ffffffff80002094:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000209b:	00 00 00 00 
ffffffff8000209f:	90                   	nop

ffffffff800020a0 <liballoc_free>:

int liballoc_free(void* page, size_t count)
{
    return 0;
}
ffffffff800020a0:	31 c0                	xor    %eax,%eax
ffffffff800020a2:	c3                   	retq   
ffffffff800020a3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800020aa:	00 00 00 00 
ffffffff800020ae:	66 90                	xchg   %ax,%ax

ffffffff800020b0 <liballoc_alloc>:

void* liballoc_alloc(size_t count)
{
    for(uint64_t i = 0; i < count; i++)
ffffffff800020b0:	48 85 ff             	test   %rdi,%rdi
ffffffff800020b3:	74 6b                	je     ffffffff80002120 <liballoc_alloc+0x70>
{
ffffffff800020b5:	55                   	push   %rbp
ffffffff800020b6:	48 89 e5             	mov    %rsp,%rbp
ffffffff800020b9:	41 54                	push   %r12
    for(uint64_t i = 0; i < count; i++)
ffffffff800020bb:	45 31 e4             	xor    %r12d,%r12d
{
ffffffff800020be:	53                   	push   %rbx
ffffffff800020bf:	48 89 fb             	mov    %rdi,%rbx
ffffffff800020c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    {
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff800020c8:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff800020ca:	49 83 c4 01          	add    $0x1,%r12
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff800020ce:	e8 ad 02 00 00       	callq  ffffffff80002380 <pmm_allocpage>
ffffffff800020d3:	48 8b 3d b6 e2 00 00 	mov    0xe2b6(%rip),%rdi        # ffffffff80010390 <RootPageDirectory>
ffffffff800020da:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff800020df:	48 89 c2             	mov    %rax,%rdx
ffffffff800020e2:	48 8b 05 57 57 00 00 	mov    0x5757(%rip),%rax        # ffffffff80007840 <kernel_heap_top>
ffffffff800020e9:	48 8d b0 00 10 00 00 	lea    0x1000(%rax),%rsi
ffffffff800020f0:	e8 9b 06 00 00       	callq  ffffffff80002790 <vmm_map_4Kpage>
        kernel_heap_top += 4096;
ffffffff800020f5:	48 8b 05 44 57 00 00 	mov    0x5744(%rip),%rax        # ffffffff80007840 <kernel_heap_top>
ffffffff800020fc:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80002102:	48 89 05 37 57 00 00 	mov    %rax,0x5737(%rip)        # ffffffff80007840 <kernel_heap_top>
    for(uint64_t i = 0; i < count; i++)
ffffffff80002109:	4c 39 e3             	cmp    %r12,%rbx
ffffffff8000210c:	75 ba                	jne    ffffffff800020c8 <liballoc_alloc+0x18>
    return addr - 0xFFFF800000000000;
}

static inline uint64_t phys_to_hh_data(uint64_t addr)
{
    return 0xFFFF800000000000 + addr;
ffffffff8000210e:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80002115:	80 ff ff 
    }
    return (void*)(phys_to_hh_data((uint64_t)kernel_heap_top));
ffffffff80002118:	5b                   	pop    %rbx
ffffffff80002119:	41 5c                	pop    %r12
ffffffff8000211b:	48 01 d0             	add    %rdx,%rax
ffffffff8000211e:	5d                   	pop    %rbp
ffffffff8000211f:	c3                   	retq   
    return (void*)(phys_to_hh_data((uint64_t)kernel_heap_top));
ffffffff80002120:	48 8b 05 19 57 00 00 	mov    0x5719(%rip),%rax        # ffffffff80007840 <kernel_heap_top>
ffffffff80002127:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8000212e:	80 ff ff 
ffffffff80002131:	48 01 d0             	add    %rdx,%rax
ffffffff80002134:	c3                   	retq   
ffffffff80002135:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000213c:	00 00 00 
ffffffff8000213f:	90                   	nop

ffffffff80002140 <pmm_init>:
    return NULL;
}*/

//Initialize the Physical Memory Manager
void pmm_init()
{
ffffffff80002140:	55                   	push   %rbp
ffffffff80002141:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002144:	41 55                	push   %r13
ffffffff80002146:	41 54                	push   %r12
ffffffff80002148:	53                   	push   %rbx
ffffffff80002149:	48 83 ec 08          	sub    $0x8,%rsp
    //memory map helper variables
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff8000214d:	4c 8b 1d 3c 6c 00 00 	mov    0x6c3c(%rip),%r11        # ffffffff80008d90 <boot_info+0x10>
            mmap_largest_segment_size = current_entry->length;
        }
    };

    //Populate the PMM state variables
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80002154:	48 8b 3d 05 e2 00 00 	mov    0xe205(%rip),%rdi        # ffffffff80010360 <pmm_info>
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff8000215b:	49 8b 5b 10          	mov    0x10(%r11),%rbx
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff8000215f:	48 85 db             	test   %rbx,%rbx
ffffffff80002162:	0f 84 64 04 00 00    	je     ffffffff800025cc <pmm_init.cold>
ffffffff80002168:	49 8d 43 18          	lea    0x18(%r11),%rax
ffffffff8000216c:	45 31 c9             	xor    %r9d,%r9d
ffffffff8000216f:	31 d2                	xor    %edx,%edx
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
ffffffff80002171:	45 31 c0             	xor    %r8d,%r8d
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
ffffffff80002174:	45 31 d2             	xor    %r10d,%r10d
ffffffff80002177:	eb 20                	jmp    ffffffff80002199 <pmm_init+0x59>
ffffffff80002179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if(current_entry->length > mmap_largest_segment_size)
ffffffff80002180:	83 fe 01             	cmp    $0x1,%esi
ffffffff80002183:	75 0b                	jne    ffffffff80002190 <pmm_init+0x50>
ffffffff80002185:	49 39 c8             	cmp    %rcx,%r8
ffffffff80002188:	73 06                	jae    ffffffff80002190 <pmm_init+0x50>
            mmap_largest_segment_base = current_entry->base;
ffffffff8000218a:	4c 8b 10             	mov    (%rax),%r10
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff8000218d:	49 89 c8             	mov    %rcx,%r8
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80002190:	48 83 c0 18          	add    $0x18,%rax
ffffffff80002194:	48 39 d3             	cmp    %rdx,%rbx
ffffffff80002197:	74 2b                	je     ffffffff800021c4 <pmm_init+0x84>
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff80002199:	48 8b 48 08          	mov    0x8(%rax),%rcx
        if(current_entry->type == 0x1002)
ffffffff8000219d:	8b 70 10             	mov    0x10(%rax),%esi
ffffffff800021a0:	48 83 c2 01          	add    $0x1,%rdx
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800021a4:	48 01 cf             	add    %rcx,%rdi
        if(current_entry->type == 0x1002)
ffffffff800021a7:	81 fe 02 10 00 00    	cmp    $0x1002,%esi
ffffffff800021ad:	75 d1                	jne    ffffffff80002180 <pmm_init+0x40>
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff800021af:	4c 8b 20             	mov    (%rax),%r12
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800021b2:	49 89 cd             	mov    %rcx,%r13
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff800021b5:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800021bb:	48 83 c0 18          	add    $0x18,%rax
ffffffff800021bf:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800021c2:	75 d5                	jne    ffffffff80002199 <pmm_init+0x59>
ffffffff800021c4:	48 89 3d 95 e1 00 00 	mov    %rdi,0xe195(%rip)        # ffffffff80010360 <pmm_info>
ffffffff800021cb:	45 84 c9             	test   %r9b,%r9b
ffffffff800021ce:	74 0e                	je     ffffffff800021de <pmm_init+0x9e>
ffffffff800021d0:	4c 89 2d 79 e1 00 00 	mov    %r13,0xe179(%rip)        # ffffffff80010350 <pmm_vmm_info+0x10>
ffffffff800021d7:	4c 89 25 6a e1 00 00 	mov    %r12,0xe16a(%rip)        # ffffffff80010348 <pmm_vmm_info+0x8>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800021de:	48 89 f8             	mov    %rdi,%rax
    pmm_info.usedpages = pmm_info.totalpages;
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
    
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff800021e1:	48 8d 14 5b          	lea    (%rbx,%rbx,2),%rdx
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800021e5:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff800021e9:	48 89 05 80 e1 00 00 	mov    %rax,0xe180(%rip)        # ffffffff80010370 <pmm_info+0x10>
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff800021f0:	48 89 05 71 e1 00 00 	mov    %rax,0xe171(%rip)        # ffffffff80010368 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff800021f7:	48 89 f8             	mov    %rdi,%rax
ffffffff800021fa:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff800021fe:	48 83 c0 01          	add    $0x1,%rax
ffffffff80002202:	48 89 05 77 e1 00 00 	mov    %rax,0xe177(%rip)        # ffffffff80010380 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80002209:	49 39 44 d3 08       	cmp    %rax,0x8(%r11,%rdx,8)
ffffffff8000220e:	73 10                	jae    ffffffff80002220 <pmm_init+0xe0>
        {
            printf("Bitmap too large");
ffffffff80002210:	48 c7 c7 02 58 00 80 	mov    $0xffffffff80005802,%rdi
ffffffff80002217:	31 c0                	xor    %eax,%eax
ffffffff80002219:	e8 12 1e 00 00       	callq  ffffffff80004030 <printf_>
            for(;;){}   //hang
ffffffff8000221e:	eb fe                	jmp    ffffffff8000221e <pmm_init+0xde>
ffffffff80002220:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80002227:	80 ff ff 
        }
    
    pmm_info.bitmap = (uint8_t*)phys_to_hh_data(mmap_largest_segment_base); 

    printf("Total Memory: %d\n", (pmm_info.totalmem));
ffffffff8000222a:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000222d:	48 c7 c7 13 58 00 80 	mov    $0xffffffff80005813,%rdi
ffffffff80002234:	49 01 c2             	add    %rax,%r10
ffffffff80002237:	31 c0                	xor    %eax,%eax
ffffffff80002239:	4c 89 15 38 e1 00 00 	mov    %r10,0xe138(%rip)        # ffffffff80010378 <pmm_info+0x18>
ffffffff80002240:	e8 eb 1d 00 00       	callq  ffffffff80004030 <printf_>
    printf("Total Pages: %d   Used Pages: %d\n", pmm_info.totalpages, pmm_info.usedpages);
ffffffff80002245:	48 8b 15 1c e1 00 00 	mov    0xe11c(%rip),%rdx        # ffffffff80010368 <pmm_info+0x8>
ffffffff8000224c:	48 8b 35 1d e1 00 00 	mov    0xe11d(%rip),%rsi        # ffffffff80010370 <pmm_info+0x10>
ffffffff80002253:	31 c0                	xor    %eax,%eax
ffffffff80002255:	48 c7 c7 60 58 00 80 	mov    $0xffffffff80005860,%rdi
ffffffff8000225c:	e8 cf 1d 00 00       	callq  ffffffff80004030 <printf_>
    printf("Bitmap Addr: %p  Bitmap Size (bytes): %d\n", pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80002261:	48 8b 15 18 e1 00 00 	mov    0xe118(%rip),%rdx        # ffffffff80010380 <pmm_info+0x20>
ffffffff80002268:	31 c0                	xor    %eax,%eax
ffffffff8000226a:	48 8b 35 07 e1 00 00 	mov    0xe107(%rip),%rsi        # ffffffff80010378 <pmm_info+0x18>
ffffffff80002271:	48 c7 c7 88 58 00 80 	mov    $0xffffffff80005888,%rdi
ffffffff80002278:	e8 b3 1d 00 00       	callq  ffffffff80004030 <printf_>

    //Set all bitmap bits to 1
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff8000227d:	31 c0                	xor    %eax,%eax
ffffffff8000227f:	48 83 3d f9 e0 00 00 	cmpq   $0x0,0xe0f9(%rip)        # ffffffff80010380 <pmm_info+0x20>
ffffffff80002286:	00 
ffffffff80002287:	74 1f                	je     ffffffff800022a8 <pmm_init+0x168>
ffffffff80002289:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        {
        pmm_info.bitmap[i] = 0xff;
ffffffff80002290:	48 8b 15 e1 e0 00 00 	mov    0xe0e1(%rip),%rdx        # ffffffff80010378 <pmm_info+0x18>
ffffffff80002297:	c6 04 02 ff          	movb   $0xff,(%rdx,%rax,1)
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff8000229b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000229f:	48 3b 05 da e0 00 00 	cmp    0xe0da(%rip),%rax        # ffffffff80010380 <pmm_info+0x20>
ffffffff800022a6:	72 e8                	jb     ffffffff80002290 <pmm_init+0x150>
    

    //printf("Number of MMAP Entries: %d\n", mmap_entries);

    //Iterate through the memory map again, unset bitmap for available memory
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800022a8:	31 f6                	xor    %esi,%esi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800022aa:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff800022af:	eb 10                	jmp    ffffffff800022c1 <pmm_init+0x181>
ffffffff800022b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800022b8:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800022bc:	48 39 f3             	cmp    %rsi,%rbx
ffffffff800022bf:	74 69                	je     ffffffff8000232a <pmm_init+0x1ea>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];

        if(current_entry->type == 1)
ffffffff800022c1:	48 8b 15 c8 6a 00 00 	mov    0x6ac8(%rip),%rdx        # ffffffff80008d90 <boot_info+0x10>
ffffffff800022c8:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
ffffffff800022cc:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
ffffffff800022d0:	83 78 28 01          	cmpl   $0x1,0x28(%rax)
ffffffff800022d4:	75 e2                	jne    ffffffff800022b8 <pmm_init+0x178>
        {
            uint64_t pages = current_entry->length / 4096;
ffffffff800022d6:	4c 8b 40 20          	mov    0x20(%rax),%r8
            uint64_t align = current_entry->base / 4096;
ffffffff800022da:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800022de:	48 c1 e8 0c          	shr    $0xc,%rax
            //printf("Index: %d  Pages: %d\n", align, pages);

            for(uint64_t j = 0; j < pages; j++)
ffffffff800022e2:	49 c1 e8 0c          	shr    $0xc,%r8
ffffffff800022e6:	74 d0                	je     ffffffff800022b8 <pmm_init+0x178>
ffffffff800022e8:	49 01 c0             	add    %rax,%r8
ffffffff800022eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800022f0:	89 c1                	mov    %eax,%ecx
ffffffff800022f2:	41 89 fb             	mov    %edi,%r11d
ffffffff800022f5:	48 89 c2             	mov    %rax,%rdx
                //uint64_t bitindex = align % 8;
                //pmm_info.bitmap[byteindex] &= ~(1 << bitindex);
                
                bitmap_unset(pmm_info.bitmap, align);

                align++;                    //increment page index
ffffffff800022f8:	48 83 c0 01          	add    $0x1,%rax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800022fc:	83 e1 07             	and    $0x7,%ecx
ffffffff800022ff:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80002303:	48 03 15 6e e0 00 00 	add    0xe06e(%rip),%rdx        # ffffffff80010378 <pmm_info+0x18>
ffffffff8000230a:	41 d3 e3             	shl    %cl,%r11d
ffffffff8000230d:	44 89 d9             	mov    %r11d,%ecx
ffffffff80002310:	f7 d1                	not    %ecx
ffffffff80002312:	20 0a                	and    %cl,(%rdx)
                pmm_info.usedpages--;       //decrement used page counter
ffffffff80002314:	48 83 2d 4c e0 00 00 	subq   $0x1,0xe04c(%rip)        # ffffffff80010368 <pmm_info+0x8>
ffffffff8000231b:	01 
            for(uint64_t j = 0; j < pages; j++)
ffffffff8000231c:	4c 39 c0             	cmp    %r8,%rax
ffffffff8000231f:	75 cf                	jne    ffffffff800022f0 <pmm_init+0x1b0>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80002321:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80002325:	48 39 f3             	cmp    %rsi,%rbx
ffffffff80002328:	75 97                	jne    ffffffff800022c1 <pmm_init+0x181>
            }
        }
    }

    //Make certain the NULL page is unavailable
    bitmap_set(pmm_info.bitmap, 0);
ffffffff8000232a:	48 8b 05 47 e0 00 00 	mov    0xe047(%rip),%rax        # ffffffff80010378 <pmm_info+0x18>
    pmm_info.usedpages++;

    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff80002331:	48 c7 c7 25 58 00 80 	mov    $0xffffffff80005825,%rdi
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff80002338:	80 08 01             	orb    $0x1,(%rax)
    pmm_info.usedpages++;
ffffffff8000233b:	48 8b 05 26 e0 00 00 	mov    0xe026(%rip),%rax        # ffffffff80010368 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff80002342:	48 8b 35 27 e0 00 00 	mov    0xe027(%rip),%rsi        # ffffffff80010370 <pmm_info+0x10>
    pmm_info.usedpages++;
ffffffff80002349:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000234d:	48 89 05 14 e0 00 00 	mov    %rax,0xe014(%rip)        # ffffffff80010368 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff80002354:	48 29 c6             	sub    %rax,%rsi
ffffffff80002357:	31 c0                	xor    %eax,%eax
ffffffff80002359:	e8 d2 1c 00 00       	callq  ffffffff80004030 <printf_>
    printf("PMM Initialized\n");

}
ffffffff8000235e:	48 83 c4 08          	add    $0x8,%rsp
    printf("PMM Initialized\n");
ffffffff80002362:	48 c7 c7 3a 58 00 80 	mov    $0xffffffff8000583a,%rdi
ffffffff80002369:	31 c0                	xor    %eax,%eax
}
ffffffff8000236b:	5b                   	pop    %rbx
ffffffff8000236c:	41 5c                	pop    %r12
ffffffff8000236e:	41 5d                	pop    %r13
ffffffff80002370:	5d                   	pop    %rbp
    printf("PMM Initialized\n");
ffffffff80002371:	e9 ba 1c 00 00       	jmpq   ffffffff80004030 <printf_>
ffffffff80002376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000237d:	00 00 00 

ffffffff80002380 <pmm_allocpage>:


void* pmm_allocpage()
{
ffffffff80002380:	55                   	push   %rbp
ffffffff80002381:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002384:	53                   	push   %rbx
    if(pmm_info.usedpages >= pmm_info.totalpages)
        return NULL;
ffffffff80002385:	31 db                	xor    %ebx,%ebx
{
ffffffff80002387:	48 83 ec 08          	sub    $0x8,%rsp
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff8000238b:	48 8b 05 de df 00 00 	mov    0xdfde(%rip),%rax        # ffffffff80010370 <pmm_info+0x10>
ffffffff80002392:	48 39 05 cf df 00 00 	cmp    %rax,0xdfcf(%rip)        # ffffffff80010368 <pmm_info+0x8>
ffffffff80002399:	0f 83 92 00 00 00    	jae    ffffffff80002431 <pmm_allocpage+0xb1>
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff8000239f:	48 8b 3d da df 00 00 	mov    0xdfda(%rip),%rdi        # ffffffff80010380 <pmm_info+0x20>
ffffffff800023a6:	48 8b 35 cb df 00 00 	mov    0xdfcb(%rip),%rsi        # ffffffff80010378 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff800023ad:	48 85 ff             	test   %rdi,%rdi
ffffffff800023b0:	0f 84 95 00 00 00    	je     ffffffff8000244b <pmm_allocpage+0xcb>
ffffffff800023b6:	31 d2                	xor    %edx,%edx
ffffffff800023b8:	eb 0f                	jmp    ffffffff800023c9 <pmm_allocpage+0x49>
ffffffff800023ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff800023c0:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800023c4:	48 39 d7             	cmp    %rdx,%rdi
ffffffff800023c7:	74 77                	je     ffffffff80002440 <pmm_allocpage+0xc0>
        if(bitmap[i] != 0xff)
ffffffff800023c9:	0f b6 04 16          	movzbl (%rsi,%rdx,1),%eax
ffffffff800023cd:	3c ff                	cmp    $0xff,%al
ffffffff800023cf:	74 ef                	je     ffffffff800023c0 <pmm_allocpage+0x40>
                if(!(bitmap[i] & (1 << j)))
ffffffff800023d1:	a8 01                	test   $0x1,%al
ffffffff800023d3:	0f b6 c8             	movzbl %al,%ecx
            for(uint64_t j = 0; j < 8; j++)
ffffffff800023d6:	b8 00 00 00 00       	mov    $0x0,%eax
                if(!(bitmap[i] & (1 << j)))
ffffffff800023db:	74 12                	je     ffffffff800023ef <pmm_allocpage+0x6f>
ffffffff800023dd:	0f 1f 00             	nopl   (%rax)
            for(uint64_t j = 0; j < 8; j++)
ffffffff800023e0:	48 83 c0 01          	add    $0x1,%rax
ffffffff800023e4:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff800023e8:	74 d6                	je     ffffffff800023c0 <pmm_allocpage+0x40>
                if(!(bitmap[i] & (1 << j)))
ffffffff800023ea:	0f a3 c1             	bt     %eax,%ecx
ffffffff800023ed:	72 f1                	jb     ffffffff800023e0 <pmm_allocpage+0x60>
                    return (i * 8) + j;
ffffffff800023ef:	48 8d 0c d0          	lea    (%rax,%rdx,8),%rcx
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800023f3:	48 89 c8             	mov    %rcx,%rax
    
    bitmap_set(pmm_info.bitmap, index);

    pmm_info.usedpages++;

    DEBUG_MSG("PMM ALLOC: %p\n", (index * PAGE_SIZE));
ffffffff800023f6:	48 89 cf             	mov    %rcx,%rdi
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800023f9:	83 e1 07             	and    $0x7,%ecx
ffffffff800023fc:	48 c1 e8 03          	shr    $0x3,%rax
    DEBUG_MSG("PMM ALLOC: %p\n", (index * PAGE_SIZE));
ffffffff80002400:	48 c1 e7 0c          	shl    $0xc,%rdi
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff80002404:	48 01 c6             	add    %rax,%rsi
ffffffff80002407:	b8 01 00 00 00       	mov    $0x1,%eax

    return (void*)(index * PAGE_SIZE);
ffffffff8000240c:	48 89 fb             	mov    %rdi,%rbx
ffffffff8000240f:	d3 e0                	shl    %cl,%eax
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff80002411:	08 06                	or     %al,(%rsi)
    DEBUG_MSG("PMM ALLOC: %p\n", (index * PAGE_SIZE));
ffffffff80002413:	48 89 fa             	mov    %rdi,%rdx
ffffffff80002416:	48 c7 c6 4b 58 00 80 	mov    $0xffffffff8000584b,%rsi
ffffffff8000241d:	31 c0                	xor    %eax,%eax
ffffffff8000241f:	bf f8 03 00 00       	mov    $0x3f8,%edi
    pmm_info.usedpages++;
ffffffff80002424:	48 83 05 3c df 00 00 	addq   $0x1,0xdf3c(%rip)        # ffffffff80010368 <pmm_info+0x8>
ffffffff8000242b:	01 
    DEBUG_MSG("PMM ALLOC: %p\n", (index * PAGE_SIZE));
ffffffff8000242c:	e8 bf 1d 00 00       	callq  ffffffff800041f0 <serial_printf>
}
ffffffff80002431:	48 89 d8             	mov    %rbx,%rax
ffffffff80002434:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80002438:	c9                   	leaveq 
ffffffff80002439:	c3                   	retq   
ffffffff8000243a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002440:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80002445:	31 db                	xor    %ebx,%ebx
ffffffff80002447:	31 ff                	xor    %edi,%edi
ffffffff80002449:	eb c6                	jmp    ffffffff80002411 <pmm_allocpage+0x91>
    for(uint64_t i = 0; i < size; i++)
ffffffff8000244b:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80002450:	eb bf                	jmp    ffffffff80002411 <pmm_allocpage+0x91>
ffffffff80002452:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002459:	00 00 00 00 
ffffffff8000245d:	0f 1f 00             	nopl   (%rax)

ffffffff80002460 <pmm_freepage>:
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80002460:	48 89 fa             	mov    %rdi,%rdx


void pmm_freepage(void* page)
{
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80002463:	48 c1 ef 0c          	shr    $0xc,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80002467:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000246c:	89 f9                	mov    %edi,%ecx
ffffffff8000246e:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff80002472:	48 03 15 ff de 00 00 	add    0xdeff(%rip),%rdx        # ffffffff80010378 <pmm_info+0x18>
ffffffff80002479:	83 e1 07             	and    $0x7,%ecx
ffffffff8000247c:	d3 e0                	shl    %cl,%eax
ffffffff8000247e:	f7 d0                	not    %eax
ffffffff80002480:	20 02                	and    %al,(%rdx)
    bitmap_unset(pmm_info.bitmap, index);
    pmm_info.usedpages--;
ffffffff80002482:	48 83 2d de de 00 00 	subq   $0x1,0xdede(%rip)        # ffffffff80010368 <pmm_info+0x8>
ffffffff80002489:	01 
}
ffffffff8000248a:	c3                   	retq   
ffffffff8000248b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80002490 <pmm_allocpages>:

void* pmm_allocpages(uint64_t count)
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff80002490:	4c 8b 0d d1 de 00 00 	mov    0xded1(%rip),%r9        # ffffffff80010368 <pmm_info+0x8>
ffffffff80002497:	4c 3b 0d d2 de 00 00 	cmp    0xded2(%rip),%r9        # ffffffff80010370 <pmm_info+0x10>
{
ffffffff8000249e:	49 89 f8             	mov    %rdi,%r8
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff800024a1:	0f 83 82 00 00 00    	jae    ffffffff80002529 <pmm_allocpages+0x99>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff800024a7:	48 8b 05 d2 de 00 00 	mov    0xded2(%rip),%rax        # ffffffff80010380 <pmm_info+0x20>
ffffffff800024ae:	48 8b 3d c3 de 00 00 	mov    0xdec3(%rip),%rdi        # ffffffff80010378 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff800024b5:	48 85 c0             	test   %rax,%rax
ffffffff800024b8:	74 39                	je     ffffffff800024f3 <pmm_allocpages+0x63>
ffffffff800024ba:	31 c9                	xor    %ecx,%ecx
ffffffff800024bc:	eb 0b                	jmp    ffffffff800024c9 <pmm_allocpages+0x39>
ffffffff800024be:	66 90                	xchg   %ax,%ax
ffffffff800024c0:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800024c4:	48 39 c8             	cmp    %rcx,%rax
ffffffff800024c7:	74 67                	je     ffffffff80002530 <pmm_allocpages+0xa0>
        if(bitmap[i] != 0xff)
ffffffff800024c9:	0f b6 14 0f          	movzbl (%rdi,%rcx,1),%edx
ffffffff800024cd:	80 fa ff             	cmp    $0xff,%dl
ffffffff800024d0:	74 ee                	je     ffffffff800024c0 <pmm_allocpages+0x30>
                if(!(bitmap[i] & (1 << j)))
ffffffff800024d2:	0f b6 f2             	movzbl %dl,%esi
ffffffff800024d5:	83 e2 01             	and    $0x1,%edx
            for(uint64_t j = 0; j < 8; j++)
ffffffff800024d8:	ba 00 00 00 00       	mov    $0x0,%edx
                if(!(bitmap[i] & (1 << j)))
ffffffff800024dd:	74 10                	je     ffffffff800024ef <pmm_allocpages+0x5f>
ffffffff800024df:	90                   	nop
            for(uint64_t j = 0; j < 8; j++)
ffffffff800024e0:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800024e4:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff800024e8:	74 d6                	je     ffffffff800024c0 <pmm_allocpages+0x30>
                if(!(bitmap[i] & (1 << j)))
ffffffff800024ea:	0f a3 d6             	bt     %edx,%esi
ffffffff800024ed:	72 f1                	jb     ffffffff800024e0 <pmm_allocpages+0x50>
                    return (i * 8) + j;
ffffffff800024ef:	48 8d 04 ca          	lea    (%rdx,%rcx,8),%rax
    for(uint64_t i = 0; i < count; i++)
ffffffff800024f3:	4d 85 c0             	test   %r8,%r8
ffffffff800024f6:	74 40                	je     ffffffff80002538 <pmm_allocpages+0xa8>
ffffffff800024f8:	31 d2                	xor    %edx,%edx
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff800024fa:	41 ba 01 00 00 00    	mov    $0x1,%r10d
    {
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff80002500:	f6 07 01             	testb  $0x1,(%rdi)
ffffffff80002503:	74 24                	je     ffffffff80002529 <pmm_allocpages+0x99>
    for(uint64_t i = 0; i < count; i++)
ffffffff80002505:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002509:	49 39 d0             	cmp    %rdx,%r8
ffffffff8000250c:	74 2a                	je     ffffffff80002538 <pmm_allocpages+0xa8>
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff8000250e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80002511:	45 89 d3             	mov    %r10d,%r11d
ffffffff80002514:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80002518:	0f b6 34 0f          	movzbl (%rdi,%rcx,1),%esi
ffffffff8000251c:	89 d1                	mov    %edx,%ecx
ffffffff8000251e:	83 e1 08             	and    $0x8,%ecx
ffffffff80002521:	41 d3 e3             	shl    %cl,%r11d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff80002524:	44 85 de             	test   %r11d,%esi
ffffffff80002527:	75 dc                	jne    ffffffff80002505 <pmm_allocpages+0x75>
        return NULL;
ffffffff80002529:	31 c0                	xor    %eax,%eax
    }

    pmm_info.usedpages += count;

    return (void*)(index * PAGE_SIZE);
}
ffffffff8000252b:	c3                   	retq   
ffffffff8000252c:	0f 1f 40 00          	nopl   0x0(%rax)
    return 0;
ffffffff80002530:	31 c0                	xor    %eax,%eax
ffffffff80002532:	eb bf                	jmp    ffffffff800024f3 <pmm_allocpages+0x63>
ffffffff80002534:	0f 1f 40 00          	nopl   0x0(%rax)
    pmm_info.usedpages += count;
ffffffff80002538:	4d 01 c1             	add    %r8,%r9
    return (void*)(index * PAGE_SIZE);
ffffffff8000253b:	48 c1 e0 0c          	shl    $0xc,%rax
    pmm_info.usedpages += count;
ffffffff8000253f:	4c 89 0d 22 de 00 00 	mov    %r9,0xde22(%rip)        # ffffffff80010368 <pmm_info+0x8>
    return (void*)(index * PAGE_SIZE);
ffffffff80002546:	c3                   	retq   
ffffffff80002547:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000254e:	00 00 

ffffffff80002550 <pmm_freepages>:

uint64_t pmm_freepages(void* page, uint64_t count)
{
    uint64_t pg = (uint64_t)page;

    for(uint64_t i=0; i < count; i++)
ffffffff80002550:	48 85 f6             	test   %rsi,%rsi
ffffffff80002553:	74 44                	je     ffffffff80002599 <pmm_freepages+0x49>
ffffffff80002555:	45 31 c0             	xor    %r8d,%r8d
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80002558:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8000255e:	66 90                	xchg   %ax,%ax
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80002560:	48 89 f9             	mov    %rdi,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80002563:	48 89 f8             	mov    %rdi,%rax
ffffffff80002566:	44 89 ca             	mov    %r9d,%edx
    for(uint64_t i=0; i < count; i++)
ffffffff80002569:	49 83 c0 01          	add    $0x1,%r8
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff8000256d:	48 c1 e9 0c          	shr    $0xc,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80002571:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff80002575:	48 03 05 fc dd 00 00 	add    0xddfc(%rip),%rax        # ffffffff80010378 <pmm_info+0x18>
    {
        pmm_freepage((void*)pg);
        pg += 0x1000;
ffffffff8000257c:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80002583:	83 e1 07             	and    $0x7,%ecx
ffffffff80002586:	d3 e2                	shl    %cl,%edx
ffffffff80002588:	f7 d2                	not    %edx
ffffffff8000258a:	20 10                	and    %dl,(%rax)
    pmm_info.usedpages--;
ffffffff8000258c:	48 83 2d d4 dd 00 00 	subq   $0x1,0xddd4(%rip)        # ffffffff80010368 <pmm_info+0x8>
ffffffff80002593:	01 
    for(uint64_t i=0; i < count; i++)
ffffffff80002594:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80002597:	75 c7                	jne    ffffffff80002560 <pmm_freepages+0x10>
    }

    return 0;
}
ffffffff80002599:	31 c0                	xor    %eax,%eax
ffffffff8000259b:	c3                   	retq   
ffffffff8000259c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800025a0 <pmm_get_free_memory>:

uint64_t pmm_get_free_memory()
{
    return (pmm_info.totalpages - pmm_info.usedpages) * PAGE_SIZE;
ffffffff800025a0:	48 8b 05 c9 dd 00 00 	mov    0xddc9(%rip),%rax        # ffffffff80010370 <pmm_info+0x10>
ffffffff800025a7:	48 2b 05 ba dd 00 00 	sub    0xddba(%rip),%rax        # ffffffff80010368 <pmm_info+0x8>
ffffffff800025ae:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff800025b2:	c3                   	retq   
ffffffff800025b3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800025ba:	00 00 00 00 
ffffffff800025be:	66 90                	xchg   %ax,%ax

ffffffff800025c0 <pmm_get_total_memory>:

uint64_t pmm_get_total_memory()
{   
    return (pmm_info.totalpages) * PAGE_SIZE;
ffffffff800025c0:	48 8b 05 a9 dd 00 00 	mov    0xdda9(%rip),%rax        # ffffffff80010370 <pmm_info+0x10>
ffffffff800025c7:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff800025cb:	c3                   	retq   

ffffffff800025cc <pmm_init.cold>:
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800025cc:	48 89 f8             	mov    %rdi,%rax
ffffffff800025cf:	48 c1 e8 0c          	shr    $0xc,%rax
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff800025d3:	48 89 05 8e dd 00 00 	mov    %rax,0xdd8e(%rip)        # ffffffff80010368 <pmm_info+0x8>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800025da:	48 89 05 8f dd 00 00 	mov    %rax,0xdd8f(%rip)        # ffffffff80010370 <pmm_info+0x10>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff800025e1:	48 89 f8             	mov    %rdi,%rax
ffffffff800025e4:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff800025e8:	48 83 c0 01          	add    $0x1,%rax
ffffffff800025ec:	48 89 05 8d dd 00 00 	mov    %rax,0xdd8d(%rip)        # ffffffff80010380 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff800025f3:	48 8b 04 25 08 00 00 	mov    0x8,%rax
ffffffff800025fa:	00 
ffffffff800025fb:	0f 0b                	ud2    
ffffffff800025fd:	0f 1f 00             	nopl   (%rax)

ffffffff80002600 <vmm_create_page_table>:
struct PageTable* kernel_cr3 = {0};

uint64_t magic = 0xdeadbeef;

struct PageTable* vmm_create_page_table()
{
ffffffff80002600:	55                   	push   %rbp
    void* page = pmm_allocpage();   //get a page
ffffffff80002601:	31 c0                	xor    %eax,%eax
{
ffffffff80002603:	48 89 e5             	mov    %rsp,%rbp
    void* page = pmm_allocpage();   //get a page
ffffffff80002606:	e8 75 fd ff ff       	callq  ffffffff80002380 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000260b:	48 85 c0             	test   %rax,%rax
ffffffff8000260e:	74 2a                	je     ffffffff8000263a <vmm_create_page_table+0x3a>


static inline void* memset(void* s, uint64_t c, uint64_t len)
{
    unsigned char* p=(uint8_t*)s;
    while(len--)
ffffffff80002610:	48 8d 88 00 10 00 00 	lea    0x1000(%rax),%rcx
ffffffff80002617:	48 89 c2             	mov    %rax,%rdx
ffffffff8000261a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    {
        *p++ = (unsigned char)c;
ffffffff80002620:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002624:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80002628:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000262b:	75 f3                	jne    ffffffff80002620 <vmm_create_page_table+0x20>
ffffffff8000262d:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80002634:	80 ff ff 
ffffffff80002637:	48 01 d0             	add    %rdx,%rax

    memset((uint8_t*)page, 0, 4096);    //clear the page
    return (struct PageTable*)phys_to_hh_data((uint64_t)page);
    
    //return (struct PageTable*)phys_to_hh_data((uint64_t)page);
}
ffffffff8000263a:	5d                   	pop    %rbp
ffffffff8000263b:	c3                   	retq   
ffffffff8000263c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002640 <vmm_map_2Mpage>:
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
    }
}

void vmm_map_2Mpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80002640:	55                   	push   %rbp
ffffffff80002641:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002644:	41 57                	push   %r15
ffffffff80002646:	41 56                	push   %r14
    uint64_t index2, index3, index4;
    vaddr >>= 12;
    //index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80002648:	49 89 f6             	mov    %rsi,%r14
{
ffffffff8000264b:	41 55                	push   %r13
    vaddr >>= 9;
ffffffff8000264d:	49 89 f5             	mov    %rsi,%r13
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80002650:	48 c1 ee 27          	shr    $0x27,%rsi
{
ffffffff80002654:	41 54                	push   %r12
    index4 = vaddr & 0x1ff;
ffffffff80002656:	81 e6 ff 01 00 00    	and    $0x1ff,%esi
    vaddr >>= 9;
ffffffff8000265c:	49 c1 ed 15          	shr    $0x15,%r13
{
ffffffff80002660:	49 89 d4             	mov    %rdx,%r12
ffffffff80002663:	53                   	push   %rbx
    vaddr >>= 9;
ffffffff80002664:	49 c1 ee 1e          	shr    $0x1e,%r14
{
ffffffff80002668:	48 89 cb             	mov    %rcx,%rbx
    index2 = vaddr & 0x1ff;
ffffffff8000266b:	41 81 e5 ff 01 00 00 	and    $0x1ff,%r13d
    index3 = vaddr & 0x1ff;
ffffffff80002672:	41 81 e6 ff 01 00 00 	and    $0x1ff,%r14d
{
ffffffff80002679:	48 83 ec 18          	sub    $0x18,%rsp
    if(pagemap->entry[index] & 1)
ffffffff8000267d:	48 8b 04 f7          	mov    (%rdi,%rsi,8),%rax
ffffffff80002681:	a8 01                	test   $0x1,%al
ffffffff80002683:	74 33                	je     ffffffff800026b8 <vmm_map_2Mpage+0x78>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80002685:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff8000268b:	49 89 c7             	mov    %rax,%r15
    if(pagemap->entry[index] & 1)
ffffffff8000268e:	4a 8b 04 f0          	mov    (%rax,%r14,8),%rax
ffffffff80002692:	a8 01                	test   $0x1,%al
ffffffff80002694:	74 72                	je     ffffffff80002708 <vmm_map_2Mpage+0xc8>

    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);

    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff80002696:	4c 09 e3             	or     %r12,%rbx
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80002699:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff8000269f:	80 cb 80             	or     $0x80,%bl
ffffffff800026a2:	4a 89 1c e8          	mov    %rbx,(%rax,%r13,8)
}
ffffffff800026a6:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800026aa:	5b                   	pop    %rbx
ffffffff800026ab:	41 5c                	pop    %r12
ffffffff800026ad:	41 5d                	pop    %r13
ffffffff800026af:	41 5e                	pop    %r14
ffffffff800026b1:	41 5f                	pop    %r15
ffffffff800026b3:	5d                   	pop    %rbp
ffffffff800026b4:	c3                   	retq   
ffffffff800026b5:	0f 1f 00             	nopl   (%rax)
    void* page = pmm_allocpage();   //get a page
ffffffff800026b8:	31 c0                	xor    %eax,%eax
ffffffff800026ba:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff800026be:	49 89 f7             	mov    %rsi,%r15
ffffffff800026c1:	e8 ba fc ff ff       	callq  ffffffff80002380 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff800026c6:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
ffffffff800026ca:	48 85 c0             	test   %rax,%rax
ffffffff800026cd:	0f 84 7d 00 00 00    	je     ffffffff80002750 <vmm_map_2Mpage+0x110>
ffffffff800026d3:	48 8d 88 00 10 00 00 	lea    0x1000(%rax),%rcx
ffffffff800026da:	48 89 c2             	mov    %rax,%rdx
ffffffff800026dd:	0f 1f 00             	nopl   (%rax)
        *p++ = (unsigned char)c;
ffffffff800026e0:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800026e4:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff800026e8:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800026eb:	75 f3                	jne    ffffffff800026e0 <vmm_map_2Mpage+0xa0>
ffffffff800026ed:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff800026f4:	80 ff ff 
        if(!newentry) printf("Null page allocated!\n");
ffffffff800026f7:	48 01 d0             	add    %rdx,%rax
ffffffff800026fa:	74 54                	je     ffffffff80002750 <vmm_map_2Mpage+0x110>
        pagemap->entry[index] = newentry | flags;
ffffffff800026fc:	48 09 d8             	or     %rbx,%rax
ffffffff800026ff:	4b 89 04 f8          	mov    %rax,(%r8,%r15,8)
ffffffff80002703:	eb 80                	jmp    ffffffff80002685 <vmm_map_2Mpage+0x45>
ffffffff80002705:	0f 1f 00             	nopl   (%rax)
    void* page = pmm_allocpage();   //get a page
ffffffff80002708:	31 c0                	xor    %eax,%eax
ffffffff8000270a:	e8 71 fc ff ff       	callq  ffffffff80002380 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000270f:	48 85 c0             	test   %rax,%rax
ffffffff80002712:	74 5c                	je     ffffffff80002770 <vmm_map_2Mpage+0x130>
ffffffff80002714:	48 8d 88 00 10 00 00 	lea    0x1000(%rax),%rcx
ffffffff8000271b:	48 89 c2             	mov    %rax,%rdx
ffffffff8000271e:	66 90                	xchg   %ax,%ax
        *p++ = (unsigned char)c;
ffffffff80002720:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002724:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80002728:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8000272b:	75 f3                	jne    ffffffff80002720 <vmm_map_2Mpage+0xe0>
ffffffff8000272d:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80002734:	80 ff ff 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80002737:	48 01 d0             	add    %rdx,%rax
ffffffff8000273a:	74 34                	je     ffffffff80002770 <vmm_map_2Mpage+0x130>
        pagemap->entry[index] = newentry | flags;
ffffffff8000273c:	48 09 d8             	or     %rbx,%rax
ffffffff8000273f:	4b 89 04 f7          	mov    %rax,(%r15,%r14,8)
ffffffff80002743:	e9 4e ff ff ff       	jmpq   ffffffff80002696 <vmm_map_2Mpage+0x56>
ffffffff80002748:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000274f:	00 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80002750:	48 c7 c7 b2 58 00 80 	mov    $0xffffffff800058b2,%rdi
ffffffff80002757:	31 c0                	xor    %eax,%eax
ffffffff80002759:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff8000275d:	e8 ce 18 00 00       	callq  ffffffff80004030 <printf_>
ffffffff80002762:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
ffffffff80002766:	48 89 d8             	mov    %rbx,%rax
ffffffff80002769:	eb 94                	jmp    ffffffff800026ff <vmm_map_2Mpage+0xbf>
ffffffff8000276b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80002770:	48 c7 c7 b2 58 00 80 	mov    $0xffffffff800058b2,%rdi
ffffffff80002777:	31 c0                	xor    %eax,%eax
ffffffff80002779:	e8 b2 18 00 00       	callq  ffffffff80004030 <printf_>
ffffffff8000277e:	48 89 d8             	mov    %rbx,%rax
ffffffff80002781:	eb bc                	jmp    ffffffff8000273f <vmm_map_2Mpage+0xff>
ffffffff80002783:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000278a:	00 00 00 00 
ffffffff8000278e:	66 90                	xchg   %ax,%ax

ffffffff80002790 <vmm_map_4Kpage>:

void vmm_map_4Kpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80002790:	55                   	push   %rbp
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80002791:	49 89 f0             	mov    %rsi,%r8
ffffffff80002794:	49 c1 e8 1e          	shr    $0x1e,%r8
    index3 = vaddr & 0x1ff;
ffffffff80002798:	41 81 e0 ff 01 00 00 	and    $0x1ff,%r8d
{
ffffffff8000279f:	48 89 e5             	mov    %rsp,%rbp
ffffffff800027a2:	41 57                	push   %r15
ffffffff800027a4:	41 56                	push   %r14
ffffffff800027a6:	41 55                	push   %r13
ffffffff800027a8:	49 89 d5             	mov    %rdx,%r13
ffffffff800027ab:	41 54                	push   %r12
    vaddr >>= 12;
ffffffff800027ad:	49 89 f4             	mov    %rsi,%r12
{
ffffffff800027b0:	53                   	push   %rbx
    vaddr >>= 9;
ffffffff800027b1:	48 89 f3             	mov    %rsi,%rbx
    vaddr >>= 9;
ffffffff800027b4:	48 c1 ee 27          	shr    $0x27,%rsi
    vaddr >>= 12;
ffffffff800027b8:	49 c1 ec 0c          	shr    $0xc,%r12
    index4 = vaddr & 0x1ff;
ffffffff800027bc:	81 e6 ff 01 00 00    	and    $0x1ff,%esi
    vaddr >>= 9;
ffffffff800027c2:	48 c1 eb 15          	shr    $0x15,%rbx
    index1 = vaddr & 0x1ff;
ffffffff800027c6:	41 81 e4 ff 01 00 00 	and    $0x1ff,%r12d
    index2 = vaddr & 0x1ff;
ffffffff800027cd:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
{
ffffffff800027d3:	48 83 ec 18          	sub    $0x18,%rsp
    if(pagemap->entry[index] & 1)
ffffffff800027d7:	48 8b 04 f7          	mov    (%rdi,%rsi,8),%rax
ffffffff800027db:	a8 01                	test   $0x1,%al
ffffffff800027dd:	74 49                	je     ffffffff80002828 <vmm_map_4Kpage+0x98>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800027df:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff800027e5:	49 89 c6             	mov    %rax,%r14
    if(pagemap->entry[index] & 1)
ffffffff800027e8:	4a 8b 04 c0          	mov    (%rax,%r8,8),%rax
ffffffff800027ec:	a8 01                	test   $0x1,%al
ffffffff800027ee:	0f 84 f4 00 00 00    	je     ffffffff800028e8 <vmm_map_4Kpage+0x158>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800027f4:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff800027fa:	49 89 c6             	mov    %rax,%r14
    if(pagemap->entry[index] & 1)
ffffffff800027fd:	48 8b 04 d8          	mov    (%rax,%rbx,8),%rax
ffffffff80002801:	a8 01                	test   $0x1,%al
ffffffff80002803:	0f 84 87 00 00 00    	je     ffffffff80002890 <vmm_map_4Kpage+0x100>
    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);
    PML1 = vmm_get_pagemap(PML2, index2, flags);

    PML1->entry[index1] = physical | flags;
ffffffff80002809:	4c 09 e9             	or     %r13,%rcx
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff8000280c:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML1->entry[index1] = physical | flags;
ffffffff80002812:	4a 89 0c e0          	mov    %rcx,(%rax,%r12,8)
    //serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
    //serial_printf(SERIAL_PORT1, "%p, %d, %d, %d, %d, %p\n", virtual, index4, index3, index2, index1, physical);

    //vmm_flush_tlb((void*)virtual);

}
ffffffff80002816:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000281a:	5b                   	pop    %rbx
ffffffff8000281b:	41 5c                	pop    %r12
ffffffff8000281d:	41 5d                	pop    %r13
ffffffff8000281f:	41 5e                	pop    %r14
ffffffff80002821:	41 5f                	pop    %r15
ffffffff80002823:	5d                   	pop    %rbp
ffffffff80002824:	c3                   	retq   
ffffffff80002825:	0f 1f 00             	nopl   (%rax)
    void* page = pmm_allocpage();   //get a page
ffffffff80002828:	31 c0                	xor    %eax,%eax
ffffffff8000282a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8000282e:	49 89 ff             	mov    %rdi,%r15
ffffffff80002831:	49 89 f6             	mov    %rsi,%r14
ffffffff80002834:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff80002838:	e8 43 fb ff ff       	callq  ffffffff80002380 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000283d:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
ffffffff80002841:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff80002845:	48 85 c0             	test   %rax,%rax
ffffffff80002848:	0f 84 f2 00 00 00    	je     ffffffff80002940 <vmm_map_4Kpage+0x1b0>
ffffffff8000284e:	48 8d b0 00 10 00 00 	lea    0x1000(%rax),%rsi
ffffffff80002855:	48 89 c2             	mov    %rax,%rdx
ffffffff80002858:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000285f:	00 
        *p++ = (unsigned char)c;
ffffffff80002860:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002864:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80002868:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8000286b:	75 f3                	jne    ffffffff80002860 <vmm_map_4Kpage+0xd0>
ffffffff8000286d:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80002874:	80 ff ff 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80002877:	48 01 d0             	add    %rdx,%rax
ffffffff8000287a:	0f 84 c0 00 00 00    	je     ffffffff80002940 <vmm_map_4Kpage+0x1b0>
        pagemap->entry[index] = newentry | flags;
ffffffff80002880:	48 09 c8             	or     %rcx,%rax
ffffffff80002883:	4b 89 04 f7          	mov    %rax,(%r15,%r14,8)
ffffffff80002887:	e9 53 ff ff ff       	jmpq   ffffffff800027df <vmm_map_4Kpage+0x4f>
ffffffff8000288c:	0f 1f 40 00          	nopl   0x0(%rax)
    void* page = pmm_allocpage();   //get a page
ffffffff80002890:	31 c0                	xor    %eax,%eax
ffffffff80002892:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
ffffffff80002896:	e8 e5 fa ff ff       	callq  ffffffff80002380 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000289b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000289f:	48 85 c0             	test   %rax,%rax
ffffffff800028a2:	0f 84 f0 00 00 00    	je     ffffffff80002998 <vmm_map_4Kpage+0x208>
ffffffff800028a8:	48 8d b0 00 10 00 00 	lea    0x1000(%rax),%rsi
ffffffff800028af:	48 89 c2             	mov    %rax,%rdx
ffffffff800028b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        *p++ = (unsigned char)c;
ffffffff800028b8:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800028bc:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff800028c0:	48 39 f2             	cmp    %rsi,%rdx
ffffffff800028c3:	75 f3                	jne    ffffffff800028b8 <vmm_map_4Kpage+0x128>
ffffffff800028c5:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff800028cc:	80 ff ff 
        if(!newentry) printf("Null page allocated!\n");
ffffffff800028cf:	48 01 d0             	add    %rdx,%rax
ffffffff800028d2:	0f 84 c0 00 00 00    	je     ffffffff80002998 <vmm_map_4Kpage+0x208>
        pagemap->entry[index] = newentry | flags;
ffffffff800028d8:	48 09 c8             	or     %rcx,%rax
ffffffff800028db:	49 89 04 de          	mov    %rax,(%r14,%rbx,8)
ffffffff800028df:	e9 25 ff ff ff       	jmpq   ffffffff80002809 <vmm_map_4Kpage+0x79>
ffffffff800028e4:	0f 1f 40 00          	nopl   0x0(%rax)
    void* page = pmm_allocpage();   //get a page
ffffffff800028e8:	31 c0                	xor    %eax,%eax
ffffffff800028ea:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff800028ee:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff800028f2:	e8 89 fa ff ff       	callq  ffffffff80002380 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff800028f7:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
ffffffff800028fb:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff800028ff:	48 85 c0             	test   %rax,%rax
ffffffff80002902:	74 6c                	je     ffffffff80002970 <vmm_map_4Kpage+0x1e0>
ffffffff80002904:	48 8d b0 00 10 00 00 	lea    0x1000(%rax),%rsi
ffffffff8000290b:	48 89 c2             	mov    %rax,%rdx
ffffffff8000290e:	66 90                	xchg   %ax,%ax
        *p++ = (unsigned char)c;
ffffffff80002910:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002914:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80002918:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8000291b:	75 f3                	jne    ffffffff80002910 <vmm_map_4Kpage+0x180>
ffffffff8000291d:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80002924:	80 ff ff 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80002927:	48 01 d0             	add    %rdx,%rax
ffffffff8000292a:	74 44                	je     ffffffff80002970 <vmm_map_4Kpage+0x1e0>
        pagemap->entry[index] = newentry | flags;
ffffffff8000292c:	48 09 c8             	or     %rcx,%rax
ffffffff8000292f:	4b 89 04 c6          	mov    %rax,(%r14,%r8,8)
ffffffff80002933:	e9 bc fe ff ff       	jmpq   ffffffff800027f4 <vmm_map_4Kpage+0x64>
ffffffff80002938:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000293f:	00 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80002940:	48 c7 c7 b2 58 00 80 	mov    $0xffffffff800058b2,%rdi
ffffffff80002947:	31 c0                	xor    %eax,%eax
ffffffff80002949:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8000294d:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff80002951:	e8 da 16 00 00       	callq  ffffffff80004030 <printf_>
ffffffff80002956:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8000295a:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
ffffffff8000295e:	48 89 c8             	mov    %rcx,%rax
ffffffff80002961:	e9 1d ff ff ff       	jmpq   ffffffff80002883 <vmm_map_4Kpage+0xf3>
ffffffff80002966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000296d:	00 00 00 
ffffffff80002970:	48 c7 c7 b2 58 00 80 	mov    $0xffffffff800058b2,%rdi
ffffffff80002977:	31 c0                	xor    %eax,%eax
ffffffff80002979:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8000297d:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff80002981:	e8 aa 16 00 00       	callq  ffffffff80004030 <printf_>
ffffffff80002986:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8000298a:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
ffffffff8000298e:	48 89 c8             	mov    %rcx,%rax
ffffffff80002991:	eb 9c                	jmp    ffffffff8000292f <vmm_map_4Kpage+0x19f>
ffffffff80002993:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80002998:	48 c7 c7 b2 58 00 80 	mov    $0xffffffff800058b2,%rdi
ffffffff8000299f:	31 c0                	xor    %eax,%eax
ffffffff800029a1:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
ffffffff800029a5:	e8 86 16 00 00       	callq  ffffffff80004030 <printf_>
ffffffff800029aa:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800029ae:	48 89 c8             	mov    %rcx,%rax
ffffffff800029b1:	e9 25 ff ff ff       	jmpq   ffffffff800028db <vmm_map_4Kpage+0x14b>
ffffffff800029b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800029bd:	00 00 00 

ffffffff800029c0 <vmm_unmap_page>:
    virtual >>= 9;
    index3 = virtual & 0x1ff;
    virtual >>= 9;
    index4 = virtual & 0x1ff;

    if(PML4->entry[index4] & 1)
ffffffff800029c0:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff800029c7:	80 ff ff 
{
ffffffff800029ca:	48 89 f0             	mov    %rsi,%rax
    if(PML4->entry[index4] & 1)
ffffffff800029cd:	48 01 d7             	add    %rdx,%rdi
    virtual >>= 9;
ffffffff800029d0:	48 89 f2             	mov    %rsi,%rdx
ffffffff800029d3:	48 c1 ea 27          	shr    $0x27,%rdx
    index4 = virtual & 0x1ff;
ffffffff800029d7:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    if(PML4->entry[index4] & 1)
ffffffff800029dd:	48 8b 14 d7          	mov    (%rdi,%rdx,8),%rdx
ffffffff800029e1:	f6 c2 01             	test   $0x1,%dl
ffffffff800029e4:	74 58                	je     ffffffff80002a3e <vmm_unmap_page+0x7e>
    virtual >>= 9;
ffffffff800029e6:	48 89 f1             	mov    %rsi,%rcx
    {
        PML3 = (struct PageTable*)((PML4->entry[index4] >> 12) * 4096);
        if(PML3->entry[index3] & 1)
ffffffff800029e9:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
    virtual >>= 9;
ffffffff800029f0:	48 c1 e9 1e          	shr    $0x1e,%rcx
    index3 = virtual & 0x1ff;
ffffffff800029f4:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
        if(PML3->entry[index3] & 1)
ffffffff800029fa:	48 8b 14 ca          	mov    (%rdx,%rcx,8),%rdx
ffffffff800029fe:	f6 c2 01             	test   $0x1,%dl
ffffffff80002a01:	74 3b                	je     ffffffff80002a3e <vmm_unmap_page+0x7e>
    virtual >>= 9;
ffffffff80002a03:	48 89 f1             	mov    %rsi,%rcx
        {
            PML2 = (struct PageTable*)((PML3->entry[index3] >> 12) * 4096);
            if(PML2->entry[index2] & 1)
ffffffff80002a06:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
    virtual >>= 9;
ffffffff80002a0d:	48 c1 e9 15          	shr    $0x15,%rcx
    index2 = virtual & 0x1ff;
ffffffff80002a11:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            if(PML2->entry[index2] & 1)
ffffffff80002a17:	48 8b 14 ca          	mov    (%rdx,%rcx,8),%rdx
ffffffff80002a1b:	f6 c2 01             	test   $0x1,%dl
ffffffff80002a1e:	74 1e                	je     ffffffff80002a3e <vmm_unmap_page+0x7e>
    virtual >>= 12;
ffffffff80002a20:	48 c1 e8 0c          	shr    $0xc,%rax
            {
                PML1 = (struct PageTable*)((PML2->entry[index2] >> 12) * 4096);
ffffffff80002a24:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
    index1 = virtual & 0x1ff;
ffffffff80002a2b:	25 ff 01 00 00       	and    $0x1ff,%eax
                if(PML1->entry[index1] & 1)
ffffffff80002a30:	f6 04 c2 01          	testb  $0x1,(%rdx,%rax,8)
ffffffff80002a34:	74 08                	je     ffffffff80002a3e <vmm_unmap_page+0x7e>
                {
                    PML1->entry[index1] = 0x00;
ffffffff80002a36:	48 c7 04 c2 00 00 00 	movq   $0x0,(%rdx,%rax,8)
ffffffff80002a3d:	00 
                }
            }
        }
    }
}
ffffffff80002a3e:	c3                   	retq   
ffffffff80002a3f:	90                   	nop

ffffffff80002a40 <vmm_pagewalk>:

//returns a physical address for a given virtual address
uint64_t vmm_pagewalk(uint64_t vaddr, uint64_t* cr3)
{
ffffffff80002a40:	55                   	push   %rbp
    uint64_t* PML4 = (uint64_t*)(phys_to_hh_data((uint64_t)cr3));
    
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
ffffffff80002a41:	49 89 f8             	mov    %rdi,%r8
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80002a44:	48 89 f9             	mov    %rdi,%rcx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80002a47:	48 89 fa             	mov    %rdi,%rdx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80002a4a:	48 c1 ef 27          	shr    $0x27,%rdi
{
ffffffff80002a4e:	48 89 f0             	mov    %rsi,%rax
    vaddr >>= 9;
ffffffff80002a51:	48 c1 ea 1e          	shr    $0x1e,%rdx
    index4 = vaddr & 0x1ff;
   
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff80002a55:	49 b9 00 00 00 00 00 	movabs $0xffff800000000000,%r9
ffffffff80002a5c:	80 ff ff 
    index4 = vaddr & 0x1ff;
ffffffff80002a5f:	48 89 fe             	mov    %rdi,%rsi
    index3 = vaddr & 0x1ff;
ffffffff80002a62:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    vaddr >>= 9;
ffffffff80002a68:	48 c1 e9 15          	shr    $0x15,%rcx
    uint64_t* PTE = (uint64_t*)((phys_to_hh_data(PDE[index2]) >> 12) * 4096);
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);

    uint64_t pageaddr = hh_data_to_phys((uint64_t)PD);
    
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff80002a6c:	48 c7 c7 c8 58 00 80 	mov    $0xffffffff800058c8,%rdi
{
ffffffff80002a73:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002a76:	53                   	push   %rbx
    index4 = vaddr & 0x1ff;
ffffffff80002a77:	81 e6 ff 01 00 00    	and    $0x1ff,%esi
    vaddr >>= 12;
ffffffff80002a7d:	49 c1 e8 0c          	shr    $0xc,%r8
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff80002a81:	48 8d 04 f0          	lea    (%rax,%rsi,8),%rax
    index2 = vaddr & 0x1ff;
ffffffff80002a85:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
    index1 = vaddr & 0x1ff;
ffffffff80002a8b:	41 81 e0 ff 01 00 00 	and    $0x1ff,%r8d
{
ffffffff80002a92:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002a96:	4a 8b 1c 08          	mov    (%rax,%r9,1),%rbx
ffffffff80002a9a:	4c 01 cb             	add    %r9,%rbx
ffffffff80002a9d:	48 89 d8             	mov    %rbx,%rax
    uint64_t* PDE = (uint64_t*)((phys_to_hh_data(PDPTE[index3]) >> 12) * 4096);
ffffffff80002aa0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80002aa6:	48 8b 1c d0          	mov    (%rax,%rdx,8),%rbx
ffffffff80002aaa:	4c 01 cb             	add    %r9,%rbx
ffffffff80002aad:	48 89 d8             	mov    %rbx,%rax
    uint64_t* PTE = (uint64_t*)((phys_to_hh_data(PDE[index2]) >> 12) * 4096);
ffffffff80002ab0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80002ab6:	48 8b 1c c8          	mov    (%rax,%rcx,8),%rbx
ffffffff80002aba:	4c 01 cb             	add    %r9,%rbx
ffffffff80002abd:	48 89 d8             	mov    %rbx,%rax
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff80002ac0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80002ac6:	4e 03 0c c0          	add    (%rax,%r8,8),%r9
    return addr - 0xFFFF800000000000;
ffffffff80002aca:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80002ad1:	80 00 00 
ffffffff80002ad4:	49 81 e1 00 f0 ff ff 	and    $0xfffffffffffff000,%r9
ffffffff80002adb:	49 8d 1c 01          	lea    (%r9,%rax,1),%rbx
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff80002adf:	31 c0                	xor    %eax,%eax
ffffffff80002ae1:	49 89 d9             	mov    %rbx,%r9
ffffffff80002ae4:	e8 47 15 00 00       	callq  ffffffff80004030 <printf_>
    
    
    pageaddr >>= 12;
    pageaddr *= 4096;
ffffffff80002ae9:	48 89 d8             	mov    %rbx,%rax

    return pageaddr;
}
ffffffff80002aec:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80002af0:	c9                   	leaveq 
ffffffff80002af1:	c3                   	retq   
ffffffff80002af2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002af9:	00 00 00 00 
ffffffff80002afd:	0f 1f 00             	nopl   (%rax)

ffffffff80002b00 <vmm_PMLwalk>:

void vmm_PMLwalk(struct PageTable* pagetable)
{
ffffffff80002b00:	55                   	push   %rbp
ffffffff80002b01:	48 89 fa             	mov    %rdi,%rdx
    struct PageTable* PML4 = pagetable;
    struct PageTable* PML3 = NULL;
    struct PageTable* PML2 = NULL;
    struct PageTable* PML1 = NULL;

    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80002b04:	48 c7 c6 dc 58 00 80 	mov    $0xffffffff800058dc,%rsi
ffffffff80002b0b:	31 c0                	xor    %eax,%eax
{
ffffffff80002b0d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002b10:	41 57                	push   %r15
ffffffff80002b12:	41 56                	push   %r14
ffffffff80002b14:	41 55                	push   %r13
ffffffff80002b16:	41 54                	push   %r12
ffffffff80002b18:	53                   	push   %rbx
ffffffff80002b19:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80002b1d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80002b21:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002b26:	e8 c5 16 00 00       	callq  ffffffff800041f0 <serial_printf>
    for(uint64_t i = 0; i < 512; i++)
ffffffff80002b2b:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff80002b32:	00 
ffffffff80002b33:	eb 15                	jmp    ffffffff80002b4a <vmm_PMLwalk+0x4a>
ffffffff80002b35:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
ffffffff80002b3a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80002b3e:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80002b44:	0f 84 19 01 00 00    	je     ffffffff80002c63 <vmm_PMLwalk+0x163>
    {
        if(pagetable->entry[i] & 0x01)
ffffffff80002b4a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80002b4e:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
ffffffff80002b52:	4c 8b 04 d8          	mov    (%rax,%rbx,8),%r8
ffffffff80002b56:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80002b5a:	74 d9                	je     ffffffff80002b35 <vmm_PMLwalk+0x35>
            {
                serial_printf(SERIAL_PORT1, "4,%p,%d,%p\r\n",pagetable, i, pagetable->entry[i]);
ffffffff80002b5c:	49 89 de             	mov    %rbx,%r14
ffffffff80002b5f:	48 89 d9             	mov    %rbx,%rcx
ffffffff80002b62:	48 89 c2             	mov    %rax,%rdx
ffffffff80002b65:	48 89 c3             	mov    %rax,%rbx
ffffffff80002b68:	48 c7 c6 f7 58 00 80 	mov    $0xffffffff800058f7,%rsi
ffffffff80002b6f:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002b74:	31 c0                	xor    %eax,%eax
ffffffff80002b76:	e8 75 16 00 00       	callq  ffffffff800041f0 <serial_printf>
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff80002b7b:	4e 8b 34 f3          	mov    (%rbx,%r14,8),%r14
                for(uint64_t j = 0; j < 512; j++)
ffffffff80002b7f:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80002b86:	00 
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff80002b87:	49 81 e6 00 fe ff ff 	and    $0xfffffffffffffe00,%r14
                for(uint64_t j = 0; j < 512; j++)
ffffffff80002b8e:	eb 11                	jmp    ffffffff80002ba1 <vmm_PMLwalk+0xa1>
ffffffff80002b90:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
ffffffff80002b95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80002b99:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80002b9f:	74 94                	je     ffffffff80002b35 <vmm_PMLwalk+0x35>
                {
                    if(PML3->entry[j] & 0x01)
ffffffff80002ba1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80002ba5:	4d 8b 04 c6          	mov    (%r14,%rax,8),%r8
ffffffff80002ba9:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80002bad:	74 e1                	je     ffffffff80002b90 <vmm_PMLwalk+0x90>
                    {
                        serial_printf(SERIAL_PORT1, "3,%p,%d,%p\r\n",PML3, j, PML3->entry[j]);
ffffffff80002baf:	48 89 c3             	mov    %rax,%rbx
ffffffff80002bb2:	48 89 c1             	mov    %rax,%rcx
ffffffff80002bb5:	4c 89 f2             	mov    %r14,%rdx
ffffffff80002bb8:	31 c0                	xor    %eax,%eax
ffffffff80002bba:	48 c7 c6 04 59 00 80 	mov    $0xffffffff80005904,%rsi
ffffffff80002bc1:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002bc6:	e8 25 16 00 00       	callq  ffffffff800041f0 <serial_printf>
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80002bcb:	49 8b 04 de          	mov    (%r14,%rbx,8),%rax
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80002bcf:	31 db                	xor    %ebx,%ebx
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80002bd1:	49 89 c4             	mov    %rax,%r12
ffffffff80002bd4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80002bd8:	49 81 e4 00 fe ff ff 	and    $0xfffffffffffffe00,%r12
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80002bdf:	eb 14                	jmp    ffffffff80002bf5 <vmm_PMLwalk+0xf5>
ffffffff80002be1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80002be8:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80002bec:	48 81 fb 00 02 00 00 	cmp    $0x200,%rbx
ffffffff80002bf3:	74 9b                	je     ffffffff80002b90 <vmm_PMLwalk+0x90>
                        {
                            if(PML2->entry[k] & 0x01)
ffffffff80002bf5:	4d 8b 04 dc          	mov    (%r12,%rbx,8),%r8
ffffffff80002bf9:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80002bfd:	74 e9                	je     ffffffff80002be8 <vmm_PMLwalk+0xe8>
                            {
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80002bff:	48 89 d9             	mov    %rbx,%rcx
ffffffff80002c02:	4c 89 e2             	mov    %r12,%rdx
ffffffff80002c05:	48 c7 c6 11 59 00 80 	mov    $0xffffffff80005911,%rsi
ffffffff80002c0c:	31 c0                	xor    %eax,%eax
ffffffff80002c0e:	bf f8 03 00 00       	mov    $0x3f8,%edi
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80002c13:	45 31 ff             	xor    %r15d,%r15d
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80002c16:	e8 d5 15 00 00       	callq  ffffffff800041f0 <serial_printf>
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
ffffffff80002c1b:	4d 8b 2c de          	mov    (%r14,%rbx,8),%r13
ffffffff80002c1f:	49 81 e5 00 fe ff ff 	and    $0xfffffffffffffe00,%r13
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80002c26:	eb 15                	jmp    ffffffff80002c3d <vmm_PMLwalk+0x13d>
ffffffff80002c28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002c2f:	00 
ffffffff80002c30:	49 83 c7 01          	add    $0x1,%r15
ffffffff80002c34:	49 81 ff 00 02 00 00 	cmp    $0x200,%r15
ffffffff80002c3b:	74 ab                	je     ffffffff80002be8 <vmm_PMLwalk+0xe8>
                                {
                                    if(PML1->entry[l] & 0x01)
ffffffff80002c3d:	4f 8b 44 fd 00       	mov    0x0(%r13,%r15,8),%r8
ffffffff80002c42:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80002c46:	74 e8                	je     ffffffff80002c30 <vmm_PMLwalk+0x130>
                                    {
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80002c48:	4c 89 f9             	mov    %r15,%rcx
ffffffff80002c4b:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002c4e:	48 c7 c6 1e 59 00 80 	mov    $0xffffffff8000591e,%rsi
ffffffff80002c55:	31 c0                	xor    %eax,%eax
ffffffff80002c57:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002c5c:	e8 8f 15 00 00       	callq  ffffffff800041f0 <serial_printf>
ffffffff80002c61:	eb cd                	jmp    ffffffff80002c30 <vmm_PMLwalk+0x130>
                }//PML3
            }
    }//PML4

    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
}
ffffffff80002c63:	48 83 c4 28          	add    $0x28,%rsp
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80002c67:	48 c7 c6 2b 59 00 80 	mov    $0xffffffff8000592b,%rsi
ffffffff80002c6e:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002c73:	31 c0                	xor    %eax,%eax
}
ffffffff80002c75:	5b                   	pop    %rbx
ffffffff80002c76:	41 5c                	pop    %r12
ffffffff80002c78:	41 5d                	pop    %r13
ffffffff80002c7a:	41 5e                	pop    %r14
ffffffff80002c7c:	41 5f                	pop    %r15
ffffffff80002c7e:	5d                   	pop    %rbp
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80002c7f:	e9 6c 15 00 00       	jmpq   ffffffff800041f0 <serial_printf>
ffffffff80002c84:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002c8b:	00 00 00 00 
ffffffff80002c8f:	90                   	nop

ffffffff80002c90 <vmm_init>:

void vmm_init()
{
ffffffff80002c90:	55                   	push   %rbp
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80002c91:	31 c0                	xor    %eax,%eax
{
ffffffff80002c93:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002c96:	41 57                	push   %r15
ffffffff80002c98:	41 56                	push   %r14
ffffffff80002c9a:	41 55                	push   %r13
ffffffff80002c9c:	41 54                	push   %r12
ffffffff80002c9e:	53                   	push   %rbx
ffffffff80002c9f:	48 83 ec 28          	sub    $0x28,%rsp
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80002ca3:	e8 f8 d6 ff ff       	callq  ffffffff800003a0 <vmm_read_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80002ca8:	48 c7 c7 3a 59 00 80 	mov    $0xffffffff8000593a,%rdi
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80002caf:	48 89 c6             	mov    %rax,%rsi
ffffffff80002cb2:	48 89 05 cf d6 00 00 	mov    %rax,0xd6cf(%rip)        # ffffffff80010388 <kernel_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80002cb9:	31 c0                	xor    %eax,%eax
ffffffff80002cbb:	e8 70 13 00 00       	callq  ffffffff80004030 <printf_>
    uint32_t efer = vmm_read_efer();
ffffffff80002cc0:	31 c0                	xor    %eax,%eax
ffffffff80002cc2:	e8 e5 d6 ff ff       	callq  ffffffff800003ac <vmm_read_efer>
    uint32_t NXE = efer & (1 << 11);
    printf("EFER: %p  NXE: %d\n", efer, NXE);
ffffffff80002cc7:	48 c7 c7 43 59 00 80 	mov    $0xffffffff80005943,%rdi
    uint32_t NXE = efer & (1 << 11);
ffffffff80002cce:	89 c2                	mov    %eax,%edx
    uint32_t efer = vmm_read_efer();
ffffffff80002cd0:	89 c6                	mov    %eax,%esi
    printf("EFER: %p  NXE: %d\n", efer, NXE);
ffffffff80002cd2:	31 c0                	xor    %eax,%eax
    uint32_t NXE = efer & (1 << 11);
ffffffff80002cd4:	81 e2 00 08 00 00    	and    $0x800,%edx
    printf("EFER: %p  NXE: %d\n", efer, NXE);
ffffffff80002cda:	e8 51 13 00 00       	callq  ffffffff80004030 <printf_>
    void* page = pmm_allocpage();   //get a page
ffffffff80002cdf:	31 c0                	xor    %eax,%eax
ffffffff80002ce1:	e8 9a f6 ff ff       	callq  ffffffff80002380 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80002ce6:	48 85 c0             	test   %rax,%rax
ffffffff80002ce9:	74 27                	je     ffffffff80002d12 <vmm_init+0x82>
ffffffff80002ceb:	48 8d 88 00 10 00 00 	lea    0x1000(%rax),%rcx
ffffffff80002cf2:	48 89 c2             	mov    %rax,%rdx
ffffffff80002cf5:	0f 1f 00             	nopl   (%rax)
        *p++ = (unsigned char)c;
ffffffff80002cf8:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002cfc:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80002d00:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80002d03:	75 f3                	jne    ffffffff80002cf8 <vmm_init+0x68>
    return 0xFFFF800000000000 + addr;
ffffffff80002d05:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80002d0c:	80 ff ff 
ffffffff80002d0f:	48 01 d0             	add    %rdx,%rax
 
    //Create the Kernel PML4 table
    RootPageDirectory = vmm_create_page_table();

    //Figure out where the kernel is and how big it is from the boot_info struct
    uint64_t kernel_physical = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80002d12:	48 8b 15 67 60 00 00 	mov    0x6067(%rip),%rdx        # ffffffff80008d80 <boot_info>
    RootPageDirectory = vmm_create_page_table();
ffffffff80002d19:	48 89 05 70 d6 00 00 	mov    %rax,0xd670(%rip)        # ffffffff80010390 <RootPageDirectory>
    PTE_READWRITE           Writable if set
    PTE_USER_SUPERVISOR     User accessable if set
    PTE_EXECUTE_DISABLE     Disables execute if set (if EFER:11 is set)
*/

    for(uint64_t i = 0; i < boot_info.tag_pmrs->entries; i++)
ffffffff80002d20:	48 8b 05 99 60 00 00 	mov    0x6099(%rip),%rax        # ffffffff80008dc0 <boot_info+0x40>
ffffffff80002d27:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
ffffffff80002d2e:	00 
    uint64_t kernel_physical = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80002d2f:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
    for(uint64_t i = 0; i < boot_info.tag_pmrs->entries; i++)
ffffffff80002d33:	48 2b 4a 18          	sub    0x18(%rdx),%rcx
ffffffff80002d37:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
ffffffff80002d3c:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80002d40:	0f 84 d3 00 00 00    	je     ffffffff80002e19 <vmm_init+0x189>
ffffffff80002d46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002d4d:	00 00 00 
    {
        uint64_t virt = boot_info.tag_pmrs->pmrs[i].base;
ffffffff80002d50:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
        uint64_t phys = virt - kernel_offset;
ffffffff80002d54:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
            flags |= PTE_READWRITE;
        }

        flags |= PTE_PRESENT;
        
        DEBUG_MSG("Base: %p  Length: %x  Flags: %x\n", boot_info.tag_pmrs->pmrs[i].base, boot_info.tag_pmrs->pmrs[i].length, boot_info.tag_pmrs->pmrs[i].permissions);
ffffffff80002d58:	bf f8 03 00 00       	mov    $0x3f8,%edi
        uint64_t virt = boot_info.tag_pmrs->pmrs[i].base;
ffffffff80002d5d:	4c 8d 24 49          	lea    (%rcx,%rcx,2),%r12
ffffffff80002d61:	49 c1 e4 03          	shl    $0x3,%r12
ffffffff80002d65:	4c 01 e0             	add    %r12,%rax
ffffffff80002d68:	48 8b 50 18          	mov    0x18(%rax),%rdx
        uint64_t perms = boot_info.tag_pmrs->pmrs[i].permissions;
ffffffff80002d6c:	4c 8b 40 28          	mov    0x28(%rax),%r8
        uint64_t phys = virt - kernel_offset;
ffffffff80002d70:	48 8d 0c 32          	lea    (%rdx,%rsi,1),%rcx
        DEBUG_MSG("Base: %p  Length: %x  Flags: %x\n", boot_info.tag_pmrs->pmrs[i].base, boot_info.tag_pmrs->pmrs[i].length, boot_info.tag_pmrs->pmrs[i].permissions);
ffffffff80002d74:	48 c7 c6 98 59 00 80 	mov    $0xffffffff80005998,%rsi
        if(perms & 0x02) //is read/write bit set?
ffffffff80002d7b:	4c 89 c3             	mov    %r8,%rbx
        uint64_t virt = boot_info.tag_pmrs->pmrs[i].base;
ffffffff80002d7e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
        uint64_t phys = virt - kernel_offset;
ffffffff80002d82:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
        DEBUG_MSG("Base: %p  Length: %x  Flags: %x\n", boot_info.tag_pmrs->pmrs[i].base, boot_info.tag_pmrs->pmrs[i].length, boot_info.tag_pmrs->pmrs[i].permissions);
ffffffff80002d86:	48 8b 48 20          	mov    0x20(%rax),%rcx
ffffffff80002d8a:	31 c0                	xor    %eax,%eax
        if(perms & 0x02) //is read/write bit set?
ffffffff80002d8c:	83 e3 02             	and    $0x2,%ebx
        flags |= PTE_PRESENT;
ffffffff80002d8f:	48 83 cb 01          	or     $0x1,%rbx
        DEBUG_MSG("Base: %p  Length: %x  Flags: %x\n", boot_info.tag_pmrs->pmrs[i].base, boot_info.tag_pmrs->pmrs[i].length, boot_info.tag_pmrs->pmrs[i].permissions);
ffffffff80002d93:	e8 58 14 00 00       	callq  ffffffff800041f0 <serial_printf>
        for(uint64_t j = 0; j < boot_info.tag_pmrs->pmrs[i].length; j+=0x1000)
ffffffff80002d98:	48 8b 05 21 60 00 00 	mov    0x6021(%rip),%rax        # ffffffff80008dc0 <boot_info+0x40>
ffffffff80002d9f:	4a 83 7c 20 20 00    	cmpq   $0x0,0x20(%rax,%r12,1)
ffffffff80002da5:	74 5f                	je     ffffffff80002e06 <vmm_init+0x176>
ffffffff80002da7:	45 31 ff             	xor    %r15d,%r15d
ffffffff80002daa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        {
            vmm_map_4Kpage(RootPageDirectory, virt + j, phys + j, flags);
ffffffff80002db0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80002db4:	48 8b 3d d5 d5 00 00 	mov    0xd5d5(%rip),%rdi        # ffffffff80010390 <RootPageDirectory>
ffffffff80002dbb:	48 89 d9             	mov    %rbx,%rcx
ffffffff80002dbe:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
ffffffff80002dc2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80002dc6:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002dc9:	4e 8d 34 38          	lea    (%rax,%r15,1),%r14
        for(uint64_t j = 0; j < boot_info.tag_pmrs->pmrs[i].length; j+=0x1000)
ffffffff80002dcd:	49 81 c7 00 10 00 00 	add    $0x1000,%r15
            vmm_map_4Kpage(RootPageDirectory, virt + j, phys + j, flags);
ffffffff80002dd4:	4c 89 f6             	mov    %r14,%rsi
ffffffff80002dd7:	e8 b4 f9 ff ff       	callq  ffffffff80002790 <vmm_map_4Kpage>
            DEBUG_MSG("Kernel : %p %p %x\n", virt + j, phys + j, flags); 
ffffffff80002ddc:	31 c0                	xor    %eax,%eax
ffffffff80002dde:	49 89 d8             	mov    %rbx,%r8
ffffffff80002de1:	4c 89 e9             	mov    %r13,%rcx
ffffffff80002de4:	4c 89 f2             	mov    %r14,%rdx
ffffffff80002de7:	48 c7 c6 60 59 00 80 	mov    $0xffffffff80005960,%rsi
ffffffff80002dee:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002df3:	e8 f8 13 00 00       	callq  ffffffff800041f0 <serial_printf>
        for(uint64_t j = 0; j < boot_info.tag_pmrs->pmrs[i].length; j+=0x1000)
ffffffff80002df8:	48 8b 05 c1 5f 00 00 	mov    0x5fc1(%rip),%rax        # ffffffff80008dc0 <boot_info+0x40>
ffffffff80002dff:	4e 3b 7c 20 20       	cmp    0x20(%rax,%r12,1),%r15
ffffffff80002e04:	72 aa                	jb     ffffffff80002db0 <vmm_init+0x120>
    for(uint64_t i = 0; i < boot_info.tag_pmrs->entries; i++)
ffffffff80002e06:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
ffffffff80002e0b:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80002e0f:	48 3b 78 10          	cmp    0x10(%rax),%rdi
ffffffff80002e13:	0f 82 37 ff ff ff    	jb     ffffffff80002d50 <vmm_init+0xc0>
    //{
    //    vmm_map_4Kpage(RootPageDirectory, kernel_virt + (0x1000 * i), kernel_phys + (0x1000 * i), PTE_PRESENT | PTE_READWRITE);
    //}

    //Map Physical Memory to 0xFFFF8...
    printf("HHDM: %p\n", boot_info.tag_hhdm->addr);
ffffffff80002e19:	48 8b 05 98 5f 00 00 	mov    0x5f98(%rip),%rax        # ffffffff80008db8 <boot_info+0x38>
ffffffff80002e20:	48 c7 c7 56 59 00 80 	mov    $0xffffffff80005956,%rdi
    for(uint64_t i = 0; i < pmm_info.totalmem ; i+=0x1000)
ffffffff80002e27:	31 db                	xor    %ebx,%ebx
    printf("HHDM: %p\n", boot_info.tag_hhdm->addr);
ffffffff80002e29:	48 8b 70 10          	mov    0x10(%rax),%rsi
ffffffff80002e2d:	31 c0                	xor    %eax,%eax
ffffffff80002e2f:	e8 fc 11 00 00       	callq  ffffffff80004030 <printf_>
    for(uint64_t i = 0; i < pmm_info.totalmem ; i+=0x1000)
ffffffff80002e34:	4c 8b 25 25 d5 00 00 	mov    0xd525(%rip),%r12        # ffffffff80010360 <pmm_info>
ffffffff80002e3b:	4d 85 e4             	test   %r12,%r12
ffffffff80002e3e:	74 2e                	je     ffffffff80002e6e <vmm_init+0x1de>
    {   
        vmm_map_4Kpage(RootPageDirectory, (boot_info.tag_hhdm->addr + i), i, PTE_PRESENT | PTE_READWRITE);
ffffffff80002e40:	48 8b 05 71 5f 00 00 	mov    0x5f71(%rip),%rax        # ffffffff80008db8 <boot_info+0x38>
ffffffff80002e47:	48 8b 3d 42 d5 00 00 	mov    0xd542(%rip),%rdi        # ffffffff80010390 <RootPageDirectory>
ffffffff80002e4e:	48 89 da             	mov    %rbx,%rdx
ffffffff80002e51:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80002e56:	48 8b 70 10          	mov    0x10(%rax),%rsi
ffffffff80002e5a:	48 01 de             	add    %rbx,%rsi
    for(uint64_t i = 0; i < pmm_info.totalmem ; i+=0x1000)
ffffffff80002e5d:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
        vmm_map_4Kpage(RootPageDirectory, (boot_info.tag_hhdm->addr + i), i, PTE_PRESENT | PTE_READWRITE);
ffffffff80002e64:	e8 27 f9 ff ff       	callq  ffffffff80002790 <vmm_map_4Kpage>
    for(uint64_t i = 0; i < pmm_info.totalmem ; i+=0x1000)
ffffffff80002e69:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80002e6c:	72 d2                	jb     ffffffff80002e40 <vmm_init+0x1b0>
    }

    DEBUG_MSG("New CR3: %p -- & %p \n", (uint64_t)RootPageDirectory, &RootPageDirectory);
ffffffff80002e6e:	48 8b 15 1b d5 00 00 	mov    0xd51b(%rip),%rdx        # ffffffff80010390 <RootPageDirectory>
ffffffff80002e75:	48 c7 c1 90 03 01 80 	mov    $0xffffffff80010390,%rcx
ffffffff80002e7c:	48 c7 c6 73 59 00 80 	mov    $0xffffffff80005973,%rsi
ffffffff80002e83:	31 c0                	xor    %eax,%eax
ffffffff80002e85:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002e8a:	e8 61 13 00 00       	callq  ffffffff800041f0 <serial_printf>
    printf("New CR3: %p -- & %p \n", (uint64_t)RootPageDirectory, &RootPageDirectory);
ffffffff80002e8f:	48 8b 35 fa d4 00 00 	mov    0xd4fa(%rip),%rsi        # ffffffff80010390 <RootPageDirectory>
ffffffff80002e96:	48 c7 c2 90 03 01 80 	mov    $0xffffffff80010390,%rdx
ffffffff80002e9d:	31 c0                	xor    %eax,%eax
ffffffff80002e9f:	48 c7 c7 73 59 00 80 	mov    $0xffffffff80005973,%rdi
ffffffff80002ea6:	e8 85 11 00 00       	callq  ffffffff80004030 <printf_>
    //c=pmm_allocpage();
    //d=pmm_allocpage();

    //printf("%p, %p, %p, %p", a,b,c,d);

    vmm_PMLwalk(kernel_cr3);
ffffffff80002eab:	48 8b 3d d6 d4 00 00 	mov    0xd4d6(%rip),%rdi        # ffffffff80010388 <kernel_cr3>
ffffffff80002eb2:	e8 49 fc ff ff       	callq  ffffffff80002b00 <vmm_PMLwalk>

    DEBUG_MSG("New PML4\n");
ffffffff80002eb7:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80002ebc:	48 c7 c6 89 59 00 80 	mov    $0xffffffff80005989,%rsi
ffffffff80002ec3:	31 c0                	xor    %eax,%eax
ffffffff80002ec5:	e8 26 13 00 00       	callq  ffffffff800041f0 <serial_printf>
    vmm_PMLwalk(RootPageDirectory);
ffffffff80002eca:	48 8b 3d bf d4 00 00 	mov    0xd4bf(%rip),%rdi        # ffffffff80010390 <RootPageDirectory>

    //cycle through page entries


    
}
ffffffff80002ed1:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80002ed5:	5b                   	pop    %rbx
ffffffff80002ed6:	41 5c                	pop    %r12
ffffffff80002ed8:	41 5d                	pop    %r13
ffffffff80002eda:	41 5e                	pop    %r14
ffffffff80002edc:	41 5f                	pop    %r15
ffffffff80002ede:	5d                   	pop    %rbp
    vmm_PMLwalk(RootPageDirectory);
ffffffff80002edf:	e9 1c fc ff ff       	jmpq   ffffffff80002b00 <vmm_PMLwalk>
ffffffff80002ee4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002eeb:	00 00 00 
ffffffff80002eee:	66 90                	xchg   %ax,%ax

ffffffff80002ef0 <schedule>:
#include "../memory/memory.h"


struct thread_control_block* threads[512];

void schedule()
ffffffff80002ef0:	c3                   	retq   
ffffffff80002ef1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002ef8:	00 00 00 00 
ffffffff80002efc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002f00 <scheduler_init>:
}

void scheduler_init()
{

ffffffff80002f00:	c3                   	retq   
ffffffff80002f01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002f08:	00 00 00 
ffffffff80002f0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80002f10 <user_init>:
extern void __syscall_handler();
extern void enable_syscall(uint64_t STAR, void* handler);

void user_init()
{
    enable_syscall(0x00180008, &__syscall_handler);
ffffffff80002f10:	48 c7 c6 4c 04 00 80 	mov    $0xffffffff8000044c,%rsi
ffffffff80002f17:	bf 08 00 18 00       	mov    $0x180008,%edi
ffffffff80002f1c:	e9 e4 d4 ff ff       	jmpq   ffffffff80000405 <enable_syscall>
ffffffff80002f21:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002f28:	00 00 00 00 
ffffffff80002f2c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002f30 <syscall_handler>:
    //set_lstar(__syscall_handler);
}

uint64_t syscall_handler(uint64_t num, uint64_t param1, uint64_t param2, uint64_t param3, uint64_t param4, uint64_t param5)
{
    switch(num)
ffffffff80002f30:	48 83 ff 01          	cmp    $0x1,%rdi
ffffffff80002f34:	74 2a                	je     ffffffff80002f60 <syscall_handler+0x30>
ffffffff80002f36:	76 0c                	jbe    ffffffff80002f44 <syscall_handler+0x14>
ffffffff80002f38:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80002f3c:	76 06                	jbe    ffffffff80002f44 <syscall_handler+0x14>
ffffffff80002f3e:	48 83 ff 10          	cmp    $0x10,%rdi
ffffffff80002f42:	75 0c                	jne    ffffffff80002f50 <syscall_handler+0x20>
{
ffffffff80002f44:	31 c0                	xor    %eax,%eax
        default:
            return -1;
    }

    return 0;
}
ffffffff80002f46:	c3                   	retq   
ffffffff80002f47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002f4e:	00 00 
            return -1;
ffffffff80002f50:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80002f57:	c3                   	retq   
ffffffff80002f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002f5f:	00 
{
ffffffff80002f60:	55                   	push   %rbp
            printf((char*)param1);
ffffffff80002f61:	48 89 f7             	mov    %rsi,%rdi
ffffffff80002f64:	31 c0                	xor    %eax,%eax
{
ffffffff80002f66:	48 89 e5             	mov    %rsp,%rbp
            printf((char*)param1);
ffffffff80002f69:	e8 c2 10 00 00       	callq  ffffffff80004030 <printf_>
{
ffffffff80002f6e:	31 c0                	xor    %eax,%eax
}
ffffffff80002f70:	5d                   	pop    %rbp
ffffffff80002f71:	c3                   	retq   
ffffffff80002f72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002f79:	00 00 00 
ffffffff80002f7c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002f80 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
ffffffff80002f80:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80002f83:	73 04                	jae    ffffffff80002f89 <_out_buffer+0x9>
    ((char*)buffer)[idx] = character;
ffffffff80002f85:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  }
}
ffffffff80002f89:	c3                   	retq   
ffffffff80002f8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80002f90 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
ffffffff80002f90:	c3                   	retq   
ffffffff80002f91:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002f98:	00 00 00 00 
ffffffff80002f9c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002fa0 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002fa0:	55                   	push   %rbp
ffffffff80002fa1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002fa4:	41 57                	push   %r15
ffffffff80002fa6:	41 56                	push   %r14
ffffffff80002fa8:	49 89 ce             	mov    %rcx,%r14
ffffffff80002fab:	41 55                	push   %r13
ffffffff80002fad:	49 89 f5             	mov    %rsi,%r13
ffffffff80002fb0:	44 89 ce             	mov    %r9d,%esi
ffffffff80002fb3:	41 54                	push   %r12
ffffffff80002fb5:	49 89 fc             	mov    %rdi,%r12
ffffffff80002fb8:	53                   	push   %rbx
ffffffff80002fb9:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80002fbd:	44 8b 55 28          	mov    0x28(%rbp),%r10d
ffffffff80002fc1:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
ffffffff80002fc5:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002fc9:	45 89 d7             	mov    %r10d,%r15d
ffffffff80002fcc:	41 81 e7 00 04 00 00 	and    $0x400,%r15d
  if (!value) {
ffffffff80002fd3:	4d 85 c0             	test   %r8,%r8
ffffffff80002fd6:	0f 84 84 03 00 00    	je     ffffffff80003360 <_ntoa_long+0x3c0>
  if (flags & FLAGS_HASH) {
ffffffff80002fdc:	44 89 d1             	mov    %r10d,%ecx
ffffffff80002fdf:	83 e1 10             	and    $0x10,%ecx
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002fe2:	44 89 d2             	mov    %r10d,%edx
ffffffff80002fe5:	89 4d a8             	mov    %ecx,-0x58(%rbp)
ffffffff80002fe8:	4c 8d 4d af          	lea    -0x51(%rbp),%r9
ffffffff80002fec:	83 e2 20             	and    $0x20,%edx
ffffffff80002fef:	44 89 7d 9c          	mov    %r15d,-0x64(%rbp)
ffffffff80002ff3:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002ff6:	45 19 db             	sbb    %r11d,%r11d
ffffffff80002ff9:	31 db                	xor    %ebx,%ebx
ffffffff80002ffb:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002fff:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80003003:	eb 06                	jmp    ffffffff8000300b <_ntoa_long+0x6b>
ffffffff80003005:	0f 1f 00             	nopl   (%rax)
      value /= base;
ffffffff80003008:	49 89 c0             	mov    %rax,%r8
      const char digit = (char)(value % base);
ffffffff8000300b:	31 d2                	xor    %edx,%edx
ffffffff8000300d:	4c 89 c0             	mov    %r8,%rax
ffffffff80003010:	48 f7 f7             	div    %rdi
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80003013:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80003017:	44 8d 7a 30          	lea    0x30(%rdx),%r15d
ffffffff8000301b:	41 8d 0c 13          	lea    (%r11,%rdx,1),%ecx
ffffffff8000301f:	41 0f 46 cf          	cmovbe %r15d,%ecx
ffffffff80003023:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80003027:	41 88 0c 19          	mov    %cl,(%r9,%rbx,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff8000302b:	48 83 fb 1f          	cmp    $0x1f,%rbx
ffffffff8000302f:	77 05                	ja     ffffffff80003036 <_ntoa_long+0x96>
ffffffff80003031:	49 39 f8             	cmp    %rdi,%r8
ffffffff80003034:	73 d2                	jae    ffffffff80003008 <_ntoa_long+0x68>
  if (!(flags & FLAGS_LEFT)) {
ffffffff80003036:	45 89 d0             	mov    %r10d,%r8d
ffffffff80003039:	8b 4d a8             	mov    -0x58(%rbp),%ecx
ffffffff8000303c:	44 8b 7d 9c          	mov    -0x64(%rbp),%r15d
ffffffff80003040:	41 83 e0 02          	and    $0x2,%r8d
ffffffff80003044:	0f 85 a5 00 00 00    	jne    ffffffff800030ef <_ntoa_long+0x14f>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000304a:	8b 55 18             	mov    0x18(%rbp),%edx
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff8000304d:	45 89 d0             	mov    %r10d,%r8d
ffffffff80003050:	8b 45 20             	mov    0x20(%rbp),%eax
ffffffff80003053:	41 83 e0 01          	and    $0x1,%r8d
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80003057:	48 83 fb 1f          	cmp    $0x1f,%rbx
ffffffff8000305b:	41 0f 96 c3          	setbe  %r11b
ffffffff8000305f:	48 39 d3             	cmp    %rdx,%rbx
ffffffff80003062:	41 0f 92 c1          	setb   %r9b
ffffffff80003066:	45 21 d9             	and    %r11d,%r9d
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80003069:	85 c0                	test   %eax,%eax
ffffffff8000306b:	74 23                	je     ffffffff80003090 <_ntoa_long+0xf0>
ffffffff8000306d:	45 85 c0             	test   %r8d,%r8d
ffffffff80003070:	0f 84 5a 03 00 00    	je     ffffffff800033d0 <_ntoa_long+0x430>
ffffffff80003076:	40 84 f6             	test   %sil,%sil
ffffffff80003079:	75 06                	jne    ffffffff80003081 <_ntoa_long+0xe1>
ffffffff8000307b:	41 f6 c2 0c          	test   $0xc,%r10b
ffffffff8000307f:	74 04                	je     ffffffff80003085 <_ntoa_long+0xe5>
      width--;
ffffffff80003081:	83 6d 20 01          	subl   $0x1,0x20(%rbp)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80003085:	45 84 c9             	test   %r9b,%r9b
ffffffff80003088:	75 0b                	jne    ffffffff80003095 <_ntoa_long+0xf5>
ffffffff8000308a:	eb 35                	jmp    ffffffff800030c1 <_ntoa_long+0x121>
ffffffff8000308c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80003090:	45 84 c9             	test   %r9b,%r9b
ffffffff80003093:	74 1f                	je     ffffffff800030b4 <_ntoa_long+0x114>
ffffffff80003095:	4c 8d 4d af          	lea    -0x51(%rbp),%r9
ffffffff80003099:	eb 0b                	jmp    ffffffff800030a6 <_ntoa_long+0x106>
ffffffff8000309b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff800030a0:	48 83 fb 1f          	cmp    $0x1f,%rbx
ffffffff800030a4:	77 0e                	ja     ffffffff800030b4 <_ntoa_long+0x114>
      buf[len++] = '0';
ffffffff800030a6:	48 83 c3 01          	add    $0x1,%rbx
ffffffff800030aa:	41 c6 04 19 30       	movb   $0x30,(%r9,%rbx,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800030af:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800030b2:	72 ec                	jb     ffffffff800030a0 <_ntoa_long+0x100>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800030b4:	45 85 c0             	test   %r8d,%r8d
ffffffff800030b7:	74 36                	je     ffffffff800030ef <_ntoa_long+0x14f>
ffffffff800030b9:	48 83 fb 1f          	cmp    $0x1f,%rbx
ffffffff800030bd:	41 0f 96 c3          	setbe  %r11b
ffffffff800030c1:	8b 55 20             	mov    0x20(%rbp),%edx
ffffffff800030c4:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800030c7:	73 23                	jae    ffffffff800030ec <_ntoa_long+0x14c>
ffffffff800030c9:	45 84 db             	test   %r11b,%r11b
ffffffff800030cc:	74 1e                	je     ffffffff800030ec <_ntoa_long+0x14c>
ffffffff800030ce:	4c 8d 4d af          	lea    -0x51(%rbp),%r9
ffffffff800030d2:	eb 09                	jmp    ffffffff800030dd <_ntoa_long+0x13d>
ffffffff800030d4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff800030d8:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800030db:	73 0f                	jae    ffffffff800030ec <_ntoa_long+0x14c>
      buf[len++] = '0';
ffffffff800030dd:	48 83 c3 01          	add    $0x1,%rbx
ffffffff800030e1:	41 c6 04 19 30       	movb   $0x30,(%r9,%rbx,1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800030e6:	48 83 fb 1f          	cmp    $0x1f,%rbx
ffffffff800030ea:	76 ec                	jbe    ffffffff800030d8 <_ntoa_long+0x138>
ffffffff800030ec:	45 31 c0             	xor    %r8d,%r8d
  if (flags & FLAGS_HASH) {
ffffffff800030ef:	85 c9                	test   %ecx,%ecx
ffffffff800030f1:	0f 84 e5 00 00 00    	je     ffffffff800031dc <_ntoa_long+0x23c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff800030f7:	45 85 ff             	test   %r15d,%r15d
ffffffff800030fa:	0f 84 a0 01 00 00    	je     ffffffff800032a0 <_ntoa_long+0x300>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80003100:	48 83 ff 10          	cmp    $0x10,%rdi
ffffffff80003104:	0f 84 e6 02 00 00    	je     ffffffff800033f0 <_ntoa_long+0x450>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000310a:	83 ff 02             	cmp    $0x2,%edi
ffffffff8000310d:	75 12                	jne    ffffffff80003121 <_ntoa_long+0x181>
ffffffff8000310f:	48 83 fb 1f          	cmp    $0x1f,%rbx
ffffffff80003113:	77 0c                	ja     ffffffff80003121 <_ntoa_long+0x181>
    for (size_t i = len; i < width; i++) {
ffffffff80003115:	48 89 da             	mov    %rbx,%rdx
ffffffff80003118:	48 83 c3 01          	add    $0x1,%rbx
      buf[len++] = 'b';
ffffffff8000311c:	c6 44 15 b0 62       	movb   $0x62,-0x50(%rbp,%rdx,1)
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff80003121:	48 83 fb 20          	cmp    $0x20,%rbx
ffffffff80003125:	0f 85 a5 00 00 00    	jne    ffffffff800031d0 <_ntoa_long+0x230>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff8000312b:	41 83 e2 03          	and    $0x3,%r10d
ffffffff8000312f:	0f 85 1b 03 00 00    	jne    ffffffff80003450 <_ntoa_long+0x4b0>
    for (size_t i = len; i < width; i++) {
ffffffff80003135:	83 7d 20 20          	cmpl   $0x20,0x20(%rbp)
ffffffff80003139:	8b 4d 20             	mov    0x20(%rbp),%ecx
ffffffff8000313c:	0f 86 0e 03 00 00    	jbe    ffffffff80003450 <_ntoa_long+0x4b0>
      buf[len++] = '-';
ffffffff80003142:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
ffffffff80003146:	48 89 d8             	mov    %rbx,%rax
ffffffff80003149:	44 89 45 9c          	mov    %r8d,-0x64(%rbp)
ffffffff8000314d:	48 89 5d 90          	mov    %rbx,-0x70(%rbp)
ffffffff80003151:	48 89 cb             	mov    %rcx,%rbx
ffffffff80003154:	48 29 f0             	sub    %rsi,%rax
ffffffff80003157:	4c 89 6d a8          	mov    %r13,-0x58(%rbp)
ffffffff8000315b:	49 89 f5             	mov    %rsi,%r13
ffffffff8000315e:	49 89 c7             	mov    %rax,%r15
ffffffff80003161:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80003168:	4c 89 ea             	mov    %r13,%rdx
ffffffff8000316b:	49 83 c5 01          	add    $0x1,%r13
ffffffff8000316f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff80003173:	4c 89 f1             	mov    %r14,%rcx
ffffffff80003176:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8000317b:	41 ff d4             	callq  *%r12
    for (size_t i = len; i < width; i++) {
ffffffff8000317e:	4b 8d 54 3d 00       	lea    0x0(%r13,%r15,1),%rdx
ffffffff80003183:	48 39 da             	cmp    %rbx,%rdx
ffffffff80003186:	72 e0                	jb     ffffffff80003168 <_ntoa_long+0x1c8>
      out(' ', buffer, idx++, maxlen);
ffffffff80003188:	48 89 d9             	mov    %rbx,%rcx
ffffffff8000318b:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
ffffffff8000318f:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
ffffffff80003193:	48 8d 41 ff          	lea    -0x1(%rcx),%rax
ffffffff80003197:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
ffffffff8000319b:	4c 8b 6d a8          	mov    -0x58(%rbp),%r13
ffffffff8000319f:	48 8d 53 01          	lea    0x1(%rbx),%rdx
ffffffff800031a3:	48 29 d8             	sub    %rbx,%rax
ffffffff800031a6:	48 39 d1             	cmp    %rdx,%rcx
ffffffff800031a9:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800031ae:	48 0f 42 c2          	cmovb  %rdx,%rax
ffffffff800031b2:	4c 8d 7c 06 01       	lea    0x1(%rsi,%rax,1),%r15
  while (len) {
ffffffff800031b7:	48 85 db             	test   %rbx,%rbx
ffffffff800031ba:	75 38                	jne    ffffffff800031f4 <_ntoa_long+0x254>
ffffffff800031bc:	eb 7c                	jmp    ffffffff8000323a <_ntoa_long+0x29a>
      buf[len++] = 'x';
ffffffff800031be:	c6 44 1d b0 78       	movb   $0x78,-0x50(%rbp,%rbx,1)
ffffffff800031c3:	48 89 d3             	mov    %rdx,%rbx
ffffffff800031c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800031cd:	00 00 00 
    for (size_t i = len; i < width; i++) {
ffffffff800031d0:	48 89 da             	mov    %rbx,%rdx
ffffffff800031d3:	48 83 c3 01          	add    $0x1,%rbx
      buf[len++] = '0';
ffffffff800031d7:	c6 44 15 b0 30       	movb   $0x30,-0x50(%rbp,%rdx,1)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff800031dc:	48 83 fb 20          	cmp    $0x20,%rbx
ffffffff800031e0:	0f 85 4c 01 00 00    	jne    ffffffff80003332 <_ntoa_long+0x392>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800031e6:	41 83 e2 03          	and    $0x3,%r10d
ffffffff800031ea:	0f 84 18 01 00 00    	je     ffffffff80003308 <_ntoa_long+0x368>
ffffffff800031f0:	4c 8b 7d a0          	mov    -0x60(%rbp),%r15
ffffffff800031f4:	44 89 45 9c          	mov    %r8d,-0x64(%rbp)
ffffffff800031f8:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
ffffffff800031fc:	4c 89 6d a8          	mov    %r13,-0x58(%rbp)
ffffffff80003200:	49 89 dd             	mov    %rbx,%r13
ffffffff80003203:	48 89 c3             	mov    %rax,%rbx
ffffffff80003206:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000320d:	00 00 00 
ffffffff80003210:	48 89 da             	mov    %rbx,%rdx
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80003213:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff80003217:	49 89 df             	mov    %rbx,%r15
ffffffff8000321a:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000321d:	4c 29 ea             	sub    %r13,%rdx
ffffffff80003220:	49 83 ed 01          	sub    $0x1,%r13
ffffffff80003224:	42 0f be 7c 2d b0    	movsbl -0x50(%rbp,%r13,1),%edi
ffffffff8000322a:	41 ff d4             	callq  *%r12
  while (len) {
ffffffff8000322d:	4d 85 ed             	test   %r13,%r13
ffffffff80003230:	75 de                	jne    ffffffff80003210 <_ntoa_long+0x270>
ffffffff80003232:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
ffffffff80003236:	4c 8b 6d a8          	mov    -0x58(%rbp),%r13
  if (flags & FLAGS_LEFT) {
ffffffff8000323a:	45 85 c0             	test   %r8d,%r8d
ffffffff8000323d:	74 4b                	je     ffffffff8000328a <_ntoa_long+0x2ea>
    while (idx - start_idx < width) {
ffffffff8000323f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003243:	4c 89 fb             	mov    %r15,%rbx
ffffffff80003246:	48 29 c3             	sub    %rax,%rbx
ffffffff80003249:	8b 45 20             	mov    0x20(%rbp),%eax
ffffffff8000324c:	48 39 c3             	cmp    %rax,%rbx
ffffffff8000324f:	73 39                	jae    ffffffff8000328a <_ntoa_long+0x2ea>
ffffffff80003251:	4c 89 6d a8          	mov    %r13,-0x58(%rbp)
ffffffff80003255:	4d 89 e5             	mov    %r12,%r13
ffffffff80003258:	49 89 c4             	mov    %rax,%r12
ffffffff8000325b:	4c 89 f0             	mov    %r14,%rax
ffffffff8000325e:	4d 89 fe             	mov    %r15,%r14
ffffffff80003261:	49 89 c7             	mov    %rax,%r15
ffffffff80003264:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80003268:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8000326c:	4c 89 f2             	mov    %r14,%rdx
      out(' ', buffer, idx++, maxlen);
ffffffff8000326f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff80003273:	4c 89 f9             	mov    %r15,%rcx
ffffffff80003276:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8000327b:	49 83 c6 01          	add    $0x1,%r14
ffffffff8000327f:	41 ff d5             	callq  *%r13
    while (idx - start_idx < width) {
ffffffff80003282:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80003285:	72 e1                	jb     ffffffff80003268 <_ntoa_long+0x2c8>
ffffffff80003287:	4d 89 f7             	mov    %r14,%r15
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
ffffffff8000328a:	48 83 c4 48          	add    $0x48,%rsp
ffffffff8000328e:	4c 89 f8             	mov    %r15,%rax
ffffffff80003291:	5b                   	pop    %rbx
ffffffff80003292:	41 5c                	pop    %r12
ffffffff80003294:	41 5d                	pop    %r13
ffffffff80003296:	41 5e                	pop    %r14
ffffffff80003298:	41 5f                	pop    %r15
ffffffff8000329a:	5d                   	pop    %rbp
ffffffff8000329b:	c3                   	retq   
ffffffff8000329c:	0f 1f 40 00          	nopl   0x0(%rax)
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff800032a0:	48 85 db             	test   %rbx,%rbx
ffffffff800032a3:	0f 84 f7 00 00 00    	je     ffffffff800033a0 <_ntoa_long+0x400>
ffffffff800032a9:	8b 55 18             	mov    0x18(%rbp),%edx
ffffffff800032ac:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800032af:	74 0c                	je     ffffffff800032bd <_ntoa_long+0x31d>
ffffffff800032b1:	8b 55 20             	mov    0x20(%rbp),%edx
ffffffff800032b4:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800032b7:	0f 85 43 fe ff ff    	jne    ffffffff80003100 <_ntoa_long+0x160>
      if (len && (base == 16U)) {
ffffffff800032bd:	48 8d 53 ff          	lea    -0x1(%rbx),%rdx
ffffffff800032c1:	48 83 fb 01          	cmp    $0x1,%rbx
ffffffff800032c5:	0f 84 b7 01 00 00    	je     ffffffff80003482 <_ntoa_long+0x4e2>
ffffffff800032cb:	83 ff 10             	cmp    $0x10,%edi
ffffffff800032ce:	0f 85 ae 01 00 00    	jne    ffffffff80003482 <_ntoa_long+0x4e2>
        len--;
ffffffff800032d4:	48 83 eb 02          	sub    $0x2,%rbx
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800032d8:	41 f6 c2 20          	test   $0x20,%r10b
ffffffff800032dc:	0f 84 dc fe ff ff    	je     ffffffff800031be <_ntoa_long+0x21e>
      buf[len++] = 'X';
ffffffff800032e2:	c6 44 1d b0 58       	movb   $0x58,-0x50(%rbp,%rbx,1)
ffffffff800032e7:	48 89 d3             	mov    %rdx,%rbx
ffffffff800032ea:	e9 e1 fe ff ff       	jmpq   ffffffff800031d0 <_ntoa_long+0x230>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800032ef:	48 83 fb 20          	cmp    $0x20,%rbx
ffffffff800032f3:	0f 85 9e 01 00 00    	jne    ffffffff80003497 <_ntoa_long+0x4f7>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800032f9:	85 d2                	test   %edx,%edx
ffffffff800032fb:	0f 85 ef fe ff ff    	jne    ffffffff800031f0 <_ntoa_long+0x250>
ffffffff80003301:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    for (size_t i = len; i < width; i++) {
ffffffff80003308:	83 7d 20 20          	cmpl   $0x20,0x20(%rbp)
ffffffff8000330c:	8b 4d 20             	mov    0x20(%rbp),%ecx
ffffffff8000330f:	0f 87 2d fe ff ff    	ja     ffffffff80003142 <_ntoa_long+0x1a2>
ffffffff80003315:	e9 d6 fe ff ff       	jmpq   ffffffff800031f0 <_ntoa_long+0x250>
ffffffff8000331a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT)) {
ffffffff80003320:	41 83 e2 02          	and    $0x2,%r10d
ffffffff80003324:	45 89 d0             	mov    %r10d,%r8d
ffffffff80003327:	0f 84 b3 00 00 00    	je     ffffffff800033e0 <_ntoa_long+0x440>
ffffffff8000332d:	41 89 d2             	mov    %edx,%r10d
  size_t len = 0U;
ffffffff80003330:	31 db                	xor    %ebx,%ebx
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80003332:	44 89 d2             	mov    %r10d,%edx
ffffffff80003335:	83 e2 03             	and    $0x3,%edx
    if (negative) {
ffffffff80003338:	40 84 f6             	test   %sil,%sil
ffffffff8000333b:	74 3b                	je     ffffffff80003378 <_ntoa_long+0x3d8>
      buf[len++] = '-';
ffffffff8000333d:	c6 44 1d b0 2d       	movb   $0x2d,-0x50(%rbp,%rbx,1)
ffffffff80003342:	48 8d 43 01          	lea    0x1(%rbx),%rax
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80003346:	85 d2                	test   %edx,%edx
ffffffff80003348:	75 45                	jne    ffffffff8000338f <_ntoa_long+0x3ef>
    for (size_t i = len; i < width; i++) {
ffffffff8000334a:	8b 4d 20             	mov    0x20(%rbp),%ecx
      buf[len++] = '-';
ffffffff8000334d:	48 89 c3             	mov    %rax,%rbx
    for (size_t i = len; i < width; i++) {
ffffffff80003350:	48 39 c8             	cmp    %rcx,%rax
ffffffff80003353:	0f 82 e9 fd ff ff    	jb     ffffffff80003142 <_ntoa_long+0x1a2>
ffffffff80003359:	e9 92 fe ff ff       	jmpq   ffffffff800031f0 <_ntoa_long+0x250>
ffffffff8000335e:	66 90                	xchg   %ax,%ax
    flags &= ~FLAGS_HASH;
ffffffff80003360:	44 89 d2             	mov    %r10d,%edx
ffffffff80003363:	83 e2 ef             	and    $0xffffffef,%edx
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80003366:	45 85 ff             	test   %r15d,%r15d
ffffffff80003369:	75 b5                	jne    ffffffff80003320 <_ntoa_long+0x380>
ffffffff8000336b:	31 c9                	xor    %ecx,%ecx
ffffffff8000336d:	41 89 d2             	mov    %edx,%r10d
ffffffff80003370:	e9 6d fc ff ff       	jmpq   ffffffff80002fe2 <_ntoa_long+0x42>
ffffffff80003375:	0f 1f 00             	nopl   (%rax)
    else if (flags & FLAGS_PLUS) {
ffffffff80003378:	41 f6 c2 04          	test   $0x4,%r10b
ffffffff8000337c:	0f 84 9e 00 00 00    	je     ffffffff80003420 <_ntoa_long+0x480>
      buf[len++] = '+';  // ignore the space if the '+' exists
ffffffff80003382:	c6 44 1d b0 2b       	movb   $0x2b,-0x50(%rbp,%rbx,1)
ffffffff80003387:	48 8d 43 01          	lea    0x1(%rbx),%rax
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff8000338b:	85 d2                	test   %edx,%edx
ffffffff8000338d:	74 bb                	je     ffffffff8000334a <_ntoa_long+0x3aa>
ffffffff8000338f:	4c 8b 7d a0          	mov    -0x60(%rbp),%r15
      buf[len++] = ' ';
ffffffff80003393:	48 89 c3             	mov    %rax,%rbx
ffffffff80003396:	e9 59 fe ff ff       	jmpq   ffffffff800031f4 <_ntoa_long+0x254>
ffffffff8000339b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800033a0:	48 83 ff 10          	cmp    $0x10,%rdi
ffffffff800033a4:	0f 84 06 01 00 00    	je     ffffffff800034b0 <_ntoa_long+0x510>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800033aa:	48 83 ff 02          	cmp    $0x2,%rdi
ffffffff800033ae:	0f 85 c0 00 00 00    	jne    ffffffff80003474 <_ntoa_long+0x4d4>
ffffffff800033b4:	ba 62 00 00 00       	mov    $0x62,%edx
      buf[len++] = 'x';
ffffffff800033b9:	88 55 b0             	mov    %dl,-0x50(%rbp)
      buf[len++] = '0';
ffffffff800033bc:	bb 02 00 00 00       	mov    $0x2,%ebx
ffffffff800033c1:	c6 45 b1 30          	movb   $0x30,-0x4f(%rbp)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff800033c5:	e9 68 ff ff ff       	jmpq   ffffffff80003332 <_ntoa_long+0x392>
ffffffff800033ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800033d0:	45 84 c9             	test   %r9b,%r9b
ffffffff800033d3:	0f 85 bc fc ff ff    	jne    ffffffff80003095 <_ntoa_long+0xf5>
ffffffff800033d9:	e9 11 fd ff ff       	jmpq   ffffffff800030ef <_ntoa_long+0x14f>
ffffffff800033de:	66 90                	xchg   %ax,%ax
  if (!(flags & FLAGS_LEFT)) {
ffffffff800033e0:	31 c9                	xor    %ecx,%ecx
ffffffff800033e2:	41 89 d2             	mov    %edx,%r10d
  size_t len = 0U;
ffffffff800033e5:	31 db                	xor    %ebx,%ebx
ffffffff800033e7:	e9 5e fc ff ff       	jmpq   ffffffff8000304a <_ntoa_long+0xaa>
ffffffff800033ec:	0f 1f 40 00          	nopl   0x0(%rax)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800033f0:	44 89 d2             	mov    %r10d,%edx
ffffffff800033f3:	83 e2 03             	and    $0x3,%edx
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800033f6:	41 f6 c2 20          	test   $0x20,%r10b
ffffffff800033fa:	0f 84 ef fe ff ff    	je     ffffffff800032ef <_ntoa_long+0x34f>
    for (size_t i = len; i < width; i++) {
ffffffff80003400:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80003404:	48 83 fb 20          	cmp    $0x20,%rbx
ffffffff80003408:	74 3e                	je     ffffffff80003448 <_ntoa_long+0x4a8>
      buf[len++] = 'X';
ffffffff8000340a:	c6 44 1d b0 58       	movb   $0x58,-0x50(%rbp,%rbx,1)
ffffffff8000340f:	48 89 cb             	mov    %rcx,%rbx
ffffffff80003412:	e9 0a fd ff ff       	jmpq   ffffffff80003121 <_ntoa_long+0x181>
ffffffff80003417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000341e:	00 00 
    else if (flags & FLAGS_SPACE) {
ffffffff80003420:	41 83 e2 08          	and    $0x8,%r10d
ffffffff80003424:	75 38                	jne    ffffffff8000345e <_ntoa_long+0x4be>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80003426:	4c 8b 7d a0          	mov    -0x60(%rbp),%r15
ffffffff8000342a:	85 d2                	test   %edx,%edx
ffffffff8000342c:	0f 85 85 fd ff ff    	jne    ffffffff800031b7 <_ntoa_long+0x217>
    for (size_t i = len; i < width; i++) {
ffffffff80003432:	8b 4d 20             	mov    0x20(%rbp),%ecx
ffffffff80003435:	48 39 cb             	cmp    %rcx,%rbx
ffffffff80003438:	0f 82 04 fd ff ff    	jb     ffffffff80003142 <_ntoa_long+0x1a2>
ffffffff8000343e:	e9 74 fd ff ff       	jmpq   ffffffff800031b7 <_ntoa_long+0x217>
ffffffff80003443:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80003448:	85 d2                	test   %edx,%edx
ffffffff8000344a:	0f 84 e5 fc ff ff    	je     ffffffff80003135 <_ntoa_long+0x195>
      buf[len++] = '-';
ffffffff80003450:	4c 8b 7d a0          	mov    -0x60(%rbp),%r15
ffffffff80003454:	bb 20 00 00 00       	mov    $0x20,%ebx
ffffffff80003459:	e9 96 fd ff ff       	jmpq   ffffffff800031f4 <_ntoa_long+0x254>
      buf[len++] = ' ';
ffffffff8000345e:	c6 44 1d b0 20       	movb   $0x20,-0x50(%rbp,%rbx,1)
ffffffff80003463:	48 8d 43 01          	lea    0x1(%rbx),%rax
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80003467:	85 d2                	test   %edx,%edx
ffffffff80003469:	0f 85 20 ff ff ff    	jne    ffffffff8000338f <_ntoa_long+0x3ef>
ffffffff8000346f:	e9 d6 fe ff ff       	jmpq   ffffffff8000334a <_ntoa_long+0x3aa>
      buf[len++] = '0';
ffffffff80003474:	c6 45 b0 30          	movb   $0x30,-0x50(%rbp)
ffffffff80003478:	bb 01 00 00 00       	mov    $0x1,%ebx
ffffffff8000347d:	e9 b0 fe ff ff       	jmpq   ffffffff80003332 <_ntoa_long+0x392>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80003482:	48 83 ff 10          	cmp    $0x10,%rdi
ffffffff80003486:	74 3e                	je     ffffffff800034c6 <_ntoa_long+0x526>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80003488:	48 83 ff 02          	cmp    $0x2,%rdi
ffffffff8000348c:	0f 84 8a fc ff ff    	je     ffffffff8000311c <_ntoa_long+0x17c>
ffffffff80003492:	e9 40 fd ff ff       	jmpq   ffffffff800031d7 <_ntoa_long+0x237>
    for (size_t i = len; i < width; i++) {
ffffffff80003497:	48 89 da             	mov    %rbx,%rdx
ffffffff8000349a:	48 83 c3 01          	add    $0x1,%rbx
      buf[len++] = 'x';
ffffffff8000349e:	c6 44 15 b0 78       	movb   $0x78,-0x50(%rbp,%rdx,1)
ffffffff800034a3:	e9 79 fc ff ff       	jmpq   ffffffff80003121 <_ntoa_long+0x181>
ffffffff800034a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800034af:	00 
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800034b0:	44 89 d2             	mov    %r10d,%edx
ffffffff800034b3:	83 e2 20             	and    $0x20,%edx
ffffffff800034b6:	83 fa 01             	cmp    $0x1,%edx
ffffffff800034b9:	19 d2                	sbb    %edx,%edx
ffffffff800034bb:	83 e2 20             	and    $0x20,%edx
ffffffff800034be:	83 c2 58             	add    $0x58,%edx
ffffffff800034c1:	e9 f3 fe ff ff       	jmpq   ffffffff800033b9 <_ntoa_long+0x419>
ffffffff800034c6:	41 f6 c2 20          	test   $0x20,%r10b
ffffffff800034ca:	74 d2                	je     ffffffff8000349e <_ntoa_long+0x4fe>
ffffffff800034cc:	48 89 d9             	mov    %rbx,%rcx
      len--;
ffffffff800034cf:	48 89 d3             	mov    %rdx,%rbx
ffffffff800034d2:	e9 33 ff ff ff       	jmpq   ffffffff8000340a <_ntoa_long+0x46a>
ffffffff800034d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800034de:	00 00 

ffffffff800034e0 <_out_char>:
  if (character) {
ffffffff800034e0:	40 84 ff             	test   %dil,%dil
ffffffff800034e3:	75 0b                	jne    ffffffff800034f0 <_out_char+0x10>
}
ffffffff800034e5:	c3                   	retq   
ffffffff800034e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800034ed:	00 00 00 
    _putchar(character);
ffffffff800034f0:	40 0f be ff          	movsbl %dil,%edi
ffffffff800034f4:	e9 e7 0c 00 00       	jmpq   ffffffff800041e0 <_putchar>
ffffffff800034f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003500 <_out_fct>:
  if (character) {
ffffffff80003500:	40 84 ff             	test   %dil,%dil
ffffffff80003503:	74 13                	je     ffffffff80003518 <_out_fct+0x18>
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
ffffffff80003505:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff80003509:	48 8b 06             	mov    (%rsi),%rax
ffffffff8000350c:	40 0f be ff          	movsbl %dil,%edi
ffffffff80003510:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003513:	ff e0                	jmpq   *%rax
ffffffff80003515:	0f 1f 00             	nopl   (%rax)
}
ffffffff80003518:	c3                   	retq   
ffffffff80003519:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003520 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
ffffffff80003520:	55                   	push   %rbp
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
ffffffff80003521:	48 c7 c0 90 2f 00 80 	mov    $0xffffffff80002f90,%rax
{
ffffffff80003528:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000352b:	41 57                	push   %r15
ffffffff8000352d:	41 56                	push   %r14
ffffffff8000352f:	41 55                	push   %r13
ffffffff80003531:	41 54                	push   %r12
ffffffff80003533:	49 89 f4             	mov    %rsi,%r12
ffffffff80003536:	53                   	push   %rbx
ffffffff80003537:	48 89 d3             	mov    %rdx,%rbx
ffffffff8000353a:	48 83 ec 48          	sub    $0x48,%rsp
    out = _out_null;
ffffffff8000353e:	48 85 f6             	test   %rsi,%rsi
  }

  while (*format)
ffffffff80003541:	0f b6 11             	movzbl (%rcx),%edx
    out = _out_null;
ffffffff80003544:	48 0f 45 c7          	cmovne %rdi,%rax
ffffffff80003548:	49 89 c5             	mov    %rax,%r13
  while (*format)
ffffffff8000354b:	31 c0                	xor    %eax,%eax
ffffffff8000354d:	84 d2                	test   %dl,%dl
ffffffff8000354f:	0f 84 b2 07 00 00    	je     ffffffff80003d07 <_vsnprintf+0x7e7>
ffffffff80003555:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
ffffffff80003559:	49 89 cf             	mov    %rcx,%r15
ffffffff8000355c:	eb 24                	jmp    ffffffff80003582 <_vsnprintf+0x62>
ffffffff8000355e:	66 90                	xchg   %ax,%ax
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
      // no
      out(*format, buffer, idx++, maxlen);
ffffffff80003560:	4c 8d 70 01          	lea    0x1(%rax),%r14
ffffffff80003564:	0f be fa             	movsbl %dl,%edi
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
ffffffff80003567:	48 89 d9             	mov    %rbx,%rcx
ffffffff8000356a:	48 89 c2             	mov    %rax,%rdx
ffffffff8000356d:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003570:	41 ff d5             	callq  *%r13
ffffffff80003573:	4c 89 f0             	mov    %r14,%rax
  while (*format)
ffffffff80003576:	41 0f b6 17          	movzbl (%r15),%edx
ffffffff8000357a:	84 d2                	test   %dl,%dl
ffffffff8000357c:	0f 84 ee 01 00 00    	je     ffffffff80003770 <_vsnprintf+0x250>
      format++;
ffffffff80003582:	49 83 c7 01          	add    $0x1,%r15
    if (*format != '%') {
ffffffff80003586:	80 fa 25             	cmp    $0x25,%dl
ffffffff80003589:	75 d5                	jne    ffffffff80003560 <_vsnprintf+0x40>
    flags = 0U;
ffffffff8000358b:	45 31 f6             	xor    %r14d,%r14d
ffffffff8000358e:	66 90                	xchg   %ax,%ax
      switch (*format) {
ffffffff80003590:	41 0f be 3f          	movsbl (%r15),%edi
      format++;
ffffffff80003594:	49 8d 4f 01          	lea    0x1(%r15),%rcx
      switch (*format) {
ffffffff80003598:	8d 57 e0             	lea    -0x20(%rdi),%edx
ffffffff8000359b:	80 fa 10             	cmp    $0x10,%dl
ffffffff8000359e:	77 10                	ja     ffffffff800035b0 <_vsnprintf+0x90>
ffffffff800035a0:	0f b6 d2             	movzbl %dl,%edx
ffffffff800035a3:	ff 24 d5 c0 59 00 80 	jmpq   *-0x7fffa640(,%rdx,8)
ffffffff800035aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  return (ch >= '0') && (ch <= '9');
ffffffff800035b0:	8d 57 d0             	lea    -0x30(%rdi),%edx
    if (_is_digit(*format)) {
ffffffff800035b3:	80 fa 09             	cmp    $0x9,%dl
ffffffff800035b6:	0f 86 d4 02 00 00    	jbe    ffffffff80003890 <_vsnprintf+0x370>
    width = 0U;
ffffffff800035bc:	45 31 db             	xor    %r11d,%r11d
    else if (*format == '*') {
ffffffff800035bf:	40 80 ff 2a          	cmp    $0x2a,%dil
ffffffff800035c3:	0f 84 7f 03 00 00    	je     ffffffff80003948 <_vsnprintf+0x428>
    precision = 0U;
ffffffff800035c9:	31 f6                	xor    %esi,%esi
    if (*format == '.') {
ffffffff800035cb:	40 80 ff 2e          	cmp    $0x2e,%dil
ffffffff800035cf:	0f 84 eb 02 00 00    	je     ffffffff800038c0 <_vsnprintf+0x3a0>
        format++;
ffffffff800035d5:	48 89 ca             	mov    %rcx,%rdx
    switch (*format) {
ffffffff800035d8:	40 80 ff 6c          	cmp    $0x6c,%dil
ffffffff800035dc:	0f 84 1e 03 00 00    	je     ffffffff80003900 <_vsnprintf+0x3e0>
ffffffff800035e2:	0f 8f b8 01 00 00    	jg     ffffffff800037a0 <_vsnprintf+0x280>
ffffffff800035e8:	40 80 ff 68          	cmp    $0x68,%dil
ffffffff800035ec:	0f 84 a6 03 00 00    	je     ffffffff80003998 <_vsnprintf+0x478>
ffffffff800035f2:	40 80 ff 6a          	cmp    $0x6a,%dil
ffffffff800035f6:	0f 85 1e 0a 00 00    	jne    ffffffff8000401a <_vsnprintf+0xafa>
        if (*format == 'l') {
ffffffff800035fc:	41 0f be 7f 01       	movsbl 0x1(%r15),%edi
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ffffffff80003601:	41 81 ce 00 01 00 00 	or     $0x100,%r14d
        format++;
ffffffff80003608:	4c 8d 7a 01          	lea    0x1(%rdx),%r15
    switch (*format) {
ffffffff8000360c:	40 80 ff 78          	cmp    $0x78,%dil
ffffffff80003610:	0f 8f c8 01 00 00    	jg     ffffffff800037de <_vsnprintf+0x2be>
ffffffff80003616:	40 80 ff 63          	cmp    $0x63,%dil
ffffffff8000361a:	0f 8f 93 01 00 00    	jg     ffffffff800037b3 <_vsnprintf+0x293>
ffffffff80003620:	40 80 ff 62          	cmp    $0x62,%dil
ffffffff80003624:	0f 84 d9 07 00 00    	je     ffffffff80003e03 <_vsnprintf+0x8e3>
ffffffff8000362a:	40 80 ff 63          	cmp    $0x63,%dil
ffffffff8000362e:	0f 85 0c 01 00 00    	jne    ffffffff80003740 <_vsnprintf+0x220>
        if (!(flags & FLAGS_LEFT)) {
ffffffff80003634:	41 83 e6 02          	and    $0x2,%r14d
        unsigned int l = 1U;
ffffffff80003638:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
        if (!(flags & FLAGS_LEFT)) {
ffffffff8000363f:	44 89 75 c0          	mov    %r14d,-0x40(%rbp)
ffffffff80003643:	0f 84 8e 05 00 00    	je     ffffffff80003bd7 <_vsnprintf+0x6b7>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003649:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff8000364d:	4c 8d 70 01          	lea    0x1(%rax),%r14
ffffffff80003651:	8b 16                	mov    (%rsi),%edx
ffffffff80003653:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003656:	0f 87 31 05 00 00    	ja     ffffffff80003b8d <_vsnprintf+0x66d>
ffffffff8000365c:	89 d1                	mov    %edx,%ecx
ffffffff8000365e:	83 c2 08             	add    $0x8,%edx
ffffffff80003661:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80003665:	89 16                	mov    %edx,(%rsi)
ffffffff80003667:	48 89 c2             	mov    %rax,%rdx
ffffffff8000366a:	44 89 5d b8          	mov    %r11d,-0x48(%rbp)
ffffffff8000366e:	0f be 39             	movsbl (%rcx),%edi
ffffffff80003671:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003674:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80003678:	48 89 d9             	mov    %rbx,%rcx
ffffffff8000367b:	41 ff d5             	callq  *%r13
        if (flags & FLAGS_LEFT) {
ffffffff8000367e:	8b 55 c0             	mov    -0x40(%rbp),%edx
ffffffff80003681:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80003685:	44 8b 5d b8          	mov    -0x48(%rbp),%r11d
ffffffff80003689:	85 d2                	test   %edx,%edx
ffffffff8000368b:	0f 84 e2 fe ff ff    	je     ffffffff80003573 <_vsnprintf+0x53>
          while (l++ < width) {
ffffffff80003691:	8b 75 a8             	mov    -0x58(%rbp),%esi
ffffffff80003694:	44 39 de             	cmp    %r11d,%esi
ffffffff80003697:	0f 83 d6 fe ff ff    	jae    ffffffff80003573 <_vsnprintf+0x53>
ffffffff8000369d:	41 83 eb 01          	sub    $0x1,%r11d
ffffffff800036a1:	4c 89 7d c8          	mov    %r15,-0x38(%rbp)
ffffffff800036a5:	4d 89 f7             	mov    %r14,%r15
ffffffff800036a8:	49 89 de             	mov    %rbx,%r14
ffffffff800036ab:	41 29 f3             	sub    %esi,%r11d
ffffffff800036ae:	4a 8d 44 18 02       	lea    0x2(%rax,%r11,1),%rax
ffffffff800036b3:	48 89 c3             	mov    %rax,%rbx
ffffffff800036b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800036bd:	00 00 00 
            out(' ', buffer, idx++, maxlen);
ffffffff800036c0:	4c 89 fa             	mov    %r15,%rdx
ffffffff800036c3:	49 83 c7 01          	add    $0x1,%r15
ffffffff800036c7:	4c 89 f1             	mov    %r14,%rcx
ffffffff800036ca:	4c 89 e6             	mov    %r12,%rsi
ffffffff800036cd:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800036d2:	41 ff d5             	callq  *%r13
          while (l++ < width) {
ffffffff800036d5:	49 39 df             	cmp    %rbx,%r15
ffffffff800036d8:	75 e6                	jne    ffffffff800036c0 <_vsnprintf+0x1a0>
ffffffff800036da:	4c 89 f3             	mov    %r14,%rbx
ffffffff800036dd:	4d 89 fe             	mov    %r15,%r14
ffffffff800036e0:	4c 8b 7d c8          	mov    -0x38(%rbp),%r15
        break;
ffffffff800036e4:	e9 8a fe ff ff       	jmpq   ffffffff80003573 <_vsnprintf+0x53>
ffffffff800036e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
ffffffff800036f0:	41 83 ce 01          	or     $0x1,%r14d
      format++;
ffffffff800036f4:	49 89 cf             	mov    %rcx,%r15
ffffffff800036f7:	e9 94 fe ff ff       	jmpq   ffffffff80003590 <_vsnprintf+0x70>
ffffffff800036fc:	0f 1f 40 00          	nopl   0x0(%rax)
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ffffffff80003700:	41 83 ce 02          	or     $0x2,%r14d
ffffffff80003704:	eb ee                	jmp    ffffffff800036f4 <_vsnprintf+0x1d4>
ffffffff80003706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000370d:	00 00 00 
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ffffffff80003710:	41 83 ce 04          	or     $0x4,%r14d
ffffffff80003714:	eb de                	jmp    ffffffff800036f4 <_vsnprintf+0x1d4>
ffffffff80003716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000371d:	00 00 00 
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ffffffff80003720:	41 83 ce 10          	or     $0x10,%r14d
ffffffff80003724:	eb ce                	jmp    ffffffff800036f4 <_vsnprintf+0x1d4>
ffffffff80003726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000372d:	00 00 00 
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ffffffff80003730:	41 83 ce 08          	or     $0x8,%r14d
ffffffff80003734:	eb be                	jmp    ffffffff800036f4 <_vsnprintf+0x1d4>
ffffffff80003736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000373d:	00 00 00 
    switch (*format) {
ffffffff80003740:	40 80 ff 25          	cmp    $0x25,%dil
ffffffff80003744:	0f 85 a6 00 00 00    	jne    ffffffff800037f0 <_vsnprintf+0x2d0>
        out('%', buffer, idx++, maxlen);
ffffffff8000374a:	48 89 c2             	mov    %rax,%rdx
ffffffff8000374d:	4c 8d 70 01          	lea    0x1(%rax),%r14
ffffffff80003751:	48 89 d9             	mov    %rbx,%rcx
ffffffff80003754:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003757:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff8000375c:	41 ff d5             	callq  *%r13
  while (*format)
ffffffff8000375f:	41 0f b6 17          	movzbl (%r15),%edx
        out('%', buffer, idx++, maxlen);
ffffffff80003763:	4c 89 f0             	mov    %r14,%rax
  while (*format)
ffffffff80003766:	84 d2                	test   %dl,%dl
ffffffff80003768:	0f 85 14 fe ff ff    	jne    ffffffff80003582 <_vsnprintf+0x62>
ffffffff8000376e:	66 90                	xchg   %ax,%ax

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
ffffffff80003770:	41 89 c6             	mov    %eax,%r14d
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
ffffffff80003773:	48 39 d8             	cmp    %rbx,%rax
ffffffff80003776:	48 8d 53 ff          	lea    -0x1(%rbx),%rdx
ffffffff8000377a:	48 89 d9             	mov    %rbx,%rcx
ffffffff8000377d:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003780:	48 0f 43 c2          	cmovae %rdx,%rax
ffffffff80003784:	31 ff                	xor    %edi,%edi
ffffffff80003786:	48 89 c2             	mov    %rax,%rdx
ffffffff80003789:	41 ff d5             	callq  *%r13
}
ffffffff8000378c:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
ffffffff80003790:	44 89 f0             	mov    %r14d,%eax
ffffffff80003793:	5b                   	pop    %rbx
ffffffff80003794:	41 5c                	pop    %r12
ffffffff80003796:	41 5d                	pop    %r13
ffffffff80003798:	41 5e                	pop    %r14
ffffffff8000379a:	41 5f                	pop    %r15
ffffffff8000379c:	5d                   	pop    %rbp
ffffffff8000379d:	c3                   	retq   
ffffffff8000379e:	66 90                	xchg   %ax,%ax
    switch (*format) {
ffffffff800037a0:	40 80 ff 7a          	cmp    $0x7a,%dil
ffffffff800037a4:	0f 84 52 fe ff ff    	je     ffffffff800035fc <_vsnprintf+0xdc>
        format++;
ffffffff800037aa:	49 89 cf             	mov    %rcx,%r15
    switch (*format) {
ffffffff800037ad:	40 80 ff 78          	cmp    $0x78,%dil
ffffffff800037b1:	7f 2b                	jg     ffffffff800037de <_vsnprintf+0x2be>
ffffffff800037b3:	8d 4f 9c             	lea    -0x64(%rdi),%ecx
ffffffff800037b6:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800037bb:	48 d3 e2             	shl    %cl,%rdx
ffffffff800037be:	f7 c2 21 08 12 00    	test   $0x120821,%edx
ffffffff800037c4:	0f 85 f9 07 00 00    	jne    ffffffff80003fc3 <_vsnprintf+0xaa3>
ffffffff800037ca:	40 80 ff 73          	cmp    $0x73,%dil
ffffffff800037ce:	0f 84 21 02 00 00    	je     ffffffff800039f5 <_vsnprintf+0x4d5>
ffffffff800037d4:	40 80 ff 70          	cmp    $0x70,%dil
ffffffff800037d8:	0f 84 d2 01 00 00    	je     ffffffff800039b0 <_vsnprintf+0x490>
        out(*format, buffer, idx++, maxlen);
ffffffff800037de:	4c 8d 70 01          	lea    0x1(%rax),%r14
ffffffff800037e2:	e9 80 fd ff ff       	jmpq   ffffffff80003567 <_vsnprintf+0x47>
ffffffff800037e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800037ee:	00 00 
          flags |= FLAGS_UPPERCASE;
ffffffff800037f0:	41 83 ce 20          	or     $0x20,%r14d
ffffffff800037f4:	ba 10 00 00 00       	mov    $0x10,%edx
    switch (*format) {
ffffffff800037f9:	40 80 ff 58          	cmp    $0x58,%dil
ffffffff800037fd:	75 df                	jne    ffffffff800037de <_vsnprintf+0x2be>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ffffffff800037ff:	41 83 e6 f3          	and    $0xfffffff3,%r14d
          flags &= ~FLAGS_ZEROPAD;
ffffffff80003803:	44 89 f1             	mov    %r14d,%ecx
ffffffff80003806:	83 e1 fe             	and    $0xfffffffe,%ecx
ffffffff80003809:	41 f7 c6 00 04 00 00 	test   $0x400,%r14d
ffffffff80003810:	44 0f 45 f1          	cmovne %ecx,%r14d
            const long long value = va_arg(va, long long);
ffffffff80003814:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
          if (flags & FLAGS_LONG_LONG) {
ffffffff80003818:	45 89 f0             	mov    %r14d,%r8d
            const long long value = va_arg(va, long long);
ffffffff8000381b:	8b 09                	mov    (%rcx),%ecx
          if (flags & FLAGS_LONG_LONG) {
ffffffff8000381d:	41 81 e0 00 02 00 00 	and    $0x200,%r8d
        if ((*format == 'i') || (*format == 'd')) {
ffffffff80003824:	40 80 ff 69          	cmp    $0x69,%dil
ffffffff80003828:	0f 84 13 04 00 00    	je     ffffffff80003c41 <_vsnprintf+0x721>
ffffffff8000382e:	40 80 ff 64          	cmp    $0x64,%dil
ffffffff80003832:	0f 84 09 04 00 00    	je     ffffffff80003c41 <_vsnprintf+0x721>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80003838:	45 85 c0             	test   %r8d,%r8d
ffffffff8000383b:	0f 85 9f 05 00 00    	jne    ffffffff80003de0 <_vsnprintf+0x8c0>
          else if (flags & FLAGS_LONG) {
ffffffff80003841:	41 f7 c6 00 01 00 00 	test   $0x100,%r14d
ffffffff80003848:	0f 85 2a 06 00 00    	jne    ffffffff80003e78 <_vsnprintf+0x958>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000384e:	41 f6 c6 40          	test   $0x40,%r14b
ffffffff80003852:	0f 85 d7 05 00 00    	jne    ffffffff80003e2f <_vsnprintf+0x90f>
ffffffff80003858:	41 f6 c6 80          	test   $0x80,%r14b
ffffffff8000385c:	0f 84 af 06 00 00    	je     ffffffff80003f11 <_vsnprintf+0x9f1>
ffffffff80003862:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003865:	0f 87 fe 06 00 00    	ja     ffffffff80003f69 <_vsnprintf+0xa49>
ffffffff8000386b:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff8000386f:	89 cf                	mov    %ecx,%edi
ffffffff80003871:	83 c1 08             	add    $0x8,%ecx
ffffffff80003874:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003877:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff8000387b:	44 0f b7 07          	movzwl (%rdi),%r8d
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff8000387f:	41 56                	push   %r14
ffffffff80003881:	45 31 c9             	xor    %r9d,%r9d
ffffffff80003884:	41 53                	push   %r11
ffffffff80003886:	56                   	push   %rsi
ffffffff80003887:	52                   	push   %rdx
ffffffff80003888:	e9 12 04 00 00       	jmpq   ffffffff80003c9f <_vsnprintf+0x77f>
ffffffff8000388d:	0f 1f 00             	nopl   (%rax)
  unsigned int i = 0U;
ffffffff80003890:	45 31 db             	xor    %r11d,%r11d
ffffffff80003893:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80003898:	43 8d 14 9b          	lea    (%r11,%r11,4),%edx
ffffffff8000389c:	49 89 cf             	mov    %rcx,%r15
ffffffff8000389f:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800038a3:	44 8d 5c 57 d0       	lea    -0x30(%rdi,%rdx,2),%r11d
  while (_is_digit(**str)) {
ffffffff800038a8:	0f be 79 ff          	movsbl -0x1(%rcx),%edi
  return (ch >= '0') && (ch <= '9');
ffffffff800038ac:	8d 57 d0             	lea    -0x30(%rdi),%edx
  while (_is_digit(**str)) {
ffffffff800038af:	80 fa 09             	cmp    $0x9,%dl
ffffffff800038b2:	76 e4                	jbe    ffffffff80003898 <_vsnprintf+0x378>
    precision = 0U;
ffffffff800038b4:	31 f6                	xor    %esi,%esi
    if (*format == '.') {
ffffffff800038b6:	40 80 ff 2e          	cmp    $0x2e,%dil
ffffffff800038ba:	0f 85 15 fd ff ff    	jne    ffffffff800035d5 <_vsnprintf+0xb5>
      if (_is_digit(*format)) {
ffffffff800038c0:	41 0f be 7f 01       	movsbl 0x1(%r15),%edi
      format++;
ffffffff800038c5:	48 89 ca             	mov    %rcx,%rdx
      flags |= FLAGS_PRECISION;
ffffffff800038c8:	41 81 ce 00 04 00 00 	or     $0x400,%r14d
  return (ch >= '0') && (ch <= '9');
ffffffff800038cf:	44 8d 47 d0          	lea    -0x30(%rdi),%r8d
      if (_is_digit(*format)) {
ffffffff800038d3:	41 80 f8 09          	cmp    $0x9,%r8b
ffffffff800038d7:	76 47                	jbe    ffffffff80003920 <_vsnprintf+0x400>
      else if (*format == '*') {
ffffffff800038d9:	40 80 ff 2a          	cmp    $0x2a,%dil
ffffffff800038dd:	0f 84 bf 02 00 00    	je     ffffffff80003ba2 <_vsnprintf+0x682>
      format++;
ffffffff800038e3:	49 89 cf             	mov    %rcx,%r15
ffffffff800038e6:	48 83 c1 01          	add    $0x1,%rcx
        format++;
ffffffff800038ea:	48 89 ca             	mov    %rcx,%rdx
    switch (*format) {
ffffffff800038ed:	40 80 ff 6c          	cmp    $0x6c,%dil
ffffffff800038f1:	0f 85 eb fc ff ff    	jne    ffffffff800035e2 <_vsnprintf+0xc2>
ffffffff800038f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800038fe:	00 00 
        if (*format == 'l') {
ffffffff80003900:	41 0f be 7f 01       	movsbl 0x1(%r15),%edi
ffffffff80003905:	40 80 ff 6c          	cmp    $0x6c,%dil
ffffffff80003909:	0f 84 b2 03 00 00    	je     ffffffff80003cc1 <_vsnprintf+0x7a1>
        flags |= FLAGS_LONG;
ffffffff8000390f:	41 81 ce 00 01 00 00 	or     $0x100,%r14d
ffffffff80003916:	e9 ed fc ff ff       	jmpq   ffffffff80003608 <_vsnprintf+0xe8>
ffffffff8000391b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80003920:	8d 0c b6             	lea    (%rsi,%rsi,4),%ecx
ffffffff80003923:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80003927:	8d 74 4f d0          	lea    -0x30(%rdi,%rcx,2),%esi
  while (_is_digit(**str)) {
ffffffff8000392b:	0f be 3a             	movsbl (%rdx),%edi
  return (ch >= '0') && (ch <= '9');
ffffffff8000392e:	8d 4f d0             	lea    -0x30(%rdi),%ecx
  while (_is_digit(**str)) {
ffffffff80003931:	80 f9 09             	cmp    $0x9,%cl
ffffffff80003934:	76 ea                	jbe    ffffffff80003920 <_vsnprintf+0x400>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80003936:	49 89 d7             	mov    %rdx,%r15
ffffffff80003939:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
ffffffff8000393d:	e9 93 fc ff ff       	jmpq   ffffffff800035d5 <_vsnprintf+0xb5>
ffffffff80003942:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      const int w = va_arg(va, int);
ffffffff80003948:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000394c:	8b 17                	mov    (%rdi),%edx
ffffffff8000394e:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003951:	77 2d                	ja     ffffffff80003980 <_vsnprintf+0x460>
ffffffff80003953:	89 d6                	mov    %edx,%esi
ffffffff80003955:	83 c2 08             	add    $0x8,%edx
ffffffff80003958:	48 03 77 10          	add    0x10(%rdi),%rsi
ffffffff8000395c:	89 17                	mov    %edx,(%rdi)
ffffffff8000395e:	44 8b 1e             	mov    (%rsi),%r11d
      if (w < 0) {
ffffffff80003961:	45 85 db             	test   %r11d,%r11d
ffffffff80003964:	79 07                	jns    ffffffff8000396d <_vsnprintf+0x44d>
        flags |= FLAGS_LEFT;    // reverse padding
ffffffff80003966:	41 83 ce 02          	or     $0x2,%r14d
        width = (unsigned int)-w;
ffffffff8000396a:	41 f7 db             	neg    %r11d
    if (*format == '.') {
ffffffff8000396d:	41 0f be 7f 01       	movsbl 0x1(%r15),%edi
      format++;
ffffffff80003972:	49 89 cf             	mov    %rcx,%r15
ffffffff80003975:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80003979:	e9 4b fc ff ff       	jmpq   ffffffff800035c9 <_vsnprintf+0xa9>
ffffffff8000397e:	66 90                	xchg   %ax,%ax
      const int w = va_arg(va, int);
ffffffff80003980:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff80003984:	48 8b 77 08          	mov    0x8(%rdi),%rsi
ffffffff80003988:	48 8d 56 08          	lea    0x8(%rsi),%rdx
ffffffff8000398c:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff80003990:	eb cc                	jmp    ffffffff8000395e <_vsnprintf+0x43e>
ffffffff80003992:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if (*format == 'h') {
ffffffff80003998:	41 0f be 7f 01       	movsbl 0x1(%r15),%edi
ffffffff8000399d:	40 80 ff 68          	cmp    $0x68,%dil
ffffffff800039a1:	0f 84 2f 03 00 00    	je     ffffffff80003cd6 <_vsnprintf+0x7b6>
        flags |= FLAGS_SHORT;
ffffffff800039a7:	41 80 ce 80          	or     $0x80,%r14b
ffffffff800039ab:	e9 58 fc ff ff       	jmpq   ffffffff80003608 <_vsnprintf+0xe8>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff800039b0:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
ffffffff800039b4:	41 83 ce 21          	or     $0x21,%r14d
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff800039b8:	8b 17                	mov    (%rdi),%edx
ffffffff800039ba:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800039bd:	0f 87 b5 01 00 00    	ja     ffffffff80003b78 <_vsnprintf+0x658>
ffffffff800039c3:	89 d1                	mov    %edx,%ecx
ffffffff800039c5:	83 c2 08             	add    $0x8,%edx
ffffffff800039c8:	48 03 4f 10          	add    0x10(%rdi),%rcx
ffffffff800039cc:	89 17                	mov    %edx,(%rdi)
ffffffff800039ce:	4c 8b 01             	mov    (%rcx),%r8
ffffffff800039d1:	41 56                	push   %r14
ffffffff800039d3:	6a 10                	pushq  $0x10
ffffffff800039d5:	56                   	push   %rsi
ffffffff800039d6:	6a 10                	pushq  $0x10
ffffffff800039d8:	45 31 c9             	xor    %r9d,%r9d
ffffffff800039db:	48 89 d9             	mov    %rbx,%rcx
ffffffff800039de:	48 89 c2             	mov    %rax,%rdx
ffffffff800039e1:	4c 89 e6             	mov    %r12,%rsi
ffffffff800039e4:	4c 89 ef             	mov    %r13,%rdi
ffffffff800039e7:	e8 b4 f5 ff ff       	callq  ffffffff80002fa0 <_ntoa_long>
        break;
ffffffff800039ec:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800039f0:	e9 81 fb ff ff       	jmpq   ffffffff80003576 <_vsnprintf+0x56>
        const char* p = va_arg(va, char*);
ffffffff800039f5:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff800039f9:	8b 17                	mov    (%rdi),%edx
ffffffff800039fb:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800039fe:	0f 87 5f 01 00 00    	ja     ffffffff80003b63 <_vsnprintf+0x643>
ffffffff80003a04:	89 d1                	mov    %edx,%ecx
ffffffff80003a06:	83 c2 08             	add    $0x8,%edx
ffffffff80003a09:	48 03 4f 10          	add    0x10(%rdi),%rcx
ffffffff80003a0d:	89 17                	mov    %edx,(%rdi)
ffffffff80003a0f:	48 8b 09             	mov    (%rcx),%rcx
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80003a12:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80003a19:	41 89 f0             	mov    %esi,%r8d
ffffffff80003a1c:	85 f6                	test   %esi,%esi
ffffffff80003a1e:	4c 0f 44 c2          	cmove  %rdx,%r8
  for (s = str; *s && maxsize--; ++s);
ffffffff80003a22:	0f b6 11             	movzbl (%rcx),%edx
ffffffff80003a25:	84 d2                	test   %dl,%dl
ffffffff80003a27:	0f 84 a0 04 00 00    	je     ffffffff80003ecd <_vsnprintf+0x9ad>
ffffffff80003a2d:	49 01 c8             	add    %rcx,%r8
ffffffff80003a30:	48 89 cf             	mov    %rcx,%rdi
ffffffff80003a33:	eb 0c                	jmp    ffffffff80003a41 <_vsnprintf+0x521>
ffffffff80003a35:	0f 1f 00             	nopl   (%rax)
ffffffff80003a38:	49 39 f8             	cmp    %rdi,%r8
ffffffff80003a3b:	0f 84 78 02 00 00    	je     ffffffff80003cb9 <_vsnprintf+0x799>
ffffffff80003a41:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80003a45:	80 3f 00             	cmpb   $0x0,(%rdi)
ffffffff80003a48:	75 ee                	jne    ffffffff80003a38 <_vsnprintf+0x518>
  return (unsigned int)(s - str);
ffffffff80003a4a:	41 89 f8             	mov    %edi,%r8d
ffffffff80003a4d:	41 29 c8             	sub    %ecx,%r8d
          l = (l < precision ? l : precision);
ffffffff80003a50:	41 39 f0             	cmp    %esi,%r8d
ffffffff80003a53:	89 f7                	mov    %esi,%edi
ffffffff80003a55:	45 89 f2             	mov    %r14d,%r10d
ffffffff80003a58:	41 0f 46 f8          	cmovbe %r8d,%edi
ffffffff80003a5c:	41 81 e2 00 04 00 00 	and    $0x400,%r10d
ffffffff80003a63:	44 89 55 a8          	mov    %r10d,-0x58(%rbp)
ffffffff80003a67:	44 0f 45 c7          	cmovne %edi,%r8d
        if (!(flags & FLAGS_LEFT)) {
ffffffff80003a6b:	41 83 e6 02          	and    $0x2,%r14d
ffffffff80003a6f:	44 89 75 a4          	mov    %r14d,-0x5c(%rbp)
ffffffff80003a73:	0f 84 96 02 00 00    	je     ffffffff80003d0f <_vsnprintf+0x7ef>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003a79:	84 d2                	test   %dl,%dl
ffffffff80003a7b:	0f 84 8c 00 00 00    	je     ffffffff80003b0d <_vsnprintf+0x5ed>
ffffffff80003a81:	48 29 c1             	sub    %rax,%rcx
ffffffff80003a84:	4c 89 65 c8          	mov    %r12,-0x38(%rbp)
ffffffff80003a88:	49 89 c4             	mov    %rax,%r12
ffffffff80003a8b:	48 89 5d c0          	mov    %rbx,-0x40(%rbp)
ffffffff80003a8f:	8b 5d a8             	mov    -0x58(%rbp),%ebx
ffffffff80003a92:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
ffffffff80003a96:	4c 89 7d a8          	mov    %r15,-0x58(%rbp)
ffffffff80003a9a:	41 89 f7             	mov    %esi,%r15d
ffffffff80003a9d:	44 89 45 a0          	mov    %r8d,-0x60(%rbp)
ffffffff80003aa1:	44 89 5d 98          	mov    %r11d,-0x68(%rbp)
ffffffff80003aa5:	eb 0c                	jmp    ffffffff80003ab3 <_vsnprintf+0x593>
ffffffff80003aa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003aae:	00 00 
          out(*(p++), buffer, idx++, maxlen);
ffffffff80003ab0:	4d 89 f4             	mov    %r14,%r12
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003ab3:	85 db                	test   %ebx,%ebx
ffffffff80003ab5:	74 10                	je     ffffffff80003ac7 <_vsnprintf+0x5a7>
ffffffff80003ab7:	41 8d 4f ff          	lea    -0x1(%r15),%ecx
ffffffff80003abb:	45 85 ff             	test   %r15d,%r15d
ffffffff80003abe:	0f 84 24 02 00 00    	je     ffffffff80003ce8 <_vsnprintf+0x7c8>
ffffffff80003ac4:	41 89 cf             	mov    %ecx,%r15d
          out(*(p++), buffer, idx++, maxlen);
ffffffff80003ac7:	0f be fa             	movsbl %dl,%edi
ffffffff80003aca:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff80003ace:	4c 89 e2             	mov    %r12,%rdx
ffffffff80003ad1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff80003ad5:	41 ff d5             	callq  *%r13
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003ad8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
          out(*(p++), buffer, idx++, maxlen);
ffffffff80003adc:	4d 8d 74 24 01       	lea    0x1(%r12),%r14
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003ae1:	41 0f b6 54 04 01    	movzbl 0x1(%r12,%rax,1),%edx
ffffffff80003ae7:	84 d2                	test   %dl,%dl
ffffffff80003ae9:	75 c5                	jne    ffffffff80003ab0 <_vsnprintf+0x590>
ffffffff80003aeb:	44 8b 45 a0          	mov    -0x60(%rbp),%r8d
ffffffff80003aef:	44 8b 5d 98          	mov    -0x68(%rbp),%r11d
ffffffff80003af3:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
ffffffff80003af7:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
ffffffff80003afb:	4c 8b 7d a8          	mov    -0x58(%rbp),%r15
        if (flags & FLAGS_LEFT) {
ffffffff80003aff:	8b 45 a4             	mov    -0x5c(%rbp),%eax
ffffffff80003b02:	85 c0                	test   %eax,%eax
ffffffff80003b04:	0f 84 69 fa ff ff    	je     ffffffff80003573 <_vsnprintf+0x53>
ffffffff80003b0a:	4c 89 f0             	mov    %r14,%rax
          while (l++ < width) {
ffffffff80003b0d:	45 39 d8             	cmp    %r11d,%r8d
ffffffff80003b10:	0f 83 75 02 00 00    	jae    ffffffff80003d8b <_vsnprintf+0x86b>
ffffffff80003b16:	41 83 eb 01          	sub    $0x1,%r11d
ffffffff80003b1a:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
ffffffff80003b1e:	45 29 c3             	sub    %r8d,%r11d
ffffffff80003b21:	4c 8d 40 01          	lea    0x1(%rax),%r8
ffffffff80003b25:	4c 89 7d c0          	mov    %r15,-0x40(%rbp)
ffffffff80003b29:	49 89 c7             	mov    %rax,%r15
ffffffff80003b2c:	4f 8d 34 03          	lea    (%r11,%r8,1),%r14
ffffffff80003b30:	4c 89 c3             	mov    %r8,%rbx
ffffffff80003b33:	eb 07                	jmp    ffffffff80003b3c <_vsnprintf+0x61c>
ffffffff80003b35:	0f 1f 00             	nopl   (%rax)
ffffffff80003b38:	48 83 c3 01          	add    $0x1,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff80003b3c:	4c 89 fa             	mov    %r15,%rdx
ffffffff80003b3f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80003b43:	49 89 df             	mov    %rbx,%r15
ffffffff80003b46:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003b49:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003b4e:	41 ff d5             	callq  *%r13
          while (l++ < width) {
ffffffff80003b51:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80003b54:	75 e2                	jne    ffffffff80003b38 <_vsnprintf+0x618>
ffffffff80003b56:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
ffffffff80003b5a:	4c 8b 7d c0          	mov    -0x40(%rbp),%r15
        break;
ffffffff80003b5e:	e9 10 fa ff ff       	jmpq   ffffffff80003573 <_vsnprintf+0x53>
        const char* p = va_arg(va, char*);
ffffffff80003b63:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff80003b67:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
ffffffff80003b6b:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff80003b6f:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff80003b73:	e9 97 fe ff ff       	jmpq   ffffffff80003a0f <_vsnprintf+0x4ef>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80003b78:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff80003b7c:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
ffffffff80003b80:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff80003b84:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff80003b88:	e9 41 fe ff ff       	jmpq   ffffffff800039ce <_vsnprintf+0x4ae>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003b8d:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff80003b91:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff80003b95:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff80003b99:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003b9d:	e9 c5 fa ff ff       	jmpq   ffffffff80003667 <_vsnprintf+0x147>
        const int prec = (int)va_arg(va, int);
ffffffff80003ba2:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff80003ba6:	8b 16                	mov    (%rsi),%edx
ffffffff80003ba8:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003bab:	0f 87 e2 01 00 00    	ja     ffffffff80003d93 <_vsnprintf+0x873>
ffffffff80003bb1:	89 d1                	mov    %edx,%ecx
ffffffff80003bb3:	83 c2 08             	add    $0x8,%edx
ffffffff80003bb6:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80003bba:	89 16                	mov    %edx,(%rsi)
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff80003bbc:	8b 31                	mov    (%rcx),%esi
ffffffff80003bbe:	31 d2                	xor    %edx,%edx
    switch (*format) {
ffffffff80003bc0:	41 0f be 7f 02       	movsbl 0x2(%r15),%edi
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff80003bc5:	85 f6                	test   %esi,%esi
ffffffff80003bc7:	0f 48 f2             	cmovs  %edx,%esi
        format++;
ffffffff80003bca:	49 83 c7 02          	add    $0x2,%r15
ffffffff80003bce:	49 8d 4f 01          	lea    0x1(%r15),%rcx
ffffffff80003bd2:	e9 fe f9 ff ff       	jmpq   ffffffff800035d5 <_vsnprintf+0xb5>
          while (l++ < width) {
ffffffff80003bd7:	41 83 fb 01          	cmp    $0x1,%r11d
ffffffff80003bdb:	0f 86 c4 03 00 00    	jbe    ffffffff80003fa5 <_vsnprintf+0xa85>
ffffffff80003be1:	4c 8d 40 01          	lea    0x1(%rax),%r8
ffffffff80003be5:	41 8d 53 fe          	lea    -0x2(%r11),%edx
ffffffff80003be9:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
ffffffff80003bed:	4c 89 7d a8          	mov    %r15,-0x58(%rbp)
ffffffff80003bf1:	4d 8d 34 10          	lea    (%r8,%rdx,1),%r14
ffffffff80003bf5:	49 89 c7             	mov    %rax,%r15
ffffffff80003bf8:	4c 89 c3             	mov    %r8,%rbx
ffffffff80003bfb:	44 89 5d b8          	mov    %r11d,-0x48(%rbp)
ffffffff80003bff:	eb 0b                	jmp    ffffffff80003c0c <_vsnprintf+0x6ec>
ffffffff80003c01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80003c08:	48 83 c3 01          	add    $0x1,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff80003c0c:	4c 89 fa             	mov    %r15,%rdx
ffffffff80003c0f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80003c13:	49 89 df             	mov    %rbx,%r15
ffffffff80003c16:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003c19:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003c1e:	41 ff d5             	callq  *%r13
          while (l++ < width) {
ffffffff80003c21:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80003c24:	75 e2                	jne    ffffffff80003c08 <_vsnprintf+0x6e8>
ffffffff80003c26:	44 8b 5d b8          	mov    -0x48(%rbp),%r11d
ffffffff80003c2a:	4c 8b 7d a8          	mov    -0x58(%rbp),%r15
ffffffff80003c2e:	48 89 d8             	mov    %rbx,%rax
ffffffff80003c31:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
ffffffff80003c35:	41 8d 73 01          	lea    0x1(%r11),%esi
ffffffff80003c39:	89 75 a8             	mov    %esi,-0x58(%rbp)
ffffffff80003c3c:	e9 08 fa ff ff       	jmpq   ffffffff80003649 <_vsnprintf+0x129>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80003c41:	45 85 c0             	test   %r8d,%r8d
ffffffff80003c44:	0f 85 5e 01 00 00    	jne    ffffffff80003da8 <_vsnprintf+0x888>
          else if (flags & FLAGS_LONG) {
ffffffff80003c4a:	41 f7 c6 00 01 00 00 	test   $0x100,%r14d
ffffffff80003c51:	0f 85 42 02 00 00    	jne    ffffffff80003e99 <_vsnprintf+0x979>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003c57:	41 f6 c6 40          	test   $0x40,%r14b
ffffffff80003c5b:	0f 85 ac 01 00 00    	jne    ffffffff80003e0d <_vsnprintf+0x8ed>
ffffffff80003c61:	41 f6 c6 80          	test   $0x80,%r14b
ffffffff80003c65:	0f 84 c3 02 00 00    	je     ffffffff80003f2e <_vsnprintf+0xa0e>
ffffffff80003c6b:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003c6e:	0f 87 0a 03 00 00    	ja     ffffffff80003f7e <_vsnprintf+0xa5e>
ffffffff80003c74:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003c78:	89 cf                	mov    %ecx,%edi
ffffffff80003c7a:	83 c1 08             	add    $0x8,%ecx
ffffffff80003c7d:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003c80:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003c84:	44 0f bf 0f          	movswl (%rdi),%r9d
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80003c88:	45 89 c8             	mov    %r9d,%r8d
ffffffff80003c8b:	41 56                	push   %r14
ffffffff80003c8d:	41 f7 d8             	neg    %r8d
ffffffff80003c90:	41 53                	push   %r11
ffffffff80003c92:	45 0f 48 c1          	cmovs  %r9d,%r8d
ffffffff80003c96:	56                   	push   %rsi
ffffffff80003c97:	41 c1 e9 1f          	shr    $0x1f,%r9d
ffffffff80003c9b:	52                   	push   %rdx
ffffffff80003c9c:	4d 63 c0             	movslq %r8d,%r8
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff80003c9f:	48 89 d9             	mov    %rbx,%rcx
ffffffff80003ca2:	48 89 c2             	mov    %rax,%rdx
ffffffff80003ca5:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003ca8:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003cab:	e8 f0 f2 ff ff       	callq  ffffffff80002fa0 <_ntoa_long>
ffffffff80003cb0:	48 83 c4 20          	add    $0x20,%rsp
        break;
ffffffff80003cb4:	e9 bd f8 ff ff       	jmpq   ffffffff80003576 <_vsnprintf+0x56>
  return (unsigned int)(s - str);
ffffffff80003cb9:	41 29 c8             	sub    %ecx,%r8d
ffffffff80003cbc:	e9 8f fd ff ff       	jmpq   ffffffff80003a50 <_vsnprintf+0x530>
    switch (*format) {
ffffffff80003cc1:	41 0f be 7f 02       	movsbl 0x2(%r15),%edi
          flags |= FLAGS_LONG_LONG;
ffffffff80003cc6:	41 81 ce 00 03 00 00 	or     $0x300,%r14d
          format++;
ffffffff80003ccd:	49 8d 57 02          	lea    0x2(%r15),%rdx
ffffffff80003cd1:	e9 32 f9 ff ff       	jmpq   ffffffff80003608 <_vsnprintf+0xe8>
    switch (*format) {
ffffffff80003cd6:	41 0f be 7f 02       	movsbl 0x2(%r15),%edi
          flags |= FLAGS_CHAR;
ffffffff80003cdb:	41 80 ce c0          	or     $0xc0,%r14b
          format++;
ffffffff80003cdf:	49 8d 57 02          	lea    0x2(%r15),%rdx
ffffffff80003ce3:	e9 20 f9 ff ff       	jmpq   ffffffff80003608 <_vsnprintf+0xe8>
ffffffff80003ce8:	4c 89 e0             	mov    %r12,%rax
ffffffff80003ceb:	44 8b 45 a0          	mov    -0x60(%rbp),%r8d
ffffffff80003cef:	44 8b 5d 98          	mov    -0x68(%rbp),%r11d
ffffffff80003cf3:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
ffffffff80003cf7:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
ffffffff80003cfb:	49 89 c6             	mov    %rax,%r14
ffffffff80003cfe:	4c 8b 7d a8          	mov    -0x58(%rbp),%r15
ffffffff80003d02:	e9 f8 fd ff ff       	jmpq   ffffffff80003aff <_vsnprintf+0x5df>
  while (*format)
ffffffff80003d07:	45 31 f6             	xor    %r14d,%r14d
ffffffff80003d0a:	e9 64 fa ff ff       	jmpq   ffffffff80003773 <_vsnprintf+0x253>
          while (l++ < width) {
ffffffff80003d0f:	45 39 d8             	cmp    %r11d,%r8d
ffffffff80003d12:	0f 83 48 02 00 00    	jae    ffffffff80003f60 <_vsnprintf+0xa40>
ffffffff80003d18:	41 8d 53 ff          	lea    -0x1(%r11),%edx
ffffffff80003d1c:	48 89 5d c8          	mov    %rbx,-0x38(%rbp)
ffffffff80003d20:	44 29 c2             	sub    %r8d,%edx
ffffffff80003d23:	4c 8d 40 01          	lea    0x1(%rax),%r8
ffffffff80003d27:	4c 89 7d 98          	mov    %r15,-0x68(%rbp)
ffffffff80003d2b:	49 89 c7             	mov    %rax,%r15
ffffffff80003d2e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80003d32:	4e 8d 34 02          	lea    (%rdx,%r8,1),%r14
ffffffff80003d36:	4c 89 c3             	mov    %r8,%rbx
ffffffff80003d39:	44 89 5d b8          	mov    %r11d,-0x48(%rbp)
ffffffff80003d3d:	89 75 a0             	mov    %esi,-0x60(%rbp)
ffffffff80003d40:	eb 0a                	jmp    ffffffff80003d4c <_vsnprintf+0x82c>
ffffffff80003d42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80003d48:	48 83 c3 01          	add    $0x1,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff80003d4c:	4c 89 fa             	mov    %r15,%rdx
ffffffff80003d4f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80003d53:	49 89 df             	mov    %rbx,%r15
ffffffff80003d56:	4c 89 e6             	mov    %r12,%rsi
ffffffff80003d59:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003d5e:	41 ff d5             	callq  *%r13
          while (l++ < width) {
ffffffff80003d61:	49 39 de             	cmp    %rbx,%r14
ffffffff80003d64:	75 e2                	jne    ffffffff80003d48 <_vsnprintf+0x828>
ffffffff80003d66:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff80003d6a:	44 8b 5d b8          	mov    -0x48(%rbp),%r11d
ffffffff80003d6e:	48 89 d8             	mov    %rbx,%rax
ffffffff80003d71:	8b 75 a0             	mov    -0x60(%rbp),%esi
ffffffff80003d74:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
ffffffff80003d78:	4c 8b 7d 98          	mov    -0x68(%rbp),%r15
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003d7c:	0f b6 11             	movzbl (%rcx),%edx
          while (l++ < width) {
ffffffff80003d7f:	45 8d 43 01          	lea    0x1(%r11),%r8d
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003d83:	84 d2                	test   %dl,%dl
ffffffff80003d85:	0f 85 f6 fc ff ff    	jne    ffffffff80003a81 <_vsnprintf+0x561>
          while (l++ < width) {
ffffffff80003d8b:	49 89 c6             	mov    %rax,%r14
ffffffff80003d8e:	e9 e0 f7 ff ff       	jmpq   ffffffff80003573 <_vsnprintf+0x53>
        const int prec = (int)va_arg(va, int);
ffffffff80003d93:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff80003d97:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff80003d9b:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff80003d9f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003da3:	e9 14 fe ff ff       	jmpq   ffffffff80003bbc <_vsnprintf+0x69c>
            const long long value = va_arg(va, long long);
ffffffff80003da8:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003dab:	0f 87 b2 00 00 00    	ja     ffffffff80003e63 <_vsnprintf+0x943>
ffffffff80003db1:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003db5:	89 cf                	mov    %ecx,%edi
ffffffff80003db7:	83 c1 08             	add    $0x8,%ecx
ffffffff80003dba:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003dbd:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003dc1:	48 8b 0f             	mov    (%rdi),%rcx
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80003dc4:	41 56                	push   %r14
ffffffff80003dc6:	41 53                	push   %r11
ffffffff80003dc8:	49 89 c9             	mov    %rcx,%r9
ffffffff80003dcb:	49 89 c8             	mov    %rcx,%r8
ffffffff80003dce:	56                   	push   %rsi
ffffffff80003dcf:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003dd3:	49 f7 d8             	neg    %r8
ffffffff80003dd6:	52                   	push   %rdx
ffffffff80003dd7:	4c 0f 48 c1          	cmovs  %rcx,%r8
ffffffff80003ddb:	e9 fb fb ff ff       	jmpq   ffffffff800039db <_vsnprintf+0x4bb>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80003de0:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003de3:	77 6c                	ja     ffffffff80003e51 <_vsnprintf+0x931>
ffffffff80003de5:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003de9:	89 cf                	mov    %ecx,%edi
ffffffff80003deb:	83 c1 08             	add    $0x8,%ecx
ffffffff80003dee:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003df1:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003df5:	4c 8b 07             	mov    (%rdi),%r8
ffffffff80003df8:	41 56                	push   %r14
ffffffff80003dfa:	41 53                	push   %r11
ffffffff80003dfc:	56                   	push   %rsi
ffffffff80003dfd:	52                   	push   %rdx
ffffffff80003dfe:	e9 d5 fb ff ff       	jmpq   ffffffff800039d8 <_vsnprintf+0x4b8>
    switch (*format) {
ffffffff80003e03:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff80003e08:	e9 f2 f9 ff ff       	jmpq   ffffffff800037ff <_vsnprintf+0x2df>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003e0d:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003e10:	0f 87 e6 00 00 00    	ja     ffffffff80003efc <_vsnprintf+0x9dc>
ffffffff80003e16:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003e1a:	89 cf                	mov    %ecx,%edi
ffffffff80003e1c:	83 c1 08             	add    $0x8,%ecx
ffffffff80003e1f:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003e22:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003e26:	44 0f be 0f          	movsbl (%rdi),%r9d
ffffffff80003e2a:	e9 59 fe ff ff       	jmpq   ffffffff80003c88 <_vsnprintf+0x768>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003e2f:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003e32:	0f 87 9d 00 00 00    	ja     ffffffff80003ed5 <_vsnprintf+0x9b5>
ffffffff80003e38:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003e3c:	89 cf                	mov    %ecx,%edi
ffffffff80003e3e:	83 c1 08             	add    $0x8,%ecx
ffffffff80003e41:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003e44:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003e48:	44 0f b6 07          	movzbl (%rdi),%r8d
ffffffff80003e4c:	e9 2e fa ff ff       	jmpq   ffffffff8000387f <_vsnprintf+0x35f>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80003e51:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003e55:	49 8b 7a 08          	mov    0x8(%r10),%rdi
ffffffff80003e59:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003e5d:	49 89 4a 08          	mov    %rcx,0x8(%r10)
ffffffff80003e61:	eb 92                	jmp    ffffffff80003df5 <_vsnprintf+0x8d5>
            const long long value = va_arg(va, long long);
ffffffff80003e63:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003e67:	49 8b 7a 08          	mov    0x8(%r10),%rdi
ffffffff80003e6b:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003e6f:	49 89 4a 08          	mov    %rcx,0x8(%r10)
ffffffff80003e73:	e9 49 ff ff ff       	jmpq   ffffffff80003dc1 <_vsnprintf+0x8a1>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80003e78:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003e7b:	0f 87 ca 00 00 00    	ja     ffffffff80003f4b <_vsnprintf+0xa2b>
ffffffff80003e81:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003e85:	89 cf                	mov    %ecx,%edi
ffffffff80003e87:	83 c1 08             	add    $0x8,%ecx
ffffffff80003e8a:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003e8d:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003e91:	4c 8b 07             	mov    (%rdi),%r8
ffffffff80003e94:	e9 e6 f9 ff ff       	jmpq   ffffffff8000387f <_vsnprintf+0x35f>
            const long value = va_arg(va, long);
ffffffff80003e99:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003e9c:	77 4c                	ja     ffffffff80003eea <_vsnprintf+0x9ca>
ffffffff80003e9e:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003ea2:	89 cf                	mov    %ecx,%edi
ffffffff80003ea4:	83 c1 08             	add    $0x8,%ecx
ffffffff80003ea7:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003eaa:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003eae:	48 8b 0f             	mov    (%rdi),%rcx
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80003eb1:	41 56                	push   %r14
ffffffff80003eb3:	41 53                	push   %r11
ffffffff80003eb5:	49 89 c9             	mov    %rcx,%r9
ffffffff80003eb8:	49 89 c8             	mov    %rcx,%r8
ffffffff80003ebb:	56                   	push   %rsi
ffffffff80003ebc:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003ec0:	49 f7 d8             	neg    %r8
ffffffff80003ec3:	52                   	push   %rdx
ffffffff80003ec4:	4c 0f 48 c1          	cmovs  %rcx,%r8
ffffffff80003ec8:	e9 d2 fd ff ff       	jmpq   ffffffff80003c9f <_vsnprintf+0x77f>
  for (s = str; *s && maxsize--; ++s);
ffffffff80003ecd:	45 31 c0             	xor    %r8d,%r8d
ffffffff80003ed0:	e9 7b fb ff ff       	jmpq   ffffffff80003a50 <_vsnprintf+0x530>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003ed5:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
ffffffff80003ed9:	49 8b 79 08          	mov    0x8(%r9),%rdi
ffffffff80003edd:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003ee1:	49 89 49 08          	mov    %rcx,0x8(%r9)
ffffffff80003ee5:	e9 5e ff ff ff       	jmpq   ffffffff80003e48 <_vsnprintf+0x928>
            const long value = va_arg(va, long);
ffffffff80003eea:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003eee:	49 8b 7a 08          	mov    0x8(%r10),%rdi
ffffffff80003ef2:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003ef6:	49 89 4a 08          	mov    %rcx,0x8(%r10)
ffffffff80003efa:	eb b2                	jmp    ffffffff80003eae <_vsnprintf+0x98e>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003efc:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003f00:	49 8b 7a 08          	mov    0x8(%r10),%rdi
ffffffff80003f04:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003f08:	49 89 4a 08          	mov    %rcx,0x8(%r10)
ffffffff80003f0c:	e9 15 ff ff ff       	jmpq   ffffffff80003e26 <_vsnprintf+0x906>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003f11:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003f14:	77 7d                	ja     ffffffff80003f93 <_vsnprintf+0xa73>
ffffffff80003f16:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003f1a:	89 cf                	mov    %ecx,%edi
ffffffff80003f1c:	83 c1 08             	add    $0x8,%ecx
ffffffff80003f1f:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003f22:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003f26:	44 8b 07             	mov    (%rdi),%r8d
ffffffff80003f29:	e9 51 f9 ff ff       	jmpq   ffffffff8000387f <_vsnprintf+0x35f>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003f2e:	83 f9 2f             	cmp    $0x2f,%ecx
ffffffff80003f31:	77 7e                	ja     ffffffff80003fb1 <_vsnprintf+0xa91>
ffffffff80003f33:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003f37:	89 cf                	mov    %ecx,%edi
ffffffff80003f39:	83 c1 08             	add    $0x8,%ecx
ffffffff80003f3c:	41 89 0a             	mov    %ecx,(%r10)
ffffffff80003f3f:	49 03 7a 10          	add    0x10(%r10),%rdi
ffffffff80003f43:	44 8b 0f             	mov    (%rdi),%r9d
ffffffff80003f46:	e9 3d fd ff ff       	jmpq   ffffffff80003c88 <_vsnprintf+0x768>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80003f4b:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003f4f:	49 8b 7a 08          	mov    0x8(%r10),%rdi
ffffffff80003f53:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003f57:	49 89 4a 08          	mov    %rcx,0x8(%r10)
ffffffff80003f5b:	e9 31 ff ff ff       	jmpq   ffffffff80003e91 <_vsnprintf+0x971>
          while (l++ < width) {
ffffffff80003f60:	41 83 c0 01          	add    $0x1,%r8d
ffffffff80003f64:	e9 1a fe ff ff       	jmpq   ffffffff80003d83 <_vsnprintf+0x863>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003f69:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
ffffffff80003f6d:	49 8b 79 08          	mov    0x8(%r9),%rdi
ffffffff80003f71:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003f75:	49 89 49 08          	mov    %rcx,0x8(%r9)
ffffffff80003f79:	e9 fd f8 ff ff       	jmpq   ffffffff8000387b <_vsnprintf+0x35b>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003f7e:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003f82:	49 8b 7a 08          	mov    0x8(%r10),%rdi
ffffffff80003f86:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003f8a:	49 89 4a 08          	mov    %rcx,0x8(%r10)
ffffffff80003f8e:	e9 f1 fc ff ff       	jmpq   ffffffff80003c84 <_vsnprintf+0x764>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003f93:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
ffffffff80003f97:	49 8b 79 08          	mov    0x8(%r9),%rdi
ffffffff80003f9b:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003f9f:	49 89 49 08          	mov    %rcx,0x8(%r9)
ffffffff80003fa3:	eb 81                	jmp    ffffffff80003f26 <_vsnprintf+0xa06>
          while (l++ < width) {
ffffffff80003fa5:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%rbp)
ffffffff80003fac:	e9 98 f6 ff ff       	jmpq   ffffffff80003649 <_vsnprintf+0x129>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003fb1:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
ffffffff80003fb5:	49 8b 7a 08          	mov    0x8(%r10),%rdi
ffffffff80003fb9:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
ffffffff80003fbd:	49 89 4a 08          	mov    %rcx,0x8(%r10)
ffffffff80003fc1:	eb 80                	jmp    ffffffff80003f43 <_vsnprintf+0xa23>
        if (*format == 'x' || *format == 'X') {
ffffffff80003fc3:	89 fa                	mov    %edi,%edx
ffffffff80003fc5:	83 e2 df             	and    $0xffffffdf,%edx
ffffffff80003fc8:	80 fa 58             	cmp    $0x58,%dl
ffffffff80003fcb:	75 13                	jne    ffffffff80003fe0 <_vsnprintf+0xac0>
ffffffff80003fcd:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80003fd2:	e9 28 f8 ff ff       	jmpq   ffffffff800037ff <_vsnprintf+0x2df>
ffffffff80003fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003fde:	00 00 
        else if (*format == 'o') {
ffffffff80003fe0:	40 80 ff 6f          	cmp    $0x6f,%dil
ffffffff80003fe4:	74 2a                	je     ffffffff80004010 <_vsnprintf+0xaf0>
          flags &= ~FLAGS_HASH;   // no hash for dec format
ffffffff80003fe6:	41 83 e6 ef          	and    $0xffffffef,%r14d
        if ((*format != 'i') && (*format != 'd')) {
ffffffff80003fea:	ba 0a 00 00 00       	mov    $0xa,%edx
ffffffff80003fef:	40 80 ff 69          	cmp    $0x69,%dil
ffffffff80003ff3:	0f 84 0a f8 ff ff    	je     ffffffff80003803 <_vsnprintf+0x2e3>
ffffffff80003ff9:	40 80 ff 64          	cmp    $0x64,%dil
ffffffff80003ffd:	0f 84 00 f8 ff ff    	je     ffffffff80003803 <_vsnprintf+0x2e3>
ffffffff80004003:	e9 f7 f7 ff ff       	jmpq   ffffffff800037ff <_vsnprintf+0x2df>
ffffffff80004008:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000400f:	00 
ffffffff80004010:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80004015:	e9 e5 f7 ff ff       	jmpq   ffffffff800037ff <_vsnprintf+0x2df>
        format++;
ffffffff8000401a:	49 89 cf             	mov    %rcx,%r15
ffffffff8000401d:	e9 f4 f5 ff ff       	jmpq   ffffffff80003616 <_vsnprintf+0xf6>
ffffffff80004022:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80004029:	00 00 00 00 
ffffffff8000402d:	0f 1f 00             	nopl   (%rax)

ffffffff80004030 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
ffffffff80004030:	55                   	push   %rbp
ffffffff80004031:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004034:	48 83 ec 50          	sub    $0x50,%rsp
  va_list va;
  va_start(va, format);
ffffffff80004038:	48 8d 45 10          	lea    0x10(%rbp),%rax
{
ffffffff8000403c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80004040:	48 8d 75 b7          	lea    -0x49(%rbp),%rsi
  va_start(va, format);
ffffffff80004044:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80004048:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
{
ffffffff8000404c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80004050:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff80004057:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff8000405b:	48 89 f9             	mov    %rdi,%rcx
ffffffff8000405e:	48 c7 c7 e0 34 00 80 	mov    $0xffffffff800034e0,%rdi
{
ffffffff80004065:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80004069:	4c 8d 45 b8          	lea    -0x48(%rbp),%r8
{
ffffffff8000406d:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
  va_start(va, format);
ffffffff80004071:	c7 45 b8 08 00 00 00 	movl   $0x8,-0x48(%rbp)
ffffffff80004078:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff8000407c:	e8 9f f4 ff ff       	callq  ffffffff80003520 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80004081:	c9                   	leaveq 
ffffffff80004082:	c3                   	retq   
ffffffff80004083:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000408a:	00 00 00 00 
ffffffff8000408e:	66 90                	xchg   %ax,%ax

ffffffff80004090 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
ffffffff80004090:	55                   	push   %rbp
ffffffff80004091:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004094:	48 83 ec 50          	sub    $0x50,%rsp
  va_list va;
  va_start(va, format);
ffffffff80004098:	48 8d 45 10          	lea    0x10(%rbp),%rax
{
ffffffff8000409c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800040a0:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff800040a7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff800040ab:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
{
ffffffff800040af:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800040b3:	48 89 f1             	mov    %rsi,%rcx
ffffffff800040b6:	48 89 fe             	mov    %rdi,%rsi
ffffffff800040b9:	48 c7 c7 80 2f 00 80 	mov    $0xffffffff80002f80,%rdi
{
ffffffff800040c0:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800040c4:	4c 8d 45 b8          	lea    -0x48(%rbp),%r8
{
ffffffff800040c8:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
  va_start(va, format);
ffffffff800040cc:	c7 45 b8 10 00 00 00 	movl   $0x10,-0x48(%rbp)
ffffffff800040d3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800040d7:	e8 44 f4 ff ff       	callq  ffffffff80003520 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff800040dc:	c9                   	leaveq 
ffffffff800040dd:	c3                   	retq   
ffffffff800040de:	66 90                	xchg   %ax,%ax

ffffffff800040e0 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
ffffffff800040e0:	55                   	push   %rbp
ffffffff800040e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800040e4:	48 83 ec 50          	sub    $0x50,%rsp
  va_list va;
  va_start(va, format);
ffffffff800040e8:	48 8d 45 10          	lea    0x10(%rbp),%rax
{
ffffffff800040ec:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff800040f0:	48 89 d1             	mov    %rdx,%rcx
ffffffff800040f3:	48 89 f2             	mov    %rsi,%rdx
  va_start(va, format);
ffffffff800040f6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff800040fa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff800040fe:	48 89 fe             	mov    %rdi,%rsi
ffffffff80004101:	48 c7 c7 80 2f 00 80 	mov    $0xffffffff80002f80,%rdi
{
ffffffff80004108:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff8000410c:	4c 8d 45 b8          	lea    -0x48(%rbp),%r8
{
ffffffff80004110:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
  va_start(va, format);
ffffffff80004114:	c7 45 b8 18 00 00 00 	movl   $0x18,-0x48(%rbp)
ffffffff8000411b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff8000411f:	e8 fc f3 ff ff       	callq  ffffffff80003520 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80004124:	c9                   	leaveq 
ffffffff80004125:	c3                   	retq   
ffffffff80004126:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000412d:	00 00 00 

ffffffff80004130 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
ffffffff80004130:	55                   	push   %rbp
ffffffff80004131:	48 89 f9             	mov    %rdi,%rcx
ffffffff80004134:	49 89 f0             	mov    %rsi,%r8
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80004137:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8000413e:	48 c7 c7 e0 34 00 80 	mov    $0xffffffff800034e0,%rdi
{
ffffffff80004145:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004148:	48 83 ec 10          	sub    $0x10,%rsp
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff8000414c:	48 8d 75 ff          	lea    -0x1(%rbp),%rsi
ffffffff80004150:	e8 cb f3 ff ff       	callq  ffffffff80003520 <_vsnprintf>
}
ffffffff80004155:	c9                   	leaveq 
ffffffff80004156:	c3                   	retq   
ffffffff80004157:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000415e:	00 00 

ffffffff80004160 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
ffffffff80004160:	49 89 c8             	mov    %rcx,%r8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80004163:	48 89 d1             	mov    %rdx,%rcx
ffffffff80004166:	48 89 f2             	mov    %rsi,%rdx
ffffffff80004169:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000416c:	48 c7 c7 80 2f 00 80 	mov    $0xffffffff80002f80,%rdi
ffffffff80004173:	e9 a8 f3 ff ff       	jmpq   ffffffff80003520 <_vsnprintf>
ffffffff80004178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000417f:	00 

ffffffff80004180 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
ffffffff80004180:	55                   	push   %rbp
ffffffff80004181:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004184:	48 83 ec 60          	sub    $0x60,%rsp
  va_list va;
  va_start(va, format);
ffffffff80004188:	48 8d 45 10          	lea    0x10(%rbp),%rax
{
ffffffff8000418c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80004190:	48 89 d1             	mov    %rdx,%rcx
ffffffff80004193:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff8000419a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000419e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
{
ffffffff800041a2:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800041a6:	4c 8d 45 b8          	lea    -0x48(%rbp),%r8
{
ffffffff800041aa:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
  va_start(va, format);
ffffffff800041ae:	c7 45 b8 18 00 00 00 	movl   $0x18,-0x48(%rbp)
ffffffff800041b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff800041b9:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800041bd:	48 c7 c7 00 35 00 80 	mov    $0xffffffff80003500,%rdi
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff800041c4:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800041c8:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
ffffffff800041cc:	e8 4f f3 ff ff       	callq  ffffffff80003520 <_vsnprintf>
  va_end(va);
  return ret;
ffffffff800041d1:	c9                   	leaveq 
ffffffff800041d2:	c3                   	retq   
ffffffff800041d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800041da:	00 00 00 
ffffffff800041dd:	0f 1f 00             	nopl   (%rax)

ffffffff800041e0 <_putchar>:
#include "../device/console/console.h"

void _putchar(char character)
{
    
    putchar(character);
ffffffff800041e0:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff800041e4:	e9 37 c5 ff ff       	jmpq   ffffffff80000720 <putchar>
ffffffff800041e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800041f0 <serial_printf>:
    
    //serial_write(0x3F8, character);
}

void serial_printf(uint16_t port, const char* format, ...)
{
ffffffff800041f0:	55                   	push   %rbp
ffffffff800041f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800041f4:	53                   	push   %rbx
ffffffff800041f5:	89 fb                	mov    %edi,%ebx
    char buffer[256];

    va_list argptr;
    va_start(argptr, format);
ffffffff800041f7:	48 8d 45 10          	lea    0x10(%rbp),%rax
    vsnprintf(buffer, 256, format, argptr);
ffffffff800041fb:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
{
ffffffff80004202:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    va_start(argptr, format);
ffffffff80004209:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
ffffffff80004210:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
{
ffffffff80004214:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
    vsnprintf(buffer, 256, format, argptr);
ffffffff80004218:	48 89 f2             	mov    %rsi,%rdx
ffffffff8000421b:	be 00 01 00 00       	mov    $0x100,%esi
{
ffffffff80004220:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    vsnprintf(buffer, 256, format, argptr);
ffffffff80004224:	48 8d 8d a8 fe ff ff 	lea    -0x158(%rbp),%rcx
{
ffffffff8000422b:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
ffffffff8000422f:	4c 89 4d e8          	mov    %r9,-0x18(%rbp)
    va_start(argptr, format);
ffffffff80004233:	c7 85 a8 fe ff ff 10 	movl   $0x10,-0x158(%rbp)
ffffffff8000423a:	00 00 00 
ffffffff8000423d:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    vsnprintf(buffer, 256, format, argptr);
ffffffff80004244:	e8 17 ff ff ff       	callq  ffffffff80004160 <vsnprintf_>
    va_end(argptr);

    serial_write_str(port, buffer);
ffffffff80004249:	0f b7 fb             	movzwl %bx,%edi
ffffffff8000424c:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
ffffffff80004253:	e8 08 cf ff ff       	callq  ffffffff80001160 <serial_write_str>
ffffffff80004258:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff8000425c:	c9                   	leaveq 
ffffffff8000425d:	c3                   	retq   
ffffffff8000425e:	66 90                	xchg   %ax,%ax

ffffffff80004260 <vfs_init>:
void vfs_init()
{
    //create file descriptors for STDIN, STDOUT, and STDERR
    

};
ffffffff80004260:	c3                   	retq   
