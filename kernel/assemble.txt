
./bin/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <to_usermode>:
ffffffff80000000:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000003:	48 89 f4             	mov    %rsi,%rsp
ffffffff80000006:	41 bb 02 02 00 00    	mov    $0x202,%r11d
ffffffff8000000c:	0f 07                	sysret 

ffffffff8000000e <read_msr>:
ffffffff8000000e:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000011:	0f 32                	rdmsr  
ffffffff80000013:	c3                   	retq   

ffffffff80000014 <enable_sce>:
ffffffff80000014:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff80000019:	0f 32                	rdmsr  
ffffffff8000001b:	83 c8 01             	or     $0x1,%eax
ffffffff8000001e:	0f 30                	wrmsr  
ffffffff80000020:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff80000025:	0f 32                	rdmsr  
ffffffff80000027:	ba 08 00 20 08       	mov    $0x8200008,%edx
ffffffff8000002c:	0f 30                	wrmsr  
ffffffff8000002e:	c3                   	retq   

ffffffff8000002f <enable_sce.end>:
ffffffff8000002f:	90                   	nop

ffffffff80000030 <vmm_read_cr3>:
ffffffff80000030:	0f 20 d8             	mov    %cr3,%rax
ffffffff80000033:	c3                   	retq   

ffffffff80000034 <vmm_write_cr3>:
ffffffff80000034:	0f 22 df             	mov    %rdi,%cr3
ffffffff80000037:	c3                   	retq   

ffffffff80000038 <vmm_flush_tlb>:
ffffffff80000038:	0f 01 3f             	invlpg (%rdi)
ffffffff8000003b:	c3                   	retq   

ffffffff8000003c <vmm_flush_tlb.end>:
ffffffff8000003c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000040 <gdt_load>:
ffffffff80000040:	0f 01 17             	lgdt   (%rdi)
ffffffff80000043:	55                   	push   %rbp
ffffffff80000044:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000047:	6a 10                	pushq  $0x10
ffffffff80000049:	55                   	push   %rbp
ffffffff8000004a:	9c                   	pushfq 
ffffffff8000004b:	6a 08                	pushq  $0x8
ffffffff8000004d:	68 54 00 00 80       	pushq  $0xffffffff80000054
ffffffff80000052:	48 cf                	iretq  

ffffffff80000054 <gdt_load.trampoline>:
ffffffff80000054:	5d                   	pop    %rbp
ffffffff80000055:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80000059:	8e d8                	mov    %eax,%ds
ffffffff8000005b:	8e c0                	mov    %eax,%es
ffffffff8000005d:	8e e0                	mov    %eax,%fs
ffffffff8000005f:	8e e8                	mov    %eax,%gs
ffffffff80000061:	8e d0                	mov    %eax,%ss
ffffffff80000063:	66 b8 50 00          	mov    $0x50,%ax
ffffffff80000067:	0f 00 d8             	ltr    %ax
ffffffff8000006a:	c3                   	retq   

ffffffff8000006b <gdt_load.end>:
ffffffff8000006b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000070 <read_cr2>:
ffffffff80000070:	0f 20 d0             	mov    %cr2,%rax
ffffffff80000073:	c3                   	retq   

ffffffff80000074 <_interrupt_common>:
ffffffff80000074:	fc                   	cld    
ffffffff80000075:	50                   	push   %rax
ffffffff80000076:	53                   	push   %rbx
ffffffff80000077:	51                   	push   %rcx
ffffffff80000078:	52                   	push   %rdx
ffffffff80000079:	56                   	push   %rsi
ffffffff8000007a:	57                   	push   %rdi
ffffffff8000007b:	55                   	push   %rbp
ffffffff8000007c:	41 50                	push   %r8
ffffffff8000007e:	41 51                	push   %r9
ffffffff80000080:	41 52                	push   %r10
ffffffff80000082:	41 53                	push   %r11
ffffffff80000084:	41 54                	push   %r12
ffffffff80000086:	41 55                	push   %r13
ffffffff80000088:	41 56                	push   %r14
ffffffff8000008a:	41 57                	push   %r15
ffffffff8000008c:	48 89 e7             	mov    %rsp,%rdi
ffffffff8000008f:	e8 ac 39 00 00       	callq  ffffffff80003a40 <interrupt_handler>
ffffffff80000094:	48 89 c4             	mov    %rax,%rsp
ffffffff80000097:	41 5f                	pop    %r15
ffffffff80000099:	41 5e                	pop    %r14
ffffffff8000009b:	41 5d                	pop    %r13
ffffffff8000009d:	41 5c                	pop    %r12
ffffffff8000009f:	41 5b                	pop    %r11
ffffffff800000a1:	41 5a                	pop    %r10
ffffffff800000a3:	41 59                	pop    %r9
ffffffff800000a5:	41 58                	pop    %r8
ffffffff800000a7:	5d                   	pop    %rbp
ffffffff800000a8:	5f                   	pop    %rdi
ffffffff800000a9:	5e                   	pop    %rsi
ffffffff800000aa:	5a                   	pop    %rdx
ffffffff800000ab:	59                   	pop    %rcx
ffffffff800000ac:	5b                   	pop    %rbx
ffffffff800000ad:	58                   	pop    %rax
ffffffff800000ae:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800000b2:	48 cf                	iretq  

ffffffff800000b4 <_interrupt0>:
ffffffff800000b4:	6a 00                	pushq  $0x0
ffffffff800000b6:	6a 00                	pushq  $0x0
ffffffff800000b8:	eb ba                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000ba <_interrupt1>:
ffffffff800000ba:	6a 00                	pushq  $0x0
ffffffff800000bc:	6a 01                	pushq  $0x1
ffffffff800000be:	eb b4                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000c0 <_interrupt2>:
ffffffff800000c0:	6a 00                	pushq  $0x0
ffffffff800000c2:	6a 02                	pushq  $0x2
ffffffff800000c4:	eb ae                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000c6 <_interrupt3>:
ffffffff800000c6:	6a 00                	pushq  $0x0
ffffffff800000c8:	6a 03                	pushq  $0x3
ffffffff800000ca:	eb a8                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000cc <_interrupt4>:
ffffffff800000cc:	6a 00                	pushq  $0x0
ffffffff800000ce:	6a 04                	pushq  $0x4
ffffffff800000d0:	eb a2                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000d2 <_interrupt5>:
ffffffff800000d2:	6a 00                	pushq  $0x0
ffffffff800000d4:	6a 05                	pushq  $0x5
ffffffff800000d6:	eb 9c                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000d8 <_interrupt6>:
ffffffff800000d8:	6a 00                	pushq  $0x0
ffffffff800000da:	6a 06                	pushq  $0x6
ffffffff800000dc:	eb 96                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000de <_interrupt7>:
ffffffff800000de:	6a 00                	pushq  $0x0
ffffffff800000e0:	6a 07                	pushq  $0x7
ffffffff800000e2:	eb 90                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000e4 <_interrupt8>:
ffffffff800000e4:	6a 08                	pushq  $0x8
ffffffff800000e6:	eb 8c                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000e8 <_interrupt9>:
ffffffff800000e8:	6a 00                	pushq  $0x0
ffffffff800000ea:	6a 09                	pushq  $0x9
ffffffff800000ec:	eb 86                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000ee <_interrupt10>:
ffffffff800000ee:	6a 0a                	pushq  $0xa
ffffffff800000f0:	eb 82                	jmp    ffffffff80000074 <_interrupt_common>

ffffffff800000f2 <_interrupt11>:
ffffffff800000f2:	6a 0b                	pushq  $0xb
ffffffff800000f4:	e9 7b ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800000f9 <_interrupt12>:
ffffffff800000f9:	6a 0c                	pushq  $0xc
ffffffff800000fb:	e9 74 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000100 <_interrupt13>:
ffffffff80000100:	6a 0d                	pushq  $0xd
ffffffff80000102:	e9 6d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000107 <_interrupt14>:
ffffffff80000107:	6a 0e                	pushq  $0xe
ffffffff80000109:	e9 66 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000010e <_interrupt15>:
ffffffff8000010e:	6a 00                	pushq  $0x0
ffffffff80000110:	6a 0f                	pushq  $0xf
ffffffff80000112:	e9 5d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000117 <_interrupt16>:
ffffffff80000117:	6a 00                	pushq  $0x0
ffffffff80000119:	6a 10                	pushq  $0x10
ffffffff8000011b:	e9 54 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000120 <_interrupt17>:
ffffffff80000120:	6a 11                	pushq  $0x11
ffffffff80000122:	e9 4d ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000127 <_interrupt18>:
ffffffff80000127:	6a 00                	pushq  $0x0
ffffffff80000129:	6a 12                	pushq  $0x12
ffffffff8000012b:	e9 44 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000130 <_interrupt19>:
ffffffff80000130:	6a 00                	pushq  $0x0
ffffffff80000132:	6a 13                	pushq  $0x13
ffffffff80000134:	e9 3b ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000139 <_interrupt20>:
ffffffff80000139:	6a 00                	pushq  $0x0
ffffffff8000013b:	6a 14                	pushq  $0x14
ffffffff8000013d:	e9 32 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000142 <_interrupt21>:
ffffffff80000142:	6a 00                	pushq  $0x0
ffffffff80000144:	6a 15                	pushq  $0x15
ffffffff80000146:	e9 29 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000014b <_interrupt22>:
ffffffff8000014b:	6a 00                	pushq  $0x0
ffffffff8000014d:	6a 16                	pushq  $0x16
ffffffff8000014f:	e9 20 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000154 <_interrupt23>:
ffffffff80000154:	6a 00                	pushq  $0x0
ffffffff80000156:	6a 17                	pushq  $0x17
ffffffff80000158:	e9 17 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000015d <_interrupt24>:
ffffffff8000015d:	6a 00                	pushq  $0x0
ffffffff8000015f:	6a 18                	pushq  $0x18
ffffffff80000161:	e9 0e ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000166 <_interrupt25>:
ffffffff80000166:	6a 00                	pushq  $0x0
ffffffff80000168:	6a 19                	pushq  $0x19
ffffffff8000016a:	e9 05 ff ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000016f <_interrupt26>:
ffffffff8000016f:	6a 00                	pushq  $0x0
ffffffff80000171:	6a 1a                	pushq  $0x1a
ffffffff80000173:	e9 fc fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000178 <_interrupt27>:
ffffffff80000178:	6a 00                	pushq  $0x0
ffffffff8000017a:	6a 1b                	pushq  $0x1b
ffffffff8000017c:	e9 f3 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000181 <_interrupt28>:
ffffffff80000181:	6a 00                	pushq  $0x0
ffffffff80000183:	6a 1c                	pushq  $0x1c
ffffffff80000185:	e9 ea fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000018a <_interrupt29>:
ffffffff8000018a:	6a 00                	pushq  $0x0
ffffffff8000018c:	6a 1d                	pushq  $0x1d
ffffffff8000018e:	e9 e1 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000193 <_interrupt30>:
ffffffff80000193:	6a 1e                	pushq  $0x1e
ffffffff80000195:	e9 da fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000019a <_interrupt31>:
ffffffff8000019a:	6a 00                	pushq  $0x0
ffffffff8000019c:	6a 1f                	pushq  $0x1f
ffffffff8000019e:	e9 d1 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001a3 <_interrupt32>:
ffffffff800001a3:	6a 00                	pushq  $0x0
ffffffff800001a5:	6a 20                	pushq  $0x20
ffffffff800001a7:	e9 c8 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001ac <_interrupt33>:
ffffffff800001ac:	6a 00                	pushq  $0x0
ffffffff800001ae:	6a 21                	pushq  $0x21
ffffffff800001b0:	e9 bf fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001b5 <_interrupt34>:
ffffffff800001b5:	6a 00                	pushq  $0x0
ffffffff800001b7:	6a 22                	pushq  $0x22
ffffffff800001b9:	e9 b6 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001be <_interrupt35>:
ffffffff800001be:	6a 00                	pushq  $0x0
ffffffff800001c0:	6a 23                	pushq  $0x23
ffffffff800001c2:	e9 ad fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001c7 <_interrupt36>:
ffffffff800001c7:	6a 00                	pushq  $0x0
ffffffff800001c9:	6a 24                	pushq  $0x24
ffffffff800001cb:	e9 a4 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001d0 <_interrupt37>:
ffffffff800001d0:	6a 00                	pushq  $0x0
ffffffff800001d2:	6a 25                	pushq  $0x25
ffffffff800001d4:	e9 9b fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001d9 <_interrupt38>:
ffffffff800001d9:	6a 00                	pushq  $0x0
ffffffff800001db:	6a 26                	pushq  $0x26
ffffffff800001dd:	e9 92 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001e2 <_interrupt39>:
ffffffff800001e2:	6a 00                	pushq  $0x0
ffffffff800001e4:	6a 27                	pushq  $0x27
ffffffff800001e6:	e9 89 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001eb <_interrupt40>:
ffffffff800001eb:	6a 00                	pushq  $0x0
ffffffff800001ed:	6a 28                	pushq  $0x28
ffffffff800001ef:	e9 80 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001f4 <_interrupt41>:
ffffffff800001f4:	6a 00                	pushq  $0x0
ffffffff800001f6:	6a 29                	pushq  $0x29
ffffffff800001f8:	e9 77 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff800001fd <_interrupt42>:
ffffffff800001fd:	6a 00                	pushq  $0x0
ffffffff800001ff:	6a 2a                	pushq  $0x2a
ffffffff80000201:	e9 6e fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000206 <_interrupt43>:
ffffffff80000206:	6a 00                	pushq  $0x0
ffffffff80000208:	6a 2b                	pushq  $0x2b
ffffffff8000020a:	e9 65 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000020f <_interrupt44>:
ffffffff8000020f:	6a 00                	pushq  $0x0
ffffffff80000211:	6a 2c                	pushq  $0x2c
ffffffff80000213:	e9 5c fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000218 <_interrupt45>:
ffffffff80000218:	6a 00                	pushq  $0x0
ffffffff8000021a:	6a 2d                	pushq  $0x2d
ffffffff8000021c:	e9 53 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000221 <_interrupt46>:
ffffffff80000221:	6a 00                	pushq  $0x0
ffffffff80000223:	6a 2e                	pushq  $0x2e
ffffffff80000225:	e9 4a fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000022a <_interrupt47>:
ffffffff8000022a:	6a 00                	pushq  $0x0
ffffffff8000022c:	6a 2f                	pushq  $0x2f
ffffffff8000022e:	e9 41 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000233 <_interrupt127>:
ffffffff80000233:	6a 00                	pushq  $0x0
ffffffff80000235:	6a 7f                	pushq  $0x7f
ffffffff80000237:	e9 38 fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff8000023c <_interrupt128>:
ffffffff8000023c:	6a 00                	pushq  $0x0
ffffffff8000023e:	68 80 00 00 00       	pushq  $0x80
ffffffff80000243:	e9 2c fe ff ff       	jmpq   ffffffff80000074 <_interrupt_common>

ffffffff80000248 <isr_stub_table>:
ffffffff80000248:	b4 00 00 80 ff ff ff ff ba 00 00 80 ff ff ff ff     ................
ffffffff80000258:	c0 00 00 80 ff ff ff ff c6 00 00 80 ff ff ff ff     ................
ffffffff80000268:	cc 00 00 80 ff ff ff ff d2 00 00 80 ff ff ff ff     ................
ffffffff80000278:	d8 00 00 80 ff ff ff ff de 00 00 80 ff ff ff ff     ................
ffffffff80000288:	e4 00 00 80 ff ff ff ff e8 00 00 80 ff ff ff ff     ................
ffffffff80000298:	ee 00 00 80 ff ff ff ff f2 00 00 80 ff ff ff ff     ................
ffffffff800002a8:	f9 00 00 80 ff ff ff ff 00 01 00 80 ff ff ff ff     ................
ffffffff800002b8:	07 01 00 80 ff ff ff ff 0e 01 00 80 ff ff ff ff     ................
ffffffff800002c8:	17 01 00 80 ff ff ff ff 20 01 00 80 ff ff ff ff     ........ .......
ffffffff800002d8:	27 01 00 80 ff ff ff ff 30 01 00 80 ff ff ff ff     '.......0.......
ffffffff800002e8:	39 01 00 80 ff ff ff ff 42 01 00 80 ff ff ff ff     9.......B.......
ffffffff800002f8:	4b 01 00 80 ff ff ff ff 54 01 00 80 ff ff ff ff     K.......T.......
ffffffff80000308:	5d 01 00 80 ff ff ff ff 66 01 00 80 ff ff ff ff     ].......f.......
ffffffff80000318:	6f 01 00 80 ff ff ff ff 78 01 00 80 ff ff ff ff     o.......x.......
ffffffff80000328:	81 01 00 80 ff ff ff ff 8a 01 00 80 ff ff ff ff     ................
ffffffff80000338:	93 01 00 80 ff ff ff ff 9a 01 00 80 ff ff ff ff     ................
ffffffff80000348:	a3 01 00 80 ff ff ff ff ac 01 00 80 ff ff ff ff     ................
ffffffff80000358:	b5 01 00 80 ff ff ff ff be 01 00 80 ff ff ff ff     ................
ffffffff80000368:	c7 01 00 80 ff ff ff ff d0 01 00 80 ff ff ff ff     ................
ffffffff80000378:	d9 01 00 80 ff ff ff ff e2 01 00 80 ff ff ff ff     ................
ffffffff80000388:	eb 01 00 80 ff ff ff ff f4 01 00 80 ff ff ff ff     ................
ffffffff80000398:	fd 01 00 80 ff ff ff ff 06 02 00 80 ff ff ff ff     ................
ffffffff800003a8:	0f 02 00 80 ff ff ff ff 18 02 00 80 ff ff ff ff     ................
ffffffff800003b8:	21 02 00 80 ff ff ff ff 2a 02 00 80 ff ff ff ff     !.......*.......
ffffffff800003c8:	33 02 00 80 ff ff ff ff 3c 02 00 80 ff ff ff ff     3.......<.......

ffffffff800003d8 <idt_load>:
ffffffff800003d8:	0f 01 1f             	lidt   (%rdi)
ffffffff800003db:	fb                   	sti    
ffffffff800003dc:	c3                   	retq   

ffffffff800003dd <int_test>:
ffffffff800003dd:	cd 7f                	int    $0x7f
ffffffff800003df:	c3                   	retq   

ffffffff800003e0 <user_init>:



void user_init()
{
    enable_sce();
ffffffff800003e0:	31 c0                	xor    %eax,%eax
ffffffff800003e2:	e9 2d fc ff ff       	jmpq   ffffffff80000014 <enable_sce>
ffffffff800003e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800003ee:	00 00 

ffffffff800003f0 <outb>:
#include <stdint.h>
#include <stddef.h>

void outb(uint16_t port, uint8_t val)
{
    asm volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff800003f0:	89 f0                	mov    %esi,%eax
ffffffff800003f2:	89 fa                	mov    %edi,%edx
ffffffff800003f4:	ee                   	out    %al,(%dx)
}
ffffffff800003f5:	c3                   	retq   
ffffffff800003f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800003fd:	00 00 00 

ffffffff80000400 <inb>:

uint8_t inb(uint16_t port)
{
    uint8_t ret;
    asm volatile ( "inb %1, %0"
ffffffff80000400:	89 fa                	mov    %edi,%edx
ffffffff80000402:	ec                   	in     (%dx),%al
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
}
ffffffff80000403:	c3                   	retq   
ffffffff80000404:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000040b:	00 00 00 00 
ffffffff8000040f:	90                   	nop

ffffffff80000410 <io_wait>:
    asm volatile ( "inb %1, %0"
ffffffff80000410:	e4 80                	in     $0x80,%al

void io_wait()
{
    inb(0x80);
ffffffff80000412:	c3                   	retq   
ffffffff80000413:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000041a:	00 00 00 
ffffffff8000041d:	0f 1f 00             	nopl   (%rax)

ffffffff80000420 <schedule>:
ffffffff80000420:	f3 c3                	repz retq 
ffffffff80000422:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000429:	00 00 00 00 
ffffffff8000042d:	0f 1f 00             	nopl   (%rax)

ffffffff80000430 <scheduler_init>:
}

void scheduler_init()
{

ffffffff80000430:	f3 c3                	repz retq 
ffffffff80000432:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000439:	00 00 00 
ffffffff8000043c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000440 <_start>:



    // Let's get the terminal structure tag from the bootloader.
    struct stivale2_struct_tag_terminal *term_str_tag;
    term_str_tag = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_TERMINAL_ID);
ffffffff80000440:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
        if (current_tag == NULL) {
ffffffff80000447:	48 85 c0             	test   %rax,%rax
ffffffff8000044a:	74 2c                	je     ffffffff80000478 <_start+0x38>
        if (current_tag->identifier == id) {
ffffffff8000044c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8000044f:	48 be 74 09 3b 23 c3 	movabs $0xc2b3f4c3233b0974,%rsi
ffffffff80000456:	f4 b3 c2 
ffffffff80000459:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8000045c:	0f 84 71 01 00 00    	je     ffffffff800005d3 <_start+0x193>
ffffffff80000462:	48 89 c1             	mov    %rax,%rcx
ffffffff80000465:	eb 05                	jmp    ffffffff8000046c <_start+0x2c>
ffffffff80000467:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff8000046a:	74 0f                	je     ffffffff8000047b <_start+0x3b>
        current_tag = (void *)current_tag->next;
ffffffff8000046c:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000470:	48 85 c9             	test   %rcx,%rcx
ffffffff80000473:	75 f2                	jne    ffffffff80000467 <_start+0x27>
ffffffff80000475:	0f 1f 00             	nopl   (%rax)

    // Check if the tag was actually found.
    if (term_str_tag == NULL) {
        // It wasn't found, just hang...
        for (;;) {
            asm ("hlt");
ffffffff80000478:	f4                   	hlt    
ffffffff80000479:	eb fd                	jmp    ffffffff80000478 <_start+0x38>
        }
    }

    void* term_write_ptr = (void *)term_str_tag->term_write;
    term_write = term_write_ptr;
ffffffff8000047b:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff8000047f:	48 89 0d 1a a2 00 00 	mov    %rcx,0xa21a(%rip)        # ffffffff8000a6a0 <term_write>
        if (current_tag->identifier == id) {
ffffffff80000486:	48 b9 fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rcx
ffffffff8000048d:	61 64 50 
ffffffff80000490:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000493:	0f 84 6b 01 00 00    	je     ffffffff80000604 <_start+0x1c4>
ffffffff80000499:	48 89 c1             	mov    %rax,%rcx
ffffffff8000049c:	48 be fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rsi
ffffffff800004a3:	61 64 50 
ffffffff800004a6:	eb 05                	jmp    ffffffff800004ad <_start+0x6d>
ffffffff800004a8:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800004ab:	74 1e                	je     ffffffff800004cb <_start+0x8b>
        current_tag = (void *)current_tag->next;
ffffffff800004ad:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800004b1:	48 85 c9             	test   %rcx,%rcx
ffffffff800004b4:	75 f2                	jne    ffffffff800004a8 <_start+0x68>
    //printf("Terminal Initialized\n");

    //Grab the Framebuffer
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800004b6:	48 c7 05 b7 a1 00 00 	movq   $0x0,0xa1b7(%rip)        # ffffffff8000a678 <boot_info+0x18>
ffffffff800004bd:	00 00 00 00 
ffffffff800004c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (boot_info.tag_framebuffer == NULL)
    {
    //    printf("Framebuffer Not Found\n");
        for( ;; ) 
            asm("hlt");
ffffffff800004c8:	f4                   	hlt    
ffffffff800004c9:	eb fd                	jmp    ffffffff800004c8 <_start+0x88>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800004cb:	48 89 0d a6 a1 00 00 	mov    %rcx,0xa1a6(%rip)        # ffffffff8000a678 <boot_info+0x18>
        if (current_tag->identifier == id) {
ffffffff800004d2:	48 b9 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rcx
ffffffff800004d9:	f7 87 21 
ffffffff800004dc:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800004df:	0f 84 13 01 00 00    	je     ffffffff800005f8 <_start+0x1b8>
ffffffff800004e5:	48 89 c1             	mov    %rax,%rcx
ffffffff800004e8:	48 be 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rsi
ffffffff800004ef:	f7 87 21 
        current_tag = (void *)current_tag->next;
ffffffff800004f2:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800004f6:	48 85 c9             	test   %rcx,%rcx
ffffffff800004f9:	0f 84 bc 00 00 00    	je     ffffffff800005bb <_start+0x17b>
        if (current_tag->identifier == id) {
ffffffff800004ff:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000502:	75 ee                	jne    ffffffff800004f2 <_start+0xb2>
    }
    //printf("Framebuffer found at %x\n", boot_info.tag_framebuffer->framebuffer_addr);

    //Memory Map
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000504:	48 89 0d 65 a1 00 00 	mov    %rcx,0xa165(%rip)        # ffffffff8000a670 <boot_info+0x10>
        if (current_tag->identifier == id) {
ffffffff8000050b:	48 b9 f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rcx
ffffffff80000512:	78 0d 06 
ffffffff80000515:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000518:	0f 84 ce 00 00 00    	je     ffffffff800005ec <_start+0x1ac>
ffffffff8000051e:	48 89 c1             	mov    %rax,%rcx
ffffffff80000521:	48 be f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rsi
ffffffff80000528:	78 0d 06 
ffffffff8000052b:	eb 05                	jmp    ffffffff80000532 <_start+0xf2>
ffffffff8000052d:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000530:	74 09                	je     ffffffff8000053b <_start+0xfb>
        current_tag = (void *)current_tag->next;
ffffffff80000532:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000536:	48 85 c9             	test   %rcx,%rcx
ffffffff80000539:	75 f2                	jne    ffffffff8000052d <_start+0xed>
            asm("hlt");
    }
    //printf("Memory Map at %x\n", boot_info.tag_memmap);

    //Kernel Base Address
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff8000053b:	48 89 0d 1e a1 00 00 	mov    %rcx,0xa11e(%rip)        # ffffffff8000a660 <boot_info>
        if (current_tag->identifier == id) {
ffffffff80000542:	48 b9 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rcx
ffffffff80000549:	86 17 9e 
ffffffff8000054c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000054f:	0f 84 8e 00 00 00    	je     ffffffff800005e3 <_start+0x1a3>
            return NULL;
ffffffff80000555:	48 89 c1             	mov    %rax,%rcx
        if (current_tag->identifier == id) {
ffffffff80000558:	48 be 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rsi
ffffffff8000055f:	86 17 9e 
ffffffff80000562:	eb 05                	jmp    ffffffff80000569 <_start+0x129>
ffffffff80000564:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000567:	74 09                	je     ffffffff80000572 <_start+0x132>
        current_tag = (void *)current_tag->next;
ffffffff80000569:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff8000056d:	48 85 c9             	test   %rcx,%rcx
ffffffff80000570:	75 f2                	jne    ffffffff80000564 <_start+0x124>
    }
    //printf("Kernel Physical Base Address %x\n", boot_info.tag_kernel_base_address->physical_base_address);
    //printf("Kernel Virtual Base Address  %x\n", boot_info.tag_kernel_base_address->virtual_base_address);
    //printf("--------\n");

    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff80000572:	48 89 0d 0f a1 00 00 	mov    %rcx,0xa10f(%rip)        # ffffffff8000a688 <boot_info+0x28>
        if (current_tag->identifier == id) {
ffffffff80000579:	48 b9 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rcx
ffffffff80000580:	25 ed b0 
ffffffff80000583:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000586:	74 1a                	je     ffffffff800005a2 <_start+0x162>
ffffffff80000588:	48 ba 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rdx
ffffffff8000058f:	25 ed b0 
ffffffff80000592:	eb 05                	jmp    ffffffff80000599 <_start+0x159>
ffffffff80000594:	48 39 10             	cmp    %rdx,(%rax)
ffffffff80000597:	74 09                	je     ffffffff800005a2 <_start+0x162>
        current_tag = (void *)current_tag->next;
ffffffff80000599:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff8000059d:	48 85 c0             	test   %rax,%rax
ffffffff800005a0:	75 f2                	jne    ffffffff80000594 <_start+0x154>
{
ffffffff800005a2:	52                   	push   %rdx
    
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff800005a3:	48 89 05 ee a0 00 00 	mov    %rax,0xa0ee(%rip)        # ffffffff8000a698 <boot_info+0x38>

    kernel();
ffffffff800005aa:	31 c0                	xor    %eax,%eax
ffffffff800005ac:	e8 af 32 00 00       	callq  ffffffff80003860 <kernel>
ffffffff800005b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)


    // We should never get here, but just in case...
    for (;;) {
        asm ("hlt");
ffffffff800005b8:	f4                   	hlt    
ffffffff800005b9:	eb fd                	jmp    ffffffff800005b8 <_start+0x178>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005bb:	48 c7 05 aa a0 00 00 	movq   $0x0,0xa0aa(%rip)        # ffffffff8000a670 <boot_info+0x10>
ffffffff800005c2:	00 00 00 00 
ffffffff800005c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800005cd:	00 00 00 
            asm("hlt");
ffffffff800005d0:	f4                   	hlt    
ffffffff800005d1:	eb fd                	jmp    ffffffff800005d0 <_start+0x190>
    term_write = term_write_ptr;
ffffffff800005d3:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800005d7:	48 89 0d c2 a0 00 00 	mov    %rcx,0xa0c2(%rip)        # ffffffff8000a6a0 <term_write>
ffffffff800005de:	e9 b6 fe ff ff       	jmpq   ffffffff80000499 <_start+0x59>
    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff800005e3:	48 89 05 9e a0 00 00 	mov    %rax,0xa09e(%rip)        # ffffffff8000a688 <boot_info+0x28>
ffffffff800005ea:	eb 9c                	jmp    ffffffff80000588 <_start+0x148>
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff800005ec:	48 89 05 6d a0 00 00 	mov    %rax,0xa06d(%rip)        # ffffffff8000a660 <boot_info>
ffffffff800005f3:	e9 5d ff ff ff       	jmpq   ffffffff80000555 <_start+0x115>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005f8:	48 89 05 71 a0 00 00 	mov    %rax,0xa071(%rip)        # ffffffff8000a670 <boot_info+0x10>
ffffffff800005ff:	e9 1a ff ff ff       	jmpq   ffffffff8000051e <_start+0xde>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000604:	48 89 05 6d a0 00 00 	mov    %rax,0xa06d(%rip)        # ffffffff8000a678 <boot_info+0x18>
ffffffff8000060b:	e9 d5 fe ff ff       	jmpq   ffffffff800004e5 <_start+0xa5>

ffffffff80000610 <vmm_create_page_table>:
struct PageTable* kernel_cr3 = {0};

uint64_t magic = 0xdeadbeef;

struct PageTable* vmm_create_page_table()
{
ffffffff80000610:	53                   	push   %rbx
    void* page = pmm_allocpage();   //get a page
ffffffff80000611:	31 c0                	xor    %eax,%eax
ffffffff80000613:	e8 08 10 00 00       	callq  ffffffff80001620 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000618:	48 85 c0             	test   %rax,%rax
    void* page = pmm_allocpage();   //get a page
ffffffff8000061b:	48 89 c3             	mov    %rax,%rbx
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000061e:	74 0f                	je     ffffffff8000062f <vmm_create_page_table+0x1f>

    memset((uint8_t*)page, 0, 4096);    //clear the page
ffffffff80000620:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff80000625:	31 f6                	xor    %esi,%esi
ffffffff80000627:	48 89 c7             	mov    %rax,%rdi
ffffffff8000062a:	e8 b1 31 00 00       	callq  ffffffff800037e0 <memset>
    return (struct PageTable*)page;
    
    //return (struct PageTable*)phys_to_hh_data((uint64_t)page);
}
ffffffff8000062f:	48 89 d8             	mov    %rbx,%rax
ffffffff80000632:	5b                   	pop    %rbx
ffffffff80000633:	c3                   	retq   
ffffffff80000634:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000063b:	00 00 00 00 
ffffffff8000063f:	90                   	nop

ffffffff80000640 <vmm_map_2Mpage>:
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
    }
}

void vmm_map_2Mpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000640:	41 57                	push   %r15
    uint64_t index2, index3, index4;
    vaddr >>= 12;
    //index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000642:	49 89 f7             	mov    %rsi,%r15
{
ffffffff80000645:	41 56                	push   %r14
ffffffff80000647:	41 55                	push   %r13
ffffffff80000649:	41 54                	push   %r12
    vaddr >>= 9;
ffffffff8000064b:	49 89 f4             	mov    %rsi,%r12
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff8000064e:	48 c1 ee 24          	shr    $0x24,%rsi
{
ffffffff80000652:	55                   	push   %rbp
ffffffff80000653:	53                   	push   %rbx
ffffffff80000654:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
    vaddr >>= 9;
ffffffff8000065a:	49 c1 ec 15          	shr    $0x15,%r12
    vaddr >>= 9;
ffffffff8000065e:	49 c1 ef 1e          	shr    $0x1e,%r15
ffffffff80000662:	4c 8d 34 37          	lea    (%rdi,%rsi,1),%r14
{
ffffffff80000666:	48 83 ec 08          	sub    $0x8,%rsp
    index2 = vaddr & 0x1ff;
ffffffff8000066a:	41 81 e4 ff 01 00 00 	and    $0x1ff,%r12d
    index3 = vaddr & 0x1ff;
ffffffff80000671:	41 81 e7 ff 01 00 00 	and    $0x1ff,%r15d
{
ffffffff80000678:	48 89 d5             	mov    %rdx,%rbp
ffffffff8000067b:	49 89 cd             	mov    %rcx,%r13
    if(pagemap->entry[index] & 1)
ffffffff8000067e:	49 8b 06             	mov    (%r14),%rax
ffffffff80000681:	a8 01                	test   $0x1,%al
ffffffff80000683:	74 5b                	je     ffffffff800006e0 <vmm_map_2Mpage+0xa0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000685:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff8000068b:	4e 8d 34 f8          	lea    (%rax,%r15,8),%r14
    if(pagemap->entry[index] & 1)
ffffffff8000068f:	49 8b 06             	mov    (%r14),%rax
ffffffff80000692:	a8 01                	test   $0x1,%al
ffffffff80000694:	74 2a                	je     ffffffff800006c0 <vmm_map_2Mpage+0x80>

    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);

    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff80000696:	40 80 cd 80          	or     $0x80,%bpl
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff8000069a:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff800006a0:	49 09 ed             	or     %rbp,%r13
ffffffff800006a3:	4e 89 2c e0          	mov    %r13,(%rax,%r12,8)
}
ffffffff800006a7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800006ab:	5b                   	pop    %rbx
ffffffff800006ac:	5d                   	pop    %rbp
ffffffff800006ad:	41 5c                	pop    %r12
ffffffff800006af:	41 5d                	pop    %r13
ffffffff800006b1:	41 5e                	pop    %r14
ffffffff800006b3:	41 5f                	pop    %r15
ffffffff800006b5:	c3                   	retq   
ffffffff800006b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800006bd:	00 00 00 
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006c0:	31 c0                	xor    %eax,%eax
ffffffff800006c2:	e8 49 ff ff ff       	callq  ffffffff80000610 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006c7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006ca:	48 89 c3             	mov    %rax,%rbx
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006cd:	74 31                	je     ffffffff80000700 <vmm_map_2Mpage+0xc0>
        pagemap->entry[index] = newentry | flags;
ffffffff800006cf:	48 89 d8             	mov    %rbx,%rax
ffffffff800006d2:	4c 09 e8             	or     %r13,%rax
ffffffff800006d5:	49 89 06             	mov    %rax,(%r14)
ffffffff800006d8:	eb bc                	jmp    ffffffff80000696 <vmm_map_2Mpage+0x56>
ffffffff800006da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006e0:	31 c0                	xor    %eax,%eax
ffffffff800006e2:	e8 29 ff ff ff       	callq  ffffffff80000610 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006e7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800006ea:	48 89 c3             	mov    %rax,%rbx
        if(!newentry) printf("Null page allocated!\n");
ffffffff800006ed:	74 21                	je     ffffffff80000710 <vmm_map_2Mpage+0xd0>
        pagemap->entry[index] = newentry | flags;
ffffffff800006ef:	48 89 d8             	mov    %rbx,%rax
ffffffff800006f2:	4c 09 e8             	or     %r13,%rax
ffffffff800006f5:	49 89 06             	mov    %rax,(%r14)
ffffffff800006f8:	eb 8b                	jmp    ffffffff80000685 <vmm_map_2Mpage+0x45>
ffffffff800006fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000700:	48 c7 c7 c0 4b 00 80 	mov    $0xffffffff80004bc0,%rdi
ffffffff80000707:	31 c0                	xor    %eax,%eax
ffffffff80000709:	e8 32 2d 00 00       	callq  ffffffff80003440 <printf_>
ffffffff8000070e:	eb bf                	jmp    ffffffff800006cf <vmm_map_2Mpage+0x8f>
ffffffff80000710:	48 c7 c7 c0 4b 00 80 	mov    $0xffffffff80004bc0,%rdi
ffffffff80000717:	31 c0                	xor    %eax,%eax
ffffffff80000719:	e8 22 2d 00 00       	callq  ffffffff80003440 <printf_>
ffffffff8000071e:	eb cf                	jmp    ffffffff800006ef <vmm_map_2Mpage+0xaf>

ffffffff80000720 <vmm_map_4Kpage>:

void vmm_map_4Kpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000720:	41 57                	push   %r15
ffffffff80000722:	41 56                	push   %r14
    //Get the indices for the virtual page
    uint64_t vaddr = virtual;
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000724:	49 89 f6             	mov    %rsi,%r14
{
ffffffff80000727:	41 55                	push   %r13
ffffffff80000729:	41 54                	push   %r12
    vaddr >>= 9;
ffffffff8000072b:	49 c1 ee 15          	shr    $0x15,%r14
{
ffffffff8000072f:	55                   	push   %rbp
ffffffff80000730:	48 89 d5             	mov    %rdx,%rbp
ffffffff80000733:	53                   	push   %rbx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000734:	48 89 f2             	mov    %rsi,%rdx
    vaddr >>= 12;
ffffffff80000737:	48 89 f3             	mov    %rsi,%rbx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff8000073a:	48 c1 ee 24          	shr    $0x24,%rsi
ffffffff8000073e:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
{
ffffffff80000744:	48 83 ec 18          	sub    $0x18,%rsp
    vaddr >>= 12;
ffffffff80000748:	48 c1 eb 0c          	shr    $0xc,%rbx
ffffffff8000074c:	4c 8d 3c 37          	lea    (%rdi,%rsi,1),%r15
    vaddr >>= 9;
ffffffff80000750:	48 c1 ea 1e          	shr    $0x1e,%rdx
    index1 = vaddr & 0x1ff;
ffffffff80000754:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
    index2 = vaddr & 0x1ff;
ffffffff8000075a:	41 81 e6 ff 01 00 00 	and    $0x1ff,%r14d
    index3 = vaddr & 0x1ff;
ffffffff80000761:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
{
ffffffff80000767:	49 89 cd             	mov    %rcx,%r13
    if(pagemap->entry[index] & 1)
ffffffff8000076a:	49 8b 07             	mov    (%r15),%rax
ffffffff8000076d:	a8 01                	test   $0x1,%al
ffffffff8000076f:	74 7f                	je     ffffffff800007f0 <vmm_map_4Kpage+0xd0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000771:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff80000777:	4c 8d 3c d0          	lea    (%rax,%rdx,8),%r15
    if(pagemap->entry[index] & 1)
ffffffff8000077b:	49 8b 07             	mov    (%r15),%rax
ffffffff8000077e:	a8 01                	test   $0x1,%al
ffffffff80000780:	74 4e                	je     ffffffff800007d0 <vmm_map_4Kpage+0xb0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000782:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff80000788:	4e 8d 34 f0          	lea    (%rax,%r14,8),%r14
    if(pagemap->entry[index] & 1)
ffffffff8000078c:	49 8b 06             	mov    (%r14),%rax
ffffffff8000078f:	a8 01                	test   $0x1,%al
ffffffff80000791:	74 1d                	je     ffffffff800007b0 <vmm_map_4Kpage+0x90>
    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);
    PML1 = vmm_get_pagemap(PML2, index2, flags);

    PML1->entry[index1] = physical | flags;
ffffffff80000793:	4c 09 ed             	or     %r13,%rbp
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000796:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML1->entry[index1] = physical | flags;
ffffffff8000079c:	48 89 2c d8          	mov    %rbp,(%rax,%rbx,8)
    //serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\r\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
    //serial_printf(SERIAL_PORT1, "%p, %d, %d, %d, %d, %p\r\n", virtual, index4, index3, index2, index1, physical);

    //vmm_flush_tlb((void*)virtual);

}
ffffffff800007a0:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800007a4:	5b                   	pop    %rbx
ffffffff800007a5:	5d                   	pop    %rbp
ffffffff800007a6:	41 5c                	pop    %r12
ffffffff800007a8:	41 5d                	pop    %r13
ffffffff800007aa:	41 5e                	pop    %r14
ffffffff800007ac:	41 5f                	pop    %r15
ffffffff800007ae:	c3                   	retq   
ffffffff800007af:	90                   	nop
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007b0:	31 c0                	xor    %eax,%eax
ffffffff800007b2:	e8 59 fe ff ff       	callq  ffffffff80000610 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007b7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007ba:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007bd:	74 61                	je     ffffffff80000820 <vmm_map_4Kpage+0x100>
        pagemap->entry[index] = newentry | flags;
ffffffff800007bf:	4c 89 e0             	mov    %r12,%rax
ffffffff800007c2:	4c 09 e8             	or     %r13,%rax
ffffffff800007c5:	49 89 06             	mov    %rax,(%r14)
ffffffff800007c8:	eb c9                	jmp    ffffffff80000793 <vmm_map_4Kpage+0x73>
ffffffff800007ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007d0:	31 c0                	xor    %eax,%eax
ffffffff800007d2:	e8 39 fe ff ff       	callq  ffffffff80000610 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007d7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007da:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007dd:	74 69                	je     ffffffff80000848 <vmm_map_4Kpage+0x128>
        pagemap->entry[index] = newentry | flags;
ffffffff800007df:	4c 89 e0             	mov    %r12,%rax
ffffffff800007e2:	4c 09 e8             	or     %r13,%rax
ffffffff800007e5:	49 89 07             	mov    %rax,(%r15)
ffffffff800007e8:	eb 98                	jmp    ffffffff80000782 <vmm_map_4Kpage+0x62>
ffffffff800007ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007f0:	31 c0                	xor    %eax,%eax
ffffffff800007f2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff800007f7:	e8 14 fe ff ff       	callq  ffffffff80000610 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007fc:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007ff:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000802:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80000807:	74 27                	je     ffffffff80000830 <vmm_map_4Kpage+0x110>
        pagemap->entry[index] = newentry | flags;
ffffffff80000809:	4c 89 e0             	mov    %r12,%rax
ffffffff8000080c:	4c 09 e8             	or     %r13,%rax
ffffffff8000080f:	49 89 07             	mov    %rax,(%r15)
ffffffff80000812:	e9 5a ff ff ff       	jmpq   ffffffff80000771 <vmm_map_4Kpage+0x51>
ffffffff80000817:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000081e:	00 00 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000820:	48 c7 c7 c0 4b 00 80 	mov    $0xffffffff80004bc0,%rdi
ffffffff80000827:	31 c0                	xor    %eax,%eax
ffffffff80000829:	e8 12 2c 00 00       	callq  ffffffff80003440 <printf_>
ffffffff8000082e:	eb 8f                	jmp    ffffffff800007bf <vmm_map_4Kpage+0x9f>
ffffffff80000830:	48 c7 c7 c0 4b 00 80 	mov    $0xffffffff80004bc0,%rdi
ffffffff80000837:	31 c0                	xor    %eax,%eax
ffffffff80000839:	e8 02 2c 00 00       	callq  ffffffff80003440 <printf_>
ffffffff8000083e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80000843:	eb c4                	jmp    ffffffff80000809 <vmm_map_4Kpage+0xe9>
ffffffff80000845:	0f 1f 00             	nopl   (%rax)
ffffffff80000848:	48 c7 c7 c0 4b 00 80 	mov    $0xffffffff80004bc0,%rdi
ffffffff8000084f:	31 c0                	xor    %eax,%eax
ffffffff80000851:	e8 ea 2b 00 00       	callq  ffffffff80003440 <printf_>
ffffffff80000856:	eb 87                	jmp    ffffffff800007df <vmm_map_4Kpage+0xbf>
ffffffff80000858:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000085f:	00 

ffffffff80000860 <vmm_unmap_page>:
            }
        }
    }


}
ffffffff80000860:	f3 c3                	repz retq 
ffffffff80000862:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000869:	00 00 00 00 
ffffffff8000086d:	0f 1f 00             	nopl   (%rax)

ffffffff80000870 <vmm_pagewalk>:
uint64_t vmm_pagewalk(uint64_t vaddr, uint64_t* cr3)
{
    uint64_t* PML4 = (uint64_t*)(phys_to_hh_data((uint64_t)cr3));
    
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
ffffffff80000870:	49 89 f8             	mov    %rdi,%r8
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000873:	48 89 f9             	mov    %rdi,%rcx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000876:	48 89 fa             	mov    %rdi,%rdx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000879:	48 c1 ef 27          	shr    $0x27,%rdi
    index4 = vaddr & 0x1ff;
   
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff8000087d:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80000884:	80 ff ff 
{
ffffffff80000887:	53                   	push   %rbx
    index4 = vaddr & 0x1ff;
ffffffff80000888:	81 e7 ff 01 00 00    	and    $0x1ff,%edi
    vaddr >>= 9;
ffffffff8000088e:	48 c1 ea 1e          	shr    $0x1e,%rdx
    vaddr >>= 9;
ffffffff80000892:	48 c1 e9 15          	shr    $0x15,%rcx
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff80000896:	48 8d 34 fe          	lea    (%rsi,%rdi,8),%rsi
    index3 = vaddr & 0x1ff;
ffffffff8000089a:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    index2 = vaddr & 0x1ff;
ffffffff800008a0:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
    vaddr >>= 12;
ffffffff800008a6:	49 c1 e8 0c          	shr    $0xc,%r8
    return addr - 0xFFFF800000000000;
}

static inline uint64_t phys_to_hh_data(uint64_t addr)
{
    return 0xFFFF800000000000 + addr;
ffffffff800008aa:	48 8b 1c 06          	mov    (%rsi,%rax,1),%rbx
    index1 = vaddr & 0x1ff;
ffffffff800008ae:	41 81 e0 ff 01 00 00 	and    $0x1ff,%r8d
ffffffff800008b5:	48 01 c3             	add    %rax,%rbx
ffffffff800008b8:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PDE = (uint64_t*)((phys_to_hh_data(PDPTE[index3]) >> 12) * 4096);
ffffffff800008bb:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff800008c2:	48 8b 1c d6          	mov    (%rsi,%rdx,8),%rbx
ffffffff800008c6:	48 01 c3             	add    %rax,%rbx
ffffffff800008c9:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PTE = (uint64_t*)((phys_to_hh_data(PDE[index2]) >> 12) * 4096);
ffffffff800008cc:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff800008d3:	48 8b 1c ce          	mov    (%rsi,%rcx,8),%rbx
ffffffff800008d7:	48 01 c3             	add    %rax,%rbx
ffffffff800008da:	48 89 de             	mov    %rbx,%rsi
    return addr - 0xFFFF800000000000;
ffffffff800008dd:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff800008e4:	80 00 00 
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff800008e7:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
    return 0xFFFF800000000000 + addr;
ffffffff800008ee:	4a 03 04 c6          	add    (%rsi,%r8,8),%rax

    uint64_t pageaddr = hh_data_to_phys((uint64_t)PD);
    
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff800008f2:	48 89 fe             	mov    %rdi,%rsi
ffffffff800008f5:	48 c7 c7 d6 4b 00 80 	mov    $0xffffffff80004bd6,%rdi
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff800008fc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    return addr - 0xFFFF800000000000;
ffffffff80000902:	48 01 c3             	add    %rax,%rbx
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff80000905:	31 c0                	xor    %eax,%eax
ffffffff80000907:	49 89 d9             	mov    %rbx,%r9
ffffffff8000090a:	e8 31 2b 00 00       	callq  ffffffff80003440 <printf_>
    
    
    pageaddr >>= 12;
    pageaddr *= 4096;
ffffffff8000090f:	48 89 d8             	mov    %rbx,%rax

    return pageaddr;
}
ffffffff80000912:	5b                   	pop    %rbx
ffffffff80000913:	c3                   	retq   
ffffffff80000914:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000091b:	00 00 00 00 
ffffffff8000091f:	90                   	nop

ffffffff80000920 <vmm_PMLwalk>:

void vmm_PMLwalk(struct PageTable* pagetable)
{
ffffffff80000920:	41 57                	push   %r15
ffffffff80000922:	41 56                	push   %r14
ffffffff80000924:	48 89 fa             	mov    %rdi,%rdx
ffffffff80000927:	41 55                	push   %r13
ffffffff80000929:	41 54                	push   %r12
    struct PageTable* PML4 = pagetable;
    struct PageTable* PML3 = NULL;
    struct PageTable* PML2 = NULL;
    struct PageTable* PML1 = NULL;

    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff8000092b:	48 c7 c6 ea 4b 00 80 	mov    $0xffffffff80004bea,%rsi
{
ffffffff80000932:	55                   	push   %rbp
ffffffff80000933:	53                   	push   %rbx
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000934:	31 c0                	xor    %eax,%eax
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
                                for(uint64_t l = 0; l < 512; l++)
                                {
                                    if(PML1->entry[l] & 0x01)
                                    {
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80000936:	48 c7 c3 2c 4c 00 80 	mov    $0xffffffff80004c2c,%rbx
{
ffffffff8000093d:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80000941:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000946:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8000094b:	e8 c0 2c 00 00       	callq  ffffffff80003610 <serial_printf>
    for(uint64_t i = 0; i < 512; i++)
ffffffff80000950:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80000957:	00 00 
ffffffff80000959:	eb 1c                	jmp    ffffffff80000977 <vmm_PMLwalk+0x57>
ffffffff8000095b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80000960:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff80000966:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8000096b:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80000971:	0f 84 17 01 00 00    	je     ffffffff80000a8e <vmm_PMLwalk+0x16e>
        if(pagetable->entry[i] & 0x01)
ffffffff80000977:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff8000097c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80000981:	4c 8b 04 c8          	mov    (%rax,%rcx,8),%r8
ffffffff80000985:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000989:	74 d5                	je     ffffffff80000960 <vmm_PMLwalk+0x40>
                serial_printf(SERIAL_PORT1, "4,%p,%d,%p\r\n",pagetable, i, pagetable->entry[i]);
ffffffff8000098b:	49 89 cf             	mov    %rcx,%r15
ffffffff8000098e:	49 89 c6             	mov    %rax,%r14
ffffffff80000991:	48 89 c2             	mov    %rax,%rdx
ffffffff80000994:	48 c7 c6 05 4c 00 80 	mov    $0xffffffff80004c05,%rsi
ffffffff8000099b:	31 c0                	xor    %eax,%eax
ffffffff8000099d:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800009a2:	e8 69 2c 00 00       	callq  ffffffff80003610 <serial_printf>
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff800009a7:	4b 8b 04 fe          	mov    (%r14,%r15,8),%rax
                for(uint64_t j = 0; j < 512; j++)
ffffffff800009ab:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
ffffffff800009b2:	00 
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff800009b3:	49 89 c5             	mov    %rax,%r13
ffffffff800009b6:	49 81 e5 00 fe ff ff 	and    $0xfffffffffffffe00,%r13
ffffffff800009bd:	eb 12                	jmp    ffffffff800009d1 <vmm_PMLwalk+0xb1>
ffffffff800009bf:	90                   	nop
                for(uint64_t j = 0; j < 512; j++)
ffffffff800009c0:	48 83 04 24 01       	addq   $0x1,(%rsp)
ffffffff800009c5:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff800009c9:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff800009cf:	74 8f                	je     ffffffff80000960 <vmm_PMLwalk+0x40>
                    if(PML3->entry[j] & 0x01)
ffffffff800009d1:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff800009d5:	4d 8b 44 c5 00       	mov    0x0(%r13,%rax,8),%r8
ffffffff800009da:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff800009de:	74 e0                	je     ffffffff800009c0 <vmm_PMLwalk+0xa0>
                        serial_printf(SERIAL_PORT1, "3,%p,%d,%p\r\n",PML3, j, PML3->entry[j]);
ffffffff800009e0:	49 89 c6             	mov    %rax,%r14
ffffffff800009e3:	48 89 c1             	mov    %rax,%rcx
ffffffff800009e6:	4c 89 ea             	mov    %r13,%rdx
ffffffff800009e9:	31 c0                	xor    %eax,%eax
ffffffff800009eb:	48 c7 c6 12 4c 00 80 	mov    $0xffffffff80004c12,%rsi
ffffffff800009f2:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800009f7:	e8 14 2c 00 00       	callq  ffffffff80003610 <serial_printf>
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff800009fc:	4b 8b 44 f5 00       	mov    0x0(%r13,%r14,8),%rax
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000a01:	31 ed                	xor    %ebp,%ebp
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80000a03:	49 89 c4             	mov    %rax,%r12
ffffffff80000a06:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80000a0b:	49 81 e4 00 fe ff ff 	and    $0xfffffffffffffe00,%r12
ffffffff80000a12:	eb 11                	jmp    ffffffff80000a25 <vmm_PMLwalk+0x105>
ffffffff80000a14:	0f 1f 40 00          	nopl   0x0(%rax)
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000a18:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80000a1c:	48 81 fd 00 02 00 00 	cmp    $0x200,%rbp
ffffffff80000a23:	74 9b                	je     ffffffff800009c0 <vmm_PMLwalk+0xa0>
                            if(PML2->entry[k] & 0x01)
ffffffff80000a25:	4d 8b 04 ec          	mov    (%r12,%rbp,8),%r8
ffffffff80000a29:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000a2d:	74 e9                	je     ffffffff80000a18 <vmm_PMLwalk+0xf8>
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000a2f:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000a32:	4c 89 e2             	mov    %r12,%rdx
ffffffff80000a35:	48 c7 c6 1f 4c 00 80 	mov    $0xffffffff80004c1f,%rsi
ffffffff80000a3c:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000a41:	31 c0                	xor    %eax,%eax
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000a43:	45 31 ff             	xor    %r15d,%r15d
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000a46:	e8 c5 2b 00 00       	callq  ffffffff80003610 <serial_printf>
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
ffffffff80000a4b:	4d 8b 74 ed 00       	mov    0x0(%r13,%rbp,8),%r14
ffffffff80000a50:	49 81 e6 00 fe ff ff 	and    $0xfffffffffffffe00,%r14
ffffffff80000a57:	eb 14                	jmp    ffffffff80000a6d <vmm_PMLwalk+0x14d>
ffffffff80000a59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000a60:	49 83 c7 01          	add    $0x1,%r15
ffffffff80000a64:	49 81 ff 00 02 00 00 	cmp    $0x200,%r15
ffffffff80000a6b:	74 ab                	je     ffffffff80000a18 <vmm_PMLwalk+0xf8>
                                    if(PML1->entry[l] & 0x01)
ffffffff80000a6d:	4f 8b 04 fe          	mov    (%r14,%r15,8),%r8
ffffffff80000a71:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000a75:	74 e9                	je     ffffffff80000a60 <vmm_PMLwalk+0x140>
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80000a77:	4c 89 f9             	mov    %r15,%rcx
ffffffff80000a7a:	4c 89 f2             	mov    %r14,%rdx
ffffffff80000a7d:	48 89 de             	mov    %rbx,%rsi
ffffffff80000a80:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000a85:	31 c0                	xor    %eax,%eax
ffffffff80000a87:	e8 84 2b 00 00       	callq  ffffffff80003610 <serial_printf>
ffffffff80000a8c:	eb d2                	jmp    ffffffff80000a60 <vmm_PMLwalk+0x140>
                }//PML3
            }
    }//PML4

    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
}
ffffffff80000a8e:	48 83 c4 28          	add    $0x28,%rsp
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000a92:	48 c7 c6 39 4c 00 80 	mov    $0xffffffff80004c39,%rsi
ffffffff80000a99:	bf f8 03 00 00       	mov    $0x3f8,%edi
}
ffffffff80000a9e:	5b                   	pop    %rbx
ffffffff80000a9f:	5d                   	pop    %rbp
ffffffff80000aa0:	41 5c                	pop    %r12
ffffffff80000aa2:	41 5d                	pop    %r13
ffffffff80000aa4:	41 5e                	pop    %r14
ffffffff80000aa6:	41 5f                	pop    %r15
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000aa8:	31 c0                	xor    %eax,%eax
ffffffff80000aaa:	e9 61 2b 00 00       	jmpq   ffffffff80003610 <serial_printf>
ffffffff80000aaf:	90                   	nop

ffffffff80000ab0 <vmm_init>:

void vmm_init()
{
ffffffff80000ab0:	55                   	push   %rbp
ffffffff80000ab1:	53                   	push   %rbx
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000ab2:	31 c0                	xor    %eax,%eax
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
 
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
    uint64_t kernel_virt = boot_info.tag_kernel_base_address->virtual_base_address;
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000ab4:	48 c7 c3 80 2c 01 80 	mov    $0xffffffff80012c80,%rbx
{
ffffffff80000abb:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000abf:	48 89 dd             	mov    %rbx,%rbp
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000ac2:	e8 69 f5 ff ff       	callq  ffffffff80000030 <vmm_read_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000ac7:	48 c7 c7 48 4c 00 80 	mov    $0xffffffff80004c48,%rdi
ffffffff80000ace:	48 89 c6             	mov    %rax,%rsi
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000ad1:	48 89 05 28 10 01 00 	mov    %rax,0x11028(%rip)        # ffffffff80011b00 <kernel_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000ad8:	31 c0                	xor    %eax,%eax
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000ada:	48 81 ed 00 00 00 80 	sub    $0xffffffff80000000,%rbp
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000ae1:	e8 5a 29 00 00       	callq  ffffffff80003440 <printf_>
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80000ae6:	48 8b 05 73 9b 00 00 	mov    0x9b73(%rip),%rax        # ffffffff8000a660 <boot_info>

    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff80000aed:	48 c7 c7 c0 4c 00 80 	mov    $0xffffffff80004cc0,%rdi
ffffffff80000af4:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80000af8:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff80000afc:	31 c0                	xor    %eax,%eax
ffffffff80000afe:	e8 3d 29 00 00       	callq  ffffffff80003440 <printf_>

    printf("Kernel: %p - %p Size: %d\n", &_start_of_kernel, &_end_of_kernel, kernel_size);
ffffffff80000b03:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000b06:	48 89 da             	mov    %rbx,%rdx
ffffffff80000b09:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000b10:	48 c7 c7 51 4c 00 80 	mov    $0xffffffff80004c51,%rdi
ffffffff80000b17:	31 c0                	xor    %eax,%eax
ffffffff80000b19:	e8 22 29 00 00       	callq  ffffffff80003440 <printf_>
    printf("Text:   %p - %p \n", &_start_of_text, &_end_of_text);
ffffffff80000b1e:	48 c7 c2 96 3b 00 80 	mov    $0xffffffff80003b96,%rdx
ffffffff80000b25:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000b2c:	48 c7 c7 6b 4c 00 80 	mov    $0xffffffff80004c6b,%rdi
ffffffff80000b33:	31 c0                	xor    %eax,%eax
ffffffff80000b35:	e8 06 29 00 00       	callq  ffffffff80003440 <printf_>
    printf("Data:   %p - %p \n", &_start_of_data, &_end_of_data);
ffffffff80000b3a:	48 c7 c2 60 86 00 80 	mov    $0xffffffff80008660,%rdx
ffffffff80000b41:	48 c7 c6 6c 70 00 80 	mov    $0xffffffff8000706c,%rsi
ffffffff80000b48:	48 c7 c7 7d 4c 00 80 	mov    $0xffffffff80004c7d,%rdi
ffffffff80000b4f:	31 c0                	xor    %eax,%eax
ffffffff80000b51:	e8 ea 28 00 00       	callq  ffffffff80003440 <printf_>
    printf("ROData: %p - %p \n", &_start_of_rodata, &_end_of_rodata);
ffffffff80000b56:	48 c7 c2 a0 54 00 80 	mov    $0xffffffff800054a0,%rdx
ffffffff80000b5d:	48 c7 c6 c0 4b 00 80 	mov    $0xffffffff80004bc0,%rsi
ffffffff80000b64:	48 c7 c7 8f 4c 00 80 	mov    $0xffffffff80004c8f,%rdi
ffffffff80000b6b:	31 c0                	xor    %eax,%eax
ffffffff80000b6d:	e8 ce 28 00 00       	callq  ffffffff80003440 <printf_>
    printf("BSS:    %p - %p \n", &_start_of_bss, &_end_of_bss);
ffffffff80000b72:	48 c7 c2 80 2c 01 80 	mov    $0xffffffff80012c80,%rdx
ffffffff80000b79:	48 c7 c6 60 86 00 80 	mov    $0xffffffff80008660,%rsi
ffffffff80000b80:	48 c7 c7 a1 4c 00 80 	mov    $0xffffffff80004ca1,%rdi
ffffffff80000b87:	31 c0                	xor    %eax,%eax
ffffffff80000b89:	e8 b2 28 00 00       	callq  ffffffff80003440 <printf_>

    //vmm_pagewalk((uint64_t)&_start_of_kernel, (uint64_t*)read_cr3());
    //vmm_pagewalk((uint64_t)&_end_of_kernel, (uint64_t*)read_cr3());

    //Create the Kernel PML4 table
    RootPageDirectory = vmm_create_page_table();
ffffffff80000b8e:	31 c0                	xor    %eax,%eax
ffffffff80000b90:	e8 7b fa ff ff       	callq  ffffffff80000610 <vmm_create_page_table>

    printf("Root = %p\n", RootPageDirectory);
ffffffff80000b95:	48 c7 c7 b3 4c 00 80 	mov    $0xffffffff80004cb3,%rdi
    RootPageDirectory = vmm_create_page_table();
ffffffff80000b9c:	48 89 05 65 0f 01 00 	mov    %rax,0x10f65(%rip)        # ffffffff80011b08 <RootPageDirectory>
    printf("Root = %p\n", RootPageDirectory);
ffffffff80000ba3:	48 89 c6             	mov    %rax,%rsi
ffffffff80000ba6:	31 c0                	xor    %eax,%eax
ffffffff80000ba8:	e8 93 28 00 00       	callq  ffffffff80003440 <printf_>

    RootPageDirectory->entry[256] = kernel_cr3->entry[256];
ffffffff80000bad:	48 8b 05 4c 0f 01 00 	mov    0x10f4c(%rip),%rax        # ffffffff80011b00 <kernel_cr3>
ffffffff80000bb4:	48 8b 3d 4d 0f 01 00 	mov    0x10f4d(%rip),%rdi        # ffffffff80011b08 <RootPageDirectory>
ffffffff80000bbb:	48 8b 90 00 08 00 00 	mov    0x800(%rax),%rdx
ffffffff80000bc2:	48 89 97 00 08 00 00 	mov    %rdx,0x800(%rdi)
    RootPageDirectory->entry[511] = kernel_cr3->entry[511];
ffffffff80000bc9:	48 8b 80 f8 0f 00 00 	mov    0xff8(%rax),%rax
ffffffff80000bd0:	48 89 87 f8 0f 00 00 	mov    %rax,0xff8(%rdi)

    //cycle through page entries


    
}
ffffffff80000bd7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80000bdb:	5b                   	pop    %rbx
ffffffff80000bdc:	5d                   	pop    %rbp
    vmm_write_cr3((uint64_t)RootPageDirectory);
ffffffff80000bdd:	e9 52 f4 ff ff       	jmpq   ffffffff80000034 <vmm_write_cr3>
ffffffff80000be2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000be9:	00 00 00 
ffffffff80000bec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000bf0 <liballoc_lock>:



int liballoc_lock()
{
    asm("cli");
ffffffff80000bf0:	fa                   	cli    
    return 0;
}
ffffffff80000bf1:	31 c0                	xor    %eax,%eax
ffffffff80000bf3:	c3                   	retq   
ffffffff80000bf4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000bfb:	00 00 00 00 
ffffffff80000bff:	90                   	nop

ffffffff80000c00 <liballoc_unlock>:


int liballoc_unlock()
{
    asm("sti");
ffffffff80000c00:	fb                   	sti    
    return 0;
}
ffffffff80000c01:	31 c0                	xor    %eax,%eax
ffffffff80000c03:	c3                   	retq   
ffffffff80000c04:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000c0b:	00 00 00 00 
ffffffff80000c0f:	90                   	nop

ffffffff80000c10 <liballoc_free>:

int liballoc_free(void* page, size_t count)
{
    return 0;
}
ffffffff80000c10:	31 c0                	xor    %eax,%eax
ffffffff80000c12:	c3                   	retq   
ffffffff80000c13:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000c1a:	00 00 00 00 
ffffffff80000c1e:	66 90                	xchg   %ax,%ax

ffffffff80000c20 <liballoc_alloc>:

void* liballoc_alloc(size_t count)
{
    for(uint64_t i = 0; i < count; i++)
ffffffff80000c20:	48 85 ff             	test   %rdi,%rdi
ffffffff80000c23:	74 6b                	je     ffffffff80000c90 <liballoc_alloc+0x70>
{
ffffffff80000c25:	55                   	push   %rbp
ffffffff80000c26:	53                   	push   %rbx
ffffffff80000c27:	48 89 fd             	mov    %rdi,%rbp
    for(uint64_t i = 0; i < count; i++)
ffffffff80000c2a:	31 db                	xor    %ebx,%ebx
{
ffffffff80000c2c:	48 83 ec 08          	sub    $0x8,%rsp
    {
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000c30:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff80000c32:	48 83 c3 01          	add    $0x1,%rbx
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000c36:	e8 e5 09 00 00       	callq  ffffffff80001620 <pmm_allocpage>
ffffffff80000c3b:	48 8b 0d 86 64 00 00 	mov    0x6486(%rip),%rcx        # ffffffff800070c8 <kernel_heap_top>
ffffffff80000c42:	48 8b 3d bf 0e 01 00 	mov    0x10ebf(%rip),%rdi        # ffffffff80011b08 <RootPageDirectory>
ffffffff80000c49:	48 89 c2             	mov    %rax,%rdx
ffffffff80000c4c:	48 8d b1 00 10 00 00 	lea    0x1000(%rcx),%rsi
ffffffff80000c53:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80000c58:	e8 c3 fa ff ff       	callq  ffffffff80000720 <vmm_map_4Kpage>
        kernel_heap_top += 4096;
ffffffff80000c5d:	48 8b 05 64 64 00 00 	mov    0x6464(%rip),%rax        # ffffffff800070c8 <kernel_heap_top>
ffffffff80000c64:	48 05 00 10 00 00    	add    $0x1000,%rax
    for(uint64_t i = 0; i < count; i++)
ffffffff80000c6a:	48 39 dd             	cmp    %rbx,%rbp
        kernel_heap_top += 4096;
ffffffff80000c6d:	48 89 05 54 64 00 00 	mov    %rax,0x6454(%rip)        # ffffffff800070c8 <kernel_heap_top>
    for(uint64_t i = 0; i < count; i++)
ffffffff80000c74:	75 ba                	jne    ffffffff80000c30 <liballoc_alloc+0x10>
    }
    return (void*)(phys_to_hh_data((uint64_t)kernel_heap_top));
ffffffff80000c76:	48 83 c4 08          	add    $0x8,%rsp
    return 0xFFFF800000000000 + addr;
ffffffff80000c7a:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000c81:	80 ff ff 
ffffffff80000c84:	48 01 d0             	add    %rdx,%rax
ffffffff80000c87:	5b                   	pop    %rbx
ffffffff80000c88:	5d                   	pop    %rbp
ffffffff80000c89:	c3                   	retq   
ffffffff80000c8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000c90:	48 8b 05 31 64 00 00 	mov    0x6431(%rip),%rax        # ffffffff800070c8 <kernel_heap_top>
ffffffff80000c97:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000c9e:	80 ff ff 
ffffffff80000ca1:	48 01 d0             	add    %rdx,%rax
ffffffff80000ca4:	c3                   	retq   
ffffffff80000ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000cac:	00 00 00 
ffffffff80000caf:	90                   	nop

ffffffff80000cb0 <allocate_new_page>:
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
		st += sizeof(struct liballoc_minor);
ffffffff80000cb0:	83 c7 50             	add    $0x50,%edi
{
ffffffff80000cb3:	53                   	push   %rbx
ffffffff80000cb4:	bb 10 00 00 00       	mov    $0x10,%ebx
ffffffff80000cb9:	89 f8                	mov    %edi,%eax

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff80000cbb:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
ffffffff80000cc1:	c1 e8 0c             	shr    $0xc,%eax
			st  = st / (l_pageSize);
		else
			st  = st / (l_pageSize) + 1;
ffffffff80000cc4:	83 ff 01             	cmp    $0x1,%edi
ffffffff80000cc7:	83 d8 ff             	sbb    $0xffffffff,%eax
ffffffff80000cca:	83 f8 10             	cmp    $0x10,%eax
ffffffff80000ccd:	0f 43 d8             	cmovae %eax,%ebx

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80000cd0:	89 df                	mov    %ebx,%edi
ffffffff80000cd2:	e8 49 ff ff ff       	callq  ffffffff80000c20 <liballoc_alloc>

		if ( maj == NULL ) 
ffffffff80000cd7:	48 85 c0             	test   %rax,%rax
ffffffff80000cda:	74 34                	je     ffffffff80000d10 <allocate_new_page+0x60>
			return NULL;	// uh oh, we ran out of memory.
		}
		
		maj->prev 	= NULL;
		maj->next 	= NULL;
		maj->pages 	= st;
ffffffff80000cdc:	89 58 10             	mov    %ebx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff80000cdf:	c1 e3 0c             	shl    $0xc,%ebx
		maj->prev 	= NULL;
ffffffff80000ce2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80000ce9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80000cf0:	00 
		maj->size 	= st * l_pageSize;
ffffffff80000cf1:	89 58 14             	mov    %ebx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80000cf4:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff80000cfb:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000d02:	00 

		l_allocated += maj->size;
ffffffff80000d03:	48 01 1d 26 0e 01 00 	add    %rbx,0x10e26(%rip)        # ffffffff80011b30 <l_allocated>
		FLUSH();
		#endif
	
		
      return maj;
}
ffffffff80000d0a:	5b                   	pop    %rbx
ffffffff80000d0b:	c3                   	retq   
ffffffff80000d0c:	0f 1f 40 00          	nopl   0x0(%rax)
			l_warningCount += 1;
ffffffff80000d10:	48 83 05 08 0e 01 00 	addq   $0x1,0x10e08(%rip)        # ffffffff80011b20 <l_warningCount>
ffffffff80000d17:	01 
}
ffffffff80000d18:	5b                   	pop    %rbx
ffffffff80000d19:	c3                   	retq   
ffffffff80000d1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000d20 <kmalloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff80000d20:	41 57                	push   %r15
ffffffff80000d22:	41 56                	push   %r14
ffffffff80000d24:	41 55                	push   %r13
ffffffff80000d26:	41 54                	push   %r12
ffffffff80000d28:	49 89 fd             	mov    %rdi,%r13
ffffffff80000d2b:	55                   	push   %rbp
ffffffff80000d2c:	53                   	push   %rbx
ffffffff80000d2d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000d31:	eb 1a                	jmp    ffffffff80000d4d <kmalloc+0x2d>
ffffffff80000d33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80000d38:	31 c0                	xor    %eax,%eax
		return PREFIX(malloc)(1);
ffffffff80000d3a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		l_warningCount += 1;
ffffffff80000d40:	48 83 05 d8 0d 01 00 	addq   $0x1,0x10dd8(%rip)        # ffffffff80011b20 <l_warningCount>
ffffffff80000d47:	01 
		liballoc_unlock();
ffffffff80000d48:	e8 b3 fe ff ff       	callq  ffffffff80000c00 <liballoc_unlock>
		size += ALIGNMENT + ALIGN_INFO;
ffffffff80000d4d:	4d 8d 65 20          	lea    0x20(%r13),%r12
	liballoc_lock();
ffffffff80000d51:	31 c0                	xor    %eax,%eax
ffffffff80000d53:	e8 98 fe ff ff       	callq  ffffffff80000bf0 <liballoc_lock>
	if ( size == 0 )
ffffffff80000d58:	4d 85 e4             	test   %r12,%r12
ffffffff80000d5b:	74 db                	je     ffffffff80000d38 <kmalloc+0x18>
	}
	

	if ( l_memRoot == NULL )
ffffffff80000d5d:	48 8b 35 dc 0d 01 00 	mov    0x10ddc(%rip),%rsi        # ffffffff80011b40 <l_memRoot>
ffffffff80000d64:	48 85 f6             	test   %rsi,%rsi
ffffffff80000d67:	0f 84 c3 02 00 00    	je     ffffffff80001030 <kmalloc+0x310>

	maj = l_memRoot;
	startedBet = 0;
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80000d6d:	48 8b 15 c4 0d 01 00 	mov    0x10dc4(%rip),%rdx        # ffffffff80011b38 <l_bestBet>
ffffffff80000d74:	49 8d 5d 48          	lea    0x48(%r13),%rbx
ffffffff80000d78:	48 85 d2             	test   %rdx,%rdx
ffffffff80000d7b:	0f 84 3f 02 00 00    	je     ffffffff80000fc0 <kmalloc+0x2a0>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000d81:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000d84:	8b 4a 18             	mov    0x18(%rdx),%ecx

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
		{
			maj = l_bestBet;
			startedBet = 1;
ffffffff80000d87:	41 bf 01 00 00 00    	mov    $0x1,%r15d
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000d8d:	41 89 c6             	mov    %eax,%r14d
ffffffff80000d90:	41 29 ce             	sub    %ecx,%r14d
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80000d93:	49 39 de             	cmp    %rbx,%r14
ffffffff80000d96:	0f 86 b4 01 00 00    	jbe    ffffffff80000f50 <kmalloc+0x230>
		}
	}
	
	while ( maj != NULL )
	{
		diff  = maj->size - maj->usage;	
ffffffff80000d9c:	29 c8                	sub    %ecx,%eax
										// free memory in the block

		if ( bestSize < diff )
ffffffff80000d9e:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000da1:	76 0a                	jbe    ffffffff80000dad <kmalloc+0x8d>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff80000da3:	48 89 15 8e 0d 01 00 	mov    %rdx,0x10d8e(%rip)        # ffffffff80011b38 <l_bestBet>
ffffffff80000daa:	49 89 c6             	mov    %rax,%r14
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000dad:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000db0:	73 22                	jae    ffffffff80000dd4 <kmalloc+0xb4>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80000db2:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff80000db6:	48 85 c0             	test   %rax,%rax
ffffffff80000db9:	0f 84 b9 00 00 00    	je     ffffffff80000e78 <kmalloc+0x158>
ffffffff80000dbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80000dc2:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000dc5:	8b 4a 18             	mov    0x18(%rdx),%ecx
		diff  = maj->size - maj->usage;	
ffffffff80000dc8:	29 c8                	sub    %ecx,%eax
		if ( bestSize < diff )
ffffffff80000dca:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000dcd:	77 d4                	ja     ffffffff80000da3 <kmalloc+0x83>
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000dcf:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000dd2:	72 de                	jb     ffffffff80000db2 <kmalloc+0x92>
ffffffff80000dd4:	48 89 d5             	mov    %rdx,%rbp
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80000dd7:	48 8b 55 20          	mov    0x20(%rbp),%rdx
ffffffff80000ddb:	48 85 d2             	test   %rdx,%rdx
ffffffff80000dde:	0f 84 7d 01 00 00    	je     ffffffff80000f61 <kmalloc+0x241>
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
		diff -= (uintptr_t)maj;
ffffffff80000de4:	48 89 d0             	mov    %rdx,%rax
ffffffff80000de7:	48 29 e8             	sub    %rbp,%rax
		diff -= sizeof(struct liballoc_major);
ffffffff80000dea:	48 83 e8 28          	sub    $0x28,%rax

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff80000dee:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000df1:	0f 83 62 02 00 00    	jae    ffffffff80001059 <kmalloc+0x339>
		
			// Looping within the block now...
		while ( min != NULL )
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80000df7:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000dfb:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000dfe:	48 85 c9             	test   %rcx,%rcx
ffffffff80000e01:	74 25                	je     ffffffff80000e28 <kmalloc+0x108>
				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
					diff -= (uintptr_t)min;
ffffffff80000e03:	48 89 c8             	mov    %rcx,%rax
ffffffff80000e06:	48 29 d0             	sub    %rdx,%rax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000e09:	48 83 e8 28          	sub    $0x28,%rax
					diff -= min->size;
ffffffff80000e0d:	48 29 f0             	sub    %rsi,%rax
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000e10:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000e13:	0f 83 b7 00 00 00    	jae    ffffffff80000ed0 <kmalloc+0x1b0>
ffffffff80000e19:	48 89 ca             	mov    %rcx,%rdx
				if ( min->next == NULL )
ffffffff80000e1c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000e20:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000e23:	48 85 c9             	test   %rcx,%rcx
ffffffff80000e26:	75 db                	jne    ffffffff80000e03 <kmalloc+0xe3>
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80000e28:	8b 45 14             	mov    0x14(%rbp),%eax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000e2b:	48 8d 44 05 d8       	lea    -0x28(%rbp,%rax,1),%rax
ffffffff80000e30:	48 29 d0             	sub    %rdx,%rax
					diff -= min->size; 
ffffffff80000e33:	48 29 f0             	sub    %rsi,%rax
					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000e36:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000e39:	0f 83 99 01 00 00    	jae    ffffffff80000fd8 <kmalloc+0x2b8>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff80000e3f:	48 8b 55 08          	mov    0x8(%rbp),%rdx
ffffffff80000e43:	48 85 d2             	test   %rdx,%rdx
ffffffff80000e46:	0f 85 76 ff ff ff    	jne    ffffffff80000dc2 <kmalloc+0xa2>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff80000e4c:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000e50:	74 5e                	je     ffffffff80000eb0 <kmalloc+0x190>
				startedBet = 0;
				continue;
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000e52:	44 89 e7             	mov    %r12d,%edi
ffffffff80000e55:	e8 56 fe ff ff       	callq  ffffffff80000cb0 <allocate_new_page>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000e5a:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000e5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80000e60:	48 89 45 08          	mov    %rax,0x8(%rbp)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000e64:	0f 84 e1 01 00 00    	je     ffffffff8000104b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000e6a:	48 89 28             	mov    %rbp,(%rax)
ffffffff80000e6d:	e9 50 ff ff ff       	jmpq   ffffffff80000dc2 <kmalloc+0xa2>
ffffffff80000e72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80000e78:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000e7c:	74 32                	je     ffffffff80000eb0 <kmalloc+0x190>
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000e7e:	44 89 e7             	mov    %r12d,%edi
ffffffff80000e81:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80000e86:	e8 25 fe ff ff       	callq  ffffffff80000cb0 <allocate_new_page>
ffffffff80000e8b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000e90:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000e93:	48 89 c5             	mov    %rax,%rbp
ffffffff80000e96:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000e9a:	0f 84 ab 01 00 00    	je     ffffffff8000104b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000ea0:	48 89 10             	mov    %rdx,(%rax)
ffffffff80000ea3:	e9 2f ff ff ff       	jmpq   ffffffff80000dd7 <kmalloc+0xb7>
ffffffff80000ea8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000eaf:	00 
				maj = l_memRoot;
ffffffff80000eb0:	48 8b 15 89 0c 01 00 	mov    0x10c89(%rip),%rdx        # ffffffff80011b40 <l_memRoot>
	while ( maj != NULL )
ffffffff80000eb7:	48 85 d2             	test   %rdx,%rdx
ffffffff80000eba:	0f 84 8b 01 00 00    	je     ffffffff8000104b <kmalloc+0x32b>
ffffffff80000ec0:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000ec3:	e9 fa fe ff ff       	jmpq   ffffffff80000dc2 <kmalloc+0xa2>
ffffffff80000ec8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000ecf:	00 
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000ed0:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
						l_inuse += size;
ffffffff80000ed4:	4c 01 25 4d 0c 01 00 	add    %r12,0x10c4d(%rip)        # ffffffff80011b28 <l_inuse>
						new_min->next = min->next;
ffffffff80000edb:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
						min->next->prev = new_min;
ffffffff80000edf:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000ee3:	48 8d 43 28          	lea    0x28(%rbx),%rax
						new_min->magic = LIBALLOC_MAGIC;
ffffffff80000ee7:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
						ALIGN( p );
ffffffff80000eee:	48 83 c3 60          	add    $0x60,%rbx
						new_min->prev = min;
ffffffff80000ef2:	48 89 53 c8          	mov    %rdx,-0x38(%rbx)
						new_min->size = size;
ffffffff80000ef6:	44 89 63 e4          	mov    %r12d,-0x1c(%rbx)
						new_min->req_size = req_size;
ffffffff80000efa:	44 89 6b e8          	mov    %r13d,-0x18(%rbx)
						new_min->block = maj;
ffffffff80000efe:	48 89 6b d8          	mov    %rbp,-0x28(%rbx)
						min->next->prev = new_min;
ffffffff80000f02:	48 89 01             	mov    %rax,(%rcx)
						min->next = new_min;
ffffffff80000f05:	48 89 42 08          	mov    %rax,0x8(%rdx)
						ALIGN( p );
ffffffff80000f09:	48 89 da             	mov    %rbx,%rdx
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000f0c:	41 8d 44 24 28       	lea    0x28(%r12),%eax
ffffffff80000f11:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80000f14:	83 e2 0f             	and    $0xf,%edx
ffffffff80000f17:	0f 84 93 00 00 00    	je     ffffffff80000fb0 <kmalloc+0x290>
ffffffff80000f1d:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000f22:	48 29 d0             	sub    %rdx,%rax
ffffffff80000f25:	48 01 c3             	add    %rax,%rbx
ffffffff80000f28:	83 c0 10             	add    $0x10,%eax
ffffffff80000f2b:	88 43 f0             	mov    %al,-0x10(%rbx)
						liballoc_unlock();		// release the lock
ffffffff80000f2e:	31 c0                	xor    %eax,%eax
ffffffff80000f30:	e8 cb fc ff ff       	callq  ffffffff80000c00 <liballoc_unlock>
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
}
ffffffff80000f35:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80000f39:	48 89 d8             	mov    %rbx,%rax
ffffffff80000f3c:	5b                   	pop    %rbx
ffffffff80000f3d:	5d                   	pop    %rbp
ffffffff80000f3e:	41 5c                	pop    %r12
ffffffff80000f40:	41 5d                	pop    %r13
ffffffff80000f42:	41 5e                	pop    %r14
ffffffff80000f44:	41 5f                	pop    %r15
ffffffff80000f46:	c3                   	retq   
ffffffff80000f47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80000f4e:	00 00 
ffffffff80000f50:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80000f53:	8b 4e 18             	mov    0x18(%rsi),%ecx
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80000f56:	48 89 f2             	mov    %rsi,%rdx
	startedBet = 0;
ffffffff80000f59:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000f5c:	e9 3b fe ff ff       	jmpq   ffffffff80000d9c <kmalloc+0x7c>
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80000f61:	48 8d 45 28          	lea    0x28(%rbp),%rax
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80000f65:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 		= NULL;
ffffffff80000f6c:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80000f73:	00 
			maj->first->next 		= NULL;
ffffffff80000f74:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff80000f7b:	00 
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80000f7c:	48 89 45 20          	mov    %rax,0x20(%rbp)
			ALIGN( p );
ffffffff80000f80:	48 8d 5d 60          	lea    0x60(%rbp),%rbx
			maj->first->block 	= maj;
ffffffff80000f84:	48 89 6d 38          	mov    %rbp,0x38(%rbp)
			maj->first->size 	= size;
ffffffff80000f88:	44 89 65 44          	mov    %r12d,0x44(%rbp)
			maj->first->req_size 	= req_size;
ffffffff80000f8c:	44 89 6d 48          	mov    %r13d,0x48(%rbp)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80000f90:	41 8d 44 24 28       	lea    0x28(%r12),%eax
			l_inuse += size;
ffffffff80000f95:	4c 01 25 8c 0b 01 00 	add    %r12,0x10b8c(%rip)        # ffffffff80011b28 <l_inuse>
			ALIGN( p );
ffffffff80000f9c:	48 89 da             	mov    %rbx,%rdx
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80000f9f:	01 45 18             	add    %eax,0x18(%rbp)
			ALIGN( p );
ffffffff80000fa2:	83 e2 0f             	and    $0xf,%edx
ffffffff80000fa5:	0f 85 72 ff ff ff    	jne    ffffffff80000f1d <kmalloc+0x1fd>
ffffffff80000fab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
						ALIGN( p );
ffffffff80000fb0:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000fb5:	e9 71 ff ff ff       	jmpq   ffffffff80000f2b <kmalloc+0x20b>
ffffffff80000fba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000fc0:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80000fc3:	8b 4e 18             	mov    0x18(%rsi),%ecx
	if ( l_bestBet != NULL )
ffffffff80000fc6:	48 89 f2             	mov    %rsi,%rdx
	unsigned long long bestSize = 0;
ffffffff80000fc9:	45 31 f6             	xor    %r14d,%r14d
	startedBet = 0;
ffffffff80000fcc:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000fcf:	e9 c8 fd ff ff       	jmpq   ffffffff80000d9c <kmalloc+0x7c>
ffffffff80000fd4:	0f 1f 40 00          	nopl   0x0(%rax)
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fd8:	48 01 d6             	add    %rdx,%rsi
						l_inuse += size;
ffffffff80000fdb:	4c 01 25 46 0b 01 00 	add    %r12,0x10b46(%rip)        # ffffffff80011b28 <l_inuse>
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fe2:	48 8d 46 28          	lea    0x28(%rsi),%rax
						ALIGN( p );
ffffffff80000fe6:	48 8d 5e 60          	lea    0x60(%rsi),%rbx
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fea:	48 89 42 08          	mov    %rax,0x8(%rdx)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000fee:	41 8d 44 24 28       	lea    0x28(%r12),%eax
						min->next->prev = min;
ffffffff80000ff3:	48 89 56 28          	mov    %rdx,0x28(%rsi)
						ALIGN( p );
ffffffff80000ff7:	48 89 da             	mov    %rbx,%rdx
						min->next = NULL;
ffffffff80000ffa:	48 c7 46 30 00 00 00 	movq   $0x0,0x30(%rsi)
ffffffff80001001:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff80001002:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						min->block = maj;
ffffffff80001009:	48 89 6e 38          	mov    %rbp,0x38(%rsi)
						min->size = size;
ffffffff8000100d:	44 89 66 44          	mov    %r12d,0x44(%rsi)
						min->req_size = req_size;
ffffffff80001011:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80001015:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80001018:	83 e2 0f             	and    $0xf,%edx
ffffffff8000101b:	0f 85 fc fe ff ff    	jne    ffffffff80000f1d <kmalloc+0x1fd>
						ALIGN( p );
ffffffff80001021:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001026:	e9 00 ff ff ff       	jmpq   ffffffff80000f2b <kmalloc+0x20b>
ffffffff8000102b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		l_memRoot = allocate_new_page( size );
ffffffff80001030:	44 89 e7             	mov    %r12d,%edi
ffffffff80001033:	e8 78 fc ff ff       	callq  ffffffff80000cb0 <allocate_new_page>
		if ( l_memRoot == NULL )
ffffffff80001038:	48 85 c0             	test   %rax,%rax
		l_memRoot = allocate_new_page( size );
ffffffff8000103b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000103e:	48 89 05 fb 0a 01 00 	mov    %rax,0x10afb(%rip)        # ffffffff80011b40 <l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80001045:	0f 85 22 fd ff ff    	jne    ffffffff80000d6d <kmalloc+0x4d>
		  liballoc_unlock();
ffffffff8000104b:	31 c0                	xor    %eax,%eax
		  return NULL;
ffffffff8000104d:	31 db                	xor    %ebx,%ebx
		  liballoc_unlock();
ffffffff8000104f:	e8 ac fb ff ff       	callq  ffffffff80000c00 <liballoc_unlock>
		  return NULL;
ffffffff80001054:	e9 dc fe ff ff       	jmpq   ffffffff80000f35 <kmalloc+0x215>
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001059:	48 8d 45 28          	lea    0x28(%rbp),%rax
ffffffff8000105d:	48 89 02             	mov    %rax,(%rdx)
			maj->first->prev->next = maj->first;
ffffffff80001060:	48 89 55 30          	mov    %rdx,0x30(%rbp)
			maj->first = maj->first->prev;
ffffffff80001064:	48 89 45 20          	mov    %rax,0x20(%rbp)
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80001068:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 	= NULL;
ffffffff8000106f:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80001076:	00 
ffffffff80001077:	e9 04 ff ff ff       	jmpq   ffffffff80000f80 <kmalloc+0x260>
ffffffff8000107c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001080 <kfree>:
void PREFIX(free)(void *ptr)
{
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80001080:	48 85 ff             	test   %rdi,%rdi
ffffffff80001083:	0f 84 d7 00 00 00    	je     ffffffff80001160 <kfree+0xe0>
{
ffffffff80001089:	53                   	push   %rbx
		FLUSH();
		#endif
		return;
	}

	UNALIGN( ptr );
ffffffff8000108a:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff8000108f:	48 89 fb             	mov    %rdi,%rbx
ffffffff80001092:	48 29 c3             	sub    %rax,%rbx
ffffffff80001095:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80001099:	48 0f 43 df          	cmovae %rdi,%rbx

	liballoc_lock();		// lockit
ffffffff8000109d:	31 c0                	xor    %eax,%eax
ffffffff8000109f:	e8 4c fb ff ff       	callq  ffffffff80000bf0 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff800010a4:	8b 43 f0             	mov    -0x10(%rbx),%eax
	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff800010a7:	48 8d 73 d8          	lea    -0x28(%rbx),%rsi
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff800010ab:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff800010b0:	74 2e                	je     ffffffff800010e0 <kfree+0x60>
	{
		l_errorCount += 1;

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff800010b2:	89 c2                	mov    %eax,%edx
		l_errorCount += 1;
ffffffff800010b4:	48 83 05 5c 0a 01 00 	addq   $0x1,0x10a5c(%rip)        # ffffffff80011b18 <l_errorCount>
ffffffff800010bb:	01 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff800010bc:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
		if ( 
ffffffff800010c2:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff800010c8:	0f 84 82 00 00 00    	je     ffffffff80001150 <kfree+0xd0>
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff800010ce:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff800010d2:	74 7c                	je     ffffffff80001150 <kfree+0xd0>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff800010d4:	3c de                	cmp    $0xde,%al
ffffffff800010d6:	74 78                	je     ffffffff80001150 <kfree+0xd0>
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
}
ffffffff800010d8:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff800010d9:	31 c0                	xor    %eax,%eax
ffffffff800010db:	e9 20 fb ff ff       	jmpq   ffffffff80000c00 <liballoc_unlock>
		maj = min->block;
ffffffff800010e0:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
		l_inuse -= min->size;
ffffffff800010e4:	8b 53 f4             	mov    -0xc(%rbx),%edx
ffffffff800010e7:	48 29 15 3a 0a 01 00 	sub    %rdx,0x10a3a(%rip)        # ffffffff80011b28 <l_inuse>
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800010ee:	8b 4f 18             	mov    0x18(%rdi),%ecx
ffffffff800010f1:	29 d1                	sub    %edx,%ecx
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff800010f3:	48 8b 53 e0          	mov    -0x20(%rbx),%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800010f7:	89 c8                	mov    %ecx,%eax
ffffffff800010f9:	48 8b 4b d8          	mov    -0x28(%rbx),%rcx
ffffffff800010fd:	83 e8 28             	sub    $0x28,%eax
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80001100:	48 85 d2             	test   %rdx,%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80001103:	89 47 18             	mov    %eax,0x18(%rdi)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff80001106:	c7 43 f0 ad de ad de 	movl   $0xdeaddead,-0x10(%rbx)
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff8000110d:	74 06                	je     ffffffff80001115 <kfree+0x95>
ffffffff8000110f:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff80001112:	48 8b 0e             	mov    (%rsi),%rcx
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80001115:	48 85 c9             	test   %rcx,%rcx
ffffffff80001118:	74 56                	je     ffffffff80001170 <kfree+0xf0>
ffffffff8000111a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff8000111e:	48 8b 57 20          	mov    0x20(%rdi),%rdx
	if ( maj->first == NULL )	// Block completely unused.
ffffffff80001122:	48 85 d2             	test   %rdx,%rdx
ffffffff80001125:	48 8b 0d 0c 0a 01 00 	mov    0x10a0c(%rip),%rcx        # ffffffff80011b38 <l_bestBet>
ffffffff8000112c:	74 52                	je     ffffffff80001180 <kfree+0x100>
		if ( l_bestBet != NULL )
ffffffff8000112e:	48 85 c9             	test   %rcx,%rcx
ffffffff80001131:	74 a5                	je     ffffffff800010d8 <kfree+0x58>
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001133:	8b 51 14             	mov    0x14(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80001136:	8b 77 14             	mov    0x14(%rdi),%esi
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001139:	2b 51 18             	sub    0x18(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff8000113c:	29 c6                	sub    %eax,%esi
			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff8000113e:	39 f2                	cmp    %esi,%edx
ffffffff80001140:	7d 96                	jge    ffffffff800010d8 <kfree+0x58>
ffffffff80001142:	48 89 3d ef 09 01 00 	mov    %rdi,0x109ef(%rip)        # ffffffff80011b38 <l_bestBet>
ffffffff80001149:	eb 8d                	jmp    ffffffff800010d8 <kfree+0x58>
ffffffff8000114b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			l_possibleOverruns += 1;
ffffffff80001150:	48 83 05 b8 09 01 00 	addq   $0x1,0x109b8(%rip)        # ffffffff80011b10 <l_possibleOverruns>
ffffffff80001157:	01 
		liballoc_unlock();		// release the lock
ffffffff80001158:	31 c0                	xor    %eax,%eax
}
ffffffff8000115a:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff8000115b:	e9 a0 fa ff ff       	jmpq   ffffffff80000c00 <liballoc_unlock>
		l_warningCount += 1;
ffffffff80001160:	48 83 05 b8 09 01 00 	addq   $0x1,0x109b8(%rip)        # ffffffff80011b20 <l_warningCount>
ffffffff80001167:	01 
ffffffff80001168:	c3                   	retq   
ffffffff80001169:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80001170:	48 89 57 20          	mov    %rdx,0x20(%rdi)
ffffffff80001174:	eb ac                	jmp    ffffffff80001122 <kfree+0xa2>
ffffffff80001176:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000117d:	00 00 00 
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001180:	48 39 3d b9 09 01 00 	cmp    %rdi,0x109b9(%rip)        # ffffffff80011b40 <l_memRoot>
ffffffff80001187:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff8000118b:	74 3b                	je     ffffffff800011c8 <kfree+0x148>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff8000118d:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80001190:	74 46                	je     ffffffff800011d8 <kfree+0x158>
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80001192:	48 8b 17             	mov    (%rdi),%rdx
ffffffff80001195:	48 85 d2             	test   %rdx,%rdx
ffffffff80001198:	74 08                	je     ffffffff800011a2 <kfree+0x122>
ffffffff8000119a:	48 89 42 08          	mov    %rax,0x8(%rdx)
ffffffff8000119e:	48 8b 47 08          	mov    0x8(%rdi),%rax
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff800011a2:	48 85 c0             	test   %rax,%rax
ffffffff800011a5:	74 03                	je     ffffffff800011aa <kfree+0x12a>
ffffffff800011a7:	48 89 10             	mov    %rdx,(%rax)
		liballoc_free( maj, maj->pages );
ffffffff800011aa:	8b 77 10             	mov    0x10(%rdi),%esi
		l_allocated -= maj->size;
ffffffff800011ad:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff800011b0:	48 29 05 79 09 01 00 	sub    %rax,0x10979(%rip)        # ffffffff80011b30 <l_allocated>
		liballoc_free( maj, maj->pages );
ffffffff800011b7:	e8 54 fa ff ff       	callq  ffffffff80000c10 <liballoc_free>
ffffffff800011bc:	e9 17 ff ff ff       	jmpq   ffffffff800010d8 <kfree+0x58>
ffffffff800011c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff800011c8:	48 89 05 71 09 01 00 	mov    %rax,0x10971(%rip)        # ffffffff80011b40 <l_memRoot>
ffffffff800011cf:	eb bc                	jmp    ffffffff8000118d <kfree+0x10d>
ffffffff800011d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff800011d8:	48 c7 05 55 09 01 00 	movq   $0x0,0x10955(%rip)        # ffffffff80011b38 <l_bestBet>
ffffffff800011df:	00 00 00 00 
ffffffff800011e3:	eb ad                	jmp    ffffffff80001192 <kfree+0x112>
ffffffff800011e5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800011ec:	00 00 00 00 

ffffffff800011f0 <kcalloc>:
void* PREFIX(calloc)(size_t nobj, size_t size)
{
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff800011f0:	0f af fe             	imul   %esi,%edi
{
ffffffff800011f3:	53                   	push   %rbx
       
       p = PREFIX(malloc)( real_size );
ffffffff800011f4:	48 63 df             	movslq %edi,%rbx
ffffffff800011f7:	48 89 df             	mov    %rbx,%rdi
ffffffff800011fa:	e8 21 fb ff ff       	callq  ffffffff80000d20 <kmalloc>
	for ( i = 0; i < n ; i++)
ffffffff800011ff:	48 85 db             	test   %rbx,%rbx
ffffffff80001202:	74 1b                	je     ffffffff8000121f <kcalloc+0x2f>
ffffffff80001204:	31 c9                	xor    %ecx,%ecx
ffffffff80001206:	31 d2                	xor    %edx,%edx
ffffffff80001208:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000120f:	00 
		((char*)s)[i] = c;
ffffffff80001210:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
	for ( i = 0; i < n ; i++)
ffffffff80001214:	8d 51 01             	lea    0x1(%rcx),%edx
ffffffff80001217:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8000121a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000121d:	77 f1                	ja     ffffffff80001210 <kcalloc+0x20>

       liballoc_memset( p, 0, real_size );

       return p;
}
ffffffff8000121f:	5b                   	pop    %rbx
ffffffff80001220:	c3                   	retq   
ffffffff80001221:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001228:	00 00 00 00 
ffffffff8000122c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001230 <krealloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff80001230:	41 54                	push   %r12
ffffffff80001232:	55                   	push   %rbp
ffffffff80001233:	53                   	push   %rbx
ffffffff80001234:	48 89 fb             	mov    %rdi,%rbx
ffffffff80001237:	48 83 ec 10          	sub    $0x10,%rsp
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff8000123b:	48 85 f6             	test   %rsi,%rsi
ffffffff8000123e:	0f 84 54 01 00 00    	je     ffffffff80001398 <krealloc+0x168>
		PREFIX(free)( p );
		return NULL;
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001244:	48 85 ff             	test   %rdi,%rdi
ffffffff80001247:	49 89 f4             	mov    %rsi,%r12
ffffffff8000124a:	0f 84 e0 00 00 00    	je     ffffffff80001330 <krealloc+0x100>

	// Unalign the pointer if required.
	ptr = p;
	UNALIGN(ptr);
ffffffff80001250:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80001255:	48 89 fd             	mov    %rdi,%rbp
ffffffff80001258:	48 29 c5             	sub    %rax,%rbp
ffffffff8000125b:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff8000125f:	48 0f 43 ef          	cmovae %rdi,%rbp

	liballoc_lock();		// lockit
ffffffff80001263:	31 c0                	xor    %eax,%eax
ffffffff80001265:	e8 86 f9 ff ff       	callq  ffffffff80000bf0 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff8000126a:	8b 45 f0             	mov    -0x10(%rbp),%eax
		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff8000126d:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001271:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80001276:	0f 85 c4 00 00 00    	jne    ffffffff80001340 <krealloc+0x110>
		
		// Definitely a memory block.
		
		real_size = min->req_size;

		if ( real_size >= size ) 
ffffffff8000127c:	8b 6d f8             	mov    -0x8(%rbp),%ebp
ffffffff8000127f:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80001282:	0f 83 90 00 00 00    	jae    ffffffff80001318 <krealloc+0xe8>
			min->req_size = size;
			liballoc_unlock();
			return p;
		}

	liballoc_unlock();
ffffffff80001288:	31 c0                	xor    %eax,%eax
ffffffff8000128a:	e8 71 f9 ff ff       	callq  ffffffff80000c00 <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff8000128f:	4c 89 e7             	mov    %r12,%rdi
ffffffff80001292:	e8 89 fa ff ff       	callq  ffffffff80000d20 <kmalloc>
  while ( n >= sizeof(unsigned int) )
ffffffff80001297:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff8000129b:	0f 86 e7 00 00 00    	jbe    ffffffff80001388 <krealloc+0x158>
ffffffff800012a1:	48 83 ed 04          	sub    $0x4,%rbp
ffffffff800012a5:	31 d2                	xor    %edx,%edx
ffffffff800012a7:	48 89 ef             	mov    %rbp,%rdi
ffffffff800012aa:	48 c1 ef 02          	shr    $0x2,%rdi
ffffffff800012ae:	48 8d 34 bd 04 00 00 	lea    0x4(,%rdi,4),%rsi
ffffffff800012b5:	00 
ffffffff800012b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800012bd:	00 00 00 
      *ldest++ = *lsrc++;
ffffffff800012c0:	8b 0c 13             	mov    (%rbx,%rdx,1),%ecx
ffffffff800012c3:	89 0c 10             	mov    %ecx,(%rax,%rdx,1)
ffffffff800012c6:	48 83 c2 04          	add    $0x4,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff800012ca:	48 39 f2             	cmp    %rsi,%rdx
ffffffff800012cd:	75 f1                	jne    ffffffff800012c0 <krealloc+0x90>
ffffffff800012cf:	48 f7 df             	neg    %rdi
ffffffff800012d2:	4c 8d 04 13          	lea    (%rbx,%rdx,1),%r8
ffffffff800012d6:	48 01 c2             	add    %rax,%rdx
ffffffff800012d9:	48 8d 6c bd 00       	lea    0x0(%rbp,%rdi,4),%rbp
  while ( n > 0 )
ffffffff800012de:	48 85 ed             	test   %rbp,%rbp
ffffffff800012e1:	74 14                	je     ffffffff800012f7 <krealloc+0xc7>
ffffffff800012e3:	31 c9                	xor    %ecx,%ecx
      *cdest++ = *csrc++;
ffffffff800012e5:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff800012ea:	40 88 34 0a          	mov    %sil,(%rdx,%rcx,1)
ffffffff800012ee:	48 83 c1 01          	add    $0x1,%rcx
  while ( n > 0 )
ffffffff800012f2:	48 39 e9             	cmp    %rbp,%rcx
ffffffff800012f5:	75 ee                	jne    ffffffff800012e5 <krealloc+0xb5>
	liballoc_memcpy( ptr, p, real_size );
	PREFIX(free)( p );
ffffffff800012f7:	48 89 df             	mov    %rbx,%rdi
ffffffff800012fa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff800012ff:	e8 7c fd ff ff       	callq  ffffffff80001080 <kfree>
ffffffff80001304:	48 8b 44 24 08       	mov    0x8(%rsp),%rax

	return ptr;
}
ffffffff80001309:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000130d:	5b                   	pop    %rbx
ffffffff8000130e:	5d                   	pop    %rbp
ffffffff8000130f:	41 5c                	pop    %r12
ffffffff80001311:	c3                   	retq   
ffffffff80001312:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			min->req_size = size;
ffffffff80001318:	44 89 62 20          	mov    %r12d,0x20(%rdx)
			liballoc_unlock();
ffffffff8000131c:	31 c0                	xor    %eax,%eax
ffffffff8000131e:	e8 dd f8 ff ff       	callq  ffffffff80000c00 <liballoc_unlock>
			return p;
ffffffff80001323:	48 89 d8             	mov    %rbx,%rax
}
ffffffff80001326:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000132a:	5b                   	pop    %rbx
ffffffff8000132b:	5d                   	pop    %rbp
ffffffff8000132c:	41 5c                	pop    %r12
ffffffff8000132e:	c3                   	retq   
ffffffff8000132f:	90                   	nop
ffffffff80001330:	48 83 c4 10          	add    $0x10,%rsp
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001334:	48 89 f7             	mov    %rsi,%rdi
}
ffffffff80001337:	5b                   	pop    %rbx
ffffffff80001338:	5d                   	pop    %rbp
ffffffff80001339:	41 5c                	pop    %r12
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8000133b:	e9 e0 f9 ff ff       	jmpq   ffffffff80000d20 <kmalloc>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001340:	89 c2                	mov    %eax,%edx
			l_errorCount += 1;
ffffffff80001342:	48 83 05 ce 07 01 00 	addq   $0x1,0x107ce(%rip)        # ffffffff80011b18 <l_errorCount>
ffffffff80001349:	01 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000134a:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
			if ( 
ffffffff80001350:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80001356:	74 20                	je     ffffffff80001378 <krealloc+0x148>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001358:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff8000135c:	74 1a                	je     ffffffff80001378 <krealloc+0x148>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff8000135e:	3c de                	cmp    $0xde,%al
ffffffff80001360:	74 16                	je     ffffffff80001378 <krealloc+0x148>
			liballoc_unlock();		// release the lock
ffffffff80001362:	31 c0                	xor    %eax,%eax
ffffffff80001364:	e8 97 f8 ff ff       	callq  ffffffff80000c00 <liballoc_unlock>
}
ffffffff80001369:	48 83 c4 10          	add    $0x10,%rsp
			return NULL;
ffffffff8000136d:	31 c0                	xor    %eax,%eax
}
ffffffff8000136f:	5b                   	pop    %rbx
ffffffff80001370:	5d                   	pop    %rbp
ffffffff80001371:	41 5c                	pop    %r12
ffffffff80001373:	c3                   	retq   
ffffffff80001374:	0f 1f 40 00          	nopl   0x0(%rax)
				l_possibleOverruns += 1;
ffffffff80001378:	48 83 05 90 07 01 00 	addq   $0x1,0x10790(%rip)        # ffffffff80011b10 <l_possibleOverruns>
ffffffff8000137f:	01 
ffffffff80001380:	eb e0                	jmp    ffffffff80001362 <krealloc+0x132>
ffffffff80001382:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80001388:	48 89 c2             	mov    %rax,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff8000138b:	49 89 d8             	mov    %rbx,%r8
ffffffff8000138e:	e9 4b ff ff ff       	jmpq   ffffffff800012de <krealloc+0xae>
ffffffff80001393:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		PREFIX(free)( p );
ffffffff80001398:	e8 e3 fc ff ff       	callq  ffffffff80001080 <kfree>
		return NULL;
ffffffff8000139d:	31 c0                	xor    %eax,%eax
ffffffff8000139f:	eb 85                	jmp    ffffffff80001326 <krealloc+0xf6>
ffffffff800013a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800013a8:	00 00 00 
ffffffff800013ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800013b0 <pmm_init>:

//Initialize the Physical Memory Manager
void pmm_init()
{
    //memory map helper variables
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff800013b0:	48 8b 05 b9 92 00 00 	mov    0x92b9(%rip),%rax        # ffffffff8000a670 <boot_info+0x10>
ffffffff800013b7:	48 8b 35 22 93 00 00 	mov    0x9322(%rip),%rsi        # ffffffff8000a6e0 <pmm_info>
ffffffff800013be:	4c 8b 58 10          	mov    0x10(%rax),%r11
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
    //uint8_t* type = NULL;

    //iterate through the memory map, find the largest memory segment, calculate total memory size
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800013c2:	4d 85 db             	test   %r11,%r11
ffffffff800013c5:	0f 84 c5 00 00 00    	je     ffffffff80001490 <pmm_init+0xe0>
{
ffffffff800013cb:	55                   	push   %rbp
ffffffff800013cc:	53                   	push   %rbx
ffffffff800013cd:	48 83 c0 18          	add    $0x18,%rax
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800013d1:	45 31 c9             	xor    %r9d,%r9d
ffffffff800013d4:	31 db                	xor    %ebx,%ebx
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
ffffffff800013d6:	45 31 d2             	xor    %r10d,%r10d
{
ffffffff800013d9:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
ffffffff800013dd:	31 c9                	xor    %ecx,%ecx
ffffffff800013df:	4c 8b 05 32 93 00 00 	mov    0x9332(%rip),%r8        # ffffffff8000a718 <pmm_vmm_info+0x8>
ffffffff800013e6:	48 8b 3d 33 93 00 00 	mov    0x9333(%rip),%rdi        # ffffffff8000a720 <pmm_vmm_info+0x10>
ffffffff800013ed:	eb 1e                	jmp    ffffffff8000140d <pmm_init+0x5d>
ffffffff800013ef:	90                   	nop
        {
            continue;
        }

        //Capture the largest segment size
        if(current_entry->length > mmap_largest_segment_size)
ffffffff800013f0:	4c 39 d2             	cmp    %r10,%rdx
ffffffff800013f3:	76 0b                	jbe    ffffffff80001400 <pmm_init+0x50>
ffffffff800013f5:	83 fd 01             	cmp    $0x1,%ebp
ffffffff800013f8:	75 06                	jne    ffffffff80001400 <pmm_init+0x50>
        {
            mmap_largest_segment_base = current_entry->base;
ffffffff800013fa:	48 8b 08             	mov    (%rax),%rcx
ffffffff800013fd:	49 89 d2             	mov    %rdx,%r10
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001400:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80001404:	48 83 c0 18          	add    $0x18,%rax
ffffffff80001408:	49 39 db             	cmp    %rbx,%r11
ffffffff8000140b:	74 2b                	je     ffffffff80001438 <pmm_init+0x88>
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff8000140d:	48 8b 50 08          	mov    0x8(%rax),%rdx
        if(current_entry->type == 0x1002)
ffffffff80001411:	8b 68 10             	mov    0x10(%rax),%ebp
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff80001414:	48 01 d6             	add    %rdx,%rsi
        if(current_entry->type == 0x1002)
ffffffff80001417:	81 fd 02 10 00 00    	cmp    $0x1002,%ebp
ffffffff8000141d:	75 d1                	jne    ffffffff800013f0 <pmm_init+0x40>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff8000141f:	48 83 c3 01          	add    $0x1,%rbx
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff80001423:	4c 8b 00             	mov    (%rax),%r8
ffffffff80001426:	48 83 c0 18          	add    $0x18,%rax
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff8000142a:	49 39 db             	cmp    %rbx,%r11
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff8000142d:	48 89 d7             	mov    %rdx,%rdi
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff80001430:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001436:	75 d5                	jne    ffffffff8000140d <pmm_init+0x5d>
ffffffff80001438:	45 84 c9             	test   %r9b,%r9b
ffffffff8000143b:	48 89 35 9e 92 00 00 	mov    %rsi,0x929e(%rip)        # ffffffff8000a6e0 <pmm_info>
ffffffff80001442:	74 0e                	je     ffffffff80001452 <pmm_init+0xa2>
ffffffff80001444:	4c 89 05 cd 92 00 00 	mov    %r8,0x92cd(%rip)        # ffffffff8000a718 <pmm_vmm_info+0x8>
ffffffff8000144b:	48 89 3d ce 92 00 00 	mov    %rdi,0x92ce(%rip)        # ffffffff8000a720 <pmm_vmm_info+0x10>
            mmap_largest_segment_size = current_entry->length;
        }
    };

    //Populate the PMM state variables
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001452:	48 89 f0             	mov    %rsi,%rax
ffffffff80001455:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80001459:	48 89 05 90 92 00 00 	mov    %rax,0x9290(%rip)        # ffffffff8000a6f0 <pmm_info+0x10>
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001460:	48 89 05 81 92 00 00 	mov    %rax,0x9281(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001467:	48 89 f0             	mov    %rsi,%rax
ffffffff8000146a:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000146e:	48 83 c0 01          	add    $0x1,%rax
    
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001472:	48 39 c2             	cmp    %rax,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001475:	48 89 05 84 92 00 00 	mov    %rax,0x9284(%rip)        # ffffffff8000a700 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff8000147c:	73 4a                	jae    ffffffff800014c8 <pmm_init+0x118>
        {
            printf("Bitmap too large");
ffffffff8000147e:	48 c7 c7 ea 4c 00 80 	mov    $0xffffffff80004cea,%rdi
ffffffff80001485:	31 c0                	xor    %eax,%eax
ffffffff80001487:	e8 b4 1f 00 00       	callq  ffffffff80003440 <printf_>
ffffffff8000148c:	eb fe                	jmp    ffffffff8000148c <pmm_init+0xdc>
ffffffff8000148e:	66 90                	xchg   %ax,%ax
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001490:	48 89 f0             	mov    %rsi,%rax
ffffffff80001493:	48 c1 e8 0c          	shr    $0xc,%rax
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001497:	48 89 05 4a 92 00 00 	mov    %rax,0x924a(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff8000149e:	48 89 05 4b 92 00 00 	mov    %rax,0x924b(%rip)        # ffffffff8000a6f0 <pmm_info+0x10>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff800014a5:	48 89 f0             	mov    %rsi,%rax
ffffffff800014a8:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff800014ac:	48 83 c0 01          	add    $0x1,%rax
ffffffff800014b0:	48 89 05 49 92 00 00 	mov    %rax,0x9249(%rip)        # ffffffff8000a700 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff800014b7:	48 8b 04 25 08 00 00 	mov    0x8,%rax
ffffffff800014be:	00 
ffffffff800014bf:	0f 0b                	ud2    
ffffffff800014c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800014c8:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff800014cf:	80 ff ff 
            for(;;){}   //hang
        }
    
    pmm_info.bitmap = (uint8_t*)phys_to_hh_data(mmap_largest_segment_base); 

    printf("Total Memory: %d\n", (pmm_info.totalmem));
ffffffff800014d2:	48 c7 c7 fb 4c 00 80 	mov    $0xffffffff80004cfb,%rdi
ffffffff800014d9:	48 01 c1             	add    %rax,%rcx
ffffffff800014dc:	31 c0                	xor    %eax,%eax
ffffffff800014de:	48 89 0d 13 92 00 00 	mov    %rcx,0x9213(%rip)        # ffffffff8000a6f8 <pmm_info+0x18>
ffffffff800014e5:	e8 56 1f 00 00       	callq  ffffffff80003440 <printf_>
    printf("Total Pages: %d   Used Pages: %d\n", pmm_info.totalpages, pmm_info.usedpages);
ffffffff800014ea:	48 8b 15 f7 91 00 00 	mov    0x91f7(%rip),%rdx        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff800014f1:	48 8b 35 f8 91 00 00 	mov    0x91f8(%rip),%rsi        # ffffffff8000a6f0 <pmm_info+0x10>
ffffffff800014f8:	48 c7 c7 38 4d 00 80 	mov    $0xffffffff80004d38,%rdi
ffffffff800014ff:	31 c0                	xor    %eax,%eax
ffffffff80001501:	e8 3a 1f 00 00       	callq  ffffffff80003440 <printf_>
    printf("Bitmap Addr: %p  Bitmap Size (bytes): %d\n", pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001506:	48 8b 15 f3 91 00 00 	mov    0x91f3(%rip),%rdx        # ffffffff8000a700 <pmm_info+0x20>
ffffffff8000150d:	48 8b 35 e4 91 00 00 	mov    0x91e4(%rip),%rsi        # ffffffff8000a6f8 <pmm_info+0x18>
ffffffff80001514:	31 c0                	xor    %eax,%eax
ffffffff80001516:	48 c7 c7 60 4d 00 80 	mov    $0xffffffff80004d60,%rdi
ffffffff8000151d:	e8 1e 1f 00 00       	callq  ffffffff80003440 <printf_>

    //Set all bitmap bits to 1
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff80001522:	48 83 3d d6 91 00 00 	cmpq   $0x0,0x91d6(%rip)        # ffffffff8000a700 <pmm_info+0x20>
ffffffff80001529:	00 
ffffffff8000152a:	74 1c                	je     ffffffff80001548 <pmm_init+0x198>
ffffffff8000152c:	31 c0                	xor    %eax,%eax
ffffffff8000152e:	66 90                	xchg   %ax,%ax
        {
        pmm_info.bitmap[i] = 0xff;
ffffffff80001530:	48 8b 15 c1 91 00 00 	mov    0x91c1(%rip),%rdx        # ffffffff8000a6f8 <pmm_info+0x18>
ffffffff80001537:	c6 04 02 ff          	movb   $0xff,(%rdx,%rax,1)
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff8000153b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000153f:	48 39 05 ba 91 00 00 	cmp    %rax,0x91ba(%rip)        # ffffffff8000a700 <pmm_info+0x20>
ffffffff80001546:	77 e8                	ja     ffffffff80001530 <pmm_init+0x180>
    

    //printf("Number of MMAP Entries: %d\n", mmap_entries);

    //Iterate through the memory map again, unset bitmap for available memory
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001548:	31 f6                	xor    %esi,%esi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff8000154a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
ffffffff80001550:	eb 0f                	jmp    ffffffff80001561 <pmm_init+0x1b1>
ffffffff80001552:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001558:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000155c:	48 39 de             	cmp    %rbx,%rsi
ffffffff8000155f:	74 69                	je     ffffffff800015ca <pmm_init+0x21a>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];

        if(current_entry->type == 1)
ffffffff80001561:	48 8b 15 08 91 00 00 	mov    0x9108(%rip),%rdx        # ffffffff8000a670 <boot_info+0x10>
ffffffff80001568:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
ffffffff8000156c:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
ffffffff80001570:	83 78 28 01          	cmpl   $0x1,0x28(%rax)
ffffffff80001574:	75 e2                	jne    ffffffff80001558 <pmm_init+0x1a8>
        {
            uint64_t pages = current_entry->length / 4096;
ffffffff80001576:	48 8b 50 20          	mov    0x20(%rax),%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff8000157a:	48 8b 40 18          	mov    0x18(%rax),%rax
            uint64_t pages = current_entry->length / 4096;
ffffffff8000157e:	48 c1 ea 0c          	shr    $0xc,%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff80001582:	48 c1 e8 0c          	shr    $0xc,%rax
            //printf("Index: %d  Pages: %d\n", align, pages);

            for(uint64_t j = 0; j < pages; j++)
ffffffff80001586:	48 85 d2             	test   %rdx,%rdx
ffffffff80001589:	74 cd                	je     ffffffff80001558 <pmm_init+0x1a8>
ffffffff8000158b:	48 01 c2             	add    %rax,%rdx
ffffffff8000158e:	66 90                	xchg   %ax,%ax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001590:	48 89 c7             	mov    %rax,%rdi
ffffffff80001593:	89 c1                	mov    %eax,%ecx
ffffffff80001595:	45 89 c1             	mov    %r8d,%r9d
ffffffff80001598:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff8000159c:	48 03 3d 55 91 00 00 	add    0x9155(%rip),%rdi        # ffffffff8000a6f8 <pmm_info+0x18>
ffffffff800015a3:	83 e1 07             	and    $0x7,%ecx
ffffffff800015a6:	41 d3 e1             	shl    %cl,%r9d
                //uint64_t bitindex = align % 8;
                //pmm_info.bitmap[byteindex] &= ~(1 << bitindex);
                
                bitmap_unset(pmm_info.bitmap, align);

                align++;                    //increment page index
ffffffff800015a9:	48 83 c0 01          	add    $0x1,%rax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800015ad:	44 89 c9             	mov    %r9d,%ecx
ffffffff800015b0:	f7 d1                	not    %ecx
ffffffff800015b2:	20 0f                	and    %cl,(%rdi)
                pmm_info.usedpages--;       //decrement used page counter
ffffffff800015b4:	48 83 2d 2c 91 00 00 	subq   $0x1,0x912c(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff800015bb:	01 
            for(uint64_t j = 0; j < pages; j++)
ffffffff800015bc:	48 39 d0             	cmp    %rdx,%rax
ffffffff800015bf:	75 cf                	jne    ffffffff80001590 <pmm_init+0x1e0>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800015c1:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800015c5:	48 39 de             	cmp    %rbx,%rsi
ffffffff800015c8:	75 97                	jne    ffffffff80001561 <pmm_init+0x1b1>
            }
        }
    }

    //Make certain the NULL page is unavailable
    bitmap_set(pmm_info.bitmap, 0);
ffffffff800015ca:	48 8b 05 27 91 00 00 	mov    0x9127(%rip),%rax        # ffffffff8000a6f8 <pmm_info+0x18>
    pmm_info.usedpages++;

    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800015d1:	48 c7 c7 0d 4d 00 80 	mov    $0xffffffff80004d0d,%rdi
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800015d8:	80 08 01             	orb    $0x1,(%rax)
    pmm_info.usedpages++;
ffffffff800015db:	48 8b 05 06 91 00 00 	mov    0x9106(%rip),%rax        # ffffffff8000a6e8 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800015e2:	48 8b 35 07 91 00 00 	mov    0x9107(%rip),%rsi        # ffffffff8000a6f0 <pmm_info+0x10>
    pmm_info.usedpages++;
ffffffff800015e9:	48 83 c0 01          	add    $0x1,%rax
ffffffff800015ed:	48 89 05 f4 90 00 00 	mov    %rax,0x90f4(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800015f4:	48 29 c6             	sub    %rax,%rsi
ffffffff800015f7:	31 c0                	xor    %eax,%eax
ffffffff800015f9:	e8 42 1e 00 00       	callq  ffffffff80003440 <printf_>
    printf("PMM Initialized\n");

}
ffffffff800015fe:	48 83 c4 08          	add    $0x8,%rsp
    printf("PMM Initialized\n");
ffffffff80001602:	48 c7 c7 22 4d 00 80 	mov    $0xffffffff80004d22,%rdi
ffffffff80001609:	31 c0                	xor    %eax,%eax
}
ffffffff8000160b:	5b                   	pop    %rbx
ffffffff8000160c:	5d                   	pop    %rbp
    printf("PMM Initialized\n");
ffffffff8000160d:	e9 2e 1e 00 00       	jmpq   ffffffff80003440 <printf_>
ffffffff80001612:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001619:	00 00 00 00 
ffffffff8000161d:	0f 1f 00             	nopl   (%rax)

ffffffff80001620 <pmm_allocpage>:


void* pmm_allocpage()
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff80001620:	48 8b 05 c9 90 00 00 	mov    0x90c9(%rip),%rax        # ffffffff8000a6f0 <pmm_info+0x10>
ffffffff80001627:	48 39 05 ba 90 00 00 	cmp    %rax,0x90ba(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff8000162e:	0f 83 7c 00 00 00    	jae    ffffffff800016b0 <pmm_allocpage+0x90>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001634:	48 8b 3d c5 90 00 00 	mov    0x90c5(%rip),%rdi        # ffffffff8000a700 <pmm_info+0x20>
ffffffff8000163b:	48 8b 35 b6 90 00 00 	mov    0x90b6(%rip),%rsi        # ffffffff8000a6f8 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001642:	48 85 ff             	test   %rdi,%rdi
ffffffff80001645:	74 25                	je     ffffffff8000166c <pmm_allocpage+0x4c>
ffffffff80001647:	31 c9                	xor    %ecx,%ecx
        if(bitmap[i] != 0xff)
ffffffff80001649:	0f b6 14 0e          	movzbl (%rsi,%rcx,1),%edx
ffffffff8000164d:	80 fa ff             	cmp    $0xff,%dl
ffffffff80001650:	74 11                	je     ffffffff80001663 <pmm_allocpage+0x43>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001652:	31 c0                	xor    %eax,%eax
                if(!(bitmap[i] & (1 << j)))
ffffffff80001654:	0f a3 c2             	bt     %eax,%edx
ffffffff80001657:	73 27                	jae    ffffffff80001680 <pmm_allocpage+0x60>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001659:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000165d:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80001661:	75 f1                	jne    ffffffff80001654 <pmm_allocpage+0x34>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001663:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80001667:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8000166a:	75 dd                	jne    ffffffff80001649 <pmm_allocpage+0x29>
ffffffff8000166c:	ba 01 00 00 00       	mov    $0x1,%edx
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff80001671:	08 16                	or     %dl,(%rsi)
    for(uint64_t i = 0; i < size; i++)
ffffffff80001673:	31 c0                	xor    %eax,%eax
    
    bitmap_set(pmm_info.bitmap, index);

    pmm_info.usedpages++;
ffffffff80001675:	48 83 05 6b 90 00 00 	addq   $0x1,0x906b(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff8000167c:	01 

    return (void*)(index * PAGE_SIZE);
ffffffff8000167d:	c3                   	retq   
ffffffff8000167e:	66 90                	xchg   %ax,%ax
                    return (i * 8) + j;
ffffffff80001680:	48 8d 0c c8          	lea    (%rax,%rcx,8),%rcx
ffffffff80001684:	48 89 ca             	mov    %rcx,%rdx
ffffffff80001687:	48 89 c8             	mov    %rcx,%rax
ffffffff8000168a:	83 e1 07             	and    $0x7,%ecx
ffffffff8000168d:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80001691:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80001695:	48 01 d6             	add    %rdx,%rsi
ffffffff80001698:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000169d:	d3 e2                	shl    %cl,%edx
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff8000169f:	08 16                	or     %dl,(%rsi)
    pmm_info.usedpages++;
ffffffff800016a1:	48 83 05 3f 90 00 00 	addq   $0x1,0x903f(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff800016a8:	01 
    return (void*)(index * PAGE_SIZE);
ffffffff800016a9:	c3                   	retq   
ffffffff800016aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return NULL;
ffffffff800016b0:	31 c0                	xor    %eax,%eax
}
ffffffff800016b2:	c3                   	retq   
ffffffff800016b3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800016ba:	00 00 00 00 
ffffffff800016be:	66 90                	xchg   %ax,%ax

ffffffff800016c0 <pmm_freepage>:
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800016c0:	48 89 fa             	mov    %rdi,%rdx


void pmm_freepage(void* page)
{
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800016c3:	48 c1 ef 0c          	shr    $0xc,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800016c7:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800016cc:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff800016d0:	48 03 15 21 90 00 00 	add    0x9021(%rip),%rdx        # ffffffff8000a6f8 <pmm_info+0x18>
ffffffff800016d7:	89 f9                	mov    %edi,%ecx
ffffffff800016d9:	83 e1 07             	and    $0x7,%ecx
ffffffff800016dc:	d3 e0                	shl    %cl,%eax
ffffffff800016de:	f7 d0                	not    %eax
ffffffff800016e0:	20 02                	and    %al,(%rdx)
    bitmap_unset(pmm_info.bitmap, index);
    pmm_info.usedpages--;
ffffffff800016e2:	48 83 2d fe 8f 00 00 	subq   $0x1,0x8ffe(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff800016e9:	01 
}
ffffffff800016ea:	c3                   	retq   
ffffffff800016eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800016f0 <pmm_allocpages>:

void* pmm_allocpages(uint64_t count)
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff800016f0:	4c 8b 15 f1 8f 00 00 	mov    0x8ff1(%rip),%r10        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff800016f7:	4c 3b 15 f2 8f 00 00 	cmp    0x8ff2(%rip),%r10        # ffffffff8000a6f0 <pmm_info+0x10>
ffffffff800016fe:	73 73                	jae    ffffffff80001773 <pmm_allocpages+0x83>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001700:	48 8b 05 f9 8f 00 00 	mov    0x8ff9(%rip),%rax        # ffffffff8000a700 <pmm_info+0x20>
ffffffff80001707:	4c 8b 05 ea 8f 00 00 	mov    0x8fea(%rip),%r8        # ffffffff8000a6f8 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff8000170e:	48 85 c0             	test   %rax,%rax
ffffffff80001711:	74 28                	je     ffffffff8000173b <pmm_allocpages+0x4b>
ffffffff80001713:	31 f6                	xor    %esi,%esi
        if(bitmap[i] != 0xff)
ffffffff80001715:	41 0f b6 0c 30       	movzbl (%r8,%rsi,1),%ecx
ffffffff8000171a:	80 f9 ff             	cmp    $0xff,%cl
ffffffff8000171d:	74 11                	je     ffffffff80001730 <pmm_allocpages+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff8000171f:	31 d2                	xor    %edx,%edx
                if(!(bitmap[i] & (1 << j)))
ffffffff80001721:	0f a3 d1             	bt     %edx,%ecx
ffffffff80001724:	73 5a                	jae    ffffffff80001780 <pmm_allocpages+0x90>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001726:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000172a:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8000172e:	75 f1                	jne    ffffffff80001721 <pmm_allocpages+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001730:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001734:	48 39 f0             	cmp    %rsi,%rax
ffffffff80001737:	75 dc                	jne    ffffffff80001715 <pmm_allocpages+0x25>
    return 0;
ffffffff80001739:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff8000173b:	48 85 ff             	test   %rdi,%rdi
ffffffff8000173e:	74 50                	je     ffffffff80001790 <pmm_allocpages+0xa0>
ffffffff80001740:	31 d2                	xor    %edx,%edx
    {
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff80001742:	41 f6 00 01          	testb  $0x1,(%r8)
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001746:	41 b9 01 00 00 00    	mov    $0x1,%r9d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000174c:	74 25                	je     ffffffff80001773 <pmm_allocpages+0x83>
    for(uint64_t i = 0; i < count; i++)
ffffffff8000174e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80001752:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80001755:	74 39                	je     ffffffff80001790 <pmm_allocpages+0xa0>
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001757:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000175a:	45 89 cb             	mov    %r9d,%r11d
ffffffff8000175d:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80001761:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff80001766:	89 d1                	mov    %edx,%ecx
ffffffff80001768:	83 e1 08             	and    $0x8,%ecx
ffffffff8000176b:	41 d3 e3             	shl    %cl,%r11d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000176e:	44 85 de             	test   %r11d,%esi
ffffffff80001771:	75 db                	jne    ffffffff8000174e <pmm_allocpages+0x5e>
        return NULL;
ffffffff80001773:	31 c0                	xor    %eax,%eax
    }

    pmm_info.usedpages += count;

    return (void*)(index * PAGE_SIZE);
}
ffffffff80001775:	c3                   	retq   
ffffffff80001776:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000177d:	00 00 00 
                    return (i * 8) + j;
ffffffff80001780:	48 8d 04 f2          	lea    (%rdx,%rsi,8),%rax
ffffffff80001784:	eb b5                	jmp    ffffffff8000173b <pmm_allocpages+0x4b>
ffffffff80001786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000178d:	00 00 00 
    pmm_info.usedpages += count;
ffffffff80001790:	4c 01 d7             	add    %r10,%rdi
    return (void*)(index * PAGE_SIZE);
ffffffff80001793:	48 c1 e0 0c          	shl    $0xc,%rax
    pmm_info.usedpages += count;
ffffffff80001797:	48 89 3d 4a 8f 00 00 	mov    %rdi,0x8f4a(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
    return (void*)(index * PAGE_SIZE);
ffffffff8000179e:	c3                   	retq   
ffffffff8000179f:	90                   	nop

ffffffff800017a0 <pmm_freepages>:

uint64_t pmm_freepages(void* page, uint64_t count)
{
    uint64_t pg = (uint64_t)page;

    for(uint64_t i=0; i < count; i++)
ffffffff800017a0:	48 85 f6             	test   %rsi,%rsi
ffffffff800017a3:	74 44                	je     ffffffff800017e9 <pmm_freepages+0x49>
ffffffff800017a5:	45 31 c0             	xor    %r8d,%r8d
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800017a8:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff800017ae:	66 90                	xchg   %ax,%ax
ffffffff800017b0:	48 89 f8             	mov    %rdi,%rax
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800017b3:	48 89 f9             	mov    %rdi,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800017b6:	44 89 ca             	mov    %r9d,%edx
ffffffff800017b9:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff800017bd:	48 03 05 34 8f 00 00 	add    0x8f34(%rip),%rax        # ffffffff8000a6f8 <pmm_info+0x18>
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800017c4:	48 c1 e9 0c          	shr    $0xc,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800017c8:	83 e1 07             	and    $0x7,%ecx
    for(uint64_t i=0; i < count; i++)
ffffffff800017cb:	49 83 c0 01          	add    $0x1,%r8
    {
        pmm_freepage((void*)pg);
        pg += 0x1000;
ffffffff800017cf:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800017d6:	d3 e2                	shl    %cl,%edx
ffffffff800017d8:	f7 d2                	not    %edx
ffffffff800017da:	20 10                	and    %dl,(%rax)
    pmm_info.usedpages--;
ffffffff800017dc:	48 83 2d 04 8f 00 00 	subq   $0x1,0x8f04(%rip)        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff800017e3:	01 
    for(uint64_t i=0; i < count; i++)
ffffffff800017e4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff800017e7:	75 c7                	jne    ffffffff800017b0 <pmm_freepages+0x10>
    }

    return 0;
}
ffffffff800017e9:	31 c0                	xor    %eax,%eax
ffffffff800017eb:	c3                   	retq   
ffffffff800017ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800017f0 <pmm_get_free_memory>:

uint64_t pmm_get_free_memory()
{
    return (pmm_info.totalpages - pmm_info.usedpages) * PAGE_SIZE;
ffffffff800017f0:	48 8b 05 f9 8e 00 00 	mov    0x8ef9(%rip),%rax        # ffffffff8000a6f0 <pmm_info+0x10>
ffffffff800017f7:	48 2b 05 ea 8e 00 00 	sub    0x8eea(%rip),%rax        # ffffffff8000a6e8 <pmm_info+0x8>
ffffffff800017fe:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff80001802:	c3                   	retq   
ffffffff80001803:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000180a:	00 00 00 00 
ffffffff8000180e:	66 90                	xchg   %ax,%ax

ffffffff80001810 <pmm_get_total_memory>:

uint64_t pmm_get_total_memory()
{   
    return (pmm_info.totalpages) * PAGE_SIZE;
ffffffff80001810:	48 8b 05 d9 8e 00 00 	mov    0x8ed9(%rip),%rax        # ffffffff8000a6f0 <pmm_info+0x10>
ffffffff80001817:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8000181b:	c3                   	retq   
ffffffff8000181c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001820 <fb_init>:



void fb_init()
{
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001820:	48 8b 15 51 8e 00 00 	mov    0x8e51(%rip),%rdx        # ffffffff8000a678 <boot_info+0x18>
ffffffff80001827:	48 8b 42 10          	mov    0x10(%rdx),%rax
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff8000182b:	0f b7 4a 18          	movzwl 0x18(%rdx),%ecx
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff8000182f:	0f b7 72 1c          	movzwl 0x1c(%rdx),%esi
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001833:	48 89 05 76 8e 00 00 	mov    %rax,0x8e76(%rip)        # ffffffff8000a6b0 <fb_info>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff8000183a:	0f b7 42 1a          	movzwl 0x1a(%rdx),%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000183e:	0f b7 52 1e          	movzwl 0x1e(%rdx),%edx
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80001842:	66 89 0d 71 8e 00 00 	mov    %cx,0x8e71(%rip)        # ffffffff8000a6ba <fb_info+0xa>
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff80001849:	66 89 35 6c 8e 00 00 	mov    %si,0x8e6c(%rip)        # ffffffff8000a6bc <fb_info+0xc>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80001850:	66 89 05 61 8e 00 00 	mov    %ax,0x8e61(%rip)        # ffffffff8000a6b8 <fb_info+0x8>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001857:	0f af c1             	imul   %ecx,%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000185a:	66 89 15 5d 8e 00 00 	mov    %dx,0x8e5d(%rip)        # ffffffff8000a6be <fb_info+0xe>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001861:	89 05 59 8e 00 00    	mov    %eax,0x8e59(%rip)        # ffffffff8000a6c0 <fb_info+0x10>
    //printf("FB Base: %p", fb_info.base);
    //printf("FB Height: %d  FB Width: %d\n", fb_info.height, fb_info.width);
    //printf("FB BPP: %d   FB Pitch: %d\n", fb_info.bpp, fb_info.pitch);

    //fb_putpixel(100,100,FB_COLOR_WHITE);
}
ffffffff80001867:	c3                   	retq   
ffffffff80001868:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000186f:	00 

ffffffff80001870 <fb_putpixel>:

void fb_putpixel(uint32_t x, uint32_t y, enum fb_color col)
{
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001870:	0f b7 0d 47 8e 00 00 	movzwl 0x8e47(%rip),%ecx        # ffffffff8000a6be <fb_info+0xe>
ffffffff80001877:	0f b7 05 3e 8e 00 00 	movzwl 0x8e3e(%rip),%eax        # ffffffff8000a6bc <fb_info+0xc>
{
ffffffff8000187e:	41 89 d0             	mov    %edx,%r8d
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001881:	31 d2                	xor    %edx,%edx
ffffffff80001883:	66 c1 e9 03          	shr    $0x3,%cx
ffffffff80001887:	66 f7 f1             	div    %cx
ffffffff8000188a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8000188d:	0f af c6             	imul   %esi,%eax
ffffffff80001890:	8d 14 38             	lea    (%rax,%rdi,1),%edx
    //if(index > fb_info.max_pixels) return;
    *((uint32_t*)fb_info.base + index) = col;
ffffffff80001893:	48 8b 05 16 8e 00 00 	mov    0x8e16(%rip),%rax        # ffffffff8000a6b0 <fb_info>
ffffffff8000189a:	44 89 04 90          	mov    %r8d,(%rax,%rdx,4)
}
ffffffff8000189e:	c3                   	retq   
ffffffff8000189f:	90                   	nop

ffffffff800018a0 <fb_clearscreen>:

void fb_clearscreen(enum fb_color col)
{
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800018a0:	0f b7 05 11 8e 00 00 	movzwl 0x8e11(%rip),%eax        # ffffffff8000a6b8 <fb_info+0x8>
ffffffff800018a7:	0f b7 15 0c 8e 00 00 	movzwl 0x8e0c(%rip),%edx        # ffffffff8000a6ba <fb_info+0xa>
ffffffff800018ae:	0f af c2             	imul   %edx,%eax
ffffffff800018b1:	85 c0                	test   %eax,%eax
ffffffff800018b3:	48 63 c8             	movslq %eax,%rcx
ffffffff800018b6:	74 1f                	je     ffffffff800018d7 <fb_clearscreen+0x37>
    {
        *((uint32_t*)fb_info.base + i) = col;
ffffffff800018b8:	48 8b 15 f1 8d 00 00 	mov    0x8df1(%rip),%rdx        # ffffffff8000a6b0 <fb_info>
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800018bf:	31 c0                	xor    %eax,%eax
ffffffff800018c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800018c8:	48 83 c0 01          	add    $0x1,%rax
        *((uint32_t*)fb_info.base + i) = col;
ffffffff800018cc:	89 3a                	mov    %edi,(%rdx)
ffffffff800018ce:	48 83 c2 04          	add    $0x4,%rdx
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800018d2:	48 39 c8             	cmp    %rcx,%rax
ffffffff800018d5:	75 f1                	jne    ffffffff800018c8 <fb_clearscreen+0x28>
    }
}
ffffffff800018d7:	f3 c3                	repz retq 
ffffffff800018d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800018e0 <fb_drawline>:

void fb_drawline(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, enum fb_color col)
{

ffffffff800018e0:	f3 c3                	repz retq 
ffffffff800018e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800018e9:	00 00 00 
ffffffff800018ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800018f0 <console_input>:

    //write the output buffer to screen
}

void console_input(KEY_INFO_t key)
{
ffffffff800018f0:	89 f8                	mov    %edi,%eax
ffffffff800018f2:	0f b6 fc             	movzbl %ah,%edi
    con_input_buffer.index++;
ffffffff800018f5:	48 8b 05 74 9e 00 00 	mov    0x9e74(%rip),%rax        # ffffffff8000b770 <con_input_buffer+0x10>
ffffffff800018fc:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001900:	48 89 15 69 9e 00 00 	mov    %rdx,0x9e69(%rip)        # ffffffff8000b770 <con_input_buffer+0x10>
    con_input_buffer.buffer[con_input_buffer.index] = key.ascii;
ffffffff80001907:	48 8b 15 52 9e 00 00 	mov    0x9e52(%rip),%rdx        # ffffffff8000b760 <con_input_buffer>
ffffffff8000190e:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
    

    con_output_buffer.buffer[con_output_buffer.index] = key.ascii;
ffffffff80001913:	48 8b 05 36 9e 00 00 	mov    0x9e36(%rip),%rax        # ffffffff8000b750 <con_output_buffer+0x10>
ffffffff8000191a:	48 8b 15 1f 9e 00 00 	mov    0x9e1f(%rip),%rdx        # ffffffff8000b740 <con_output_buffer>
ffffffff80001921:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
    con_output_buffer.index++;
ffffffff80001925:	48 8b 05 24 9e 00 00 	mov    0x9e24(%rip),%rax        # ffffffff8000b750 <con_output_buffer+0x10>
ffffffff8000192c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001930:	48 89 15 19 9e 00 00 	mov    %rdx,0x9e19(%rip)        # ffffffff8000b750 <con_output_buffer+0x10>
    con_output_buffer.buffer[con_output_buffer.index] = 0x00;
ffffffff80001937:	48 8b 15 02 9e 00 00 	mov    0x9e02(%rip),%rdx        # ffffffff8000b740 <con_output_buffer>
ffffffff8000193e:	c6 44 02 01 00       	movb   $0x0,0x1(%rdx,%rax,1)
    return;
ffffffff80001943:	c3                   	retq   
ffffffff80001944:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000194b:	00 00 00 00 
ffffffff8000194f:	90                   	nop

ffffffff80001950 <putchar>:
    switch(c)
ffffffff80001950:	40 80 ff 0a          	cmp    $0xa,%dil
ffffffff80001954:	0f 84 28 01 00 00    	je     ffffffff80001a82 <putchar+0x132>
ffffffff8000195a:	40 80 ff 0d          	cmp    $0xd,%dil
ffffffff8000195e:	0f 84 ed 00 00 00    	je     ffffffff80001a51 <putchar+0x101>
ffffffff80001964:	40 80 ff 09          	cmp    $0x9,%dil
ffffffff80001968:	0f 84 be 00 00 00    	je     ffffffff80001a2c <putchar+0xdc>
{
ffffffff8000196e:	41 57                	push   %r15
ffffffff80001970:	41 56                	push   %r14
ffffffff80001972:	89 f8                	mov    %edi,%eax
ffffffff80001974:	41 55                	push   %r13
ffffffff80001976:	41 54                	push   %r12
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001978:	48 c1 e0 04          	shl    $0x4,%rax
{
ffffffff8000197c:	55                   	push   %rbp
ffffffff8000197d:	53                   	push   %rbx
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff8000197e:	25 f0 0f 00 00       	and    $0xff0,%eax
ffffffff80001983:	4c 8d a8 a4 71 00 80 	lea    -0x7fff8e5c(%rax),%r13
ffffffff8000198a:	48 05 b4 71 00 80    	add    $0xffffffff800071b4,%rax
{
ffffffff80001990:	48 83 ec 18          	sub    $0x18,%rsp
    console_drawchar(c, console_info.cursor_x, console_info.cursor_y, console_info.foreground_color, console_info.background_color);
ffffffff80001994:	8b 0d ee 9d 00 00    	mov    0x9dee(%rip),%ecx        # ffffffff8000b788 <console_info+0x8>
ffffffff8000199a:	0f b7 1d f1 9d 00 00 	movzwl 0x9df1(%rip),%ebx        # ffffffff8000b792 <console_info+0x12>
ffffffff800019a1:	44 8b 25 e4 9d 00 00 	mov    0x9de4(%rip),%r12d        # ffffffff8000b78c <console_info+0xc>
ffffffff800019a8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff800019ad:	89 0c 24             	mov    %ecx,(%rsp)
ffffffff800019b0:	0f b7 0d d9 9d 00 00 	movzwl 0x9dd9(%rip),%ecx        # ffffffff8000b790 <console_info+0x10>
ffffffff800019b7:	8d 69 08             	lea    0x8(%rcx),%ebp
ffffffff800019ba:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
ffffffff800019be:	66 90                	xchg   %ax,%ax
        row = glyph[i];
ffffffff800019c0:	45 0f b6 75 00       	movzbl 0x0(%r13),%r14d
ffffffff800019c5:	44 8b 7c 24 04       	mov    0x4(%rsp),%r15d
ffffffff800019ca:	eb 1d                	jmp    ffffffff800019e9 <putchar+0x99>
ffffffff800019cc:	0f 1f 40 00          	nopl   0x0(%rax)
                fb_putpixel(x+j, y+i, background);
ffffffff800019d0:	44 89 ff             	mov    %r15d,%edi
ffffffff800019d3:	44 89 e2             	mov    %r12d,%edx
ffffffff800019d6:	89 de                	mov    %ebx,%esi
ffffffff800019d8:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff800019dc:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, background);
ffffffff800019df:	e8 8c fe ff ff       	callq  ffffffff80001870 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff800019e4:	44 39 fd             	cmp    %r15d,%ebp
ffffffff800019e7:	74 1e                	je     ffffffff80001a07 <putchar+0xb7>
            if(row & 0x80)
ffffffff800019e9:	45 84 f6             	test   %r14b,%r14b
ffffffff800019ec:	79 e2                	jns    ffffffff800019d0 <putchar+0x80>
                fb_putpixel(x+j, y+i, foreground);
ffffffff800019ee:	8b 14 24             	mov    (%rsp),%edx
ffffffff800019f1:	44 89 ff             	mov    %r15d,%edi
ffffffff800019f4:	89 de                	mov    %ebx,%esi
ffffffff800019f6:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff800019fa:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, foreground);
ffffffff800019fd:	e8 6e fe ff ff       	callq  ffffffff80001870 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001a02:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001a05:	75 e2                	jne    ffffffff800019e9 <putchar+0x99>
ffffffff80001a07:	49 83 c5 01          	add    $0x1,%r13
ffffffff80001a0b:	83 c3 01             	add    $0x1,%ebx
    for (uint32_t i = 0; i < 16; i++)
ffffffff80001a0e:	4c 39 6c 24 08       	cmp    %r13,0x8(%rsp)
ffffffff80001a13:	75 ab                	jne    ffffffff800019c0 <putchar+0x70>
    console_info.cursor_x += 8;
ffffffff80001a15:	66 83 05 73 9d 00 00 	addw   $0x8,0x9d73(%rip)        # ffffffff8000b790 <console_info+0x10>
ffffffff80001a1c:	08 
}
ffffffff80001a1d:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001a21:	5b                   	pop    %rbx
ffffffff80001a22:	5d                   	pop    %rbp
ffffffff80001a23:	41 5c                	pop    %r12
ffffffff80001a25:	41 5d                	pop    %r13
ffffffff80001a27:	41 5e                	pop    %r14
ffffffff80001a29:	41 5f                	pop    %r15
ffffffff80001a2b:	c3                   	retq   
            if((console_info.cursor_x += (PSF1_FONT_WIDTH * 4)) < fb_info.width)
ffffffff80001a2c:	0f b7 05 5d 9d 00 00 	movzwl 0x9d5d(%rip),%eax        # ffffffff8000b790 <console_info+0x10>
ffffffff80001a33:	0f b7 15 80 8c 00 00 	movzwl 0x8c80(%rip),%edx        # ffffffff8000a6ba <fb_info+0xa>
ffffffff80001a3a:	8d 48 20             	lea    0x20(%rax),%ecx
ffffffff80001a3d:	66 39 d1             	cmp    %dx,%cx
ffffffff80001a40:	0f 83 4f 01 00 00    	jae    ffffffff80001b95 <putchar+0x245>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001a46:	83 c0 40             	add    $0x40,%eax
ffffffff80001a49:	66 89 05 40 9d 00 00 	mov    %ax,0x9d40(%rip)        # ffffffff8000b790 <console_info+0x10>
                return;
ffffffff80001a50:	c3                   	retq   
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001a51:	0f b7 05 3a 9d 00 00 	movzwl 0x9d3a(%rip),%eax        # ffffffff8000b792 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001a58:	0f b7 15 59 8c 00 00 	movzwl 0x8c59(%rip),%edx        # ffffffff8000a6b8 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001a5f:	31 f6                	xor    %esi,%esi
ffffffff80001a61:	66 89 35 28 9d 00 00 	mov    %si,0x9d28(%rip)        # ffffffff8000b790 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001a68:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001a6b:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001a6e:	66 89 05 1d 9d 00 00 	mov    %ax,0x9d1d(%rip)        # ffffffff8000b792 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001a75:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001a78:	39 c1                	cmp    %eax,%ecx
ffffffff80001a7a:	0f 8e 9d 00 00 00    	jle    ffffffff80001b1d <putchar+0x1cd>
ffffffff80001a80:	f3 c3                	repz retq 
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001a82:	0f b7 05 09 9d 00 00 	movzwl 0x9d09(%rip),%eax        # ffffffff8000b792 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001a89:	0f b7 15 28 8c 00 00 	movzwl 0x8c28(%rip),%edx        # ffffffff8000a6b8 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001a90:	31 ff                	xor    %edi,%edi
ffffffff80001a92:	66 89 3d f7 9c 00 00 	mov    %di,0x9cf7(%rip)        # ffffffff8000b790 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001a99:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001a9c:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001a9f:	66 89 05 ec 9c 00 00 	mov    %ax,0x9cec(%rip)        # ffffffff8000b792 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001aa6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001aa9:	39 c1                	cmp    %eax,%ecx
ffffffff80001aab:	7f d3                	jg     ffffffff80001a80 <putchar+0x130>
    start_index = fb_info.width * 16 * 4;
ffffffff80001aad:	0f b7 05 06 8c 00 00 	movzwl 0x8c06(%rip),%eax        # ffffffff8000a6ba <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001ab4:	4c 8b 05 f5 8b 00 00 	mov    0x8bf5(%rip),%r8        # ffffffff8000a6b0 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001abb:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001abe:	89 c1                	mov    %eax,%ecx
ffffffff80001ac0:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001ac3:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001ac6:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001ac9:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001acc:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001acf:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001ad2:	48 89 c7             	mov    %rax,%rdi
ffffffff80001ad5:	74 20                	je     ffffffff80001af7 <putchar+0x1a7>
ffffffff80001ad7:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001adb:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001adf:	4c 89 c0             	mov    %r8,%rax
ffffffff80001ae2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001ae8:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001aeb:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001aef:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001af2:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001af5:	75 f1                	jne    ffffffff80001ae8 <putchar+0x198>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001af7:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001afb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001afe:	76 80                	jbe    ffffffff80001a80 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001b00:	8b 0d 86 9c 00 00    	mov    0x9c86(%rip),%ecx        # ffffffff8000b78c <console_info+0xc>
ffffffff80001b06:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001b0a:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001b0e:	66 90                	xchg   %ax,%ax
ffffffff80001b10:	89 08                	mov    %ecx,(%rax)
ffffffff80001b12:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001b16:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001b19:	75 f5                	jne    ffffffff80001b10 <putchar+0x1c0>
ffffffff80001b1b:	f3 c3                	repz retq 
    start_index = fb_info.width * 16 * 4;
ffffffff80001b1d:	0f b7 05 96 8b 00 00 	movzwl 0x8b96(%rip),%eax        # ffffffff8000a6ba <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001b24:	4c 8b 05 85 8b 00 00 	mov    0x8b85(%rip),%r8        # ffffffff8000a6b0 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001b2b:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001b2e:	89 c1                	mov    %eax,%ecx
ffffffff80001b30:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001b33:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001b36:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001b39:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001b3c:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001b3f:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001b42:	48 89 c7             	mov    %rax,%rdi
ffffffff80001b45:	74 20                	je     ffffffff80001b67 <putchar+0x217>
ffffffff80001b47:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001b4b:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001b4f:	4c 89 c0             	mov    %r8,%rax
ffffffff80001b52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001b58:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001b5b:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001b5f:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001b62:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001b65:	75 f1                	jne    ffffffff80001b58 <putchar+0x208>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001b67:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001b6b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001b6e:	0f 86 0c ff ff ff    	jbe    ffffffff80001a80 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001b74:	8b 0d 12 9c 00 00    	mov    0x9c12(%rip),%ecx        # ffffffff8000b78c <console_info+0xc>
ffffffff80001b7a:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001b7e:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001b82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001b88:	89 08                	mov    %ecx,(%rax)
ffffffff80001b8a:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001b8e:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001b91:	75 f5                	jne    ffffffff80001b88 <putchar+0x238>
ffffffff80001b93:	f3 c3                	repz retq 
    console_info.cursor_x = 0;
ffffffff80001b95:	31 c9                	xor    %ecx,%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b97:	0f b7 05 f4 9b 00 00 	movzwl 0x9bf4(%rip),%eax        # ffffffff8000b792 <console_info+0x12>
    console_info.cursor_x = 0;
ffffffff80001b9e:	66 89 0d eb 9b 00 00 	mov    %cx,0x9beb(%rip)        # ffffffff8000b790 <console_info+0x10>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001ba5:	0f b7 0d 0c 8b 00 00 	movzwl 0x8b0c(%rip),%ecx        # ffffffff8000a6b8 <fb_info+0x8>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001bac:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001baf:	8d 71 f1             	lea    -0xf(%rcx),%esi
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001bb2:	66 89 05 d9 9b 00 00 	mov    %ax,0x9bd9(%rip)        # ffffffff8000b792 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001bb9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001bbc:	39 c6                	cmp    %eax,%esi
ffffffff80001bbe:	7e 0d                	jle    ffffffff80001bcd <putchar+0x27d>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001bc0:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff80001bc5:	66 89 05 c4 9b 00 00 	mov    %ax,0x9bc4(%rip)        # ffffffff8000b790 <console_info+0x10>
                return;
ffffffff80001bcc:	c3                   	retq   
    start_index = fb_info.width * 16 * 4;
ffffffff80001bcd:	89 d0                	mov    %edx,%eax
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001bcf:	48 8b 3d da 8a 00 00 	mov    0x8ada(%rip),%rdi        # ffffffff8000a6b0 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001bd6:	0f af d1             	imul   %ecx,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001bd9:	c1 e0 06             	shl    $0x6,%eax
ffffffff80001bdc:	48 98                	cltq   
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001bde:	48 63 f2             	movslq %edx,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001be1:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001be4:	48 29 c6             	sub    %rax,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001be7:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001bea:	74 20                	je     ffffffff80001c0c <putchar+0x2bc>
ffffffff80001bec:	4c 8d 0c b7          	lea    (%rdi,%rsi,4),%r9
ffffffff80001bf0:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
ffffffff80001bf7:	00 
ffffffff80001bf8:	48 89 f8             	mov    %rdi,%rax
        base[i] = base[start_index + i];
ffffffff80001bfb:	44 8b 04 01          	mov    (%rcx,%rax,1),%r8d
ffffffff80001bff:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001c03:	44 89 40 fc          	mov    %r8d,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c07:	49 39 c1             	cmp    %rax,%r9
ffffffff80001c0a:	75 ef                	jne    ffffffff80001bfb <putchar+0x2ab>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c0c:	48 8d 46 01          	lea    0x1(%rsi),%rax
ffffffff80001c10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001c13:	76 ab                	jbe    ffffffff80001bc0 <putchar+0x270>
        base[i] = console_info.background_color;
ffffffff80001c15:	8b 0d 71 9b 00 00    	mov    0x9b71(%rip),%ecx        # ffffffff8000b78c <console_info+0xc>
ffffffff80001c1b:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
ffffffff80001c1f:	48 8d 14 97          	lea    (%rdi,%rdx,4),%rdx
ffffffff80001c23:	89 08                	mov    %ecx,(%rax)
ffffffff80001c25:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c29:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001c2c:	75 f5                	jne    ffffffff80001c23 <putchar+0x2d3>
ffffffff80001c2e:	eb 90                	jmp    ffffffff80001bc0 <putchar+0x270>

ffffffff80001c30 <console_init>:
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001c30:	0f b7 05 81 8a 00 00 	movzwl 0x8a81(%rip),%eax        # ffffffff8000a6b8 <fb_info+0x8>
    uint64_t index = y * fb_info.width;
ffffffff80001c37:	0f b7 3d 7c 8a 00 00 	movzwl 0x8a7c(%rip),%edi        # ffffffff8000a6ba <fb_info+0xa>
    console_info.font = (struct PSF1_FONT*)&_binary_zapl16_psf_start;
ffffffff80001c3e:	48 c7 05 4f 9b 00 00 	movq   $0xffffffff800071a0,0x9b4f(%rip)        # ffffffff8000b798 <console_info+0x18>
ffffffff80001c45:	a0 71 00 80 
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff80001c49:	c7 05 35 9b 00 00 ff 	movl   $0xffffffff,0x9b35(%rip)        # ffffffff8000b788 <console_info+0x8>
ffffffff80001c50:	ff ff ff 
    console_info.background_color = FB_COLOR_BLACK;
ffffffff80001c53:	c7 05 2f 9b 00 00 00 	movl   $0xff000000,0x9b2f(%rip)        # ffffffff8000b78c <console_info+0xc>
ffffffff80001c5a:	00 00 ff 
    console_info.cursor_x = 0;
ffffffff80001c5d:	c7 05 29 9b 00 00 00 	movl   $0x0,0x9b29(%rip)        # ffffffff8000b790 <console_info+0x10>
ffffffff80001c64:	00 00 00 
    con_output_buffer.buffer = console_buffer;
ffffffff80001c67:	48 c7 05 ce 9a 00 00 	movq   $0xffffffff8000a740,0x9ace(%rip)        # ffffffff8000b740 <con_output_buffer>
ffffffff80001c6e:	40 a7 00 80 
    con_output_buffer.buffer_size = sizeof(console_buffer);
ffffffff80001c72:	48 c7 05 cb 9a 00 00 	movq   $0x1000,0x9acb(%rip)        # ffffffff8000b748 <con_output_buffer+0x8>
ffffffff80001c79:	00 10 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001c7d:	89 c2                	mov    %eax,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001c7f:	66 c1 e8 02          	shr    $0x2,%ax
    con_output_buffer.index = 0;
ffffffff80001c83:	48 c7 05 c2 9a 00 00 	movq   $0x0,0x9ac2(%rip)        # ffffffff8000b750 <con_output_buffer+0x10>
ffffffff80001c8a:	00 00 00 00 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001c8e:	0f b7 c0             	movzwl %ax,%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001c91:	66 c1 ea 04          	shr    $0x4,%dx
    con_input_buffer.buffer = cmd_buffer;
ffffffff80001c95:	48 c7 05 c0 9a 00 00 	movq   $0xffffffff8000b7c0,0x9ac0(%rip)        # ffffffff8000b760 <con_input_buffer>
ffffffff80001c9c:	c0 b7 00 80 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001ca0:	8d 04 40             	lea    (%rax,%rax,2),%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001ca3:	0f b7 d2             	movzwl %dx,%edx
    con_input_buffer.buffer_size = sizeof(cmd_buffer);
ffffffff80001ca6:	48 c7 05 b7 9a 00 00 	movq   $0x100,0x9ab7(%rip)        # ffffffff8000b768 <con_input_buffer+0x8>
ffffffff80001cad:	00 01 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001cb1:	89 15 cd 9a 00 00    	mov    %edx,0x9acd(%rip)        # ffffffff8000b784 <console_info+0x4>
    uint64_t index = y * fb_info.width;
ffffffff80001cb7:	48 89 f9             	mov    %rdi,%rcx
    console_draw_hline(console_info.start_pos, FB_COLOR_YELLOW);
ffffffff80001cba:	48 63 d0             	movslq %eax,%rdx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001cbd:	89 05 bd 9a 00 00    	mov    %eax,0x9abd(%rip)        # ffffffff8000b780 <console_info>
    uint64_t index = y * fb_info.width;
ffffffff80001cc3:	48 0f af d7          	imul   %rdi,%rdx
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001cc7:	66 85 ff             	test   %di,%di
ffffffff80001cca:	74 53                	je     ffffffff80001d1f <console_init+0xef>
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001ccc:	48 8b 35 dd 89 00 00 	mov    0x89dd(%rip),%rsi        # ffffffff8000a6b0 <fb_info>
ffffffff80001cd3:	83 e9 01             	sub    $0x1,%ecx
ffffffff80001cd6:	4c 8d 46 04          	lea    0x4(%rsi),%r8
ffffffff80001cda:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001cde:	48 01 ca             	add    %rcx,%rdx
ffffffff80001ce1:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001ce5:	0f 1f 00             	nopl   (%rax)
ffffffff80001ce8:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001cee:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001cf2:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001cf5:	75 f1                	jne    ffffffff80001ce8 <console_init+0xb8>
    console_draw_hline(console_info.start_pos + 1, FB_COLOR_YELLOW);
ffffffff80001cf7:	8b 05 83 9a 00 00    	mov    0x9a83(%rip),%eax        # ffffffff8000b780 <console_info>
ffffffff80001cfd:	8d 50 01             	lea    0x1(%rax),%edx
    uint64_t index = y * fb_info.width;
ffffffff80001d00:	48 0f af d7          	imul   %rdi,%rdx
ffffffff80001d04:	48 01 d1             	add    %rdx,%rcx
ffffffff80001d07:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001d0b:	49 8d 14 88          	lea    (%r8,%rcx,4),%rdx
ffffffff80001d0f:	90                   	nop
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001d10:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001d16:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001d1a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001d1d:	75 f1                	jne    ffffffff80001d10 <console_init+0xe0>
    kbd_set_target(console_input);
ffffffff80001d1f:	48 c7 c7 f0 18 00 80 	mov    $0xffffffff800018f0,%rdi
ffffffff80001d26:	e9 75 02 00 00       	jmpq   ffffffff80001fa0 <kbd_set_target>
ffffffff80001d2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001d30 <console_exec>:
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001d30:	0f b7 05 83 89 00 00 	movzwl 0x8983(%rip),%eax        # ffffffff8000a6ba <fb_info+0xa>
ffffffff80001d37:	8b 15 43 9a 00 00    	mov    0x9a43(%rip),%edx        # ffffffff8000b780 <console_info>
ffffffff80001d3d:	8d 34 42             	lea    (%rdx,%rax,2),%esi
ffffffff80001d40:	0f b7 15 71 89 00 00 	movzwl 0x8971(%rip),%edx        # ffffffff8000a6b8 <fb_info+0x8>
ffffffff80001d47:	0f af d0             	imul   %eax,%edx
ffffffff80001d4a:	39 d6                	cmp    %edx,%esi
ffffffff80001d4c:	7d 2d                	jge    ffffffff80001d7b <console_exec+0x4b>
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff80001d4e:	48 8b 3d 5b 89 00 00 	mov    0x895b(%rip),%rdi        # ffffffff8000a6b0 <fb_info>
ffffffff80001d55:	83 ea 01             	sub    $0x1,%edx
ffffffff80001d58:	4c 63 c6             	movslq %esi,%r8
ffffffff80001d5b:	29 f2                	sub    %esi,%edx
ffffffff80001d5d:	8b 0d 29 9a 00 00    	mov    0x9a29(%rip),%ecx        # ffffffff8000b78c <console_info+0xc>
ffffffff80001d63:	4c 01 c2             	add    %r8,%rdx
ffffffff80001d66:	4a 8d 04 87          	lea    (%rdi,%r8,4),%rax
ffffffff80001d6a:	48 8d 54 97 04       	lea    0x4(%rdi,%rdx,4),%rdx
ffffffff80001d6f:	90                   	nop
ffffffff80001d70:	89 08                	mov    %ecx,(%rax)
ffffffff80001d72:	48 83 c0 04          	add    $0x4,%rax
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001d76:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001d79:	75 f5                	jne    ffffffff80001d70 <console_exec+0x40>
}
ffffffff80001d7b:	f3 c3                	repz retq 
ffffffff80001d7d:	0f 1f 00             	nopl   (%rax)

ffffffff80001d80 <stty_sendcmd>:
#include "serial.h"



void stty_sendcmd(uint16_t cmd)
{
ffffffff80001d80:	48 83 ec 08          	sub    $0x8,%rsp
    serial_write(SERIAL_PORT1, 0x1B);
ffffffff80001d84:	be 1b 00 00 00       	mov    $0x1b,%esi
ffffffff80001d89:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001d8e:	e8 7d 01 00 00       	callq  ffffffff80001f10 <serial_write>
    serial_write(SERIAL_PORT1, 0x5B);
ffffffff80001d93:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff80001d98:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001d9d:	e8 6e 01 00 00       	callq  ffffffff80001f10 <serial_write>
    serial_write(SERIAL_PORT1, '[');
ffffffff80001da2:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff80001da7:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001dac:	e8 5f 01 00 00       	callq  ffffffff80001f10 <serial_write>
    serial_write(SERIAL_PORT1, 'H');
ffffffff80001db1:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80001db6:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001dbb:	e8 50 01 00 00       	callq  ffffffff80001f10 <serial_write>
    serial_write(SERIAL_PORT1, '~');
ffffffff80001dc0:	be 7e 00 00 00       	mov    $0x7e,%esi
ffffffff80001dc5:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001dca:	48 83 c4 08          	add    $0x8,%rsp
    serial_write(SERIAL_PORT1, '~');
ffffffff80001dce:	e9 3d 01 00 00       	jmpq   ffffffff80001f10 <serial_write>
ffffffff80001dd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001dda:	00 00 00 
ffffffff80001ddd:	0f 1f 00             	nopl   (%rax)

ffffffff80001de0 <serial_init>:
#include "../../io/io.h"

char serial_buffer[256];

uint64_t serial_init(uint16_t port)
{
ffffffff80001de0:	41 55                	push   %r13
ffffffff80001de2:	41 54                	push   %r12
    outb(port + 1, 0x00);
ffffffff80001de4:	44 8d 67 01          	lea    0x1(%rdi),%r12d
{
ffffffff80001de8:	55                   	push   %rbp
ffffffff80001de9:	53                   	push   %rbx
ffffffff80001dea:	89 fb                	mov    %edi,%ebx
    outb(port + 3, 0x80);
ffffffff80001dec:	8d 6b 03             	lea    0x3(%rbx),%ebp
    outb(port + 1, 0x00);
ffffffff80001def:	45 0f b7 e4          	movzwl %r12w,%r12d
ffffffff80001df3:	31 f6                	xor    %esi,%esi
{
ffffffff80001df5:	48 83 ec 08          	sub    $0x8,%rsp
    outb(port + 1, 0x00);
ffffffff80001df9:	44 89 e7             	mov    %r12d,%edi
    outb(port + 0, 0x00);
ffffffff80001dfc:	44 0f b7 eb          	movzwl %bx,%r13d
    outb(port + 3, 0x80);
ffffffff80001e00:	0f b7 ed             	movzwl %bp,%ebp
    outb(port + 1, 0x00);
ffffffff80001e03:	e8 e8 e5 ff ff       	callq  ffffffff800003f0 <outb>
    outb(port + 3, 0x80);
ffffffff80001e08:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80001e0d:	89 ef                	mov    %ebp,%edi
ffffffff80001e0f:	e8 dc e5 ff ff       	callq  ffffffff800003f0 <outb>
    outb(port + 0, 0x00);
ffffffff80001e14:	31 f6                	xor    %esi,%esi
ffffffff80001e16:	44 89 ef             	mov    %r13d,%edi
ffffffff80001e19:	e8 d2 e5 ff ff       	callq  ffffffff800003f0 <outb>
    outb(port + 1, 0x00);
ffffffff80001e1e:	31 f6                	xor    %esi,%esi
ffffffff80001e20:	44 89 e7             	mov    %r12d,%edi
ffffffff80001e23:	e8 c8 e5 ff ff       	callq  ffffffff800003f0 <outb>
    outb(port + 3, 0x03);
ffffffff80001e28:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80001e2d:	89 ef                	mov    %ebp,%edi
ffffffff80001e2f:	e8 bc e5 ff ff       	callq  ffffffff800003f0 <outb>
    outb(port + 2, 0xC7);
ffffffff80001e34:	8d 7b 02             	lea    0x2(%rbx),%edi
    outb(port + 4, 0x0B);
ffffffff80001e37:	83 c3 04             	add    $0x4,%ebx
    outb(port + 2, 0xC7);
ffffffff80001e3a:	be c7 00 00 00       	mov    $0xc7,%esi
    outb(port + 4, 0x0B);
ffffffff80001e3f:	0f b7 db             	movzwl %bx,%ebx
    outb(port + 2, 0xC7);
ffffffff80001e42:	0f b7 ff             	movzwl %di,%edi
ffffffff80001e45:	e8 a6 e5 ff ff       	callq  ffffffff800003f0 <outb>
    outb(port + 4, 0x0B);
ffffffff80001e4a:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80001e4f:	89 df                	mov    %ebx,%edi
ffffffff80001e51:	e8 9a e5 ff ff       	callq  ffffffff800003f0 <outb>

    if(inb(port + 0) != 0xAE)
ffffffff80001e56:	44 89 ef             	mov    %r13d,%edi
ffffffff80001e59:	e8 a2 e5 ff ff       	callq  ffffffff80000400 <inb>
ffffffff80001e5e:	3c ae                	cmp    $0xae,%al
ffffffff80001e60:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001e65:	74 11                	je     ffffffff80001e78 <serial_init+0x98>
        return 1;
    }

    outb(port + 4, 0x0F);
    return 0;
}
ffffffff80001e67:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80001e6b:	48 89 d0             	mov    %rdx,%rax
ffffffff80001e6e:	5b                   	pop    %rbx
ffffffff80001e6f:	5d                   	pop    %rbp
ffffffff80001e70:	41 5c                	pop    %r12
ffffffff80001e72:	41 5d                	pop    %r13
ffffffff80001e74:	c3                   	retq   
ffffffff80001e75:	0f 1f 00             	nopl   (%rax)
    outb(port + 4, 0x0F);
ffffffff80001e78:	89 df                	mov    %ebx,%edi
ffffffff80001e7a:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80001e7f:	e8 6c e5 ff ff       	callq  ffffffff800003f0 <outb>
}
ffffffff80001e84:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff80001e88:	31 d2                	xor    %edx,%edx
}
ffffffff80001e8a:	5b                   	pop    %rbx
ffffffff80001e8b:	48 89 d0             	mov    %rdx,%rax
ffffffff80001e8e:	5d                   	pop    %rbp
ffffffff80001e8f:	41 5c                	pop    %r12
ffffffff80001e91:	41 5d                	pop    %r13
ffffffff80001e93:	c3                   	retq   
ffffffff80001e94:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001e9b:	00 00 00 00 
ffffffff80001e9f:	90                   	nop

ffffffff80001ea0 <serial_received>:

uint64_t serial_received(uint16_t port)
{
    return inb(port + 5) & 1;
ffffffff80001ea0:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001ea3:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001ea7:	0f b7 ff             	movzwl %di,%edi
ffffffff80001eaa:	e8 51 e5 ff ff       	callq  ffffffff80000400 <inb>
}
ffffffff80001eaf:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001eb3:	83 e0 01             	and    $0x1,%eax
}
ffffffff80001eb6:	c3                   	retq   
ffffffff80001eb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80001ebe:	00 00 

ffffffff80001ec0 <serial_read>:

uint8_t serial_read(uint16_t port)
{
ffffffff80001ec0:	55                   	push   %rbp
ffffffff80001ec1:	53                   	push   %rbx
ffffffff80001ec2:	0f b7 ef             	movzwl %di,%ebp
ffffffff80001ec5:	83 c7 05             	add    $0x5,%edi
ffffffff80001ec8:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80001ecc:	0f b7 df             	movzwl %di,%ebx
ffffffff80001ecf:	90                   	nop
    return inb(port + 5) & 1;
ffffffff80001ed0:	89 df                	mov    %ebx,%edi
ffffffff80001ed2:	e8 29 e5 ff ff       	callq  ffffffff80000400 <inb>
    while(serial_received(port) == 0);
ffffffff80001ed7:	a8 01                	test   $0x1,%al
ffffffff80001ed9:	74 f5                	je     ffffffff80001ed0 <serial_read+0x10>

    return inb(port);
}
ffffffff80001edb:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port);
ffffffff80001edf:	89 ef                	mov    %ebp,%edi
}
ffffffff80001ee1:	5b                   	pop    %rbx
ffffffff80001ee2:	5d                   	pop    %rbp
    return inb(port);
ffffffff80001ee3:	e9 18 e5 ff ff       	jmpq   ffffffff80000400 <inb>
ffffffff80001ee8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001eef:	00 

ffffffff80001ef0 <serial_is_tx_empty>:

uint64_t serial_is_tx_empty(uint16_t port)
{
    return inb(port + 5) & 0x20;
ffffffff80001ef0:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001ef3:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80001ef7:	0f b7 ff             	movzwl %di,%edi
ffffffff80001efa:	e8 01 e5 ff ff       	callq  ffffffff80000400 <inb>
ffffffff80001eff:	83 e0 20             	and    $0x20,%eax
}
ffffffff80001f02:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80001f06:	0f b6 c0             	movzbl %al,%eax
}
ffffffff80001f09:	c3                   	retq   
ffffffff80001f0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80001f10 <serial_write>:

void serial_write(uint16_t port, uint8_t data)
{
ffffffff80001f10:	41 54                	push   %r12
ffffffff80001f12:	44 0f b7 e7          	movzwl %di,%r12d
ffffffff80001f16:	83 c7 05             	add    $0x5,%edi
ffffffff80001f19:	55                   	push   %rbp
ffffffff80001f1a:	89 f5                	mov    %esi,%ebp
ffffffff80001f1c:	53                   	push   %rbx
ffffffff80001f1d:	0f b7 df             	movzwl %di,%ebx
    return inb(port + 5) & 0x20;
ffffffff80001f20:	89 df                	mov    %ebx,%edi
ffffffff80001f22:	e8 d9 e4 ff ff       	callq  ffffffff80000400 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80001f27:	a8 20                	test   $0x20,%al
ffffffff80001f29:	74 f5                	je     ffffffff80001f20 <serial_write+0x10>
    outb(port, data);
}
ffffffff80001f2b:	5b                   	pop    %rbx
    outb(port, data);
ffffffff80001f2c:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80001f30:	44 89 e7             	mov    %r12d,%edi
}
ffffffff80001f33:	5d                   	pop    %rbp
ffffffff80001f34:	41 5c                	pop    %r12
    outb(port, data);
ffffffff80001f36:	e9 b5 e4 ff ff       	jmpq   ffffffff800003f0 <outb>
ffffffff80001f3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001f40 <serial_write_str>:

void serial_write_str(uint16_t port, char* data)
{
    uint8_t i = 0;
    while(data[i] != 0)
ffffffff80001f40:	0f b6 06             	movzbl (%rsi),%eax
ffffffff80001f43:	84 c0                	test   %al,%al
ffffffff80001f45:	74 39                	je     ffffffff80001f80 <serial_write_str+0x40>
{
ffffffff80001f47:	41 54                	push   %r12
ffffffff80001f49:	49 89 f4             	mov    %rsi,%r12
ffffffff80001f4c:	55                   	push   %rbp
ffffffff80001f4d:	0f b7 ef             	movzwl %di,%ebp
ffffffff80001f50:	53                   	push   %rbx
    uint8_t i = 0;
ffffffff80001f51:	31 db                	xor    %ebx,%ebx
ffffffff80001f53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        serial_write(port, data[i]);
ffffffff80001f58:	0f b6 f0             	movzbl %al,%esi
        i++;
ffffffff80001f5b:	83 c3 01             	add    $0x1,%ebx
        serial_write(port, data[i]);
ffffffff80001f5e:	89 ef                	mov    %ebp,%edi
ffffffff80001f60:	e8 ab ff ff ff       	callq  ffffffff80001f10 <serial_write>
    while(data[i] != 0)
ffffffff80001f65:	0f b6 c3             	movzbl %bl,%eax
ffffffff80001f68:	41 0f b6 04 04       	movzbl (%r12,%rax,1),%eax
ffffffff80001f6d:	84 c0                	test   %al,%al
ffffffff80001f6f:	75 e7                	jne    ffffffff80001f58 <serial_write_str+0x18>
    }
ffffffff80001f71:	5b                   	pop    %rbx
ffffffff80001f72:	5d                   	pop    %rbp
ffffffff80001f73:	41 5c                	pop    %r12
ffffffff80001f75:	c3                   	retq   
ffffffff80001f76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001f7d:	00 00 00 
ffffffff80001f80:	f3 c3                	repz retq 
ffffffff80001f82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001f89:	00 00 00 
ffffffff80001f8c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001f90 <kbd_init>:


void kbd_init()
{

}
ffffffff80001f90:	f3 c3                	repz retq 
ffffffff80001f92:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001f99:	00 00 00 00 
ffffffff80001f9d:	0f 1f 00             	nopl   (%rax)

ffffffff80001fa0 <kbd_set_target>:

void kbd_set_target(void* handler)
{
    kbd_handler = handler;
ffffffff80001fa0:	48 89 3d a1 fb 00 00 	mov    %rdi,0xfba1(%rip)        # ffffffff80011b48 <kbd_handler>
    kbd_active = 1;
ffffffff80001fa7:	c6 05 a2 fb 00 00 01 	movb   $0x1,0xfba2(%rip)        # ffffffff80011b50 <kbd_active>
}
ffffffff80001fae:	c3                   	retq   
ffffffff80001faf:	90                   	nop

ffffffff80001fb0 <kbd_translate>:

uint8_t kbd_translate(uint8_t scancode, uint8_t uppercase)
{
    if(scancode > 58) return 0;
ffffffff80001fb0:	31 c0                	xor    %eax,%eax
ffffffff80001fb2:	40 80 ff 3a          	cmp    $0x3a,%dil
ffffffff80001fb6:	77 14                	ja     ffffffff80001fcc <kbd_translate+0x1c>
ffffffff80001fb8:	40 0f b6 ff          	movzbl %dil,%edi

    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80001fbc:	40 84 f6             	test   %sil,%sil
ffffffff80001fbf:	0f b6 87 a0 4d 00 80 	movzbl -0x7fffb260(%rdi),%eax
ffffffff80001fc6:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80001fc9:	0f 45 c2             	cmovne %edx,%eax

    return kbd_table[scancode];
}
ffffffff80001fcc:	f3 c3                	repz retq 
ffffffff80001fce:	66 90                	xchg   %ax,%ax

ffffffff80001fd0 <kbd_handle>:
void kbd_handle()
{
    uint8_t data;
    KEY_INFO_t key_info;

    if(!kbd_active) return;
ffffffff80001fd0:	80 3d 79 fb 00 00 00 	cmpb   $0x0,0xfb79(%rip)        # ffffffff80011b50 <kbd_active>
ffffffff80001fd7:	75 07                	jne    ffffffff80001fe0 <kbd_handle+0x10>
ffffffff80001fd9:	f3 c3                	repz retq 
ffffffff80001fdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
{
ffffffff80001fe0:	48 83 ec 08          	sub    $0x8,%rsp

    data = inb(0x60);
ffffffff80001fe4:	bf 60 00 00 00       	mov    $0x60,%edi
ffffffff80001fe9:	e8 12 e4 ff ff       	callq  ffffffff80000400 <inb>

    uint8_t buffer[20];

    switch(data)
ffffffff80001fee:	3c 36                	cmp    $0x36,%al
ffffffff80001ff0:	74 36                	je     ffffffff80002028 <kbd_handle+0x58>
ffffffff80001ff2:	77 1c                	ja     ffffffff80002010 <kbd_handle+0x40>
ffffffff80001ff4:	3c 01                	cmp    $0x1,%al
ffffffff80001ff6:	0f 84 84 00 00 00    	je     ffffffff80002080 <kbd_handle+0xb0>
ffffffff80001ffc:	3c 2a                	cmp    $0x2a,%al
ffffffff80001ffe:	75 48                	jne    ffffffff80002048 <kbd_handle+0x78>
    {
        case KBD_LEFT_SHIFT:
            lshift_status = 1;
ffffffff80002000:	c6 05 d9 9a 00 00 01 	movb   $0x1,0x9ad9(%rip)        # ffffffff8000bae0 <lshift_status>
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
    key_info.scancode = data;

    kbd_handler(key_info);

ffffffff80002007:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000200b:	c3                   	retq   
ffffffff8000200c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(data)
ffffffff80002010:	3c aa                	cmp    $0xaa,%al
ffffffff80002012:	74 24                	je     ffffffff80002038 <kbd_handle+0x68>
ffffffff80002014:	3c b6                	cmp    $0xb6,%al
ffffffff80002016:	75 30                	jne    ffffffff80002048 <kbd_handle+0x78>
            rshift_status = 0;
ffffffff80002018:	c6 05 a9 99 00 00 00 	movb   $0x0,0x99a9(%rip)        # ffffffff8000b9c8 <rshift_status>
            return;
ffffffff8000201f:	eb e6                	jmp    ffffffff80002007 <kbd_handle+0x37>
ffffffff80002021:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            rshift_status = 1;
ffffffff80002028:	c6 05 99 99 00 00 01 	movb   $0x1,0x9999(%rip)        # ffffffff8000b9c8 <rshift_status>
            return;
ffffffff8000202f:	eb d6                	jmp    ffffffff80002007 <kbd_handle+0x37>
ffffffff80002031:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            lshift_status = 0;
ffffffff80002038:	c6 05 a1 9a 00 00 00 	movb   $0x0,0x9aa1(%rip)        # ffffffff8000bae0 <lshift_status>
            return;
ffffffff8000203f:	eb c6                	jmp    ffffffff80002007 <kbd_handle+0x37>
ffffffff80002041:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(scancode > 58) return 0;
ffffffff80002048:	31 d2                	xor    %edx,%edx
ffffffff8000204a:	3c 3a                	cmp    $0x3a,%al
ffffffff8000204c:	77 1e                	ja     ffffffff8000206c <kbd_handle+0x9c>
ffffffff8000204e:	0f b6 d0             	movzbl %al,%edx
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80002051:	0f b6 35 88 9a 00 00 	movzbl 0x9a88(%rip),%esi        # ffffffff8000bae0 <lshift_status>
ffffffff80002058:	0f b6 92 a0 4d 00 80 	movzbl -0x7fffb260(%rdx),%edx
ffffffff8000205f:	40 0a 35 62 99 00 00 	or     0x9962(%rip),%sil        # ffffffff8000b9c8 <rshift_status>
ffffffff80002066:	8d 4a e0             	lea    -0x20(%rdx),%ecx
ffffffff80002069:	0f 45 d1             	cmovne %ecx,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff8000206c:	31 c9                	xor    %ecx,%ecx
ffffffff8000206e:	48 83 c4 08          	add    $0x8,%rsp
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80002072:	88 d5                	mov    %dl,%ch
    key_info.scancode = data;
ffffffff80002074:	88 c1                	mov    %al,%cl
    kbd_handler(key_info);
ffffffff80002076:	89 cf                	mov    %ecx,%edi
ffffffff80002078:	ff 25 ca fa 00 00    	jmpq   *0xfaca(%rip)        # ffffffff80011b48 <kbd_handler>
ffffffff8000207e:	66 90                	xchg   %ax,%ax
            printf("%d\n", pit_ticks);
ffffffff80002080:	48 8b 35 d9 fb 00 00 	mov    0xfbd9(%rip),%rsi        # ffffffff80011c60 <pit_ticks>
ffffffff80002087:	48 c7 c7 67 4c 00 80 	mov    $0xffffffff80004c67,%rdi
ffffffff8000208e:	31 c0                	xor    %eax,%eax
ffffffff80002090:	48 83 c4 08          	add    $0x8,%rsp
            printf("%d\n", pit_ticks);
ffffffff80002094:	e9 a7 13 00 00       	jmpq   ffffffff80003440 <printf_>
ffffffff80002099:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800020a0 <cpu_init>:

void cpu_init()
{
    uint64_t a,b,c,d;
    __cpuid(0,a,b,c,d);
ffffffff800020a0:	f3 c3                	repz retq 
ffffffff800020a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800020a9:	00 00 00 
ffffffff800020ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800020b0 <acpi_init>:
    struct RSDP20Descriptor* rsdp;

}ACPI_Info;

void acpi_init()
{
ffffffff800020b0:	48 83 ec 18          	sub    $0x18,%rsp
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff800020b4:	48 8b 05 cd 85 00 00 	mov    0x85cd(%rip),%rax        # ffffffff8000a688 <boot_info+0x28>
    
    uint8_t test[8] = {'R', 'S', 'P', ' ', 'P', 'T', 'R', ' '};
ffffffff800020bb:	48 bf 52 53 50 20 50 	movabs $0x2052545020505352,%rdi
ffffffff800020c2:	54 52 20 
ffffffff800020c5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff800020ca:	31 d2                	xor    %edx,%edx
ffffffff800020cc:	b9 52 00 00 00       	mov    $0x52,%ecx
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff800020d1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800020d5:	48 89 05 0c 9a 00 00 	mov    %rax,0x9a0c(%rip)        # ffffffff8000bae8 <ACPI_Info>
    for(uint32_t i = 0; i < 8; i++)
    {
        if(test[i] == ACPI_Info.rsdp->header.signature[i]) 
ffffffff800020dc:	38 0c 10             	cmp    %cl,(%rax,%rdx,1)
ffffffff800020df:	74 0f                	je     ffffffff800020f0 <acpi_init+0x40>
            return;
    }

    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
    
ffffffff800020e1:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800020e5:	c3                   	retq   
ffffffff800020e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800020ed:	00 00 00 
ffffffff800020f0:	48 83 c2 01          	add    $0x1,%rdx
    for(uint32_t i = 0; i < 8; i++)
ffffffff800020f4:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff800020f8:	75 16                	jne    ffffffff80002110 <acpi_init+0x60>
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff800020fa:	0f b6 70 0f          	movzbl 0xf(%rax),%esi
ffffffff800020fe:	48 c7 c7 e0 4d 00 80 	mov    $0xffffffff80004de0,%rdi
ffffffff80002105:	31 c0                	xor    %eax,%eax
ffffffff80002107:	48 83 c4 18          	add    $0x18,%rsp
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff8000210b:	e9 30 13 00 00       	jmpq   ffffffff80003440 <printf_>
ffffffff80002110:	0f b6 4c 14 08       	movzbl 0x8(%rsp,%rdx,1),%ecx
ffffffff80002115:	eb c5                	jmp    ffffffff800020dc <acpi_init+0x2c>
ffffffff80002117:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000211e:	00 00 

ffffffff80002120 <pic_EOI>:

uint64_t ticks;

void pic_EOI(uint8_t IRQ)
{
    if(IRQ >= 8)
ffffffff80002120:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80002124:	77 12                	ja     ffffffff80002138 <pic_EOI+0x18>
    {
        outb(PIC2_CMD, PIC_EOI);
    }
    
    outb(PIC1_CMD, PIC_EOI);
ffffffff80002126:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000212b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002130:	e9 bb e2 ff ff       	jmpq   ffffffff800003f0 <outb>
ffffffff80002135:	0f 1f 00             	nopl   (%rax)
{
ffffffff80002138:	48 83 ec 08          	sub    $0x8,%rsp
        outb(PIC2_CMD, PIC_EOI);
ffffffff8000213c:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80002141:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80002146:	e8 a5 e2 ff ff       	callq  ffffffff800003f0 <outb>
    outb(PIC1_CMD, PIC_EOI);
ffffffff8000214b:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80002150:	bf 20 00 00 00       	mov    $0x20,%edi
}
ffffffff80002155:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_CMD, PIC_EOI);
ffffffff80002159:	e9 92 e2 ff ff       	jmpq   ffffffff800003f0 <outb>
ffffffff8000215e:	66 90                	xchg   %ax,%ax

ffffffff80002160 <pic_set_mask>:

void pic_set_mask(uint8_t IRQ)
{
ffffffff80002160:	55                   	push   %rbp
ffffffff80002161:	53                   	push   %rbx
ffffffff80002162:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80002166:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff8000216a:	76 34                	jbe    ffffffff800021a0 <pic_set_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff8000216c:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff8000216f:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) | (1 << IRQ);
ffffffff80002174:	89 df                	mov    %ebx,%edi
ffffffff80002176:	e8 85 e2 ff ff       	callq  ffffffff80000400 <inb>
    outb(port, value);
}
ffffffff8000217b:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) | (1 << IRQ);
ffffffff8000217f:	89 e9                	mov    %ebp,%ecx
ffffffff80002181:	be 01 00 00 00       	mov    $0x1,%esi
    outb(port, value);
ffffffff80002186:	89 df                	mov    %ebx,%edi
    value = inb(port) | (1 << IRQ);
ffffffff80002188:	d3 e6                	shl    %cl,%esi
}
ffffffff8000218a:	5b                   	pop    %rbx
ffffffff8000218b:	5d                   	pop    %rbp
    value = inb(port) | (1 << IRQ);
ffffffff8000218c:	09 f0                	or     %esi,%eax
    outb(port, value);
ffffffff8000218e:	0f b6 f0             	movzbl %al,%esi
ffffffff80002191:	e9 5a e2 ff ff       	jmpq   ffffffff800003f0 <outb>
ffffffff80002196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000219d:	00 00 00 
ffffffff800021a0:	89 fd                	mov    %edi,%ebp
ffffffff800021a2:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff800021a7:	eb cb                	jmp    ffffffff80002174 <pic_set_mask+0x14>
ffffffff800021a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800021b0 <pic_clear_mask>:

void pic_clear_mask(uint8_t IRQ)
{
ffffffff800021b0:	55                   	push   %rbp
ffffffff800021b1:	53                   	push   %rbx
ffffffff800021b2:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff800021b6:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff800021ba:	76 34                	jbe    ffffffff800021f0 <pic_clear_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff800021bc:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff800021bf:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) & ~(1 << IRQ);
ffffffff800021c4:	89 df                	mov    %ebx,%edi
ffffffff800021c6:	e8 35 e2 ff ff       	callq  ffffffff80000400 <inb>
    outb(port, value);
}
ffffffff800021cb:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) & ~(1 << IRQ);
ffffffff800021cf:	89 e9                	mov    %ebp,%ecx
ffffffff800021d1:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    outb(port, value);
ffffffff800021d6:	89 df                	mov    %ebx,%edi
    value = inb(port) & ~(1 << IRQ);
ffffffff800021d8:	d3 c2                	rol    %cl,%edx
}
ffffffff800021da:	5b                   	pop    %rbx
ffffffff800021db:	5d                   	pop    %rbp
    value = inb(port) & ~(1 << IRQ);
ffffffff800021dc:	21 d0                	and    %edx,%eax
    outb(port, value);
ffffffff800021de:	0f b6 f0             	movzbl %al,%esi
ffffffff800021e1:	e9 0a e2 ff ff       	jmpq   ffffffff800003f0 <outb>
ffffffff800021e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800021ed:	00 00 00 
ffffffff800021f0:	89 fd                	mov    %edi,%ebp
ffffffff800021f2:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff800021f7:	eb cb                	jmp    ffffffff800021c4 <pic_clear_mask+0x14>
ffffffff800021f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002200 <pic_disable>:

void pic_disable()
{
ffffffff80002200:	48 83 ec 08          	sub    $0x8,%rsp
    outb(PIC2_DATA, 0xff);
ffffffff80002204:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002209:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000220e:	e8 dd e1 ff ff       	callq  ffffffff800003f0 <outb>
    outb(PIC1_DATA, 0xff);
ffffffff80002213:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002218:	bf 21 00 00 00       	mov    $0x21,%edi
}
ffffffff8000221d:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_DATA, 0xff);
ffffffff80002221:	e9 ca e1 ff ff       	jmpq   ffffffff800003f0 <outb>
ffffffff80002226:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000222d:	00 00 00 

ffffffff80002230 <pic_remap>:

void pic_remap()
{
ffffffff80002230:	55                   	push   %rbp
ffffffff80002231:	53                   	push   %rbx
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80002232:	bf 21 00 00 00       	mov    $0x21,%edi
{
ffffffff80002237:	48 83 ec 08          	sub    $0x8,%rsp
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff8000223b:	e8 c0 e1 ff ff       	callq  ffffffff80000400 <inb>
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80002240:	bf a1 00 00 00       	mov    $0xa1,%edi
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80002245:	89 c5                	mov    %eax,%ebp
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80002247:	e8 b4 e1 ff ff       	callq  ffffffff80000400 <inb>

    outb(PIC1_CMD, 0x11);
ffffffff8000224c:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80002251:	bf 20 00 00 00       	mov    $0x20,%edi
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80002256:	89 c3                	mov    %eax,%ebx
    outb(PIC1_CMD, 0x11);
ffffffff80002258:	e8 93 e1 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff8000225d:	31 c0                	xor    %eax,%eax
ffffffff8000225f:	e8 ac e1 ff ff       	callq  ffffffff80000410 <io_wait>
    outb(PIC2_CMD, 0x11);
ffffffff80002264:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80002269:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8000226e:	e8 7d e1 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff80002273:	31 c0                	xor    %eax,%eax
ffffffff80002275:	e8 96 e1 ff ff       	callq  ffffffff80000410 <io_wait>

    outb(PIC1_DATA, 0x20);
ffffffff8000227a:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000227f:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002284:	e8 67 e1 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff80002289:	31 c0                	xor    %eax,%eax
ffffffff8000228b:	e8 80 e1 ff ff       	callq  ffffffff80000410 <io_wait>
    outb(PIC2_DATA, 0x20);
ffffffff80002290:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80002295:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000229a:	e8 51 e1 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff8000229f:	31 c0                	xor    %eax,%eax
ffffffff800022a1:	e8 6a e1 ff ff       	callq  ffffffff80000410 <io_wait>

    outb(PIC1_DATA, 0x04);
ffffffff800022a6:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff800022ab:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800022b0:	e8 3b e1 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff800022b5:	31 c0                	xor    %eax,%eax
ffffffff800022b7:	e8 54 e1 ff ff       	callq  ffffffff80000410 <io_wait>
    outb(PIC2_DATA, 0x02);
ffffffff800022bc:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff800022c1:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800022c6:	e8 25 e1 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff800022cb:	31 c0                	xor    %eax,%eax
ffffffff800022cd:	e8 3e e1 ff ff       	callq  ffffffff80000410 <io_wait>

    outb(PIC1_DATA, 0x01);
ffffffff800022d2:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800022d7:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800022dc:	e8 0f e1 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff800022e1:	31 c0                	xor    %eax,%eax
ffffffff800022e3:	e8 28 e1 ff ff       	callq  ffffffff80000410 <io_wait>
    outb(PIC2_DATA, 0x01);
ffffffff800022e8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800022ed:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800022f2:	e8 f9 e0 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff800022f7:	31 c0                	xor    %eax,%eax
ffffffff800022f9:	e8 12 e1 ff ff       	callq  ffffffff80000410 <io_wait>

    outb(PIC1_DATA, mask1);
ffffffff800022fe:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80002302:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002307:	e8 e4 e0 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff8000230c:	31 c0                	xor    %eax,%eax
ffffffff8000230e:	e8 fd e0 ff ff       	callq  ffffffff80000410 <io_wait>
    outb(PIC2_DATA, mask2);
ffffffff80002313:	0f b6 f3             	movzbl %bl,%esi
ffffffff80002316:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000231b:	e8 d0 e0 ff ff       	callq  ffffffff800003f0 <outb>
    io_wait();
ffffffff80002320:	31 c0                	xor    %eax,%eax
}
ffffffff80002322:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80002326:	5b                   	pop    %rbx
ffffffff80002327:	5d                   	pop    %rbp
    io_wait();
ffffffff80002328:	e9 e3 e0 ff ff       	jmpq   ffffffff80000410 <io_wait>
ffffffff8000232d:	0f 1f 00             	nopl   (%rax)

ffffffff80002330 <pit_init>:



void pit_init(uint64_t freq)
{
ffffffff80002330:	53                   	push   %rbx
    if(freq > 1193181)
        working_freq = 1193181;

    uint32_t divisor = 1193180 / working_freq;

    outb(0x43, 0x36);
ffffffff80002331:	be 36 00 00 00       	mov    $0x36,%esi
{
ffffffff80002336:	48 89 fb             	mov    %rdi,%rbx
    outb(0x43, 0x36);
ffffffff80002339:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8000233e:	e8 ad e0 ff ff       	callq  ffffffff800003f0 <outb>
    uint32_t divisor = 1193180 / working_freq;
ffffffff80002343:	48 81 fb dd 34 12 00 	cmp    $0x1234dd,%rbx
ffffffff8000234a:	bf dd 34 12 00       	mov    $0x1234dd,%edi
ffffffff8000234f:	b8 10 27 00 00       	mov    $0x2710,%eax
ffffffff80002354:	48 0f 46 fb          	cmovbe %rbx,%rdi
ffffffff80002358:	48 81 ff 10 27 00 00 	cmp    $0x2710,%rdi
ffffffff8000235f:	48 0f 42 f8          	cmovb  %rax,%rdi
ffffffff80002363:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
ffffffff80002368:	31 d2                	xor    %edx,%edx
ffffffff8000236a:	48 f7 f7             	div    %rdi
    outb(0x40, divisor & 0xff);
ffffffff8000236d:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80002372:	89 c6                	mov    %eax,%esi
ffffffff80002374:	e8 77 e0 ff ff       	callq  ffffffff800003f0 <outb>
    outb(0x40, divisor >> 8);
ffffffff80002379:	5b                   	pop    %rbx
    outb(0x40, divisor >> 8);
ffffffff8000237a:	31 f6                	xor    %esi,%esi
ffffffff8000237c:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80002381:	e9 6a e0 ff ff       	jmpq   ffffffff800003f0 <outb>
ffffffff80002386:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000238d:	00 00 00 

ffffffff80002390 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
ffffffff80002390:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80002393:	73 04                	jae    ffffffff80002399 <_out_buffer+0x9>
    ((char*)buffer)[idx] = character;
ffffffff80002395:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  }
}
ffffffff80002399:	f3 c3                	repz retq 
ffffffff8000239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800023a0 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
ffffffff800023a0:	f3 c3                	repz retq 
ffffffff800023a2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800023a9:	00 00 00 00 
ffffffff800023ad:	0f 1f 00             	nopl   (%rax)

ffffffff800023b0 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
ffffffff800023b0:	40 84 ff             	test   %dil,%dil
{
ffffffff800023b3:	48 89 f0             	mov    %rsi,%rax
  if (character) {
ffffffff800023b6:	74 10                	je     ffffffff800023c8 <_out_fct+0x18>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
ffffffff800023b8:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffffff800023bc:	40 0f be ff          	movsbl %dil,%edi
ffffffff800023c0:	ff 20                	jmpq   *(%rax)
ffffffff800023c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  }
}
ffffffff800023c8:	f3 c3                	repz retq 
ffffffff800023ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff800023d0 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff800023d0:	41 57                	push   %r15
ffffffff800023d2:	41 56                	push   %r14
ffffffff800023d4:	41 55                	push   %r13
ffffffff800023d6:	41 54                	push   %r12
ffffffff800023d8:	49 89 cd             	mov    %rcx,%r13
ffffffff800023db:	55                   	push   %rbp
ffffffff800023dc:	53                   	push   %rbx
ffffffff800023dd:	48 89 fd             	mov    %rdi,%rbp
ffffffff800023e0:	4c 89 c3             	mov    %r8,%rbx
ffffffff800023e3:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff800023e7:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
ffffffff800023ee:	48 89 34 24          	mov    %rsi,(%rsp)
ffffffff800023f2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff800023f7:	8b 7c 24 60          	mov    0x60(%rsp),%edi
ffffffff800023fb:	89 c6                	mov    %eax,%esi
ffffffff800023fd:	89 c1                	mov    %eax,%ecx
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
ffffffff800023ff:	89 c2                	mov    %eax,%edx
ffffffff80002401:	83 e6 10             	and    $0x10,%esi
ffffffff80002404:	83 e1 03             	and    $0x3,%ecx
ffffffff80002407:	83 e2 02             	and    $0x2,%edx
ffffffff8000240a:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
ffffffff8000240e:	75 79                	jne    ffffffff80002489 <_ntoa_format+0xb9>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002410:	44 8b 54 24 78       	mov    0x78(%rsp),%r10d
ffffffff80002415:	41 89 c0             	mov    %eax,%r8d
ffffffff80002418:	8b 54 24 70          	mov    0x70(%rsp),%edx
ffffffff8000241c:	41 83 e0 01          	and    $0x1,%r8d
ffffffff80002420:	45 85 d2             	test   %r10d,%r10d
ffffffff80002423:	0f 85 d7 00 00 00    	jne    ffffffff80002500 <_ntoa_format+0x130>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002429:	49 39 d1             	cmp    %rdx,%r9
ffffffff8000242c:	73 27                	jae    ffffffff80002455 <_ntoa_format+0x85>
ffffffff8000242e:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002432:	75 12                	jne    ffffffff80002446 <_ntoa_format+0x76>
ffffffff80002434:	e9 b7 02 00 00       	jmpq   ffffffff800026f0 <_ntoa_format+0x320>
ffffffff80002439:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80002440:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002444:	74 0f                	je     ffffffff80002455 <_ntoa_format+0x85>
      buf[len++] = '0';
ffffffff80002446:	49 83 c1 01          	add    $0x1,%r9
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000244a:	49 39 d1             	cmp    %rdx,%r9
      buf[len++] = '0';
ffffffff8000244d:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002453:	72 eb                	jb     ffffffff80002440 <_ntoa_format+0x70>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002455:	45 85 c0             	test   %r8d,%r8d
ffffffff80002458:	74 2f                	je     ffffffff80002489 <_ntoa_format+0xb9>
ffffffff8000245a:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff8000245f:	4d 39 ce             	cmp    %r9,%r14
ffffffff80002462:	76 25                	jbe    ffffffff80002489 <_ntoa_format+0xb9>
ffffffff80002464:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002468:	75 10                	jne    ffffffff8000247a <_ntoa_format+0xaa>
ffffffff8000246a:	e9 8b 03 00 00       	jmpq   ffffffff800027fa <_ntoa_format+0x42a>
ffffffff8000246f:	90                   	nop
ffffffff80002470:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002474:	0f 84 76 02 00 00    	je     ffffffff800026f0 <_ntoa_format+0x320>
      buf[len++] = '0';
ffffffff8000247a:	49 83 c1 01          	add    $0x1,%r9
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000247e:	4d 39 f1             	cmp    %r14,%r9
      buf[len++] = '0';
ffffffff80002481:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002487:	75 e7                	jne    ffffffff80002470 <_ntoa_format+0xa0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
ffffffff80002489:	85 f6                	test   %esi,%esi
ffffffff8000248b:	74 41                	je     ffffffff800024ce <_ntoa_format+0xfe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff8000248d:	f6 c4 04             	test   $0x4,%ah
ffffffff80002490:	0f 85 5a 01 00 00    	jne    ffffffff800025f0 <_ntoa_format+0x220>
ffffffff80002496:	4d 85 c9             	test   %r9,%r9
ffffffff80002499:	0f 85 31 01 00 00    	jne    ffffffff800025d0 <_ntoa_format+0x200>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000249f:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff800024a4:	0f 84 2f 03 00 00    	je     ffffffff800027d9 <_ntoa_format+0x409>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800024aa:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff800024af:	0f 85 37 03 00 00    	jne    ffffffff800027ec <_ntoa_format+0x41c>
      buf[len++] = 'b';
ffffffff800024b5:	c6 03 62             	movb   $0x62,(%rbx)
ffffffff800024b8:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
ffffffff800024bf:	00 00 
ffffffff800024c1:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff800024c6:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
ffffffff800024ca:	c6 04 33 30          	movb   $0x30,(%rbx,%rsi,1)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff800024ce:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800024d2:	0f 84 38 02 00 00    	je     ffffffff80002710 <_ntoa_format+0x340>
    if (negative) {
ffffffff800024d8:	40 84 ff             	test   %dil,%dil
ffffffff800024db:	75 4b                	jne    ffffffff80002528 <_ntoa_format+0x158>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
ffffffff800024dd:	a8 04                	test   $0x4,%al
ffffffff800024df:	0f 85 a3 01 00 00    	jne    ffffffff80002688 <_ntoa_format+0x2b8>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
ffffffff800024e5:	a8 08                	test   $0x8,%al
ffffffff800024e7:	0f 84 9b 02 00 00    	je     ffffffff80002788 <_ntoa_format+0x3b8>
      buf[len++] = ' ';
ffffffff800024ed:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff800024f1:	42 c6 04 0b 20       	movb   $0x20,(%rbx,%r9,1)
ffffffff800024f6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800024fb:	eb 39                	jmp    ffffffff80002536 <_ntoa_format+0x166>
ffffffff800024fd:	0f 1f 00             	nopl   (%rax)
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002500:	45 85 c0             	test   %r8d,%r8d
ffffffff80002503:	0f 84 97 01 00 00    	je     ffffffff800026a0 <_ntoa_format+0x2d0>
ffffffff80002509:	40 84 ff             	test   %dil,%dil
ffffffff8000250c:	75 04                	jne    ffffffff80002512 <_ntoa_format+0x142>
ffffffff8000250e:	a8 0c                	test   $0xc,%al
ffffffff80002510:	74 05                	je     ffffffff80002517 <_ntoa_format+0x147>
      width--;
ffffffff80002512:	83 6c 24 78 01       	subl   $0x1,0x78(%rsp)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002517:	49 39 d1             	cmp    %rdx,%r9
ffffffff8000251a:	0f 82 0e ff ff ff    	jb     ffffffff8000242e <_ntoa_format+0x5e>
ffffffff80002520:	e9 35 ff ff ff       	jmpq   ffffffff8000245a <_ntoa_format+0x8a>
ffffffff80002525:	0f 1f 00             	nopl   (%rax)
      buf[len++] = '-';
ffffffff80002528:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff8000252c:	42 c6 04 0b 2d       	movb   $0x2d,(%rbx,%r9,1)
ffffffff80002531:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002536:	85 c9                	test   %ecx,%ecx
ffffffff80002538:	0f 84 fa 00 00 00    	je     ffffffff80002638 <_ntoa_format+0x268>
ffffffff8000253e:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    for (size_t i = len; i < width; i++) {
ffffffff80002543:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
ffffffff80002548:	4c 89 fa             	mov    %r15,%rdx
ffffffff8000254b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80002550:	49 83 ec 01          	sub    $0x1,%r12
ffffffff80002554:	4c 8d 72 01          	lea    0x1(%rdx),%r14
ffffffff80002558:	4c 89 e9             	mov    %r13,%rcx
ffffffff8000255b:	42 0f be 3c 23       	movsbl (%rbx,%r12,1),%edi
ffffffff80002560:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002564:	ff d5                	callq  *%rbp
  while (len) {
ffffffff80002566:	4d 85 e4             	test   %r12,%r12
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80002569:	4c 89 f2             	mov    %r14,%rdx
  while (len) {
ffffffff8000256c:	75 e2                	jne    ffffffff80002550 <_ntoa_format+0x180>
ffffffff8000256e:	4c 03 7c 24 10       	add    0x10(%rsp),%r15
  if (flags & FLAGS_LEFT) {
ffffffff80002573:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
ffffffff80002577:	85 c0                	test   %eax,%eax
ffffffff80002579:	74 3a                	je     ffffffff800025b5 <_ntoa_format+0x1e5>
    while (idx - start_idx < width) {
ffffffff8000257b:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff80002580:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002583:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
ffffffff80002588:	49 39 d6             	cmp    %rdx,%r14
ffffffff8000258b:	76 28                	jbe    ffffffff800025b5 <_ntoa_format+0x1e5>
ffffffff8000258d:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80002590:	49 8d 5f 01          	lea    0x1(%r15),%rbx
ffffffff80002594:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002597:	4c 89 e9             	mov    %r13,%rcx
ffffffff8000259a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000259e:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800025a3:	ff d5                	callq  *%rbp
    while (idx - start_idx < width) {
ffffffff800025a5:	48 89 da             	mov    %rbx,%rdx
ffffffff800025a8:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
      out(' ', buffer, idx++, maxlen);
ffffffff800025ad:	49 89 df             	mov    %rbx,%r15
    while (idx - start_idx < width) {
ffffffff800025b0:	4c 39 f2             	cmp    %r14,%rdx
ffffffff800025b3:	72 db                	jb     ffffffff80002590 <_ntoa_format+0x1c0>
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
ffffffff800025b5:	48 83 c4 28          	add    $0x28,%rsp
ffffffff800025b9:	4c 89 f8             	mov    %r15,%rax
ffffffff800025bc:	5b                   	pop    %rbx
ffffffff800025bd:	5d                   	pop    %rbp
ffffffff800025be:	41 5c                	pop    %r12
ffffffff800025c0:	41 5d                	pop    %r13
ffffffff800025c2:	41 5e                	pop    %r14
ffffffff800025c4:	41 5f                	pop    %r15
ffffffff800025c6:	c3                   	retq   
ffffffff800025c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800025ce:	00 00 
ffffffff800025d0:	8b 54 24 70          	mov    0x70(%rsp),%edx
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff800025d4:	4c 39 ca             	cmp    %r9,%rdx
ffffffff800025d7:	0f 84 e3 00 00 00    	je     ffffffff800026c0 <_ntoa_format+0x2f0>
ffffffff800025dd:	8b 54 24 78          	mov    0x78(%rsp),%edx
ffffffff800025e1:	4c 39 ca             	cmp    %r9,%rdx
ffffffff800025e4:	0f 84 d6 00 00 00    	je     ffffffff800026c0 <_ntoa_format+0x2f0>
ffffffff800025ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff800025f0:	49 83 f9 1f          	cmp    $0x1f,%r9
ffffffff800025f4:	0f 96 c2             	setbe  %dl
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025f7:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff800025fc:	0f 84 1e 01 00 00    	je     ffffffff80002720 <_ntoa_format+0x350>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002602:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80002607:	0f 85 a3 00 00 00    	jne    ffffffff800026b0 <_ntoa_format+0x2e0>
ffffffff8000260d:	84 d2                	test   %dl,%dl
ffffffff8000260f:	0f 84 9b 00 00 00    	je     ffffffff800026b0 <_ntoa_format+0x2e0>
ffffffff80002615:	49 8d 71 01          	lea    0x1(%r9),%rsi
      buf[len++] = 'b';
ffffffff80002619:	42 c6 04 0b 62       	movb   $0x62,(%rbx,%r9,1)
ffffffff8000261e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff80002623:	48 83 7c 24 10 1f    	cmpq   $0x1f,0x10(%rsp)
ffffffff80002629:	0f 86 92 fe ff ff    	jbe    ffffffff800024c1 <_ntoa_format+0xf1>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff8000262f:	85 c9                	test   %ecx,%ecx
ffffffff80002631:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80002636:	75 3a                	jne    ffffffff80002672 <_ntoa_format+0x2a2>
ffffffff80002638:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff8000263d:	4c 3b 74 24 10       	cmp    0x10(%rsp),%r14
ffffffff80002642:	0f 86 50 01 00 00    	jbe    ffffffff80002798 <_ntoa_format+0x3c8>
ffffffff80002648:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff8000264d:	49 01 d6             	add    %rdx,%r14
ffffffff80002650:	4c 2b 74 24 10       	sub    0x10(%rsp),%r14
ffffffff80002655:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80002658:	4c 8d 7a 01          	lea    0x1(%rdx),%r15
ffffffff8000265c:	4c 89 e9             	mov    %r13,%rcx
ffffffff8000265f:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002663:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002668:	ff d5                	callq  *%rbp
    for (size_t i = len; i < width; i++) {
ffffffff8000266a:	4d 39 f7             	cmp    %r14,%r15
ffffffff8000266d:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002670:	75 e6                	jne    ffffffff80002658 <_ntoa_format+0x288>
  while (len) {
ffffffff80002672:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
ffffffff80002678:	0f 85 c5 fe ff ff    	jne    ffffffff80002543 <_ntoa_format+0x173>
ffffffff8000267e:	e9 f0 fe ff ff       	jmpq   ffffffff80002573 <_ntoa_format+0x1a3>
ffffffff80002683:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      buf[len++] = '+';  // ignore the space if the '+' exists
ffffffff80002688:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff8000268c:	42 c6 04 0b 2b       	movb   $0x2b,(%rbx,%r9,1)
ffffffff80002691:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002696:	e9 9b fe ff ff       	jmpq   ffffffff80002536 <_ntoa_format+0x166>
ffffffff8000269b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800026a0:	49 39 d1             	cmp    %rdx,%r9
ffffffff800026a3:	0f 82 85 fd ff ff    	jb     ffffffff8000242e <_ntoa_format+0x5e>
ffffffff800026a9:	e9 db fd ff ff       	jmpq   ffffffff80002489 <_ntoa_format+0xb9>
ffffffff800026ae:	66 90                	xchg   %ax,%ax
ffffffff800026b0:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff800026b5:	e9 69 ff ff ff       	jmpq   ffffffff80002623 <_ntoa_format+0x253>
ffffffff800026ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (len && (base == 16U)) {
ffffffff800026c0:	4d 89 c8             	mov    %r9,%r8
ffffffff800026c3:	49 83 e8 01          	sub    $0x1,%r8
ffffffff800026c7:	0f 95 c2             	setne  %dl
ffffffff800026ca:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff800026cf:	40 0f 94 c6          	sete   %sil
ffffffff800026d3:	40 20 f2             	and    %sil,%dl
ffffffff800026d6:	0f 84 d9 00 00 00    	je     ffffffff800027b5 <_ntoa_format+0x3e5>
        len--;
ffffffff800026dc:	49 8d 71 fe          	lea    -0x2(%r9),%rsi
ffffffff800026e0:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff800026e5:	eb 3e                	jmp    ffffffff80002725 <_ntoa_format+0x355>
ffffffff800026e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800026ee:	00 00 
  if (flags & FLAGS_HASH) {
ffffffff800026f0:	85 f6                	test   %esi,%esi
ffffffff800026f2:	74 6c                	je     ffffffff80002760 <_ntoa_format+0x390>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff800026f4:	f6 c4 04             	test   $0x4,%ah
ffffffff800026f7:	41 b9 20 00 00 00    	mov    $0x20,%r9d
ffffffff800026fd:	0f 84 d1 fe ff ff    	je     ffffffff800025d4 <_ntoa_format+0x204>
ffffffff80002703:	e9 e8 fe ff ff       	jmpq   ffffffff800025f0 <_ntoa_format+0x220>
ffffffff80002708:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000270f:	00 
ffffffff80002710:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80002717:	00 00 
ffffffff80002719:	e9 18 fe ff ff       	jmpq   ffffffff80002536 <_ntoa_format+0x166>
ffffffff8000271e:	66 90                	xchg   %ax,%ax
ffffffff80002720:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002725:	89 c6                	mov    %eax,%esi
ffffffff80002727:	83 e6 20             	and    $0x20,%esi
ffffffff8000272a:	75 08                	jne    ffffffff80002734 <_ntoa_format+0x364>
ffffffff8000272c:	84 d2                	test   %dl,%dl
ffffffff8000272e:	0f 85 8e 00 00 00    	jne    ffffffff800027c2 <_ntoa_format+0x3f2>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002734:	85 f6                	test   %esi,%esi
ffffffff80002736:	0f 84 e7 fe ff ff    	je     ffffffff80002623 <_ntoa_format+0x253>
ffffffff8000273c:	84 d2                	test   %dl,%dl
ffffffff8000273e:	0f 84 df fe ff ff    	je     ffffffff80002623 <_ntoa_format+0x253>
      buf[len++] = 'X';
ffffffff80002744:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80002749:	c6 04 33 58          	movb   $0x58,(%rbx,%rsi,1)
ffffffff8000274d:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80002751:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002756:	e9 c8 fe ff ff       	jmpq   ffffffff80002623 <_ntoa_format+0x253>
ffffffff8000275b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002760:	85 c9                	test   %ecx,%ecx
ffffffff80002762:	75 3e                	jne    ffffffff800027a2 <_ntoa_format+0x3d2>
ffffffff80002764:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff80002769:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80002770:	00 00 
ffffffff80002772:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff80002776:	0f 87 cc fe ff ff    	ja     ffffffff80002648 <_ntoa_format+0x278>
ffffffff8000277c:	e9 bd fd ff ff       	jmpq   ffffffff8000253e <_ntoa_format+0x16e>
ffffffff80002781:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80002788:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff8000278d:	e9 9d fe ff ff       	jmpq   ffffffff8000262f <_ntoa_format+0x25f>
ffffffff80002792:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002798:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff8000279d:	e9 d0 fe ff ff       	jmpq   ffffffff80002672 <_ntoa_format+0x2a2>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800027a2:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff800027a7:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff800027ae:	00 00 
ffffffff800027b0:	e9 8e fd ff ff       	jmpq   ffffffff80002543 <_ntoa_format+0x173>
      len--;
ffffffff800027b5:	4d 89 c1             	mov    %r8,%r9
ffffffff800027b8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800027bd:	e9 35 fe ff ff       	jmpq   ffffffff800025f7 <_ntoa_format+0x227>
      buf[len++] = 'x';
ffffffff800027c2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff800027c7:	c6 04 33 78          	movb   $0x78,(%rbx,%rsi,1)
ffffffff800027cb:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800027cf:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff800027d4:	e9 4a fe ff ff       	jmpq   ffffffff80002623 <_ntoa_format+0x253>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800027d9:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
ffffffff800027e0:	00 00 
ffffffff800027e2:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800027e7:	e9 39 ff ff ff       	jmpq   ffffffff80002725 <_ntoa_format+0x355>
      buf[len++] = '0';
ffffffff800027ec:	c6 03 30             	movb   $0x30,(%rbx)
ffffffff800027ef:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff800027f5:	e9 de fc ff ff       	jmpq   ffffffff800024d8 <_ntoa_format+0x108>
  if (flags & FLAGS_HASH) {
ffffffff800027fa:	85 f6                	test   %esi,%esi
ffffffff800027fc:	74 17                	je     ffffffff80002815 <_ntoa_format+0x445>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff800027fe:	f6 c4 04             	test   $0x4,%ah
ffffffff80002801:	0f 84 cd fd ff ff    	je     ffffffff800025d4 <_ntoa_format+0x204>
ffffffff80002807:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000280e:	00 00 
ffffffff80002810:	e9 1a fe ff ff       	jmpq   ffffffff8000262f <_ntoa_format+0x25f>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002815:	85 c9                	test   %ecx,%ecx
    for (size_t i = len; i < width; i++) {
ffffffff80002817:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000281e:	00 00 
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002820:	0f 85 18 fd ff ff    	jne    ffffffff8000253e <_ntoa_format+0x16e>
    for (size_t i = len; i < width; i++) {
ffffffff80002826:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff8000282a:	0f 87 18 fe ff ff    	ja     ffffffff80002648 <_ntoa_format+0x278>
ffffffff80002830:	e9 09 fd ff ff       	jmpq   ffffffff8000253e <_ntoa_format+0x16e>
ffffffff80002835:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000283c:	00 00 00 00 

ffffffff80002840 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002840:	41 55                	push   %r13
ffffffff80002842:	41 54                	push   %r12
ffffffff80002844:	4c 89 c0             	mov    %r8,%rax
ffffffff80002847:	55                   	push   %rbp
ffffffff80002848:	53                   	push   %rbx
ffffffff80002849:	48 89 d3             	mov    %rdx,%rbx
ffffffff8000284c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80002850:	4d 85 c0             	test   %r8,%r8
{
ffffffff80002853:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80002858:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff8000285c:	75 13                	jne    ffffffff80002871 <_ntoa_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff8000285e:	89 ea                	mov    %ebp,%edx
ffffffff80002860:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002863:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80002869:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff8000286b:	0f 85 7f 00 00 00    	jne    ffffffff800028f0 <_ntoa_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002871:	89 ea                	mov    %ebp,%edx
ffffffff80002873:	83 e2 20             	and    $0x20,%edx
ffffffff80002876:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002879:	45 19 db             	sbb    %r11d,%r11d
ffffffff8000287c:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000287f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002883:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002887:	eb 0d                	jmp    ffffffff80002896 <_ntoa_long+0x56>
ffffffff80002889:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002890:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80002894:	77 26                	ja     ffffffff800028bc <_ntoa_long+0x7c>
ffffffff80002896:	31 d2                	xor    %edx,%edx
ffffffff80002898:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff8000289b:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff8000289f:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff800028a3:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff800028a7:	44 89 ea             	mov    %r13d,%edx
ffffffff800028aa:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff800028ae:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800028b2:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800028b5:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800028ba:	75 d4                	jne    ffffffff80002890 <_ntoa_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff800028bc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800028c0:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff800028c4:	48 89 da             	mov    %rbx,%rdx
ffffffff800028c7:	55                   	push   %rbp
ffffffff800028c8:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff800028cc:	50                   	push   %rax
ffffffff800028cd:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff800028d1:	50                   	push   %rax
ffffffff800028d2:	41 52                	push   %r10
ffffffff800028d4:	41 51                	push   %r9
ffffffff800028d6:	4d 89 c1             	mov    %r8,%r9
ffffffff800028d9:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff800028de:	e8 ed fa ff ff       	callq  ffffffff800023d0 <_ntoa_format>
}
ffffffff800028e3:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800028e7:	5b                   	pop    %rbx
ffffffff800028e8:	5d                   	pop    %rbp
ffffffff800028e9:	41 5c                	pop    %r12
ffffffff800028eb:	41 5d                	pop    %r13
ffffffff800028ed:	c3                   	retq   
ffffffff800028ee:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff800028f0:	45 31 c0             	xor    %r8d,%r8d
ffffffff800028f3:	eb c7                	jmp    ffffffff800028bc <_ntoa_long+0x7c>
ffffffff800028f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800028fc:	00 00 00 00 

ffffffff80002900 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002900:	41 55                	push   %r13
ffffffff80002902:	41 54                	push   %r12
ffffffff80002904:	4c 89 c0             	mov    %r8,%rax
ffffffff80002907:	55                   	push   %rbp
ffffffff80002908:	53                   	push   %rbx
ffffffff80002909:	48 89 d3             	mov    %rdx,%rbx
ffffffff8000290c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80002910:	4d 85 c0             	test   %r8,%r8
{
ffffffff80002913:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80002918:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff8000291c:	75 13                	jne    ffffffff80002931 <_ntoa_long_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff8000291e:	89 ea                	mov    %ebp,%edx
ffffffff80002920:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002923:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80002929:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff8000292b:	0f 85 7f 00 00 00    	jne    ffffffff800029b0 <_ntoa_long_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002931:	89 ea                	mov    %ebp,%edx
ffffffff80002933:	83 e2 20             	and    $0x20,%edx
ffffffff80002936:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002939:	45 19 db             	sbb    %r11d,%r11d
ffffffff8000293c:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000293f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002943:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002947:	eb 0d                	jmp    ffffffff80002956 <_ntoa_long_long+0x56>
ffffffff80002949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002950:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80002954:	77 26                	ja     ffffffff8000297c <_ntoa_long_long+0x7c>
ffffffff80002956:	31 d2                	xor    %edx,%edx
ffffffff80002958:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff8000295b:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff8000295f:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80002963:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80002967:	44 89 ea             	mov    %r13d,%edx
ffffffff8000296a:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff8000296e:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002972:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002975:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff8000297a:	75 d4                	jne    ffffffff80002950 <_ntoa_long_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff8000297c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002980:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002984:	48 89 da             	mov    %rbx,%rdx
ffffffff80002987:	55                   	push   %rbp
ffffffff80002988:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff8000298c:	50                   	push   %rax
ffffffff8000298d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002991:	50                   	push   %rax
ffffffff80002992:	41 52                	push   %r10
ffffffff80002994:	41 51                	push   %r9
ffffffff80002996:	4d 89 c1             	mov    %r8,%r9
ffffffff80002999:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff8000299e:	e8 2d fa ff ff       	callq  ffffffff800023d0 <_ntoa_format>
}
ffffffff800029a3:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800029a7:	5b                   	pop    %rbx
ffffffff800029a8:	5d                   	pop    %rbp
ffffffff800029a9:	41 5c                	pop    %r12
ffffffff800029ab:	41 5d                	pop    %r13
ffffffff800029ad:	c3                   	retq   
ffffffff800029ae:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff800029b0:	45 31 c0             	xor    %r8d,%r8d
ffffffff800029b3:	eb c7                	jmp    ffffffff8000297c <_ntoa_long_long+0x7c>
ffffffff800029b5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800029bc:	00 00 00 00 

ffffffff800029c0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
ffffffff800029c0:	41 57                	push   %r15
ffffffff800029c2:	41 56                	push   %r14
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
ffffffff800029c4:	48 c7 c0 a0 23 00 80 	mov    $0xffffffff800023a0,%rax
{
ffffffff800029cb:	41 55                	push   %r13
ffffffff800029cd:	41 54                	push   %r12
ffffffff800029cf:	49 89 f7             	mov    %rsi,%r15
ffffffff800029d2:	55                   	push   %rbp
ffffffff800029d3:	53                   	push   %rbx
ffffffff800029d4:	48 89 fd             	mov    %rdi,%rbp
ffffffff800029d7:	49 89 d6             	mov    %rdx,%r14
ffffffff800029da:	49 89 cd             	mov    %rcx,%r13
ffffffff800029dd:	48 83 ec 38          	sub    $0x38,%rsp
    out = _out_null;
ffffffff800029e1:	48 85 f6             	test   %rsi,%rsi
ffffffff800029e4:	48 0f 44 e8          	cmove  %rax,%rbp
{
ffffffff800029e8:	4c 89 04 24          	mov    %r8,(%rsp)
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
ffffffff800029ec:	31 db                	xor    %ebx,%ebx
  while (*format)
ffffffff800029ee:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff800029f3:	40 84 ff             	test   %dil,%dil
ffffffff800029f6:	74 26                	je     ffffffff80002a1e <_vsnprintf+0x5e>
ffffffff800029f8:	49 83 c5 01          	add    $0x1,%r13
    if (*format != '%') {
ffffffff800029fc:	40 80 ff 25          	cmp    $0x25,%dil
ffffffff80002a00:	74 46                	je     ffffffff80002a48 <_vsnprintf+0x88>
      out(*format, buffer, idx++, maxlen);
ffffffff80002a02:	4c 8d 63 01          	lea    0x1(%rbx),%r12
        out(*format, buffer, idx++, maxlen);
ffffffff80002a06:	48 89 da             	mov    %rbx,%rdx
ffffffff80002a09:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002a0c:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002a0f:	ff d5                	callq  *%rbp
  while (*format)
ffffffff80002a11:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
        out(*format, buffer, idx++, maxlen);
ffffffff80002a16:	4c 89 e3             	mov    %r12,%rbx
  while (*format)
ffffffff80002a19:	40 84 ff             	test   %dil,%dil
ffffffff80002a1c:	75 da                	jne    ffffffff800029f8 <_vsnprintf+0x38>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
ffffffff80002a1e:	49 8d 56 ff          	lea    -0x1(%r14),%rdx
ffffffff80002a22:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80002a25:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002a28:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002a2b:	48 0f 42 d3          	cmovb  %rbx,%rdx
ffffffff80002a2f:	31 ff                	xor    %edi,%edi
ffffffff80002a31:	ff d5                	callq  *%rbp

  // return written chars without terminating \0
  return (int)idx;
}
ffffffff80002a33:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80002a37:	89 d8                	mov    %ebx,%eax
ffffffff80002a39:	5b                   	pop    %rbx
ffffffff80002a3a:	5d                   	pop    %rbp
ffffffff80002a3b:	41 5c                	pop    %r12
ffffffff80002a3d:	41 5d                	pop    %r13
ffffffff80002a3f:	41 5e                	pop    %r14
ffffffff80002a41:	41 5f                	pop    %r15
ffffffff80002a43:	c3                   	retq   
ffffffff80002a44:	0f 1f 40 00          	nopl   0x0(%rax)
    flags = 0U;
ffffffff80002a48:	31 c9                	xor    %ecx,%ecx
ffffffff80002a4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      switch (*format) {
ffffffff80002a50:	41 0f be 45 00       	movsbl 0x0(%r13),%eax
ffffffff80002a55:	49 8d 75 01          	lea    0x1(%r13),%rsi
ffffffff80002a59:	48 89 f7             	mov    %rsi,%rdi
ffffffff80002a5c:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80002a5f:	80 fa 10             	cmp    $0x10,%dl
ffffffff80002a62:	77 3c                	ja     ffffffff80002aa0 <_vsnprintf+0xe0>
ffffffff80002a64:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002a67:	ff 24 d5 80 4e 00 80 	jmpq   *-0x7fffb180(,%rdx,8)
ffffffff80002a6e:	66 90                	xchg   %ax,%ax
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
ffffffff80002a70:	83 c9 01             	or     $0x1,%ecx
ffffffff80002a73:	49 89 f5             	mov    %rsi,%r13
ffffffff80002a76:	eb d8                	jmp    ffffffff80002a50 <_vsnprintf+0x90>
ffffffff80002a78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002a7f:	00 
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ffffffff80002a80:	83 c9 04             	or     $0x4,%ecx
ffffffff80002a83:	eb ee                	jmp    ffffffff80002a73 <_vsnprintf+0xb3>
ffffffff80002a85:	0f 1f 00             	nopl   (%rax)
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ffffffff80002a88:	83 c9 02             	or     $0x2,%ecx
ffffffff80002a8b:	eb e6                	jmp    ffffffff80002a73 <_vsnprintf+0xb3>
ffffffff80002a8d:	0f 1f 00             	nopl   (%rax)
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ffffffff80002a90:	83 c9 10             	or     $0x10,%ecx
ffffffff80002a93:	eb de                	jmp    ffffffff80002a73 <_vsnprintf+0xb3>
ffffffff80002a95:	0f 1f 00             	nopl   (%rax)
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ffffffff80002a98:	83 c9 08             	or     $0x8,%ecx
ffffffff80002a9b:	eb d6                	jmp    ffffffff80002a73 <_vsnprintf+0xb3>
ffffffff80002a9d:	0f 1f 00             	nopl   (%rax)
  return (ch >= '0') && (ch <= '9');
ffffffff80002aa0:	8d 50 d0             	lea    -0x30(%rax),%edx
    if (_is_digit(*format)) {
ffffffff80002aa3:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002aa6:	0f 86 54 02 00 00    	jbe    ffffffff80002d00 <_vsnprintf+0x340>
    width = 0U;
ffffffff80002aac:	45 31 e4             	xor    %r12d,%r12d
    else if (*format == '*') {
ffffffff80002aaf:	3c 2a                	cmp    $0x2a,%al
ffffffff80002ab1:	0f 84 75 07 00 00    	je     ffffffff8000322c <_vsnprintf+0x86c>
    precision = 0U;
ffffffff80002ab7:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002aba:	3c 2e                	cmp    $0x2e,%al
ffffffff80002abc:	0f 84 73 02 00 00    	je     ffffffff80002d35 <_vsnprintf+0x375>
    switch (*format) {
ffffffff80002ac2:	3c 6a                	cmp    $0x6a,%al
ffffffff80002ac4:	74 12                	je     ffffffff80002ad8 <_vsnprintf+0x118>
ffffffff80002ac6:	0f 8e bc 02 00 00    	jle    ffffffff80002d88 <_vsnprintf+0x3c8>
ffffffff80002acc:	3c 6c                	cmp    $0x6c,%al
ffffffff80002ace:	74 30                	je     ffffffff80002b00 <_vsnprintf+0x140>
ffffffff80002ad0:	3c 7a                	cmp    $0x7a,%al
ffffffff80002ad2:	0f 85 d0 02 00 00    	jne    ffffffff80002da8 <_vsnprintf+0x3e8>
ffffffff80002ad8:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002add:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ffffffff80002ae1:	80 cd 01             	or     $0x1,%ch
    switch (*format) {
ffffffff80002ae4:	8d 50 db             	lea    -0x25(%rax),%edx
ffffffff80002ae7:	80 fa 53             	cmp    $0x53,%dl
ffffffff80002aea:	0f 87 00 02 00 00    	ja     ffffffff80002cf0 <_vsnprintf+0x330>
ffffffff80002af0:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002af3:	ff 24 d5 08 4f 00 80 	jmpq   *-0x7fffb0f8(,%rdx,8)
ffffffff80002afa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if (*format == 'l') {
ffffffff80002b00:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002b05:	3c 6c                	cmp    $0x6c,%al
ffffffff80002b07:	0f 84 98 04 00 00    	je     ffffffff80002fa5 <_vsnprintf+0x5e5>
        flags |= FLAGS_LONG;
ffffffff80002b0d:	80 cd 01             	or     $0x1,%ch
ffffffff80002b10:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002b14:	eb ce                	jmp    ffffffff80002ae4 <_vsnprintf+0x124>
ffffffff80002b16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002b1d:	00 00 00 
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002b20:	48 8b 34 24          	mov    (%rsp),%rsi
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
ffffffff80002b24:	83 c9 21             	or     $0x21,%ecx
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002b27:	8b 06                	mov    (%rsi),%eax
ffffffff80002b29:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80002b2c:	0f 87 45 08 00 00    	ja     ffffffff80003377 <_vsnprintf+0x9b7>
ffffffff80002b32:	89 c2                	mov    %eax,%edx
ffffffff80002b34:	48 03 56 10          	add    0x10(%rsi),%rdx
ffffffff80002b38:	83 c0 08             	add    $0x8,%eax
ffffffff80002b3b:	89 06                	mov    %eax,(%rsi)
ffffffff80002b3d:	51                   	push   %rcx
ffffffff80002b3e:	6a 10                	pushq  $0x10
ffffffff80002b40:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002b43:	41 52                	push   %r10
ffffffff80002b45:	6a 10                	pushq  $0x10
ffffffff80002b47:	4c 8b 02             	mov    (%rdx),%r8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80002b4a:	48 89 da             	mov    %rbx,%rdx
ffffffff80002b4d:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002b50:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002b53:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002b56:	e8 a5 fd ff ff       	callq  ffffffff80002900 <_ntoa_long_long>
ffffffff80002b5b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002b5f:	48 89 c3             	mov    %rax,%rbx
ffffffff80002b62:	e9 87 fe ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
ffffffff80002b67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002b6e:	00 00 
ffffffff80002b70:	4c 8d 43 01          	lea    0x1(%rbx),%r8
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002b74:	83 e1 02             	and    $0x2,%ecx
ffffffff80002b77:	4c 89 c0             	mov    %r8,%rax
ffffffff80002b7a:	0f 84 47 04 00 00    	je     ffffffff80002fc7 <_vsnprintf+0x607>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002b80:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002b84:	8b 16                	mov    (%rsi),%edx
ffffffff80002b86:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002b89:	0f 87 34 06 00 00    	ja     ffffffff800031c3 <_vsnprintf+0x803>
ffffffff80002b8f:	89 d1                	mov    %edx,%ecx
ffffffff80002b91:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80002b95:	83 c2 08             	add    $0x8,%edx
ffffffff80002b98:	89 16                	mov    %edx,(%rsi)
ffffffff80002b9a:	0f be 39             	movsbl (%rcx),%edi
ffffffff80002b9d:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffffff80002ba2:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002ba5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80002baa:	48 89 da             	mov    %rbx,%rdx
ffffffff80002bad:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002bb0:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002bb2:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff80002bb6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80002bbb:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
ffffffff80002bc0:	0f 86 e8 02 00 00    	jbe    ffffffff80002eae <_vsnprintf+0x4ee>
ffffffff80002bc6:	41 8d 4c 24 fe       	lea    -0x2(%r12),%ecx
ffffffff80002bcb:	48 83 c3 02          	add    $0x2,%rbx
ffffffff80002bcf:	48 89 c2             	mov    %rax,%rdx
ffffffff80002bd2:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
ffffffff80002bd7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80002bdc:	48 01 cb             	add    %rcx,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff80002bdf:	4c 8d 62 01          	lea    0x1(%rdx),%r12
ffffffff80002be3:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002be6:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002be9:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002bee:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002bf0:	49 39 dc             	cmp    %rbx,%r12
ffffffff80002bf3:	4c 89 e2             	mov    %r12,%rdx
ffffffff80002bf6:	75 e7                	jne    ffffffff80002bdf <_vsnprintf+0x21f>
ffffffff80002bf8:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
ffffffff80002bfd:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
        break;
ffffffff80002c02:	e9 e7 fd ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
ffffffff80002c07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002c0e:	00 00 
        out('%', buffer, idx++, maxlen);
ffffffff80002c10:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002c14:	48 89 da             	mov    %rbx,%rdx
ffffffff80002c17:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002c1a:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002c1d:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff80002c22:	4c 89 e3             	mov    %r12,%rbx
ffffffff80002c25:	ff d5                	callq  *%rbp
        break;
ffffffff80002c27:	e9 c2 fd ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
ffffffff80002c2c:	0f 1f 40 00          	nopl   0x0(%rax)
        if (*format == 'x' || *format == 'X') {
ffffffff80002c30:	89 c2                	mov    %eax,%edx
ffffffff80002c32:	83 e2 df             	and    $0xffffffdf,%edx
ffffffff80002c35:	80 fa 58             	cmp    $0x58,%dl
ffffffff80002c38:	0f 84 66 02 00 00    	je     ffffffff80002ea4 <_vsnprintf+0x4e4>
        else if (*format == 'o') {
ffffffff80002c3e:	3c 6f                	cmp    $0x6f,%al
ffffffff80002c40:	0f 84 b6 04 00 00    	je     ffffffff800030fc <_vsnprintf+0x73c>
        else if (*format == 'b') {
ffffffff80002c46:	3c 62                	cmp    $0x62,%al
ffffffff80002c48:	0f 84 20 05 00 00    	je     ffffffff8000316e <_vsnprintf+0x7ae>
          flags &= ~FLAGS_HASH;   // no hash for dec format
ffffffff80002c4e:	83 e1 ef             	and    $0xffffffef,%ecx
ffffffff80002c51:	bf 0a 00 00 00       	mov    $0xa,%edi
        if (*format == 'X') {
ffffffff80002c56:	3c 58                	cmp    $0x58,%al
ffffffff80002c58:	0f 84 3c 03 00 00    	je     ffffffff80002f9a <_vsnprintf+0x5da>
        if ((*format != 'i') && (*format != 'd')) {
ffffffff80002c5e:	3c 69                	cmp    $0x69,%al
ffffffff80002c60:	74 08                	je     ffffffff80002c6a <_vsnprintf+0x2aa>
ffffffff80002c62:	3c 64                	cmp    $0x64,%al
ffffffff80002c64:	0f 85 33 03 00 00    	jne    ffffffff80002f9d <_vsnprintf+0x5dd>
          flags &= ~FLAGS_ZEROPAD;
ffffffff80002c6a:	89 ca                	mov    %ecx,%edx
ffffffff80002c6c:	83 e2 fe             	and    $0xfffffffe,%edx
ffffffff80002c6f:	f6 c5 04             	test   $0x4,%ch
ffffffff80002c72:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80002c75:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff80002c79:	89 ce                	mov    %ecx,%esi
ffffffff80002c7b:	81 e6 00 02 00 00    	and    $0x200,%esi
        if ((*format == 'i') || (*format == 'd')) {
ffffffff80002c81:	3c 69                	cmp    $0x69,%al
ffffffff80002c83:	8b 12                	mov    (%rdx),%edx
ffffffff80002c85:	0f 84 b8 02 00 00    	je     ffffffff80002f43 <_vsnprintf+0x583>
ffffffff80002c8b:	3c 64                	cmp    $0x64,%al
ffffffff80002c8d:	0f 84 b0 02 00 00    	je     ffffffff80002f43 <_vsnprintf+0x583>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002c93:	85 f6                	test   %esi,%esi
ffffffff80002c95:	0f 85 38 04 00 00    	jne    ffffffff800030d3 <_vsnprintf+0x713>
          else if (flags & FLAGS_LONG) {
ffffffff80002c9b:	f6 c5 01             	test   $0x1,%ch
ffffffff80002c9e:	0f 85 a1 04 00 00    	jne    ffffffff80003145 <_vsnprintf+0x785>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002ca4:	f6 c1 40             	test   $0x40,%cl
ffffffff80002ca7:	0f 84 6e 04 00 00    	je     ffffffff8000311b <_vsnprintf+0x75b>
ffffffff80002cad:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002cb0:	0f 87 d2 05 00 00    	ja     ffffffff80003288 <_vsnprintf+0x8c8>
ffffffff80002cb6:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002cba:	89 d0                	mov    %edx,%eax
ffffffff80002cbc:	83 c2 08             	add    $0x8,%edx
ffffffff80002cbf:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002cc3:	89 16                	mov    %edx,(%rsi)
ffffffff80002cc5:	44 0f b6 00          	movzbl (%rax),%r8d
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff80002cc9:	51                   	push   %rcx
ffffffff80002cca:	41 54                	push   %r12
ffffffff80002ccc:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002ccf:	41 52                	push   %r10
ffffffff80002cd1:	57                   	push   %rdi
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002cd2:	48 89 da             	mov    %rbx,%rdx
ffffffff80002cd5:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002cd8:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002cdb:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002cde:	e8 5d fb ff ff       	callq  ffffffff80002840 <_ntoa_long>
ffffffff80002ce3:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002ce7:	48 89 c3             	mov    %rax,%rbx
ffffffff80002cea:	e9 ff fc ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
ffffffff80002cef:	90                   	nop
        out(*format, buffer, idx++, maxlen);
ffffffff80002cf0:	4c 8d 63 01          	lea    0x1(%rbx),%r12
    switch (*format) {
ffffffff80002cf4:	0f be f8             	movsbl %al,%edi
ffffffff80002cf7:	e9 0a fd ff ff       	jmpq   ffffffff80002a06 <_vsnprintf+0x46>
ffffffff80002cfc:	0f 1f 40 00          	nopl   0x0(%rax)
  unsigned int i = 0U;
ffffffff80002d00:	45 31 e4             	xor    %r12d,%r12d
ffffffff80002d03:	eb 0a                	jmp    ffffffff80002d0f <_vsnprintf+0x34f>
ffffffff80002d05:	0f 1f 00             	nopl   (%rax)
  while (_is_digit(**str)) {
ffffffff80002d08:	49 89 f5             	mov    %rsi,%r13
ffffffff80002d0b:	48 83 c6 01          	add    $0x1,%rsi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002d0f:	43 8d 14 a4          	lea    (%r12,%r12,4),%edx
ffffffff80002d13:	44 8d 64 50 d0       	lea    -0x30(%rax,%rdx,2),%r12d
  while (_is_digit(**str)) {
ffffffff80002d18:	0f be 06             	movsbl (%rsi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002d1b:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002d1e:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002d21:	76 e5                	jbe    ffffffff80002d08 <_vsnprintf+0x348>
ffffffff80002d23:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80002d27:	49 89 f5             	mov    %rsi,%r13
    precision = 0U;
ffffffff80002d2a:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002d2d:	3c 2e                	cmp    $0x2e,%al
ffffffff80002d2f:	0f 85 8d fd ff ff    	jne    ffffffff80002ac2 <_vsnprintf+0x102>
      if (_is_digit(*format)) {
ffffffff80002d35:	41 0f be 45 01       	movsbl 0x1(%r13),%eax
      flags |= FLAGS_PRECISION;
ffffffff80002d3a:	80 cd 04             	or     $0x4,%ch
  return (ch >= '0') && (ch <= '9');
ffffffff80002d3d:	8d 50 d0             	lea    -0x30(%rax),%edx
      if (_is_digit(*format)) {
ffffffff80002d40:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002d43:	76 1e                	jbe    ffffffff80002d63 <_vsnprintf+0x3a3>
      else if (*format == '*') {
ffffffff80002d45:	3c 2a                	cmp    $0x2a,%al
ffffffff80002d47:	0f 84 3f 06 00 00    	je     ffffffff8000338c <_vsnprintf+0x9cc>
      format++;
ffffffff80002d4d:	49 89 fd             	mov    %rdi,%r13
      else if (*format == '*') {
ffffffff80002d50:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80002d54:	e9 69 fd ff ff       	jmpq   ffffffff80002ac2 <_vsnprintf+0x102>
ffffffff80002d59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  while (_is_digit(**str)) {
ffffffff80002d60:	4c 89 ef             	mov    %r13,%rdi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002d63:	43 8d 14 92          	lea    (%r10,%r10,4),%edx
ffffffff80002d67:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002d6b:	44 8d 54 50 d0       	lea    -0x30(%rax,%rdx,2),%r10d
  while (_is_digit(**str)) {
ffffffff80002d70:	0f be 47 01          	movsbl 0x1(%rdi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002d74:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002d77:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002d7a:	76 e4                	jbe    ffffffff80002d60 <_vsnprintf+0x3a0>
ffffffff80002d7c:	48 83 c7 02          	add    $0x2,%rdi
ffffffff80002d80:	e9 3d fd ff ff       	jmpq   ffffffff80002ac2 <_vsnprintf+0x102>
ffffffff80002d85:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002d88:	3c 68                	cmp    $0x68,%al
ffffffff80002d8a:	75 1c                	jne    ffffffff80002da8 <_vsnprintf+0x3e8>
        if (*format == 'h') {
ffffffff80002d8c:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002d91:	3c 68                	cmp    $0x68,%al
ffffffff80002d93:	0f 84 1d 02 00 00    	je     ffffffff80002fb6 <_vsnprintf+0x5f6>
        flags |= FLAGS_SHORT;
ffffffff80002d99:	80 c9 80             	or     $0x80,%cl
ffffffff80002d9c:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002da0:	e9 3f fd ff ff       	jmpq   ffffffff80002ae4 <_vsnprintf+0x124>
ffffffff80002da5:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002da8:	49 89 fd             	mov    %rdi,%r13
ffffffff80002dab:	e9 34 fd ff ff       	jmpq   ffffffff80002ae4 <_vsnprintf+0x124>
        const char* p = va_arg(va, char*);
ffffffff80002db0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002db4:	8b 16                	mov    (%rsi),%edx
ffffffff80002db6:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002db9:	0f 87 2e 04 00 00    	ja     ffffffff800031ed <_vsnprintf+0x82d>
ffffffff80002dbf:	89 d0                	mov    %edx,%eax
ffffffff80002dc1:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002dc5:	83 c2 08             	add    $0x8,%edx
ffffffff80002dc8:	89 16                	mov    %edx,(%rsi)
ffffffff80002dca:	4c 8b 08             	mov    (%rax),%r9
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80002dcd:	45 85 d2             	test   %r10d,%r10d
ffffffff80002dd0:	41 0f be 39          	movsbl (%r9),%edi
ffffffff80002dd4:	0f 85 54 01 00 00    	jne    ffffffff80002f2e <_vsnprintf+0x56e>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002dda:	40 84 ff             	test   %dil,%dil
ffffffff80002ddd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80002de4:	0f 84 b8 03 00 00    	je     ffffffff800031a2 <_vsnprintf+0x7e2>
ffffffff80002dea:	4c 89 c8             	mov    %r9,%rax
ffffffff80002ded:	eb 11                	jmp    ffffffff80002e00 <_vsnprintf+0x440>
ffffffff80002def:	90                   	nop
ffffffff80002df0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002df5:	48 29 c2             	sub    %rax,%rdx
ffffffff80002df8:	4c 01 ca             	add    %r9,%rdx
ffffffff80002dfb:	48 01 f2             	add    %rsi,%rdx
ffffffff80002dfe:	74 09                	je     ffffffff80002e09 <_vsnprintf+0x449>
ffffffff80002e00:	48 83 c0 01          	add    $0x1,%rax
ffffffff80002e04:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff80002e07:	75 e7                	jne    ffffffff80002df0 <_vsnprintf+0x430>
ffffffff80002e09:	44 29 c8             	sub    %r9d,%eax
ffffffff80002e0c:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (flags & FLAGS_PRECISION) {
ffffffff80002e10:	89 c8                	mov    %ecx,%eax
ffffffff80002e12:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80002e17:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff80002e1b:	74 0f                	je     ffffffff80002e2c <_vsnprintf+0x46c>
          l = (l < precision ? l : precision);
ffffffff80002e1d:	8b 44 24 20          	mov    0x20(%rsp),%eax
ffffffff80002e21:	44 39 d0             	cmp    %r10d,%eax
ffffffff80002e24:	41 0f 47 c2          	cmova  %r10d,%eax
ffffffff80002e28:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002e2c:	83 e1 02             	and    $0x2,%ecx
ffffffff80002e2f:	89 4c 24 24          	mov    %ecx,0x24(%rsp)
ffffffff80002e33:	0f 84 0e 02 00 00    	je     ffffffff80003047 <_vsnprintf+0x687>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002e39:	40 84 ff             	test   %dil,%dil
ffffffff80002e3c:	0f 84 94 00 00 00    	je     ffffffff80002ed6 <_vsnprintf+0x516>
ffffffff80002e42:	49 29 d9             	sub    %rbx,%r9
ffffffff80002e45:	44 89 64 24 28       	mov    %r12d,0x28(%rsp)
ffffffff80002e4a:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff80002e4f:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
ffffffff80002e54:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80002e59:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
ffffffff80002e5e:	49 89 dd             	mov    %rbx,%r13
ffffffff80002e61:	eb 27                	jmp    ffffffff80002e8a <_vsnprintf+0x4ca>
ffffffff80002e63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002e68:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002e6b:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002e6e:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002e71:	ff d5                	callq  *%rbp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002e73:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002e78:	49 8d 5d 01          	lea    0x1(%r13),%rbx
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002e7c:	41 0f be 7c 05 01    	movsbl 0x1(%r13,%rax,1),%edi
ffffffff80002e82:	40 84 ff             	test   %dil,%dil
ffffffff80002e85:	74 39                	je     ffffffff80002ec0 <_vsnprintf+0x500>
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002e87:	49 89 dd             	mov    %rbx,%r13
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002e8a:	45 85 e4             	test   %r12d,%r12d
ffffffff80002e8d:	74 d9                	je     ffffffff80002e68 <_vsnprintf+0x4a8>
ffffffff80002e8f:	8b 44 24 10          	mov    0x10(%rsp),%eax
ffffffff80002e93:	85 c0                	test   %eax,%eax
ffffffff80002e95:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002e98:	0f 84 68 02 00 00    	je     ffffffff80003106 <_vsnprintf+0x746>
ffffffff80002e9e:	89 54 24 10          	mov    %edx,0x10(%rsp)
ffffffff80002ea2:	eb c4                	jmp    ffffffff80002e68 <_vsnprintf+0x4a8>
ffffffff80002ea4:	bf 10 00 00 00       	mov    $0x10,%edi
ffffffff80002ea9:	e9 a8 fd ff ff       	jmpq   ffffffff80002c56 <_vsnprintf+0x296>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002eae:	4c 89 c3             	mov    %r8,%rbx
ffffffff80002eb1:	e9 38 fb ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
ffffffff80002eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002ebd:	00 00 00 
ffffffff80002ec0:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff80002ec5:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
        if (flags & FLAGS_LEFT) {
ffffffff80002eca:	8b 44 24 24          	mov    0x24(%rsp),%eax
ffffffff80002ece:	85 c0                	test   %eax,%eax
ffffffff80002ed0:	0f 84 18 fb ff ff    	je     ffffffff800029ee <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80002ed6:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff80002eda:	41 39 cc             	cmp    %ecx,%r12d
ffffffff80002edd:	0f 86 0b fb ff ff    	jbe    ffffffff800029ee <_vsnprintf+0x2e>
ffffffff80002ee3:	41 83 ec 01          	sub    $0x1,%r12d
ffffffff80002ee7:	48 89 da             	mov    %rbx,%rdx
ffffffff80002eea:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff80002eef:	44 89 e0             	mov    %r12d,%eax
ffffffff80002ef2:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002ef6:	29 c8                	sub    %ecx,%eax
ffffffff80002ef8:	4c 01 e0             	add    %r12,%rax
ffffffff80002efb:	4d 89 e5             	mov    %r12,%r13
ffffffff80002efe:	48 89 c3             	mov    %rax,%rbx
ffffffff80002f01:	eb 09                	jmp    ffffffff80002f0c <_vsnprintf+0x54c>
ffffffff80002f03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80002f08:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80002f0c:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002f0f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002f12:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002f17:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002f19:	49 39 dd             	cmp    %rbx,%r13
ffffffff80002f1c:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002f1f:	75 e7                	jne    ffffffff80002f08 <_vsnprintf+0x548>
ffffffff80002f21:	4c 89 eb             	mov    %r13,%rbx
ffffffff80002f24:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
        break;
ffffffff80002f29:	e9 c0 fa ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002f2e:	40 84 ff             	test   %dil,%dil
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80002f31:	44 89 d6             	mov    %r10d,%esi
  for (s = str; *s && maxsize--; ++s);
ffffffff80002f34:	0f 84 68 02 00 00    	je     ffffffff800031a2 <_vsnprintf+0x7e2>
ffffffff80002f3a:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff80002f3e:	e9 a7 fe ff ff       	jmpq   ffffffff80002dea <_vsnprintf+0x42a>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002f43:	85 f6                	test   %esi,%esi
ffffffff80002f45:	0f 85 bd 03 00 00    	jne    ffffffff80003308 <_vsnprintf+0x948>
          else if (flags & FLAGS_LONG) {
ffffffff80002f4b:	f6 c5 01             	test   $0x1,%ch
ffffffff80002f4e:	0f 85 7e 03 00 00    	jne    ffffffff800032d2 <_vsnprintf+0x912>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80002f54:	f6 c1 40             	test   $0x40,%cl
ffffffff80002f57:	0f 84 1b 02 00 00    	je     ffffffff80003178 <_vsnprintf+0x7b8>
ffffffff80002f5d:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002f60:	0f 87 b1 02 00 00    	ja     ffffffff80003217 <_vsnprintf+0x857>
ffffffff80002f66:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002f6a:	89 d0                	mov    %edx,%eax
ffffffff80002f6c:	83 c2 08             	add    $0x8,%edx
ffffffff80002f6f:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002f73:	89 16                	mov    %edx,(%rsi)
ffffffff80002f75:	44 0f be 08          	movsbl (%rax),%r9d
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002f79:	44 89 c8             	mov    %r9d,%eax
ffffffff80002f7c:	51                   	push   %rcx
ffffffff80002f7d:	41 54                	push   %r12
ffffffff80002f7f:	c1 f8 1f             	sar    $0x1f,%eax
ffffffff80002f82:	41 52                	push   %r10
ffffffff80002f84:	57                   	push   %rdi
ffffffff80002f85:	41 89 c0             	mov    %eax,%r8d
ffffffff80002f88:	45 31 c8             	xor    %r9d,%r8d
ffffffff80002f8b:	41 c1 e9 1f          	shr    $0x1f,%r9d
ffffffff80002f8f:	41 29 c0             	sub    %eax,%r8d
ffffffff80002f92:	4d 63 c0             	movslq %r8d,%r8
ffffffff80002f95:	e9 38 fd ff ff       	jmpq   ffffffff80002cd2 <_vsnprintf+0x312>
          flags |= FLAGS_UPPERCASE;
ffffffff80002f9a:	83 c9 20             	or     $0x20,%ecx
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ffffffff80002f9d:	83 e1 f3             	and    $0xfffffff3,%ecx
ffffffff80002fa0:	e9 c5 fc ff ff       	jmpq   ffffffff80002c6a <_vsnprintf+0x2aa>
ffffffff80002fa5:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_LONG_LONG;
ffffffff80002faa:	80 cd 03             	or     $0x3,%ch
ffffffff80002fad:	49 83 c5 03          	add    $0x3,%r13
ffffffff80002fb1:	e9 2e fb ff ff       	jmpq   ffffffff80002ae4 <_vsnprintf+0x124>
ffffffff80002fb6:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_CHAR;
ffffffff80002fbb:	80 c9 c0             	or     $0xc0,%cl
ffffffff80002fbe:	49 83 c5 03          	add    $0x3,%r13
ffffffff80002fc2:	e9 1d fb ff ff       	jmpq   ffffffff80002ae4 <_vsnprintf+0x124>
          while (l++ < width) {
ffffffff80002fc7:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff80002fcb:	0f 86 de 01 00 00    	jbe    ffffffff800031af <_vsnprintf+0x7ef>
ffffffff80002fd1:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
ffffffff80002fd6:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
ffffffff80002fdb:	4d 89 c5             	mov    %r8,%r13
ffffffff80002fde:	4c 01 c0             	add    %r8,%rax
ffffffff80002fe1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80002fe6:	eb 0f                	jmp    ffffffff80002ff7 <_vsnprintf+0x637>
ffffffff80002fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002fef:	00 
ffffffff80002ff0:	4c 89 eb             	mov    %r13,%rbx
ffffffff80002ff3:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80002ff7:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002ffa:	48 89 da             	mov    %rbx,%rdx
ffffffff80002ffd:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003000:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003005:	4d 89 ec             	mov    %r13,%r12
ffffffff80003008:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff8000300a:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff8000300f:	75 df                	jne    ffffffff80002ff0 <_vsnprintf+0x630>
ffffffff80003011:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
ffffffff80003016:	48 83 c3 02          	add    $0x2,%rbx
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000301a:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff8000301e:	8b 01                	mov    (%rcx),%eax
ffffffff80003020:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80003023:	0f 87 d9 01 00 00    	ja     ffffffff80003202 <_vsnprintf+0x842>
ffffffff80003029:	89 c2                	mov    %eax,%edx
ffffffff8000302b:	48 03 51 10          	add    0x10(%rcx),%rdx
ffffffff8000302f:	83 c0 08             	add    $0x8,%eax
ffffffff80003032:	89 01                	mov    %eax,(%rcx)
ffffffff80003034:	0f be 3a             	movsbl (%rdx),%edi
ffffffff80003037:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000303a:	4c 89 e2             	mov    %r12,%rdx
ffffffff8000303d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003040:	ff d5                	callq  *%rbp
ffffffff80003042:	e9 a7 f9 ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80003047:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff8000304b:	41 39 cc             	cmp    %ecx,%r12d
ffffffff8000304e:	8d 41 01             	lea    0x1(%rcx),%eax
ffffffff80003051:	0f 86 63 01 00 00    	jbe    ffffffff800031ba <_vsnprintf+0x7fa>
ffffffff80003057:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
ffffffff8000305c:	4c 8d 43 01          	lea    0x1(%rbx),%r8
ffffffff80003060:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
ffffffff80003065:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
ffffffff8000306a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000306d:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff80003072:	29 c8                	sub    %ecx,%eax
ffffffff80003074:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80003079:	4d 89 c5             	mov    %r8,%r13
ffffffff8000307c:	4c 01 c0             	add    %r8,%rax
ffffffff8000307f:	49 89 c4             	mov    %rax,%r12
ffffffff80003082:	eb 08                	jmp    ffffffff8000308c <_vsnprintf+0x6cc>
ffffffff80003084:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80003088:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000308c:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000308f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003092:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003097:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80003099:	4d 39 e5             	cmp    %r12,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000309c:	4c 89 eb             	mov    %r13,%rbx
ffffffff8000309f:	4c 89 ea             	mov    %r13,%rdx
          while (l++ < width) {
ffffffff800030a2:	75 e4                	jne    ffffffff80003088 <_vsnprintf+0x6c8>
ffffffff800030a4:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
ffffffff800030a9:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
ffffffff800030ae:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
ffffffff800030b3:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffffff800030b8:	41 0f be 39          	movsbl (%r9),%edi
ffffffff800030bc:	41 8d 44 24 01       	lea    0x1(%r12),%eax
ffffffff800030c1:	89 44 24 20          	mov    %eax,0x20(%rsp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff800030c5:	40 84 ff             	test   %dil,%dil
ffffffff800030c8:	0f 85 74 fd ff ff    	jne    ffffffff80002e42 <_vsnprintf+0x482>
ffffffff800030ce:	e9 1b f9 ff ff       	jmpq   ffffffff800029ee <_vsnprintf+0x2e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff800030d3:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800030d6:	0f 87 97 01 00 00    	ja     ffffffff80003273 <_vsnprintf+0x8b3>
ffffffff800030dc:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800030e0:	89 d0                	mov    %edx,%eax
ffffffff800030e2:	83 c2 08             	add    $0x8,%edx
ffffffff800030e5:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800030e9:	89 16                	mov    %edx,(%rsi)
ffffffff800030eb:	51                   	push   %rcx
ffffffff800030ec:	45 31 c9             	xor    %r9d,%r9d
ffffffff800030ef:	41 54                	push   %r12
ffffffff800030f1:	41 52                	push   %r10
ffffffff800030f3:	57                   	push   %rdi
ffffffff800030f4:	4c 8b 00             	mov    (%rax),%r8
ffffffff800030f7:	e9 4e fa ff ff       	jmpq   ffffffff80002b4a <_vsnprintf+0x18a>
ffffffff800030fc:	bf 08 00 00 00       	mov    $0x8,%edi
ffffffff80003101:	e9 97 fe ff ff       	jmpq   ffffffff80002f9d <_vsnprintf+0x5dd>
ffffffff80003106:	4c 89 e8             	mov    %r13,%rax
ffffffff80003109:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff8000310e:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
ffffffff80003113:	48 89 c3             	mov    %rax,%rbx
ffffffff80003116:	e9 af fd ff ff       	jmpq   ffffffff80002eca <_vsnprintf+0x50a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000311b:	f6 c1 80             	test   $0x80,%cl
ffffffff8000311e:	0f 84 8e 01 00 00    	je     ffffffff800032b2 <_vsnprintf+0x8f2>
ffffffff80003124:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003127:	0f 87 70 01 00 00    	ja     ffffffff8000329d <_vsnprintf+0x8dd>
ffffffff8000312d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003131:	89 d0                	mov    %edx,%eax
ffffffff80003133:	83 c2 08             	add    $0x8,%edx
ffffffff80003136:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000313a:	89 16                	mov    %edx,(%rsi)
ffffffff8000313c:	44 0f b7 00          	movzwl (%rax),%r8d
ffffffff80003140:	e9 84 fb ff ff       	jmpq   ffffffff80002cc9 <_vsnprintf+0x309>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80003145:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003148:	0f 87 8a 00 00 00    	ja     ffffffff800031d8 <_vsnprintf+0x818>
ffffffff8000314e:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003152:	89 d0                	mov    %edx,%eax
ffffffff80003154:	83 c2 08             	add    $0x8,%edx
ffffffff80003157:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000315b:	89 16                	mov    %edx,(%rsi)
ffffffff8000315d:	51                   	push   %rcx
ffffffff8000315e:	45 31 c9             	xor    %r9d,%r9d
ffffffff80003161:	41 54                	push   %r12
ffffffff80003163:	41 52                	push   %r10
ffffffff80003165:	57                   	push   %rdi
ffffffff80003166:	4c 8b 00             	mov    (%rax),%r8
ffffffff80003169:	e9 64 fb ff ff       	jmpq   ffffffff80002cd2 <_vsnprintf+0x312>
ffffffff8000316e:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80003173:	e9 25 fe ff ff       	jmpq   ffffffff80002f9d <_vsnprintf+0x5dd>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003178:	f6 c1 80             	test   $0x80,%cl
ffffffff8000317b:	0f 84 56 02 00 00    	je     ffffffff800033d7 <_vsnprintf+0xa17>
ffffffff80003181:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003184:	0f 87 38 02 00 00    	ja     ffffffff800033c2 <_vsnprintf+0xa02>
ffffffff8000318a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000318e:	89 d0                	mov    %edx,%eax
ffffffff80003190:	83 c2 08             	add    $0x8,%edx
ffffffff80003193:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003197:	89 16                	mov    %edx,(%rsi)
ffffffff80003199:	44 0f bf 08          	movswl (%rax),%r9d
ffffffff8000319d:	e9 d7 fd ff ff       	jmpq   ffffffff80002f79 <_vsnprintf+0x5b9>
  for (s = str; *s && maxsize--; ++s);
ffffffff800031a2:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
ffffffff800031a9:	00 
ffffffff800031aa:	e9 61 fc ff ff       	jmpq   ffffffff80002e10 <_vsnprintf+0x450>
          while (l++ < width) {
ffffffff800031af:	49 89 dc             	mov    %rbx,%r12
ffffffff800031b2:	4c 89 c3             	mov    %r8,%rbx
ffffffff800031b5:	e9 60 fe ff ff       	jmpq   ffffffff8000301a <_vsnprintf+0x65a>
          while (l++ < width) {
ffffffff800031ba:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff800031be:	e9 02 ff ff ff       	jmpq   ffffffff800030c5 <_vsnprintf+0x705>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff800031c3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800031c7:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff800031cb:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff800031cf:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800031d3:	e9 c2 f9 ff ff       	jmpq   ffffffff80002b9a <_vsnprintf+0x1da>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff800031d8:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800031dc:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800031e0:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800031e4:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800031e8:	e9 70 ff ff ff       	jmpq   ffffffff8000315d <_vsnprintf+0x79d>
        const char* p = va_arg(va, char*);
ffffffff800031ed:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800031f1:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800031f5:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800031f9:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800031fd:	e9 c8 fb ff ff       	jmpq   ffffffff80002dca <_vsnprintf+0x40a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003202:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff80003206:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff8000320a:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff8000320e:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80003212:	e9 1d fe ff ff       	jmpq   ffffffff80003034 <_vsnprintf+0x674>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003217:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000321b:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000321f:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003223:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003227:	e9 49 fd ff ff       	jmpq   ffffffff80002f75 <_vsnprintf+0x5b5>
      const int w = va_arg(va, int);
ffffffff8000322c:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80003230:	8b 17                	mov    (%rdi),%edx
ffffffff80003232:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003235:	77 2a                	ja     ffffffff80003261 <_vsnprintf+0x8a1>
ffffffff80003237:	89 d0                	mov    %edx,%eax
ffffffff80003239:	48 03 47 10          	add    0x10(%rdi),%rax
ffffffff8000323d:	83 c2 08             	add    $0x8,%edx
ffffffff80003240:	89 17                	mov    %edx,(%rdi)
ffffffff80003242:	44 8b 20             	mov    (%rax),%r12d
      if (w < 0) {
ffffffff80003245:	45 85 e4             	test   %r12d,%r12d
ffffffff80003248:	79 06                	jns    ffffffff80003250 <_vsnprintf+0x890>
        flags |= FLAGS_LEFT;    // reverse padding
ffffffff8000324a:	83 c9 02             	or     $0x2,%ecx
        width = (unsigned int)-w;
ffffffff8000324d:	41 f7 dc             	neg    %r12d
ffffffff80003250:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80003255:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80003259:	49 89 f5             	mov    %rsi,%r13
ffffffff8000325c:	e9 c9 fa ff ff       	jmpq   ffffffff80002d2a <_vsnprintf+0x36a>
      const int w = va_arg(va, int);
ffffffff80003261:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80003265:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff80003269:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000326d:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff80003271:	eb cf                	jmp    ffffffff80003242 <_vsnprintf+0x882>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80003273:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003277:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000327b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000327f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003283:	e9 63 fe ff ff       	jmpq   ffffffff800030eb <_vsnprintf+0x72b>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003288:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000328c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003290:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003294:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003298:	e9 28 fa ff ff       	jmpq   ffffffff80002cc5 <_vsnprintf+0x305>
ffffffff8000329d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032a1:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800032a5:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800032a9:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800032ad:	e9 8a fe ff ff       	jmpq   ffffffff8000313c <_vsnprintf+0x77c>
ffffffff800032b2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800032b5:	0f 87 83 00 00 00    	ja     ffffffff8000333e <_vsnprintf+0x97e>
ffffffff800032bb:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032bf:	89 d0                	mov    %edx,%eax
ffffffff800032c1:	83 c2 08             	add    $0x8,%edx
ffffffff800032c4:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800032c8:	89 16                	mov    %edx,(%rsi)
ffffffff800032ca:	44 8b 00             	mov    (%rax),%r8d
ffffffff800032cd:	e9 f7 f9 ff ff       	jmpq   ffffffff80002cc9 <_vsnprintf+0x309>
            const long value = va_arg(va, long);
ffffffff800032d2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800032d5:	77 7c                	ja     ffffffff80003353 <_vsnprintf+0x993>
ffffffff800032d7:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032db:	89 d0                	mov    %edx,%eax
ffffffff800032dd:	83 c2 08             	add    $0x8,%edx
ffffffff800032e0:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800032e4:	89 16                	mov    %edx,(%rsi)
ffffffff800032e6:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff800032e9:	51                   	push   %rcx
ffffffff800032ea:	41 54                	push   %r12
ffffffff800032ec:	41 52                	push   %r10
ffffffff800032ee:	57                   	push   %rdi
ffffffff800032ef:	4c 89 c8             	mov    %r9,%rax
ffffffff800032f2:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff800032f6:	49 89 c0             	mov    %rax,%r8
ffffffff800032f9:	4d 31 c8             	xor    %r9,%r8
ffffffff800032fc:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003300:	49 29 c0             	sub    %rax,%r8
ffffffff80003303:	e9 ca f9 ff ff       	jmpq   ffffffff80002cd2 <_vsnprintf+0x312>
            const long long value = va_arg(va, long long);
ffffffff80003308:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff8000330b:	77 58                	ja     ffffffff80003365 <_vsnprintf+0x9a5>
ffffffff8000330d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003311:	89 d0                	mov    %edx,%eax
ffffffff80003313:	83 c2 08             	add    $0x8,%edx
ffffffff80003316:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000331a:	89 16                	mov    %edx,(%rsi)
ffffffff8000331c:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff8000331f:	51                   	push   %rcx
ffffffff80003320:	41 54                	push   %r12
ffffffff80003322:	41 52                	push   %r10
ffffffff80003324:	57                   	push   %rdi
ffffffff80003325:	4c 89 c8             	mov    %r9,%rax
ffffffff80003328:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8000332c:	49 89 c0             	mov    %rax,%r8
ffffffff8000332f:	4d 31 c8             	xor    %r9,%r8
ffffffff80003332:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003336:	49 29 c0             	sub    %rax,%r8
ffffffff80003339:	e9 0c f8 ff ff       	jmpq   ffffffff80002b4a <_vsnprintf+0x18a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000333e:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003342:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003346:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000334a:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000334e:	e9 77 ff ff ff       	jmpq   ffffffff800032ca <_vsnprintf+0x90a>
            const long value = va_arg(va, long);
ffffffff80003353:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003357:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000335b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000335f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003363:	eb 81                	jmp    ffffffff800032e6 <_vsnprintf+0x926>
            const long long value = va_arg(va, long long);
ffffffff80003365:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003369:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000336d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003371:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003375:	eb a5                	jmp    ffffffff8000331c <_vsnprintf+0x95c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80003377:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000337b:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff8000337f:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80003383:	48 89 46 08          	mov    %rax,0x8(%rsi)
ffffffff80003387:	e9 b1 f7 ff ff       	jmpq   ffffffff80002b3d <_vsnprintf+0x17d>
        const int prec = (int)va_arg(va, int);
ffffffff8000338c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003390:	8b 16                	mov    (%rsi),%edx
ffffffff80003392:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003395:	77 5c                	ja     ffffffff800033f3 <_vsnprintf+0xa33>
ffffffff80003397:	89 d0                	mov    %edx,%eax
ffffffff80003399:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000339d:	83 c2 08             	add    $0x8,%edx
ffffffff800033a0:	89 16                	mov    %edx,(%rsi)
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff800033a2:	8b 10                	mov    (%rax),%edx
ffffffff800033a4:	41 ba 00 00 00 00    	mov    $0x0,%r10d
ffffffff800033aa:	49 8d 7d 03          	lea    0x3(%r13),%rdi
ffffffff800033ae:	85 d2                	test   %edx,%edx
ffffffff800033b0:	44 0f 49 10          	cmovns (%rax),%r10d
ffffffff800033b4:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
        format++;
ffffffff800033b9:	49 83 c5 02          	add    $0x2,%r13
ffffffff800033bd:	e9 00 f7 ff ff       	jmpq   ffffffff80002ac2 <_vsnprintf+0x102>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff800033c2:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033c6:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033ca:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033ce:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800033d2:	e9 c2 fd ff ff       	jmpq   ffffffff80003199 <_vsnprintf+0x7d9>
ffffffff800033d7:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800033da:	77 29                	ja     ffffffff80003405 <_vsnprintf+0xa45>
ffffffff800033dc:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033e0:	89 d0                	mov    %edx,%eax
ffffffff800033e2:	83 c2 08             	add    $0x8,%edx
ffffffff800033e5:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800033e9:	89 16                	mov    %edx,(%rsi)
ffffffff800033eb:	44 8b 08             	mov    (%rax),%r9d
ffffffff800033ee:	e9 86 fb ff ff       	jmpq   ffffffff80002f79 <_vsnprintf+0x5b9>
        const int prec = (int)va_arg(va, int);
ffffffff800033f3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033f7:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033fb:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033ff:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003403:	eb 9d                	jmp    ffffffff800033a2 <_vsnprintf+0x9e2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003405:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003409:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000340d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003411:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003415:	eb d4                	jmp    ffffffff800033eb <_vsnprintf+0xa2b>
ffffffff80003417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000341e:	00 00 

ffffffff80003420 <_out_char>:
  if (character) {
ffffffff80003420:	40 84 ff             	test   %dil,%dil
ffffffff80003423:	75 0b                	jne    ffffffff80003430 <_out_char+0x10>
}
ffffffff80003425:	f3 c3                	repz retq 
ffffffff80003427:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000342e:	00 00 
    _putchar(character);
ffffffff80003430:	40 0f be ff          	movsbl %dil,%edi
ffffffff80003434:	e9 c7 01 00 00       	jmpq   ffffffff80003600 <_putchar>
ffffffff80003439:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003440 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
ffffffff80003440:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003444:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003449:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
ffffffff8000344e:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80003453:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
ffffffff80003458:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff8000345d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  va_start(va, format);
ffffffff80003462:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003467:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
{
ffffffff8000346c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80003471:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80003478:	48 89 f9             	mov    %rdi,%rcx
ffffffff8000347b:	48 c7 c7 20 34 00 80 	mov    $0xffffffff80003420,%rdi
{
ffffffff80003482:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003487:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
ffffffff8000348e:	00 
ffffffff8000348f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80003494:	e8 27 f5 ff ff       	callq  ffffffff800029c0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80003499:	48 83 c4 58          	add    $0x58,%rsp
ffffffff8000349d:	c3                   	retq   
ffffffff8000349e:	66 90                	xchg   %ax,%ax

ffffffff800034a0 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
ffffffff800034a0:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff800034a4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff800034a9:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800034ae:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff800034b3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffffff800034b8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800034bd:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff800034c4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800034c9:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800034ce:	48 89 f1             	mov    %rsi,%rcx
ffffffff800034d1:	48 89 fe             	mov    %rdi,%rsi
ffffffff800034d4:	48 c7 c7 90 23 00 80 	mov    $0xffffffff80002390,%rdi
{
ffffffff800034db:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff800034e0:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff800034e7:	00 
ffffffff800034e8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800034ed:	e8 ce f4 ff ff       	callq  ffffffff800029c0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff800034f2:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800034f6:	c3                   	retq   
ffffffff800034f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800034fe:	00 00 

ffffffff80003500 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
ffffffff80003500:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003504:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003509:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff8000350e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80003513:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003518:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000351b:	48 89 f2             	mov    %rsi,%rdx
  va_start(va, format);
ffffffff8000351e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003523:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003528:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000352b:	48 c7 c7 90 23 00 80 	mov    $0xffffffff80002390,%rdi
{
ffffffff80003532:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003537:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%rsp)
ffffffff8000353e:	00 
ffffffff8000353f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003544:	e8 77 f4 ff ff       	callq  ffffffff800029c0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80003549:	48 83 c4 58          	add    $0x58,%rsp
ffffffff8000354d:	c3                   	retq   
ffffffff8000354e:	66 90                	xchg   %ax,%ax

ffffffff80003550 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
ffffffff80003550:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80003554:	49 89 f0             	mov    %rsi,%r8
ffffffff80003557:	48 89 f9             	mov    %rdi,%rcx
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff8000355a:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
ffffffff8000355f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80003566:	48 c7 c7 20 34 00 80 	mov    $0xffffffff80003420,%rdi
ffffffff8000356d:	e8 4e f4 ff ff       	callq  ffffffff800029c0 <_vsnprintf>
}
ffffffff80003572:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80003576:	c3                   	retq   
ffffffff80003577:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000357e:	00 00 

ffffffff80003580 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
ffffffff80003580:	49 89 c8             	mov    %rcx,%r8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003583:	48 89 d1             	mov    %rdx,%rcx
ffffffff80003586:	48 89 f2             	mov    %rsi,%rdx
ffffffff80003589:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000358c:	48 c7 c7 90 23 00 80 	mov    $0xffffffff80002390,%rdi
ffffffff80003593:	e9 28 f4 ff ff       	jmpq   ffffffff800029c0 <_vsnprintf>
ffffffff80003598:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000359f:	00 

ffffffff800035a0 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
ffffffff800035a0:	48 83 ec 68          	sub    $0x68,%rsp
  va_list va;
  va_start(va, format);
ffffffff800035a4:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
{
ffffffff800035a9:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff800035ae:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800035b3:	4c 8d 44 24 18       	lea    0x18(%rsp),%r8
ffffffff800035b8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
{
ffffffff800035bd:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  va_start(va, format);
ffffffff800035c2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff800035c7:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff800035cc:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800035d1:	48 89 d1             	mov    %rdx,%rcx
ffffffff800035d4:	48 c7 c7 b0 23 00 80 	mov    $0xffffffff800023b0,%rdi
ffffffff800035db:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff800035e2:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
  va_start(va, format);
ffffffff800035e7:	c7 44 24 18 18 00 00 	movl   $0x18,0x18(%rsp)
ffffffff800035ee:	00 
ffffffff800035ef:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800035f4:	e8 c7 f3 ff ff       	callq  ffffffff800029c0 <_vsnprintf>
  va_end(va);
  return ret;
ffffffff800035f9:	48 83 c4 68          	add    $0x68,%rsp
ffffffff800035fd:	c3                   	retq   
ffffffff800035fe:	66 90                	xchg   %ax,%ax

ffffffff80003600 <_putchar>:
#include "../device/console/console.h"

void _putchar(char character)
{
    
    putchar(character);
ffffffff80003600:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80003604:	e9 47 e3 ff ff       	jmpq   ffffffff80001950 <putchar>
ffffffff80003609:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003610 <serial_printf>:
    
    //serial_write(0x3F8, character);
}

void serial_printf(uint16_t port, const char* format, ...)
{
ffffffff80003610:	53                   	push   %rbx
ffffffff80003611:	89 fb                	mov    %edi,%ebx
ffffffff80003613:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    char buffer[64];

    va_list argptr;
    va_start(argptr, format);
ffffffff8000361a:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
ffffffff80003621:	00 
{
ffffffff80003622:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003627:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
ffffffff8000362c:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
{
ffffffff80003631:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003636:	48 89 f2             	mov    %rsi,%rdx
    va_start(argptr, format);
ffffffff80003639:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff8000363e:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003643:	be 40 00 00 00       	mov    $0x40,%esi
{
ffffffff80003648:	4c 89 84 24 80 00 00 	mov    %r8,0x80(%rsp)
ffffffff8000364f:	00 
ffffffff80003650:	4c 89 8c 24 88 00 00 	mov    %r9,0x88(%rsp)
ffffffff80003657:	00 
    va_start(argptr, format);
ffffffff80003658:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff8000365f:	00 
ffffffff80003660:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003665:	e8 16 ff ff ff       	callq  ffffffff80003580 <vsnprintf_>
    va_end(argptr);

    serial_write_str(port, buffer);
ffffffff8000366a:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff8000366f:	0f b7 fb             	movzwl %bx,%edi
ffffffff80003672:	e8 c9 e8 ff ff       	callq  ffffffff80001f40 <serial_write_str>
ffffffff80003677:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
ffffffff8000367e:	5b                   	pop    %rbx
ffffffff8000367f:	c3                   	retq   

ffffffff80003680 <pagewalk>:
#include <stdint.h>
#include <stddef.h>


void pagewalk()
{
ffffffff80003680:	eb fe                	jmp    ffffffff80003680 <pagewalk>
ffffffff80003682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80003689:	00 00 00 
ffffffff8000368c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80003690 <print_gdt>:
uint8_t ist2[4096];

void print_gdt()
{

}
ffffffff80003690:	f3 c3                	repz retq 
ffffffff80003692:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80003699:	00 00 00 00 
ffffffff8000369d:	0f 1f 00             	nopl   (%rax)

ffffffff800036a0 <gdt_init>:

void gdt_init()
{
    gdt.null0.raw = 0x00;
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff800036a0:	48 b8 ff ff 00 00 00 	movabs $0xaf9a000000ffff,%rax
ffffffff800036a7:	9a af 00 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);

    gdtr.base = (uint64_t)&gdt;
    gdtr.limit = sizeof(gdt);

    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff800036aa:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff800036af:	48 c7 c7 60 1b 01 80 	mov    $0xffffffff80011b60,%rdi
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff800036b6:	48 89 05 4b e5 00 00 	mov    %rax,0xe54b(%rip)        # ffffffff80011c08 <gdt+0x8>
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff800036bd:	48 b8 ff ff 00 00 00 	movabs $0xaf92000000ffff,%rax
ffffffff800036c4:	92 af 00 
    gdt.null0.raw = 0x00;
ffffffff800036c7:	48 c7 05 2e e5 00 00 	movq   $0x0,0xe52e(%rip)        # ffffffff80011c00 <gdt>
ffffffff800036ce:	00 00 00 00 
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff800036d2:	48 89 05 37 e5 00 00 	mov    %rax,0xe537(%rip)        # ffffffff80011c10 <gdt+0x10>
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff800036d9:	48 b8 ff ff 00 00 00 	movabs $0xaffa000000ffff,%rax
ffffffff800036e0:	fa af 00 
    gdt.null1.raw = 0x00;
ffffffff800036e3:	48 c7 05 2a e5 00 00 	movq   $0x0,0xe52a(%rip)        # ffffffff80011c18 <gdt+0x18>
ffffffff800036ea:	00 00 00 00 
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff800036ee:	48 89 05 2b e5 00 00 	mov    %rax,0xe52b(%rip)        # ffffffff80011c20 <gdt+0x20>
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff800036f5:	48 b8 ff ff 00 00 00 	movabs $0xaff2000000ffff,%rax
ffffffff800036fc:	f2 af 00 
    gdt.null2.raw = 0x00;
ffffffff800036ff:	48 c7 05 26 e5 00 00 	movq   $0x0,0xe526(%rip)        # ffffffff80011c30 <gdt+0x30>
ffffffff80003706:	00 00 00 00 
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff8000370a:	48 89 05 17 e5 00 00 	mov    %rax,0xe517(%rip)        # ffffffff80011c28 <gdt+0x28>
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003711:	48 c7 c0 80 1b 01 80 	mov    $0xffffffff80011b80,%rax
    gdt.null3.raw = 0x00;
ffffffff80003718:	48 c7 05 15 e5 00 00 	movq   $0x0,0xe515(%rip)        # ffffffff80011c38 <gdt+0x38>
ffffffff8000371f:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003723:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003726:	66 89 05 25 e5 00 00 	mov    %ax,0xe525(%rip)        # ffffffff80011c52 <gdt+0x52>
    gdt.null4.raw = 0x00;
ffffffff8000372d:	48 c7 05 08 e5 00 00 	movq   $0x0,0xe508(%rip)        # ffffffff80011c40 <gdt+0x40>
ffffffff80003734:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003738:	48 c1 ea 10          	shr    $0x10,%rdx
    gdt.null5.raw = 0x00;
ffffffff8000373c:	48 c7 05 01 e5 00 00 	movq   $0x0,0xe501(%rip)        # ffffffff80011c48 <gdt+0x48>
ffffffff80003743:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff80003747:	c6 05 07 e5 00 00 89 	movb   $0x89,0xe507(%rip)        # ffffffff80011c55 <gdt+0x55>
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff8000374e:	88 15 00 e5 00 00    	mov    %dl,0xe500(%rip)        # ffffffff80011c54 <gdt+0x54>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003754:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff80003757:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8000375b:	89 05 f7 e4 00 00    	mov    %eax,0xe4f7(%rip)        # ffffffff80011c58 <gdt+0x58>
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff80003761:	b8 68 00 00 00       	mov    $0x68,%eax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003766:	48 c1 ea 18          	shr    $0x18,%rdx
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff8000376a:	66 89 05 df e4 00 00 	mov    %ax,0xe4df(%rip)        # ffffffff80011c50 <gdt+0x50>
    gdt.tss_entry.reserved0 = 0;
ffffffff80003771:	0f b6 05 de e4 00 00 	movzbl 0xe4de(%rip),%eax        # ffffffff80011c56 <gdt+0x56>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003778:	88 15 d9 e4 00 00    	mov    %dl,0xe4d9(%rip)        # ffffffff80011c57 <gdt+0x57>
    gdtr.limit = sizeof(gdt);
ffffffff8000377e:	ba 60 00 00 00       	mov    $0x60,%edx
    gdt.tss_entry.reserved1 = 0;
ffffffff80003783:	c7 05 cf e4 00 00 00 	movl   $0x0,0xe4cf(%rip)        # ffffffff80011c5c <gdt+0x5c>
ffffffff8000378a:	00 00 00 
    tss.reserved0 = 0x00;
ffffffff8000378d:	c7 05 e9 e3 00 00 00 	movl   $0x0,0xe3e9(%rip)        # ffffffff80011b80 <tss>
ffffffff80003794:	00 00 00 
    tss.RSP0 = (uint64_t)stack + sizeof(stack);
ffffffff80003797:	48 c7 05 e2 e3 00 00 	movq   $0xffffffff8000a660,0xe3e2(%rip)        # ffffffff80011b84 <tss+0x4>
ffffffff8000379e:	60 a6 00 80 
    tss.RSP2 = (uint64_t)rsp2stack + sizeof(rsp2stack);
ffffffff800037a2:	48 c7 05 e7 e3 00 00 	movq   $0xffffffff8000db00,0xe3e7(%rip)        # ffffffff80011b94 <tss+0x14>
ffffffff800037a9:	00 db 00 80 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);
ffffffff800037ad:	48 c7 05 ec e3 00 00 	movq   $0xffffffff8000fb00,0xe3ec(%rip)        # ffffffff80011ba4 <tss+0x24>
ffffffff800037b4:	00 fb 00 80 
    gdt.tss_entry.reserved0 = 0;
ffffffff800037b8:	83 e0 40             	and    $0x40,%eax
    gdtr.base = (uint64_t)&gdt;
ffffffff800037bb:	48 c7 05 9c e3 00 00 	movq   $0xffffffff80011c00,0xe39c(%rip)        # ffffffff80011b62 <gdtr+0x2>
ffffffff800037c2:	00 1c 01 80 
    gdtr.limit = sizeof(gdt);
ffffffff800037c6:	66 89 15 93 e3 00 00 	mov    %dx,0xe393(%rip)        # ffffffff80011b60 <gdtr>
    gdt.tss_entry.reserved0 = 0;
ffffffff800037cd:	88 05 83 e4 00 00    	mov    %al,0xe483(%rip)        # ffffffff80011c56 <gdt+0x56>
    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff800037d3:	e9 68 c8 ff ff       	jmpq   ffffffff80000040 <gdt_load>
ffffffff800037d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800037df:	00 

ffffffff800037e0 <memset>:
#include "kstring.h"

void* memset(void* s, uint64_t c, uint64_t len)
{
    unsigned char* p=s;
    while(len--)
ffffffff800037e0:	48 85 d2             	test   %rdx,%rdx
{
ffffffff800037e3:	48 89 f8             	mov    %rdi,%rax
    while(len--)
ffffffff800037e6:	74 15                	je     ffffffff800037fd <memset+0x1d>
ffffffff800037e8:	48 01 fa             	add    %rdi,%rdx
    unsigned char* p=s;
ffffffff800037eb:	48 89 f9             	mov    %rdi,%rcx
ffffffff800037ee:	66 90                	xchg   %ax,%ax
    {
        *p++ = (unsigned char)c;
ffffffff800037f0:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800037f4:	40 88 71 ff          	mov    %sil,-0x1(%rcx)
    while(len--)
ffffffff800037f8:	48 39 d1             	cmp    %rdx,%rcx
ffffffff800037fb:	75 f3                	jne    ffffffff800037f0 <memset+0x10>
    }
    return s;
}
ffffffff800037fd:	f3 c3                	repz retq 
ffffffff800037ff:	90                   	nop

ffffffff80003800 <memcmp>:

int memcmp(const void* str1, const void* str2, size_t n)
{
    if(!n)
        return 0;
ffffffff80003800:	31 c0                	xor    %eax,%eax
    if(!n)
ffffffff80003802:	48 85 d2             	test   %rdx,%rdx
ffffffff80003805:	74 36                	je     ffffffff8000383d <memcmp+0x3d>

    while(--n && *(uint8_t*)str1 == *(uint8_t*)str2)
ffffffff80003807:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000380b:	44 0f b6 06          	movzbl (%rsi),%r8d
ffffffff8000380f:	0f b6 0f             	movzbl (%rdi),%ecx
ffffffff80003812:	74 23                	je     ffffffff80003837 <memcmp+0x37>
ffffffff80003814:	41 38 c8             	cmp    %cl,%r8b
ffffffff80003817:	75 1e                	jne    ffffffff80003837 <memcmp+0x37>
ffffffff80003819:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000381e:	eb 09                	jmp    ffffffff80003829 <memcmp+0x29>
ffffffff80003820:	48 83 c0 01          	add    $0x1,%rax
ffffffff80003824:	44 38 c1             	cmp    %r8b,%cl
ffffffff80003827:	75 0e                	jne    ffffffff80003837 <memcmp+0x37>
ffffffff80003829:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000382c:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff80003830:	44 0f b6 04 06       	movzbl (%rsi,%rax,1),%r8d
ffffffff80003835:	75 e9                	jne    ffffffff80003820 <memcmp+0x20>
    {
        str1 = (uint8_t*)str1 + 1;
        str2 = (uint8_t*)str2 + 1;
    }

    return (*((uint8_t*)str1) - *((uint8_t*)str2));
ffffffff80003837:	0f b6 c1             	movzbl %cl,%eax
ffffffff8000383a:	44 29 c0             	sub    %r8d,%eax
ffffffff8000383d:	f3 c3                	repz retq 
ffffffff8000383f:	90                   	nop

ffffffff80003840 <user_function>:
#include "./usermode/usermode.h"

uint64_t user_stack [1024];

void user_function()
{
ffffffff80003840:	48 83 ec 08          	sub    $0x8,%rsp
    printf("User Mode!\n");
ffffffff80003844:	48 c7 c7 a8 51 00 80 	mov    $0xffffffff800051a8,%rdi
ffffffff8000384b:	31 c0                	xor    %eax,%eax
ffffffff8000384d:	e8 ee fb ff ff       	callq  ffffffff80003440 <printf_>
ffffffff80003852:	eb fe                	jmp    ffffffff80003852 <user_function+0x12>
ffffffff80003854:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000385b:	00 00 00 00 
ffffffff8000385f:	90                   	nop

ffffffff80003860 <kernel>:
    for(;;);
}

void kernel()
{
ffffffff80003860:	48 83 ec 08          	sub    $0x8,%rsp

    //printf("Kernel Now\n");
    serial_init(0x3F8);     //COM1
ffffffff80003864:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80003869:	e8 72 e5 ff ff       	callq  ffffffff80001de0 <serial_init>
    gdt_init();
ffffffff8000386e:	31 c0                	xor    %eax,%eax
ffffffff80003870:	e8 2b fe ff ff       	callq  ffffffff800036a0 <gdt_init>
    idt_init();
ffffffff80003875:	31 c0                	xor    %eax,%eax
ffffffff80003877:	e8 a4 00 00 00       	callq  ffffffff80003920 <idt_init>
    fb_init();
ffffffff8000387c:	31 c0                	xor    %eax,%eax
ffffffff8000387e:	e8 9d df ff ff       	callq  ffffffff80001820 <fb_init>
    console_init();
ffffffff80003883:	31 c0                	xor    %eax,%eax
ffffffff80003885:	e8 a6 e3 ff ff       	callq  ffffffff80001c30 <console_init>

    //serial_write(0x3F8, 'm');

    pmm_init();
ffffffff8000388a:	31 c0                	xor    %eax,%eax
ffffffff8000388c:	e8 1f db ff ff       	callq  ffffffff800013b0 <pmm_init>
    vmm_init();
ffffffff80003891:	31 c0                	xor    %eax,%eax
ffffffff80003893:	e8 18 d2 ff ff       	callq  ffffffff80000ab0 <vmm_init>

    user_init();
ffffffff80003898:	31 c0                	xor    %eax,%eax
ffffffff8000389a:	e8 41 cb ff ff       	callq  ffffffff800003e0 <user_init>
    
    printf("Go to user mode!\n");
ffffffff8000389f:	48 c7 c7 b4 51 00 80 	mov    $0xffffffff800051b4,%rdi
ffffffff800038a6:	31 c0                	xor    %eax,%eax
ffffffff800038a8:	e8 93 fb ff ff       	callq  ffffffff80003440 <printf_>

    to_usermode(user_function, &user_stack[1023]);
ffffffff800038ad:	48 c7 c7 40 38 00 80 	mov    $0xffffffff80003840,%rdi
ffffffff800038b4:	48 c7 c6 f8 1a 01 80 	mov    $0xffffffff80011af8,%rsi
ffffffff800038bb:	e8 40 c7 ff ff       	callq  ffffffff80000000 <to_usermode>
    //fb_clearscreen(FB_COLOR_BLUE);

    //int_test();

    //stty_sendcmd(0);
    printf("Kernel Done!\n"); 
ffffffff800038c0:	48 c7 c7 c6 51 00 80 	mov    $0xffffffff800051c6,%rdi
ffffffff800038c7:	31 c0                	xor    %eax,%eax
ffffffff800038c9:	e8 72 fb ff ff       	callq  ffffffff80003440 <printf_>
ffffffff800038ce:	eb fe                	jmp    ffffffff800038ce <kernel+0x6e>

ffffffff800038d0 <create_descriptor>:

void create_descriptor(uint16_t index, void* isr, uint8_t ist, uint8_t cs, uint8_t attr)
{
    struct idt_entry* entry = &idt[index];

    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800038d0:	0f b7 ff             	movzwl %di,%edi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800038d3:	48 89 f0             	mov    %rsi,%rax
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
    entry->ist = ist;
    entry->kernel_cs = cs;
ffffffff800038d6:	0f b6 c9             	movzbl %cl,%ecx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800038d9:	48 c1 e7 04          	shl    $0x4,%rdi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800038dd:	48 c1 e8 10          	shr    $0x10,%rax
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800038e1:	66 89 b7 80 1c 01 80 	mov    %si,-0x7ffee380(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800038e8:	48 c1 ee 20          	shr    $0x20,%rsi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800038ec:	66 89 87 86 1c 01 80 	mov    %ax,-0x7ffee37a(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800038f3:	89 b7 88 1c 01 80    	mov    %esi,-0x7ffee378(%rdi)
    entry->ist = ist;
ffffffff800038f9:	88 97 84 1c 01 80    	mov    %dl,-0x7ffee37c(%rdi)
    entry->kernel_cs = cs;
ffffffff800038ff:	66 89 8f 82 1c 01 80 	mov    %cx,-0x7ffee37e(%rdi)
    entry->attributes = attr;
ffffffff80003906:	44 88 87 85 1c 01 80 	mov    %r8b,-0x7ffee37b(%rdi)
    entry->reserved = 0;
ffffffff8000390d:	c7 87 8c 1c 01 80 00 	movl   $0x0,-0x7ffee374(%rdi)
ffffffff80003914:	00 00 00 
}
ffffffff80003917:	c3                   	retq   
ffffffff80003918:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000391f:	00 

ffffffff80003920 <idt_init>:

void idt_init()
{
    //uint64_t idt_ptr = hh_code_to_phys((uint64_t)&idt[0]);
    idtr.base = (uint64_t)&idt[0];
ffffffff80003920:	48 c7 c0 80 1c 01 80 	mov    $0xffffffff80011c80,%rax
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003927:	b9 ff 0f 00 00       	mov    $0xfff,%ecx
{
ffffffff8000392c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80003930:	48 8d b8 f0 02 00 00 	lea    0x2f0(%rax),%rdi
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003937:	66 89 0d 2a e3 00 00 	mov    %cx,0xe32a(%rip)        # ffffffff80011c68 <idtr>
    idtr.base = (uint64_t)&idt[0];
ffffffff8000393e:	48 89 05 25 e3 00 00 	mov    %rax,0xe325(%rip)        # ffffffff80011c6a <idtr+0x2>
ffffffff80003945:	48 c7 c1 48 02 00 80 	mov    $0xffffffff80000248,%rcx
ffffffff8000394c:	0f 1f 40 00          	nopl   0x0(%rax)

    for(uint8_t index = 0; index < 47; index++)
    {
        create_descriptor(index, isr_stub_table[index], 0x00, 0x08, 0x8E);
ffffffff80003950:	48 8b 11             	mov    (%rcx),%rdx
    entry->ist = ist;
ffffffff80003953:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80003957:	48 83 c0 10          	add    $0x10,%rax
    entry->attributes = attr;
ffffffff8000395b:	c6 40 f5 8e          	movb   $0x8e,-0xb(%rax)
    entry->reserved = 0;
ffffffff8000395f:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
ffffffff80003966:	48 83 c1 08          	add    $0x8,%rcx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff8000396a:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000396e:	48 89 d6             	mov    %rdx,%rsi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003971:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80003975:	89 50 f8             	mov    %edx,-0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003978:	48 c1 ee 10          	shr    $0x10,%rsi
    entry->kernel_cs = cs;
ffffffff8000397c:	ba 08 00 00 00       	mov    $0x8,%edx
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003981:	66 89 70 f6          	mov    %si,-0xa(%rax)
    entry->kernel_cs = cs;
ffffffff80003985:	66 89 50 f2          	mov    %dx,-0xe(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80003989:	48 39 f8             	cmp    %rdi,%rax
ffffffff8000398c:	75 c2                	jne    ffffffff80003950 <idt_init+0x30>
    }

    create_descriptor(127, isr_stub_table[48], 0x00, 0x08, 0x8E);
ffffffff8000398e:	48 8b 05 33 ca ff ff 	mov    -0x35cd(%rip),%rax        # ffffffff800003c8 <isr_stub_table+0x180>
    entry->kernel_cs = cs;
ffffffff80003995:	c7 05 d3 ea 00 00 08 	movl   $0x8e000008,0xead3(%rip)        # ffffffff80012472 <idt+0x7f2>
ffffffff8000399c:	00 00 8e 
    entry->reserved = 0;
ffffffff8000399f:	c7 05 d3 ea 00 00 00 	movl   $0x0,0xead3(%rip)        # ffffffff8001247c <idt+0x7fc>
ffffffff800039a6:	00 00 00 
    entry->kernel_cs = cs;
ffffffff800039a9:	c7 05 cf ea 00 00 08 	movl   $0x8e000008,0xeacf(%rip)        # ffffffff80012482 <idt+0x802>
ffffffff800039b0:	00 00 8e 
    entry->reserved = 0;
ffffffff800039b3:	c7 05 cf ea 00 00 00 	movl   $0x0,0xeacf(%rip)        # ffffffff8001248c <idt+0x80c>
ffffffff800039ba:	00 00 00 
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800039bd:	66 89 05 ac ea 00 00 	mov    %ax,0xeaac(%rip)        # ffffffff80012470 <idt+0x7f0>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039c4:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800039c7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff800039cb:	89 05 a7 ea 00 00    	mov    %eax,0xeaa7(%rip)        # ffffffff80012478 <idt+0x7f8>
    create_descriptor(128, isr_stub_table[49], 0x00, 0x08, 0x8E);
ffffffff800039d1:	48 8b 05 f8 c9 ff ff 	mov    -0x3608(%rip),%rax        # ffffffff800003d0 <isr_stub_table+0x188>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039d8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff800039dc:	66 89 15 93 ea 00 00 	mov    %dx,0xea93(%rip)        # ffffffff80012476 <idt+0x7f6>
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800039e3:	66 89 05 96 ea 00 00 	mov    %ax,0xea96(%rip)        # ffffffff80012480 <idt+0x800>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039ea:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800039ed:	48 c1 e8 20          	shr    $0x20,%rax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039f1:	48 c1 ea 10          	shr    $0x10,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800039f5:	89 05 8d ea 00 00    	mov    %eax,0xea8d(%rip)        # ffffffff80012488 <idt+0x808>

    pic_remap();
ffffffff800039fb:	31 c0                	xor    %eax,%eax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039fd:	66 89 15 82 ea 00 00 	mov    %dx,0xea82(%rip)        # ffffffff80012486 <idt+0x806>
    pic_remap();
ffffffff80003a04:	e8 27 e8 ff ff       	callq  ffffffff80002230 <pic_remap>
    pic_disable();
ffffffff80003a09:	31 c0                	xor    %eax,%eax
ffffffff80003a0b:	e8 f0 e7 ff ff       	callq  ffffffff80002200 <pic_disable>

    

    idt_load(&idtr);
ffffffff80003a10:	48 c7 c7 68 1c 01 80 	mov    $0xffffffff80011c68,%rdi
ffffffff80003a17:	e8 bc c9 ff ff       	callq  ffffffff800003d8 <idt_load>

    pit_init(10000);
ffffffff80003a1c:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff80003a21:	e8 0a e9 ff ff       	callq  ffffffff80002330 <pit_init>

    pic_clear_mask(1);
ffffffff80003a26:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80003a2b:	e8 80 e7 ff ff       	callq  ffffffff800021b0 <pic_clear_mask>
    pic_clear_mask(0);
ffffffff80003a30:	31 ff                	xor    %edi,%edi


    //__asm__ volatile ("lidt %0" : : "m"(idtr));
    //__asm__ volatile ("sti");
}
ffffffff80003a32:	48 83 c4 08          	add    $0x8,%rsp
    pic_clear_mask(0);
ffffffff80003a36:	e9 75 e7 ff ff       	jmpq   ffffffff800021b0 <pic_clear_mask>
ffffffff80003a3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80003a40 <interrupt_handler>:

uint64_t interrupt_handler(uint64_t rsp)
{
ffffffff80003a40:	55                   	push   %rbp
ffffffff80003a41:	53                   	push   %rbx
ffffffff80003a42:	48 89 fb             	mov    %rdi,%rbx
ffffffff80003a45:	48 83 ec 08          	sub    $0x8,%rsp
    struct interrupt_stack_frame* frame = (struct interrupt_stack_frame*)rsp;
    
    if(frame->int_no < 32)
ffffffff80003a49:	48 8b 77 78          	mov    0x78(%rdi),%rsi
ffffffff80003a4d:	48 83 fe 1f          	cmp    $0x1f,%rsi
ffffffff80003a51:	77 1d                	ja     ffffffff80003a70 <interrupt_handler+0x30>
    {
        if(frame->cs == 0x08)
ffffffff80003a53:	48 83 bf 90 00 00 00 	cmpq   $0x8,0x90(%rdi)
ffffffff80003a5a:	08 
ffffffff80003a5b:	74 63                	je     ffffffff80003ac0 <interrupt_handler+0x80>
    {
        printf("Syscall 127\n");
        return rsp;
    }
    return rsp;
ffffffff80003a5d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003a61:	48 89 d8             	mov    %rbx,%rax
ffffffff80003a64:	5b                   	pop    %rbx
ffffffff80003a65:	5d                   	pop    %rbp
ffffffff80003a66:	c3                   	retq   
ffffffff80003a67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003a6e:	00 00 
    else if (frame->int_no < 48)
ffffffff80003a70:	48 83 fe 2f          	cmp    $0x2f,%rsi
ffffffff80003a74:	77 32                	ja     ffffffff80003aa8 <interrupt_handler+0x68>
        uint64_t irq = frame->int_no - 32;
ffffffff80003a76:	48 8d 6e e0          	lea    -0x20(%rsi),%rbp
        if(irq > 1)
ffffffff80003a7a:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff80003a7e:	0f 87 fc 00 00 00    	ja     ffffffff80003b80 <interrupt_handler+0x140>
        switch(irq)
ffffffff80003a84:	0f 84 e6 00 00 00    	je     ffffffff80003b70 <interrupt_handler+0x130>
                pit_ticks++;
ffffffff80003a8a:	48 83 05 ce e1 00 00 	addq   $0x1,0xe1ce(%rip)        # ffffffff80011c60 <pit_ticks>
ffffffff80003a91:	01 
        pic_EOI(irq);
ffffffff80003a92:	89 ef                	mov    %ebp,%edi
ffffffff80003a94:	e8 87 e6 ff ff       	callq  ffffffff80002120 <pic_EOI>
ffffffff80003a99:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003a9d:	48 89 d8             	mov    %rbx,%rax
ffffffff80003aa0:	5b                   	pop    %rbx
ffffffff80003aa1:	5d                   	pop    %rbp
ffffffff80003aa2:	c3                   	retq   
ffffffff80003aa3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    else if (frame->int_no == 127)
ffffffff80003aa8:	48 83 fe 7f          	cmp    $0x7f,%rsi
ffffffff80003aac:	75 af                	jne    ffffffff80003a5d <interrupt_handler+0x1d>
        printf("Syscall 127\n");
ffffffff80003aae:	48 c7 c7 5b 52 00 80 	mov    $0xffffffff8000525b,%rdi
ffffffff80003ab5:	31 c0                	xor    %eax,%eax
ffffffff80003ab7:	e8 84 f9 ff ff       	callq  ffffffff80003440 <printf_>
        return rsp;
ffffffff80003abc:	eb 9f                	jmp    ffffffff80003a5d <interrupt_handler+0x1d>
ffffffff80003abe:	66 90                	xchg   %ax,%ax
            uint64_t cr2 = read_cr2();
ffffffff80003ac0:	31 c0                	xor    %eax,%eax
ffffffff80003ac2:	e8 a9 c5 ff ff       	callq  ffffffff80000070 <read_cr2>
ffffffff80003ac7:	48 89 c5             	mov    %rax,%rbp
            serial_write(0x3F8, frame->int_no + 65);
ffffffff80003aca:	0f b6 43 78          	movzbl 0x78(%rbx),%eax
ffffffff80003ace:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80003ad3:	8d 70 41             	lea    0x41(%rax),%esi
ffffffff80003ad6:	40 0f b6 f6          	movzbl %sil,%esi
ffffffff80003ada:	e8 31 e4 ff ff       	callq  ffffffff80001f10 <serial_write>
            printf("\nCPU Exception! INT %d   ERR %x  CR2 %p\n", frame->int_no, frame->err_no, cr2);
ffffffff80003adf:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff80003ae6:	48 8b 73 78          	mov    0x78(%rbx),%rsi
ffffffff80003aea:	48 89 e9             	mov    %rbp,%rcx
ffffffff80003aed:	48 c7 c7 d8 51 00 80 	mov    $0xffffffff800051d8,%rdi
ffffffff80003af4:	31 c0                	xor    %eax,%eax
ffffffff80003af6:	e8 45 f9 ff ff       	callq  ffffffff80003440 <printf_>
            printf(_exception_messages[frame->int_no]);
ffffffff80003afb:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff80003aff:	48 8b 3c c5 a0 53 00 	mov    -0x7fffac60(,%rax,8),%rdi
ffffffff80003b06:	80 
ffffffff80003b07:	31 c0                	xor    %eax,%eax
ffffffff80003b09:	e8 32 f9 ff ff       	callq  ffffffff80003440 <printf_>
            printf("\n");
ffffffff80003b0e:	48 c7 c7 46 4c 00 80 	mov    $0xffffffff80004c46,%rdi
ffffffff80003b15:	31 c0                	xor    %eax,%eax
ffffffff80003b17:	e8 24 f9 ff ff       	callq  ffffffff80003440 <printf_>
            printf("SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff80003b1c:	48 8b 8b 98 00 00 00 	mov    0x98(%rbx),%rcx
ffffffff80003b23:	48 8b 93 a0 00 00 00 	mov    0xa0(%rbx),%rdx
ffffffff80003b2a:	48 c7 c7 08 52 00 80 	mov    $0xffffffff80005208,%rdi
ffffffff80003b31:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
ffffffff80003b38:	4c 8b 8b 88 00 00 00 	mov    0x88(%rbx),%r9
ffffffff80003b3f:	31 c0                	xor    %eax,%eax
ffffffff80003b41:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80003b48:	e8 f3 f8 ff ff       	callq  ffffffff80003440 <printf_>
            printf("rax: %x  rdi: %x", frame->rax, frame->rdi);
ffffffff80003b4d:	48 8b 53 48          	mov    0x48(%rbx),%rdx
ffffffff80003b51:	48 8b 73 70          	mov    0x70(%rbx),%rsi
ffffffff80003b55:	48 c7 c7 36 52 00 80 	mov    $0xffffffff80005236,%rdi
ffffffff80003b5c:	31 c0                	xor    %eax,%eax
ffffffff80003b5e:	e8 dd f8 ff ff       	callq  ffffffff80003440 <printf_>
            asm("cli");
ffffffff80003b63:	fa                   	cli    
            asm("hlt");
ffffffff80003b64:	f4                   	hlt    
ffffffff80003b65:	eb fe                	jmp    ffffffff80003b65 <interrupt_handler+0x125>
ffffffff80003b67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003b6e:	00 00 
                kbd_handle();
ffffffff80003b70:	31 c0                	xor    %eax,%eax
ffffffff80003b72:	e8 59 e4 ff ff       	callq  ffffffff80001fd0 <kbd_handle>
                break;
ffffffff80003b77:	e9 16 ff ff ff       	jmpq   ffffffff80003a92 <interrupt_handler+0x52>
ffffffff80003b7c:	0f 1f 40 00          	nopl   0x0(%rax)
            printf("INT: %d  IRQ: %d  \n", frame->int_no, irq);
ffffffff80003b80:	48 89 ea             	mov    %rbp,%rdx
ffffffff80003b83:	48 c7 c7 47 52 00 80 	mov    $0xffffffff80005247,%rdi
ffffffff80003b8a:	31 c0                	xor    %eax,%eax
ffffffff80003b8c:	e8 af f8 ff ff       	callq  ffffffff80003440 <printf_>
ffffffff80003b91:	e9 fc fe ff ff       	jmpq   ffffffff80003a92 <interrupt_handler+0x52>
