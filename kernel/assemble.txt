
./bin/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <to_usermode>:
ffffffff80000000:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000003:	48 89 f4             	mov    %rsi,%rsp
ffffffff80000006:	41 bb 02 32 00 00    	mov    $0x3202,%r11d
ffffffff8000000c:	48 0f 07             	sysretq 

ffffffff8000000f <read_msr>:
ffffffff8000000f:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000012:	0f 32                	rdmsr  
ffffffff80000014:	c3                   	retq   

ffffffff80000015 <enable_syscall>:
ffffffff80000015:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff8000001a:	0f 32                	rdmsr  
ffffffff8000001c:	83 c8 01             	or     $0x1,%eax
ffffffff8000001f:	0f 30                	wrmsr  
ffffffff80000021:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff80000026:	0f 32                	rdmsr  
ffffffff80000028:	48 89 fa             	mov    %rdi,%rdx
ffffffff8000002b:	0f 30                	wrmsr  
ffffffff8000002d:	b9 82 00 00 c0       	mov    $0xc0000082,%ecx
ffffffff80000032:	0f 32                	rdmsr  
ffffffff80000034:	48 89 f0             	mov    %rsi,%rax
ffffffff80000037:	48 89 f2             	mov    %rsi,%rdx
ffffffff8000003a:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8000003e:	0f 30                	wrmsr  
ffffffff80000040:	c3                   	retq   

ffffffff80000041 <enable_sce>:
ffffffff80000041:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff80000046:	0f 32                	rdmsr  
ffffffff80000048:	83 c8 01             	or     $0x1,%eax
ffffffff8000004b:	0f 30                	wrmsr  
ffffffff8000004d:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff80000052:	0f 32                	rdmsr  
ffffffff80000054:	ba 08 00 18 00       	mov    $0x180008,%edx
ffffffff80000059:	0f 30                	wrmsr  
ffffffff8000005b:	c3                   	retq   

ffffffff8000005c <__syscall_handler>:
ffffffff8000005c:	53                   	push   %rbx
ffffffff8000005d:	54                   	push   %rsp
ffffffff8000005e:	55                   	push   %rbp
ffffffff8000005f:	41 54                	push   %r12
ffffffff80000061:	41 55                	push   %r13
ffffffff80000063:	41 56                	push   %r14
ffffffff80000065:	41 57                	push   %r15
ffffffff80000067:	51                   	push   %rcx
ffffffff80000068:	e8 03 04 00 00       	callq  ffffffff80000470 <syscall_handler>
ffffffff8000006d:	59                   	pop    %rcx
ffffffff8000006e:	41 5f                	pop    %r15
ffffffff80000070:	41 5e                	pop    %r14
ffffffff80000072:	41 5d                	pop    %r13
ffffffff80000074:	41 5c                	pop    %r12
ffffffff80000076:	5d                   	pop    %rbp
ffffffff80000077:	5c                   	pop    %rsp
ffffffff80000078:	5b                   	pop    %rbx
ffffffff80000079:	48 0f 07             	sysretq 

ffffffff8000007c <__syscall_handler.end>:
ffffffff8000007c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000080 <switch_to_task>:
ffffffff80000080:	50                   	push   %rax
ffffffff80000081:	53                   	push   %rbx
ffffffff80000082:	51                   	push   %rcx
ffffffff80000083:	52                   	push   %rdx
ffffffff80000084:	56                   	push   %rsi
ffffffff80000085:	57                   	push   %rdi
ffffffff80000086:	55                   	push   %rbp
ffffffff80000087:	41 50                	push   %r8
ffffffff80000089:	41 51                	push   %r9
ffffffff8000008b:	41 52                	push   %r10
ffffffff8000008d:	41 53                	push   %r11
ffffffff8000008f:	41 54                	push   %r12
ffffffff80000091:	41 55                	push   %r13
ffffffff80000093:	41 56                	push   %r14
ffffffff80000095:	41 57                	push   %r15

ffffffff80000097 <switch_to_task.end>:
ffffffff80000097:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000009e:	00 00 

ffffffff800000a0 <vmm_read_cr3>:
ffffffff800000a0:	0f 20 d8             	mov    %cr3,%rax
ffffffff800000a3:	c3                   	retq   

ffffffff800000a4 <vmm_write_cr3>:
ffffffff800000a4:	0f 22 df             	mov    %rdi,%cr3
ffffffff800000a7:	c3                   	retq   

ffffffff800000a8 <vmm_flush_tlb>:
ffffffff800000a8:	0f 01 3f             	invlpg (%rdi)
ffffffff800000ab:	c3                   	retq   

ffffffff800000ac <vmm_flush_tlb.end>:
ffffffff800000ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800000b0 <gdt_load>:
ffffffff800000b0:	0f 01 17             	lgdt   (%rdi)
ffffffff800000b3:	55                   	push   %rbp
ffffffff800000b4:	48 89 e5             	mov    %rsp,%rbp
ffffffff800000b7:	6a 10                	pushq  $0x10
ffffffff800000b9:	55                   	push   %rbp
ffffffff800000ba:	9c                   	pushfq 
ffffffff800000bb:	6a 08                	pushq  $0x8
ffffffff800000bd:	68 c4 00 00 80       	pushq  $0xffffffff800000c4
ffffffff800000c2:	48 cf                	iretq  

ffffffff800000c4 <gdt_load.trampoline>:
ffffffff800000c4:	5d                   	pop    %rbp
ffffffff800000c5:	66 b8 10 00          	mov    $0x10,%ax
ffffffff800000c9:	8e d8                	mov    %eax,%ds
ffffffff800000cb:	8e c0                	mov    %eax,%es
ffffffff800000cd:	8e e0                	mov    %eax,%fs
ffffffff800000cf:	8e e8                	mov    %eax,%gs
ffffffff800000d1:	8e d0                	mov    %eax,%ss
ffffffff800000d3:	66 b8 50 00          	mov    $0x50,%ax
ffffffff800000d7:	0f 00 d8             	ltr    %ax
ffffffff800000da:	c3                   	retq   

ffffffff800000db <gdt_load.end>:
ffffffff800000db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800000e0 <read_cr2>:
ffffffff800000e0:	0f 20 d0             	mov    %cr2,%rax
ffffffff800000e3:	c3                   	retq   

ffffffff800000e4 <_interrupt_common>:
ffffffff800000e4:	fc                   	cld    
ffffffff800000e5:	50                   	push   %rax
ffffffff800000e6:	53                   	push   %rbx
ffffffff800000e7:	51                   	push   %rcx
ffffffff800000e8:	52                   	push   %rdx
ffffffff800000e9:	56                   	push   %rsi
ffffffff800000ea:	57                   	push   %rdi
ffffffff800000eb:	55                   	push   %rbp
ffffffff800000ec:	41 50                	push   %r8
ffffffff800000ee:	41 51                	push   %r9
ffffffff800000f0:	41 52                	push   %r10
ffffffff800000f2:	41 53                	push   %r11
ffffffff800000f4:	41 54                	push   %r12
ffffffff800000f6:	41 55                	push   %r13
ffffffff800000f8:	41 56                	push   %r14
ffffffff800000fa:	41 57                	push   %r15
ffffffff800000fc:	48 89 e7             	mov    %rsp,%rdi
ffffffff800000ff:	e8 bc 3a 00 00       	callq  ffffffff80003bc0 <interrupt_handler>
ffffffff80000104:	48 89 c4             	mov    %rax,%rsp
ffffffff80000107:	41 5f                	pop    %r15
ffffffff80000109:	41 5e                	pop    %r14
ffffffff8000010b:	41 5d                	pop    %r13
ffffffff8000010d:	41 5c                	pop    %r12
ffffffff8000010f:	41 5b                	pop    %r11
ffffffff80000111:	41 5a                	pop    %r10
ffffffff80000113:	41 59                	pop    %r9
ffffffff80000115:	41 58                	pop    %r8
ffffffff80000117:	5d                   	pop    %rbp
ffffffff80000118:	5f                   	pop    %rdi
ffffffff80000119:	5e                   	pop    %rsi
ffffffff8000011a:	5a                   	pop    %rdx
ffffffff8000011b:	59                   	pop    %rcx
ffffffff8000011c:	5b                   	pop    %rbx
ffffffff8000011d:	58                   	pop    %rax
ffffffff8000011e:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000122:	48 cf                	iretq  

ffffffff80000124 <_interrupt0>:
ffffffff80000124:	6a 00                	pushq  $0x0
ffffffff80000126:	6a 00                	pushq  $0x0
ffffffff80000128:	eb ba                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff8000012a <_interrupt1>:
ffffffff8000012a:	6a 00                	pushq  $0x0
ffffffff8000012c:	6a 01                	pushq  $0x1
ffffffff8000012e:	eb b4                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff80000130 <_interrupt2>:
ffffffff80000130:	6a 00                	pushq  $0x0
ffffffff80000132:	6a 02                	pushq  $0x2
ffffffff80000134:	eb ae                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff80000136 <_interrupt3>:
ffffffff80000136:	6a 00                	pushq  $0x0
ffffffff80000138:	6a 03                	pushq  $0x3
ffffffff8000013a:	eb a8                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff8000013c <_interrupt4>:
ffffffff8000013c:	6a 00                	pushq  $0x0
ffffffff8000013e:	6a 04                	pushq  $0x4
ffffffff80000140:	eb a2                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff80000142 <_interrupt5>:
ffffffff80000142:	6a 00                	pushq  $0x0
ffffffff80000144:	6a 05                	pushq  $0x5
ffffffff80000146:	eb 9c                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff80000148 <_interrupt6>:
ffffffff80000148:	6a 00                	pushq  $0x0
ffffffff8000014a:	6a 06                	pushq  $0x6
ffffffff8000014c:	eb 96                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff8000014e <_interrupt7>:
ffffffff8000014e:	6a 00                	pushq  $0x0
ffffffff80000150:	6a 07                	pushq  $0x7
ffffffff80000152:	eb 90                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff80000154 <_interrupt8>:
ffffffff80000154:	6a 08                	pushq  $0x8
ffffffff80000156:	eb 8c                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff80000158 <_interrupt9>:
ffffffff80000158:	6a 00                	pushq  $0x0
ffffffff8000015a:	6a 09                	pushq  $0x9
ffffffff8000015c:	eb 86                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff8000015e <_interrupt10>:
ffffffff8000015e:	6a 0a                	pushq  $0xa
ffffffff80000160:	eb 82                	jmp    ffffffff800000e4 <_interrupt_common>

ffffffff80000162 <_interrupt11>:
ffffffff80000162:	6a 0b                	pushq  $0xb
ffffffff80000164:	e9 7b ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000169 <_interrupt12>:
ffffffff80000169:	6a 0c                	pushq  $0xc
ffffffff8000016b:	e9 74 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000170 <_interrupt13>:
ffffffff80000170:	6a 0d                	pushq  $0xd
ffffffff80000172:	e9 6d ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000177 <_interrupt14>:
ffffffff80000177:	6a 0e                	pushq  $0xe
ffffffff80000179:	e9 66 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000017e <_interrupt15>:
ffffffff8000017e:	6a 00                	pushq  $0x0
ffffffff80000180:	6a 0f                	pushq  $0xf
ffffffff80000182:	e9 5d ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000187 <_interrupt16>:
ffffffff80000187:	6a 00                	pushq  $0x0
ffffffff80000189:	6a 10                	pushq  $0x10
ffffffff8000018b:	e9 54 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000190 <_interrupt17>:
ffffffff80000190:	6a 11                	pushq  $0x11
ffffffff80000192:	e9 4d ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000197 <_interrupt18>:
ffffffff80000197:	6a 00                	pushq  $0x0
ffffffff80000199:	6a 12                	pushq  $0x12
ffffffff8000019b:	e9 44 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001a0 <_interrupt19>:
ffffffff800001a0:	6a 00                	pushq  $0x0
ffffffff800001a2:	6a 13                	pushq  $0x13
ffffffff800001a4:	e9 3b ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001a9 <_interrupt20>:
ffffffff800001a9:	6a 00                	pushq  $0x0
ffffffff800001ab:	6a 14                	pushq  $0x14
ffffffff800001ad:	e9 32 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001b2 <_interrupt21>:
ffffffff800001b2:	6a 00                	pushq  $0x0
ffffffff800001b4:	6a 15                	pushq  $0x15
ffffffff800001b6:	e9 29 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001bb <_interrupt22>:
ffffffff800001bb:	6a 00                	pushq  $0x0
ffffffff800001bd:	6a 16                	pushq  $0x16
ffffffff800001bf:	e9 20 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001c4 <_interrupt23>:
ffffffff800001c4:	6a 00                	pushq  $0x0
ffffffff800001c6:	6a 17                	pushq  $0x17
ffffffff800001c8:	e9 17 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001cd <_interrupt24>:
ffffffff800001cd:	6a 00                	pushq  $0x0
ffffffff800001cf:	6a 18                	pushq  $0x18
ffffffff800001d1:	e9 0e ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001d6 <_interrupt25>:
ffffffff800001d6:	6a 00                	pushq  $0x0
ffffffff800001d8:	6a 19                	pushq  $0x19
ffffffff800001da:	e9 05 ff ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001df <_interrupt26>:
ffffffff800001df:	6a 00                	pushq  $0x0
ffffffff800001e1:	6a 1a                	pushq  $0x1a
ffffffff800001e3:	e9 fc fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001e8 <_interrupt27>:
ffffffff800001e8:	6a 00                	pushq  $0x0
ffffffff800001ea:	6a 1b                	pushq  $0x1b
ffffffff800001ec:	e9 f3 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001f1 <_interrupt28>:
ffffffff800001f1:	6a 00                	pushq  $0x0
ffffffff800001f3:	6a 1c                	pushq  $0x1c
ffffffff800001f5:	e9 ea fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800001fa <_interrupt29>:
ffffffff800001fa:	6a 00                	pushq  $0x0
ffffffff800001fc:	6a 1d                	pushq  $0x1d
ffffffff800001fe:	e9 e1 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000203 <_interrupt30>:
ffffffff80000203:	6a 1e                	pushq  $0x1e
ffffffff80000205:	e9 da fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000020a <_interrupt31>:
ffffffff8000020a:	6a 00                	pushq  $0x0
ffffffff8000020c:	6a 1f                	pushq  $0x1f
ffffffff8000020e:	e9 d1 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000213 <_interrupt32>:
ffffffff80000213:	6a 00                	pushq  $0x0
ffffffff80000215:	6a 20                	pushq  $0x20
ffffffff80000217:	e9 c8 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000021c <_interrupt33>:
ffffffff8000021c:	6a 00                	pushq  $0x0
ffffffff8000021e:	6a 21                	pushq  $0x21
ffffffff80000220:	e9 bf fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000225 <_interrupt34>:
ffffffff80000225:	6a 00                	pushq  $0x0
ffffffff80000227:	6a 22                	pushq  $0x22
ffffffff80000229:	e9 b6 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000022e <_interrupt35>:
ffffffff8000022e:	6a 00                	pushq  $0x0
ffffffff80000230:	6a 23                	pushq  $0x23
ffffffff80000232:	e9 ad fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000237 <_interrupt36>:
ffffffff80000237:	6a 00                	pushq  $0x0
ffffffff80000239:	6a 24                	pushq  $0x24
ffffffff8000023b:	e9 a4 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000240 <_interrupt37>:
ffffffff80000240:	6a 00                	pushq  $0x0
ffffffff80000242:	6a 25                	pushq  $0x25
ffffffff80000244:	e9 9b fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000249 <_interrupt38>:
ffffffff80000249:	6a 00                	pushq  $0x0
ffffffff8000024b:	6a 26                	pushq  $0x26
ffffffff8000024d:	e9 92 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000252 <_interrupt39>:
ffffffff80000252:	6a 00                	pushq  $0x0
ffffffff80000254:	6a 27                	pushq  $0x27
ffffffff80000256:	e9 89 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000025b <_interrupt40>:
ffffffff8000025b:	6a 00                	pushq  $0x0
ffffffff8000025d:	6a 28                	pushq  $0x28
ffffffff8000025f:	e9 80 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000264 <_interrupt41>:
ffffffff80000264:	6a 00                	pushq  $0x0
ffffffff80000266:	6a 29                	pushq  $0x29
ffffffff80000268:	e9 77 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000026d <_interrupt42>:
ffffffff8000026d:	6a 00                	pushq  $0x0
ffffffff8000026f:	6a 2a                	pushq  $0x2a
ffffffff80000271:	e9 6e fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000276 <_interrupt43>:
ffffffff80000276:	6a 00                	pushq  $0x0
ffffffff80000278:	6a 2b                	pushq  $0x2b
ffffffff8000027a:	e9 65 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000027f <_interrupt44>:
ffffffff8000027f:	6a 00                	pushq  $0x0
ffffffff80000281:	6a 2c                	pushq  $0x2c
ffffffff80000283:	e9 5c fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000288 <_interrupt45>:
ffffffff80000288:	6a 00                	pushq  $0x0
ffffffff8000028a:	6a 2d                	pushq  $0x2d
ffffffff8000028c:	e9 53 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff80000291 <_interrupt46>:
ffffffff80000291:	6a 00                	pushq  $0x0
ffffffff80000293:	6a 2e                	pushq  $0x2e
ffffffff80000295:	e9 4a fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff8000029a <_interrupt47>:
ffffffff8000029a:	6a 00                	pushq  $0x0
ffffffff8000029c:	6a 2f                	pushq  $0x2f
ffffffff8000029e:	e9 41 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800002a3 <_interrupt127>:
ffffffff800002a3:	6a 00                	pushq  $0x0
ffffffff800002a5:	6a 7f                	pushq  $0x7f
ffffffff800002a7:	e9 38 fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800002ac <_interrupt128>:
ffffffff800002ac:	6a 00                	pushq  $0x0
ffffffff800002ae:	68 80 00 00 00       	pushq  $0x80
ffffffff800002b3:	e9 2c fe ff ff       	jmpq   ffffffff800000e4 <_interrupt_common>

ffffffff800002b8 <isr_stub_table>:
ffffffff800002b8:	24 01 00 80 ff ff ff ff 2a 01 00 80 ff ff ff ff     $.......*.......
ffffffff800002c8:	30 01 00 80 ff ff ff ff 36 01 00 80 ff ff ff ff     0.......6.......
ffffffff800002d8:	3c 01 00 80 ff ff ff ff 42 01 00 80 ff ff ff ff     <.......B.......
ffffffff800002e8:	48 01 00 80 ff ff ff ff 4e 01 00 80 ff ff ff ff     H.......N.......
ffffffff800002f8:	54 01 00 80 ff ff ff ff 58 01 00 80 ff ff ff ff     T.......X.......
ffffffff80000308:	5e 01 00 80 ff ff ff ff 62 01 00 80 ff ff ff ff     ^.......b.......
ffffffff80000318:	69 01 00 80 ff ff ff ff 70 01 00 80 ff ff ff ff     i.......p.......
ffffffff80000328:	77 01 00 80 ff ff ff ff 7e 01 00 80 ff ff ff ff     w.......~.......
ffffffff80000338:	87 01 00 80 ff ff ff ff 90 01 00 80 ff ff ff ff     ................
ffffffff80000348:	97 01 00 80 ff ff ff ff a0 01 00 80 ff ff ff ff     ................
ffffffff80000358:	a9 01 00 80 ff ff ff ff b2 01 00 80 ff ff ff ff     ................
ffffffff80000368:	bb 01 00 80 ff ff ff ff c4 01 00 80 ff ff ff ff     ................
ffffffff80000378:	cd 01 00 80 ff ff ff ff d6 01 00 80 ff ff ff ff     ................
ffffffff80000388:	df 01 00 80 ff ff ff ff e8 01 00 80 ff ff ff ff     ................
ffffffff80000398:	f1 01 00 80 ff ff ff ff fa 01 00 80 ff ff ff ff     ................
ffffffff800003a8:	03 02 00 80 ff ff ff ff 0a 02 00 80 ff ff ff ff     ................
ffffffff800003b8:	13 02 00 80 ff ff ff ff 1c 02 00 80 ff ff ff ff     ................
ffffffff800003c8:	25 02 00 80 ff ff ff ff 2e 02 00 80 ff ff ff ff     %...............
ffffffff800003d8:	37 02 00 80 ff ff ff ff 40 02 00 80 ff ff ff ff     7.......@.......
ffffffff800003e8:	49 02 00 80 ff ff ff ff 52 02 00 80 ff ff ff ff     I.......R.......
ffffffff800003f8:	5b 02 00 80 ff ff ff ff 64 02 00 80 ff ff ff ff     [.......d.......
ffffffff80000408:	6d 02 00 80 ff ff ff ff 76 02 00 80 ff ff ff ff     m.......v.......
ffffffff80000418:	7f 02 00 80 ff ff ff ff 88 02 00 80 ff ff ff ff     ................
ffffffff80000428:	91 02 00 80 ff ff ff ff 9a 02 00 80 ff ff ff ff     ................
ffffffff80000438:	a3 02 00 80 ff ff ff ff ac 02 00 80 ff ff ff ff     ................

ffffffff80000448 <idt_load>:
ffffffff80000448:	0f 01 1f             	lidt   (%rdi)
ffffffff8000044b:	fb                   	sti    
ffffffff8000044c:	c3                   	retq   

ffffffff8000044d <int_test>:
ffffffff8000044d:	cd 7f                	int    $0x7f
ffffffff8000044f:	c3                   	retq   

ffffffff80000450 <user_init>:
extern void __syscall_handler();
extern void enable_syscall(uint64_t STAR, void* handler);

void user_init()
{
    enable_syscall(0x00180008, &__syscall_handler);
ffffffff80000450:	48 c7 c6 5c 00 00 80 	mov    $0xffffffff8000005c,%rsi
ffffffff80000457:	bf 08 00 18 00       	mov    $0x180008,%edi
ffffffff8000045c:	e9 b4 fb ff ff       	jmpq   ffffffff80000015 <enable_syscall>
ffffffff80000461:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000468:	00 00 00 00 
ffffffff8000046c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000470 <syscall_handler>:
    //enable_sce();
    //set_lstar(__syscall_handler);
}

uint64_t syscall_handler(uint64_t num, uint64_t param1, uint64_t param2, uint64_t param3, uint64_t param4, uint64_t param5)
{
ffffffff80000470:	48 83 ff 10          	cmp    $0x10,%rdi
        case 3:         //close
            break;
        case 0x10:      //ioctl
            break;
        default:
            return -1;
ffffffff80000474:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8000047b:	77 3b                	ja     ffffffff800004b8 <syscall_handler+0x48>
ffffffff8000047d:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80000482:	89 f9                	mov    %edi,%ecx
    }

    return 0;
ffffffff80000484:	31 c0                	xor    %eax,%eax
ffffffff80000486:	48 d3 e2             	shl    %cl,%rdx
ffffffff80000489:	f7 c2 0d 00 01 00    	test   $0x1000d,%edx
ffffffff8000048f:	75 27                	jne    ffffffff800004b8 <syscall_handler+0x48>
ffffffff80000491:	83 e2 02             	and    $0x2,%edx
            return -1;
ffffffff80000494:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8000049b:	74 1b                	je     ffffffff800004b8 <syscall_handler+0x48>
{
ffffffff8000049d:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800004a1:	48 89 f7             	mov    %rsi,%rdi
            printf((char*)param1);
ffffffff800004a4:	31 c0                	xor    %eax,%eax
ffffffff800004a6:	e8 15 31 00 00       	callq  ffffffff800035c0 <printf_>
    return 0;
ffffffff800004ab:	31 c0                	xor    %eax,%eax
}
ffffffff800004ad:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800004b1:	c3                   	retq   
ffffffff800004b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff800004b8:	f3 c3                	repz retq 
ffffffff800004ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff800004c0 <schedule>:
ffffffff800004c0:	f3 c3                	repz retq 
ffffffff800004c2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800004c9:	00 00 00 00 
ffffffff800004cd:	0f 1f 00             	nopl   (%rax)

ffffffff800004d0 <scheduler_init>:
}

void scheduler_init()
{

ffffffff800004d0:	f3 c3                	repz retq 
ffffffff800004d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800004d9:	00 00 00 
ffffffff800004dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800004e0 <_start>:



    // Let's get the terminal structure tag from the bootloader.
    struct stivale2_struct_tag_terminal *term_str_tag;
    term_str_tag = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_TERMINAL_ID);
ffffffff800004e0:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
        if (current_tag == NULL) {
ffffffff800004e7:	48 85 c0             	test   %rax,%rax
ffffffff800004ea:	74 2c                	je     ffffffff80000518 <_start+0x38>
        if (current_tag->identifier == id) {
ffffffff800004ec:	48 8b 10             	mov    (%rax),%rdx
ffffffff800004ef:	48 be 74 09 3b 23 c3 	movabs $0xc2b3f4c3233b0974,%rsi
ffffffff800004f6:	f4 b3 c2 
ffffffff800004f9:	48 39 f2             	cmp    %rsi,%rdx
ffffffff800004fc:	0f 84 a1 01 00 00    	je     ffffffff800006a3 <_start+0x1c3>
ffffffff80000502:	48 89 c1             	mov    %rax,%rcx
ffffffff80000505:	eb 05                	jmp    ffffffff8000050c <_start+0x2c>
ffffffff80000507:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff8000050a:	74 0f                	je     ffffffff8000051b <_start+0x3b>
        current_tag = (void *)current_tag->next;
ffffffff8000050c:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000510:	48 85 c9             	test   %rcx,%rcx
ffffffff80000513:	75 f2                	jne    ffffffff80000507 <_start+0x27>
ffffffff80000515:	0f 1f 00             	nopl   (%rax)

    // Check if the tag was actually found.
    if (term_str_tag == NULL) {
        // It wasn't found, just hang...
        for (;;) {
            asm ("hlt");
ffffffff80000518:	f4                   	hlt    
ffffffff80000519:	eb fd                	jmp    ffffffff80000518 <_start+0x38>
        }
    }

    void* term_write_ptr = (void *)term_str_tag->term_write;
    term_write = term_write_ptr;
ffffffff8000051b:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff8000051f:	48 89 0d 3a a3 00 00 	mov    %rcx,0xa33a(%rip)        # ffffffff8000a860 <term_write>
        if (current_tag->identifier == id) {
ffffffff80000526:	48 b9 fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rcx
ffffffff8000052d:	61 64 50 
ffffffff80000530:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000533:	0f 84 a7 01 00 00    	je     ffffffff800006e0 <_start+0x200>
ffffffff80000539:	48 89 c1             	mov    %rax,%rcx
ffffffff8000053c:	48 be fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rsi
ffffffff80000543:	61 64 50 
ffffffff80000546:	eb 05                	jmp    ffffffff8000054d <_start+0x6d>
ffffffff80000548:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff8000054b:	74 1e                	je     ffffffff8000056b <_start+0x8b>
        current_tag = (void *)current_tag->next;
ffffffff8000054d:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000551:	48 85 c9             	test   %rcx,%rcx
ffffffff80000554:	75 f2                	jne    ffffffff80000548 <_start+0x68>
    //printf("Terminal Initialized\n");

    //Grab the Framebuffer
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000556:	48 c7 05 d7 a2 00 00 	movq   $0x0,0xa2d7(%rip)        # ffffffff8000a838 <boot_info+0x18>
ffffffff8000055d:	00 00 00 00 
ffffffff80000561:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (boot_info.tag_framebuffer == NULL)
    {
    //    printf("Framebuffer Not Found\n");
        for( ;; ) 
            asm("hlt");
ffffffff80000568:	f4                   	hlt    
ffffffff80000569:	eb fd                	jmp    ffffffff80000568 <_start+0x88>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff8000056b:	48 89 0d c6 a2 00 00 	mov    %rcx,0xa2c6(%rip)        # ffffffff8000a838 <boot_info+0x18>
        if (current_tag->identifier == id) {
ffffffff80000572:	48 b9 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rcx
ffffffff80000579:	f7 87 21 
ffffffff8000057c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000057f:	0f 84 4f 01 00 00    	je     ffffffff800006d4 <_start+0x1f4>
ffffffff80000585:	48 89 c1             	mov    %rax,%rcx
ffffffff80000588:	48 be 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rsi
ffffffff8000058f:	f7 87 21 
        current_tag = (void *)current_tag->next;
ffffffff80000592:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000596:	48 85 c9             	test   %rcx,%rcx
ffffffff80000599:	0f 84 f4 00 00 00    	je     ffffffff80000693 <_start+0x1b3>
        if (current_tag->identifier == id) {
ffffffff8000059f:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800005a2:	75 ee                	jne    ffffffff80000592 <_start+0xb2>
    }
    //printf("Framebuffer found at %x\n", boot_info.tag_framebuffer->framebuffer_addr);

    //Memory Map
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005a4:	48 89 0d 85 a2 00 00 	mov    %rcx,0xa285(%rip)        # ffffffff8000a830 <boot_info+0x10>
        if (current_tag->identifier == id) {
ffffffff800005ab:	48 b9 f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rcx
ffffffff800005b2:	78 0d 06 
ffffffff800005b5:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800005b8:	0f 84 0a 01 00 00    	je     ffffffff800006c8 <_start+0x1e8>
ffffffff800005be:	48 89 c1             	mov    %rax,%rcx
ffffffff800005c1:	48 be f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rsi
ffffffff800005c8:	78 0d 06 
ffffffff800005cb:	eb 05                	jmp    ffffffff800005d2 <_start+0xf2>
ffffffff800005cd:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800005d0:	74 09                	je     ffffffff800005db <_start+0xfb>
        current_tag = (void *)current_tag->next;
ffffffff800005d2:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800005d6:	48 85 c9             	test   %rcx,%rcx
ffffffff800005d9:	75 f2                	jne    ffffffff800005cd <_start+0xed>
            asm("hlt");
    }
    //printf("Memory Map at %x\n", boot_info.tag_memmap);

    //Kernel Base Address
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff800005db:	48 89 0d 3e a2 00 00 	mov    %rcx,0xa23e(%rip)        # ffffffff8000a820 <boot_info>
        if (current_tag->identifier == id) {
ffffffff800005e2:	48 b9 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rcx
ffffffff800005e9:	86 17 9e 
ffffffff800005ec:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800005ef:	0f 84 c7 00 00 00    	je     ffffffff800006bc <_start+0x1dc>
            return NULL;
ffffffff800005f5:	48 89 c1             	mov    %rax,%rcx
        if (current_tag->identifier == id) {
ffffffff800005f8:	48 be 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rsi
ffffffff800005ff:	86 17 9e 
ffffffff80000602:	eb 05                	jmp    ffffffff80000609 <_start+0x129>
ffffffff80000604:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000607:	74 09                	je     ffffffff80000612 <_start+0x132>
        current_tag = (void *)current_tag->next;
ffffffff80000609:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff8000060d:	48 85 c9             	test   %rcx,%rcx
ffffffff80000610:	75 f2                	jne    ffffffff80000604 <_start+0x124>
    }
    //printf("Kernel Physical Base Address %x\n", boot_info.tag_kernel_base_address->physical_base_address);
    //printf("Kernel Virtual Base Address  %x\n", boot_info.tag_kernel_base_address->virtual_base_address);
    //printf("--------\n");

    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff80000612:	48 89 0d 2f a2 00 00 	mov    %rcx,0xa22f(%rip)        # ffffffff8000a848 <boot_info+0x28>
        if (current_tag->identifier == id) {
ffffffff80000619:	48 b9 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rcx
ffffffff80000620:	25 ed b0 
ffffffff80000623:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000626:	0f 84 87 00 00 00    	je     ffffffff800006b3 <_start+0x1d3>
            return NULL;
ffffffff8000062c:	48 89 c1             	mov    %rax,%rcx
        if (current_tag->identifier == id) {
ffffffff8000062f:	48 be 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rsi
ffffffff80000636:	25 ed b0 
ffffffff80000639:	eb 05                	jmp    ffffffff80000640 <_start+0x160>
ffffffff8000063b:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff8000063e:	74 09                	je     ffffffff80000649 <_start+0x169>
        current_tag = (void *)current_tag->next;
ffffffff80000640:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000644:	48 85 c9             	test   %rcx,%rcx
ffffffff80000647:	75 f2                	jne    ffffffff8000063b <_start+0x15b>
    
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff80000649:	48 89 0d 08 a2 00 00 	mov    %rcx,0xa208(%rip)        # ffffffff8000a858 <boot_info+0x38>
        if (current_tag->identifier == id) {
ffffffff80000650:	48 b9 ce 04 de aa 66 	movabs $0x4b6fe466aade04ce,%rcx
ffffffff80000657:	e4 6f 4b 
ffffffff8000065a:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000065d:	74 1a                	je     ffffffff80000679 <_start+0x199>
ffffffff8000065f:	48 ba ce 04 de aa 66 	movabs $0x4b6fe466aade04ce,%rdx
ffffffff80000666:	e4 6f 4b 
ffffffff80000669:	eb 05                	jmp    ffffffff80000670 <_start+0x190>
ffffffff8000066b:	48 39 10             	cmp    %rdx,(%rax)
ffffffff8000066e:	74 09                	je     ffffffff80000679 <_start+0x199>
        current_tag = (void *)current_tag->next;
ffffffff80000670:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff80000674:	48 85 c0             	test   %rax,%rax
ffffffff80000677:	75 f2                	jne    ffffffff8000066b <_start+0x18b>
{
ffffffff80000679:	52                   	push   %rdx

    boot_info.tag_modules = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MODULES_ID);
ffffffff8000067a:	48 89 05 bf a1 00 00 	mov    %rax,0xa1bf(%rip)        # ffffffff8000a840 <boot_info+0x20>

    kernel();
ffffffff80000681:	31 c0                	xor    %eax,%eax
ffffffff80000683:	e8 48 33 00 00       	callq  ffffffff800039d0 <kernel>
ffffffff80000688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000068f:	00 


    // We should never get here, but just in case...
    for (;;) {
        asm ("hlt");
ffffffff80000690:	f4                   	hlt    
ffffffff80000691:	eb fd                	jmp    ffffffff80000690 <_start+0x1b0>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000693:	48 c7 05 92 a1 00 00 	movq   $0x0,0xa192(%rip)        # ffffffff8000a830 <boot_info+0x10>
ffffffff8000069a:	00 00 00 00 
ffffffff8000069e:	66 90                	xchg   %ax,%ax
            asm("hlt");
ffffffff800006a0:	f4                   	hlt    
ffffffff800006a1:	eb fd                	jmp    ffffffff800006a0 <_start+0x1c0>
    term_write = term_write_ptr;
ffffffff800006a3:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800006a7:	48 89 0d b2 a1 00 00 	mov    %rcx,0xa1b2(%rip)        # ffffffff8000a860 <term_write>
ffffffff800006ae:	e9 86 fe ff ff       	jmpq   ffffffff80000539 <_start+0x59>
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff800006b3:	48 89 05 9e a1 00 00 	mov    %rax,0xa19e(%rip)        # ffffffff8000a858 <boot_info+0x38>
ffffffff800006ba:	eb a3                	jmp    ffffffff8000065f <_start+0x17f>
    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff800006bc:	48 89 05 85 a1 00 00 	mov    %rax,0xa185(%rip)        # ffffffff8000a848 <boot_info+0x28>
ffffffff800006c3:	e9 64 ff ff ff       	jmpq   ffffffff8000062c <_start+0x14c>
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff800006c8:	48 89 05 51 a1 00 00 	mov    %rax,0xa151(%rip)        # ffffffff8000a820 <boot_info>
ffffffff800006cf:	e9 21 ff ff ff       	jmpq   ffffffff800005f5 <_start+0x115>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800006d4:	48 89 05 55 a1 00 00 	mov    %rax,0xa155(%rip)        # ffffffff8000a830 <boot_info+0x10>
ffffffff800006db:	e9 de fe ff ff       	jmpq   ffffffff800005be <_start+0xde>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800006e0:	48 89 05 51 a1 00 00 	mov    %rax,0xa151(%rip)        # ffffffff8000a838 <boot_info+0x18>
ffffffff800006e7:	e9 99 fe ff ff       	jmpq   ffffffff80000585 <_start+0xa5>
ffffffff800006ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800006f0 <vmm_create_page_table>:
struct PageTable* kernel_cr3 = {0};

uint64_t magic = 0xdeadbeef;

struct PageTable* vmm_create_page_table()
{
ffffffff800006f0:	48 83 ec 08          	sub    $0x8,%rsp
    void* page = pmm_allocpage();   //get a page
ffffffff800006f4:	31 c0                	xor    %eax,%eax
ffffffff800006f6:	e8 35 10 00 00       	callq  ffffffff80001730 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff800006fb:	48 85 c0             	test   %rax,%rax
ffffffff800006fe:	74 2f                	je     ffffffff8000072f <vmm_create_page_table+0x3f>
ffffffff80000700:	48 8d 88 00 10 00 00 	lea    0x1000(%rax),%rcx
ffffffff80000707:	48 89 c2             	mov    %rax,%rdx
ffffffff8000070a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
static inline void* memset(void* s, uint64_t c, uint64_t len)
{
    unsigned char* p=(uint8_t*)s;
    while(len--)
    {
        *p++ = (unsigned char)c;
ffffffff80000710:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80000714:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80000718:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000071b:	75 f3                	jne    ffffffff80000710 <vmm_create_page_table+0x20>
    return addr - 0xFFFF800000000000;
}

static inline uint64_t phys_to_hh_data(uint64_t addr)
{
    return 0xFFFF800000000000 + addr;
ffffffff8000071d:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000724:	80 ff ff 
ffffffff80000727:	48 01 d0             	add    %rdx,%rax

    memset((uint8_t*)page, 0, 4096);    //clear the page
    return (struct PageTable*)phys_to_hh_data((uint64_t)page);
    
    //return (struct PageTable*)phys_to_hh_data((uint64_t)page);
}
ffffffff8000072a:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000072e:	c3                   	retq   
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000072f:	31 c0                	xor    %eax,%eax
ffffffff80000731:	eb f7                	jmp    ffffffff8000072a <vmm_create_page_table+0x3a>
ffffffff80000733:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000073a:	00 00 00 00 
ffffffff8000073e:	66 90                	xchg   %ax,%ax

ffffffff80000740 <vmm_map_2Mpage>:
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
    }
}

void vmm_map_2Mpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000740:	41 57                	push   %r15
    uint64_t index2, index3, index4;
    vaddr >>= 12;
    //index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000742:	49 89 f7             	mov    %rsi,%r15
{
ffffffff80000745:	41 56                	push   %r14
ffffffff80000747:	41 55                	push   %r13
ffffffff80000749:	41 54                	push   %r12
    vaddr >>= 9;
ffffffff8000074b:	49 89 f4             	mov    %rsi,%r12
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff8000074e:	48 c1 ee 24          	shr    $0x24,%rsi
{
ffffffff80000752:	55                   	push   %rbp
ffffffff80000753:	53                   	push   %rbx
ffffffff80000754:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
    vaddr >>= 9;
ffffffff8000075a:	49 c1 ec 15          	shr    $0x15,%r12
    vaddr >>= 9;
ffffffff8000075e:	49 c1 ef 1e          	shr    $0x1e,%r15
ffffffff80000762:	4c 8d 34 37          	lea    (%rdi,%rsi,1),%r14
{
ffffffff80000766:	48 83 ec 08          	sub    $0x8,%rsp
    index2 = vaddr & 0x1ff;
ffffffff8000076a:	41 81 e4 ff 01 00 00 	and    $0x1ff,%r12d
    index3 = vaddr & 0x1ff;
ffffffff80000771:	41 81 e7 ff 01 00 00 	and    $0x1ff,%r15d
{
ffffffff80000778:	48 89 d5             	mov    %rdx,%rbp
ffffffff8000077b:	49 89 cd             	mov    %rcx,%r13
    if(pagemap->entry[index] & 1)
ffffffff8000077e:	49 8b 06             	mov    (%r14),%rax
ffffffff80000781:	a8 01                	test   $0x1,%al
ffffffff80000783:	74 5b                	je     ffffffff800007e0 <vmm_map_2Mpage+0xa0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000785:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff8000078b:	4e 8d 34 f8          	lea    (%rax,%r15,8),%r14
    if(pagemap->entry[index] & 1)
ffffffff8000078f:	49 8b 06             	mov    (%r14),%rax
ffffffff80000792:	a8 01                	test   $0x1,%al
ffffffff80000794:	74 2a                	je     ffffffff800007c0 <vmm_map_2Mpage+0x80>

    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);

    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff80000796:	40 80 cd 80          	or     $0x80,%bpl
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff8000079a:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff800007a0:	49 09 ed             	or     %rbp,%r13
ffffffff800007a3:	4e 89 2c e0          	mov    %r13,(%rax,%r12,8)
}
ffffffff800007a7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800007ab:	5b                   	pop    %rbx
ffffffff800007ac:	5d                   	pop    %rbp
ffffffff800007ad:	41 5c                	pop    %r12
ffffffff800007af:	41 5d                	pop    %r13
ffffffff800007b1:	41 5e                	pop    %r14
ffffffff800007b3:	41 5f                	pop    %r15
ffffffff800007b5:	c3                   	retq   
ffffffff800007b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800007bd:	00 00 00 
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007c0:	31 c0                	xor    %eax,%eax
ffffffff800007c2:	e8 29 ff ff ff       	callq  ffffffff800006f0 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007c7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007ca:	48 89 c3             	mov    %rax,%rbx
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007cd:	74 31                	je     ffffffff80000800 <vmm_map_2Mpage+0xc0>
        pagemap->entry[index] = newentry | flags;
ffffffff800007cf:	48 89 d8             	mov    %rbx,%rax
ffffffff800007d2:	4c 09 e8             	or     %r13,%rax
ffffffff800007d5:	49 89 06             	mov    %rax,(%r14)
ffffffff800007d8:	eb bc                	jmp    ffffffff80000796 <vmm_map_2Mpage+0x56>
ffffffff800007da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007e0:	31 c0                	xor    %eax,%eax
ffffffff800007e2:	e8 09 ff ff ff       	callq  ffffffff800006f0 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007e7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800007ea:	48 89 c3             	mov    %rax,%rbx
        if(!newentry) printf("Null page allocated!\n");
ffffffff800007ed:	74 21                	je     ffffffff80000810 <vmm_map_2Mpage+0xd0>
        pagemap->entry[index] = newentry | flags;
ffffffff800007ef:	48 89 d8             	mov    %rbx,%rax
ffffffff800007f2:	4c 09 e8             	or     %r13,%rax
ffffffff800007f5:	49 89 06             	mov    %rax,(%r14)
ffffffff800007f8:	eb 8b                	jmp    ffffffff80000785 <vmm_map_2Mpage+0x45>
ffffffff800007fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000800:	48 c7 c7 40 4d 00 80 	mov    $0xffffffff80004d40,%rdi
ffffffff80000807:	31 c0                	xor    %eax,%eax
ffffffff80000809:	e8 b2 2d 00 00       	callq  ffffffff800035c0 <printf_>
ffffffff8000080e:	eb bf                	jmp    ffffffff800007cf <vmm_map_2Mpage+0x8f>
ffffffff80000810:	48 c7 c7 40 4d 00 80 	mov    $0xffffffff80004d40,%rdi
ffffffff80000817:	31 c0                	xor    %eax,%eax
ffffffff80000819:	e8 a2 2d 00 00       	callq  ffffffff800035c0 <printf_>
ffffffff8000081e:	eb cf                	jmp    ffffffff800007ef <vmm_map_2Mpage+0xaf>

ffffffff80000820 <vmm_map_4Kpage>:

void vmm_map_4Kpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000820:	41 57                	push   %r15
ffffffff80000822:	41 56                	push   %r14
    //Get the indices for the virtual page
    uint64_t vaddr = virtual;
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000824:	49 89 f6             	mov    %rsi,%r14
{
ffffffff80000827:	41 55                	push   %r13
ffffffff80000829:	41 54                	push   %r12
    vaddr >>= 9;
ffffffff8000082b:	49 c1 ee 15          	shr    $0x15,%r14
{
ffffffff8000082f:	55                   	push   %rbp
ffffffff80000830:	48 89 d5             	mov    %rdx,%rbp
ffffffff80000833:	53                   	push   %rbx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000834:	48 89 f2             	mov    %rsi,%rdx
    vaddr >>= 12;
ffffffff80000837:	48 89 f3             	mov    %rsi,%rbx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff8000083a:	48 c1 ee 24          	shr    $0x24,%rsi
ffffffff8000083e:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
{
ffffffff80000844:	48 83 ec 18          	sub    $0x18,%rsp
    vaddr >>= 12;
ffffffff80000848:	48 c1 eb 0c          	shr    $0xc,%rbx
ffffffff8000084c:	4c 8d 3c 37          	lea    (%rdi,%rsi,1),%r15
    vaddr >>= 9;
ffffffff80000850:	48 c1 ea 1e          	shr    $0x1e,%rdx
    index1 = vaddr & 0x1ff;
ffffffff80000854:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
    index2 = vaddr & 0x1ff;
ffffffff8000085a:	41 81 e6 ff 01 00 00 	and    $0x1ff,%r14d
    index3 = vaddr & 0x1ff;
ffffffff80000861:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
{
ffffffff80000867:	49 89 cd             	mov    %rcx,%r13
    if(pagemap->entry[index] & 1)
ffffffff8000086a:	49 8b 07             	mov    (%r15),%rax
ffffffff8000086d:	a8 01                	test   $0x1,%al
ffffffff8000086f:	74 7f                	je     ffffffff800008f0 <vmm_map_4Kpage+0xd0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000871:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff80000877:	4c 8d 3c d0          	lea    (%rax,%rdx,8),%r15
    if(pagemap->entry[index] & 1)
ffffffff8000087b:	49 8b 07             	mov    (%r15),%rax
ffffffff8000087e:	a8 01                	test   $0x1,%al
ffffffff80000880:	74 4e                	je     ffffffff800008d0 <vmm_map_4Kpage+0xb0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000882:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff80000888:	4e 8d 34 f0          	lea    (%rax,%r14,8),%r14
    if(pagemap->entry[index] & 1)
ffffffff8000088c:	49 8b 06             	mov    (%r14),%rax
ffffffff8000088f:	a8 01                	test   $0x1,%al
ffffffff80000891:	74 1d                	je     ffffffff800008b0 <vmm_map_4Kpage+0x90>
    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);
    PML1 = vmm_get_pagemap(PML2, index2, flags);

    PML1->entry[index1] = physical | flags;
ffffffff80000893:	4c 09 ed             	or     %r13,%rbp
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000896:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML1->entry[index1] = physical | flags;
ffffffff8000089c:	48 89 2c d8          	mov    %rbp,(%rax,%rbx,8)
    //serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\r\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
    //serial_printf(SERIAL_PORT1, "%p, %d, %d, %d, %d, %p\r\n", virtual, index4, index3, index2, index1, physical);

    //vmm_flush_tlb((void*)virtual);

}
ffffffff800008a0:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800008a4:	5b                   	pop    %rbx
ffffffff800008a5:	5d                   	pop    %rbp
ffffffff800008a6:	41 5c                	pop    %r12
ffffffff800008a8:	41 5d                	pop    %r13
ffffffff800008aa:	41 5e                	pop    %r14
ffffffff800008ac:	41 5f                	pop    %r15
ffffffff800008ae:	c3                   	retq   
ffffffff800008af:	90                   	nop
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800008b0:	31 c0                	xor    %eax,%eax
ffffffff800008b2:	e8 39 fe ff ff       	callq  ffffffff800006f0 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800008b7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800008ba:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff800008bd:	74 61                	je     ffffffff80000920 <vmm_map_4Kpage+0x100>
        pagemap->entry[index] = newentry | flags;
ffffffff800008bf:	4c 89 e0             	mov    %r12,%rax
ffffffff800008c2:	4c 09 e8             	or     %r13,%rax
ffffffff800008c5:	49 89 06             	mov    %rax,(%r14)
ffffffff800008c8:	eb c9                	jmp    ffffffff80000893 <vmm_map_4Kpage+0x73>
ffffffff800008ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800008d0:	31 c0                	xor    %eax,%eax
ffffffff800008d2:	e8 19 fe ff ff       	callq  ffffffff800006f0 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800008d7:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800008da:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff800008dd:	74 69                	je     ffffffff80000948 <vmm_map_4Kpage+0x128>
        pagemap->entry[index] = newentry | flags;
ffffffff800008df:	4c 89 e0             	mov    %r12,%rax
ffffffff800008e2:	4c 09 e8             	or     %r13,%rax
ffffffff800008e5:	49 89 07             	mov    %rax,(%r15)
ffffffff800008e8:	eb 98                	jmp    ffffffff80000882 <vmm_map_4Kpage+0x62>
ffffffff800008ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800008f0:	31 c0                	xor    %eax,%eax
ffffffff800008f2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff800008f7:	e8 f4 fd ff ff       	callq  ffffffff800006f0 <vmm_create_page_table>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800008fc:	48 85 c0             	test   %rax,%rax
        uint64_t newentry = (uint64_t)vmm_create_page_table();
ffffffff800008ff:	49 89 c4             	mov    %rax,%r12
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000902:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80000907:	74 27                	je     ffffffff80000930 <vmm_map_4Kpage+0x110>
        pagemap->entry[index] = newentry | flags;
ffffffff80000909:	4c 89 e0             	mov    %r12,%rax
ffffffff8000090c:	4c 09 e8             	or     %r13,%rax
ffffffff8000090f:	49 89 07             	mov    %rax,(%r15)
ffffffff80000912:	e9 5a ff ff ff       	jmpq   ffffffff80000871 <vmm_map_4Kpage+0x51>
ffffffff80000917:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000091e:	00 00 
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000920:	48 c7 c7 40 4d 00 80 	mov    $0xffffffff80004d40,%rdi
ffffffff80000927:	31 c0                	xor    %eax,%eax
ffffffff80000929:	e8 92 2c 00 00       	callq  ffffffff800035c0 <printf_>
ffffffff8000092e:	eb 8f                	jmp    ffffffff800008bf <vmm_map_4Kpage+0x9f>
ffffffff80000930:	48 c7 c7 40 4d 00 80 	mov    $0xffffffff80004d40,%rdi
ffffffff80000937:	31 c0                	xor    %eax,%eax
ffffffff80000939:	e8 82 2c 00 00       	callq  ffffffff800035c0 <printf_>
ffffffff8000093e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80000943:	eb c4                	jmp    ffffffff80000909 <vmm_map_4Kpage+0xe9>
ffffffff80000945:	0f 1f 00             	nopl   (%rax)
ffffffff80000948:	48 c7 c7 40 4d 00 80 	mov    $0xffffffff80004d40,%rdi
ffffffff8000094f:	31 c0                	xor    %eax,%eax
ffffffff80000951:	e8 6a 2c 00 00       	callq  ffffffff800035c0 <printf_>
ffffffff80000956:	eb 87                	jmp    ffffffff800008df <vmm_map_4Kpage+0xbf>
ffffffff80000958:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000095f:	00 

ffffffff80000960 <vmm_unmap_page>:
            }
        }
    }


}
ffffffff80000960:	f3 c3                	repz retq 
ffffffff80000962:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000969:	00 00 00 00 
ffffffff8000096d:	0f 1f 00             	nopl   (%rax)

ffffffff80000970 <vmm_pagewalk>:
uint64_t vmm_pagewalk(uint64_t vaddr, uint64_t* cr3)
{
    uint64_t* PML4 = (uint64_t*)(phys_to_hh_data((uint64_t)cr3));
    
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
ffffffff80000970:	49 89 f8             	mov    %rdi,%r8
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000973:	48 89 f9             	mov    %rdi,%rcx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000976:	48 89 fa             	mov    %rdi,%rdx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000979:	48 c1 ef 27          	shr    $0x27,%rdi
    index4 = vaddr & 0x1ff;
   
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff8000097d:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80000984:	80 ff ff 
{
ffffffff80000987:	53                   	push   %rbx
    index4 = vaddr & 0x1ff;
ffffffff80000988:	81 e7 ff 01 00 00    	and    $0x1ff,%edi
    vaddr >>= 9;
ffffffff8000098e:	48 c1 ea 1e          	shr    $0x1e,%rdx
    vaddr >>= 9;
ffffffff80000992:	48 c1 e9 15          	shr    $0x15,%rcx
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff80000996:	48 8d 34 fe          	lea    (%rsi,%rdi,8),%rsi
    index3 = vaddr & 0x1ff;
ffffffff8000099a:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    index2 = vaddr & 0x1ff;
ffffffff800009a0:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
    vaddr >>= 12;
ffffffff800009a6:	49 c1 e8 0c          	shr    $0xc,%r8
ffffffff800009aa:	48 8b 1c 06          	mov    (%rsi,%rax,1),%rbx
    index1 = vaddr & 0x1ff;
ffffffff800009ae:	41 81 e0 ff 01 00 00 	and    $0x1ff,%r8d
ffffffff800009b5:	48 01 c3             	add    %rax,%rbx
ffffffff800009b8:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PDE = (uint64_t*)((phys_to_hh_data(PDPTE[index3]) >> 12) * 4096);
ffffffff800009bb:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff800009c2:	48 8b 1c d6          	mov    (%rsi,%rdx,8),%rbx
ffffffff800009c6:	48 01 c3             	add    %rax,%rbx
ffffffff800009c9:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PTE = (uint64_t*)((phys_to_hh_data(PDE[index2]) >> 12) * 4096);
ffffffff800009cc:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff800009d3:	48 8b 1c ce          	mov    (%rsi,%rcx,8),%rbx
ffffffff800009d7:	48 01 c3             	add    %rax,%rbx
ffffffff800009da:	48 89 de             	mov    %rbx,%rsi
    return addr - 0xFFFF800000000000;
ffffffff800009dd:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff800009e4:	80 00 00 
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff800009e7:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
    return 0xFFFF800000000000 + addr;
ffffffff800009ee:	4a 03 04 c6          	add    (%rsi,%r8,8),%rax

    uint64_t pageaddr = hh_data_to_phys((uint64_t)PD);
    
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff800009f2:	48 89 fe             	mov    %rdi,%rsi
ffffffff800009f5:	48 c7 c7 56 4d 00 80 	mov    $0xffffffff80004d56,%rdi
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff800009fc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    return addr - 0xFFFF800000000000;
ffffffff80000a02:	48 01 c3             	add    %rax,%rbx
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff80000a05:	31 c0                	xor    %eax,%eax
ffffffff80000a07:	49 89 d9             	mov    %rbx,%r9
ffffffff80000a0a:	e8 b1 2b 00 00       	callq  ffffffff800035c0 <printf_>
    
    
    pageaddr >>= 12;
    pageaddr *= 4096;
ffffffff80000a0f:	48 89 d8             	mov    %rbx,%rax

    return pageaddr;
}
ffffffff80000a12:	5b                   	pop    %rbx
ffffffff80000a13:	c3                   	retq   
ffffffff80000a14:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000a1b:	00 00 00 00 
ffffffff80000a1f:	90                   	nop

ffffffff80000a20 <vmm_PMLwalk>:

void vmm_PMLwalk(struct PageTable* pagetable)
{
ffffffff80000a20:	41 57                	push   %r15
ffffffff80000a22:	41 56                	push   %r14
ffffffff80000a24:	48 89 fa             	mov    %rdi,%rdx
ffffffff80000a27:	41 55                	push   %r13
ffffffff80000a29:	41 54                	push   %r12
    struct PageTable* PML4 = pagetable;
    struct PageTable* PML3 = NULL;
    struct PageTable* PML2 = NULL;
    struct PageTable* PML1 = NULL;

    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000a2b:	48 c7 c6 6a 4d 00 80 	mov    $0xffffffff80004d6a,%rsi
{
ffffffff80000a32:	55                   	push   %rbp
ffffffff80000a33:	53                   	push   %rbx
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000a34:	31 c0                	xor    %eax,%eax
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
                                for(uint64_t l = 0; l < 512; l++)
                                {
                                    if(PML1->entry[l] & 0x01)
                                    {
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80000a36:	48 c7 c3 ac 4d 00 80 	mov    $0xffffffff80004dac,%rbx
{
ffffffff80000a3d:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80000a41:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000a46:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000a4b:	e8 40 2d 00 00       	callq  ffffffff80003790 <serial_printf>
    for(uint64_t i = 0; i < 512; i++)
ffffffff80000a50:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80000a57:	00 00 
ffffffff80000a59:	eb 1c                	jmp    ffffffff80000a77 <vmm_PMLwalk+0x57>
ffffffff80000a5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80000a60:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff80000a66:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80000a6b:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80000a71:	0f 84 17 01 00 00    	je     ffffffff80000b8e <vmm_PMLwalk+0x16e>
        if(pagetable->entry[i] & 0x01)
ffffffff80000a77:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff80000a7c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80000a81:	4c 8b 04 c8          	mov    (%rax,%rcx,8),%r8
ffffffff80000a85:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000a89:	74 d5                	je     ffffffff80000a60 <vmm_PMLwalk+0x40>
                serial_printf(SERIAL_PORT1, "4,%p,%d,%p\r\n",pagetable, i, pagetable->entry[i]);
ffffffff80000a8b:	49 89 cf             	mov    %rcx,%r15
ffffffff80000a8e:	49 89 c6             	mov    %rax,%r14
ffffffff80000a91:	48 89 c2             	mov    %rax,%rdx
ffffffff80000a94:	48 c7 c6 85 4d 00 80 	mov    $0xffffffff80004d85,%rsi
ffffffff80000a9b:	31 c0                	xor    %eax,%eax
ffffffff80000a9d:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000aa2:	e8 e9 2c 00 00       	callq  ffffffff80003790 <serial_printf>
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff80000aa7:	4b 8b 04 fe          	mov    (%r14,%r15,8),%rax
                for(uint64_t j = 0; j < 512; j++)
ffffffff80000aab:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
ffffffff80000ab2:	00 
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff80000ab3:	49 89 c5             	mov    %rax,%r13
ffffffff80000ab6:	49 81 e5 00 fe ff ff 	and    $0xfffffffffffffe00,%r13
ffffffff80000abd:	eb 12                	jmp    ffffffff80000ad1 <vmm_PMLwalk+0xb1>
ffffffff80000abf:	90                   	nop
                for(uint64_t j = 0; j < 512; j++)
ffffffff80000ac0:	48 83 04 24 01       	addq   $0x1,(%rsp)
ffffffff80000ac5:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80000ac9:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80000acf:	74 8f                	je     ffffffff80000a60 <vmm_PMLwalk+0x40>
                    if(PML3->entry[j] & 0x01)
ffffffff80000ad1:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80000ad5:	4d 8b 44 c5 00       	mov    0x0(%r13,%rax,8),%r8
ffffffff80000ada:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000ade:	74 e0                	je     ffffffff80000ac0 <vmm_PMLwalk+0xa0>
                        serial_printf(SERIAL_PORT1, "3,%p,%d,%p\r\n",PML3, j, PML3->entry[j]);
ffffffff80000ae0:	49 89 c6             	mov    %rax,%r14
ffffffff80000ae3:	48 89 c1             	mov    %rax,%rcx
ffffffff80000ae6:	4c 89 ea             	mov    %r13,%rdx
ffffffff80000ae9:	31 c0                	xor    %eax,%eax
ffffffff80000aeb:	48 c7 c6 92 4d 00 80 	mov    $0xffffffff80004d92,%rsi
ffffffff80000af2:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000af7:	e8 94 2c 00 00       	callq  ffffffff80003790 <serial_printf>
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80000afc:	4b 8b 44 f5 00       	mov    0x0(%r13,%r14,8),%rax
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000b01:	31 ed                	xor    %ebp,%ebp
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80000b03:	49 89 c4             	mov    %rax,%r12
ffffffff80000b06:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80000b0b:	49 81 e4 00 fe ff ff 	and    $0xfffffffffffffe00,%r12
ffffffff80000b12:	eb 11                	jmp    ffffffff80000b25 <vmm_PMLwalk+0x105>
ffffffff80000b14:	0f 1f 40 00          	nopl   0x0(%rax)
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000b18:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80000b1c:	48 81 fd 00 02 00 00 	cmp    $0x200,%rbp
ffffffff80000b23:	74 9b                	je     ffffffff80000ac0 <vmm_PMLwalk+0xa0>
                            if(PML2->entry[k] & 0x01)
ffffffff80000b25:	4d 8b 04 ec          	mov    (%r12,%rbp,8),%r8
ffffffff80000b29:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000b2d:	74 e9                	je     ffffffff80000b18 <vmm_PMLwalk+0xf8>
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000b2f:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000b32:	4c 89 e2             	mov    %r12,%rdx
ffffffff80000b35:	48 c7 c6 9f 4d 00 80 	mov    $0xffffffff80004d9f,%rsi
ffffffff80000b3c:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000b41:	31 c0                	xor    %eax,%eax
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000b43:	45 31 ff             	xor    %r15d,%r15d
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000b46:	e8 45 2c 00 00       	callq  ffffffff80003790 <serial_printf>
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
ffffffff80000b4b:	4d 8b 74 ed 00       	mov    0x0(%r13,%rbp,8),%r14
ffffffff80000b50:	49 81 e6 00 fe ff ff 	and    $0xfffffffffffffe00,%r14
ffffffff80000b57:	eb 14                	jmp    ffffffff80000b6d <vmm_PMLwalk+0x14d>
ffffffff80000b59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000b60:	49 83 c7 01          	add    $0x1,%r15
ffffffff80000b64:	49 81 ff 00 02 00 00 	cmp    $0x200,%r15
ffffffff80000b6b:	74 ab                	je     ffffffff80000b18 <vmm_PMLwalk+0xf8>
                                    if(PML1->entry[l] & 0x01)
ffffffff80000b6d:	4f 8b 04 fe          	mov    (%r14,%r15,8),%r8
ffffffff80000b71:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000b75:	74 e9                	je     ffffffff80000b60 <vmm_PMLwalk+0x140>
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80000b77:	4c 89 f9             	mov    %r15,%rcx
ffffffff80000b7a:	4c 89 f2             	mov    %r14,%rdx
ffffffff80000b7d:	48 89 de             	mov    %rbx,%rsi
ffffffff80000b80:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000b85:	31 c0                	xor    %eax,%eax
ffffffff80000b87:	e8 04 2c 00 00       	callq  ffffffff80003790 <serial_printf>
ffffffff80000b8c:	eb d2                	jmp    ffffffff80000b60 <vmm_PMLwalk+0x140>
                }//PML3
            }
    }//PML4

    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
}
ffffffff80000b8e:	48 83 c4 28          	add    $0x28,%rsp
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000b92:	48 c7 c6 b9 4d 00 80 	mov    $0xffffffff80004db9,%rsi
ffffffff80000b99:	bf f8 03 00 00       	mov    $0x3f8,%edi
}
ffffffff80000b9e:	5b                   	pop    %rbx
ffffffff80000b9f:	5d                   	pop    %rbp
ffffffff80000ba0:	41 5c                	pop    %r12
ffffffff80000ba2:	41 5d                	pop    %r13
ffffffff80000ba4:	41 5e                	pop    %r14
ffffffff80000ba6:	41 5f                	pop    %r15
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000ba8:	31 c0                	xor    %eax,%eax
ffffffff80000baa:	e9 e1 2b 00 00       	jmpq   ffffffff80003790 <serial_printf>
ffffffff80000baf:	90                   	nop

ffffffff80000bb0 <vmm_init>:

void vmm_init()
{
ffffffff80000bb0:	41 55                	push   %r13
ffffffff80000bb2:	41 54                	push   %r12
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000bb4:	31 c0                	xor    %eax,%eax
{
ffffffff80000bb6:	55                   	push   %rbp
ffffffff80000bb7:	53                   	push   %rbx
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
 
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
    uint64_t kernel_virt = boot_info.tag_kernel_base_address->virtual_base_address;
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000bb8:	49 c7 c5 40 36 01 80 	mov    $0xffffffff80013640,%r13
ffffffff80000bbf:	4d 89 ec             	mov    %r13,%r12
{
ffffffff80000bc2:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000bc6:	49 81 ec 00 00 00 80 	sub    $0xffffffff80000000,%r12
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000bcd:	e8 ce f4 ff ff       	callq  ffffffff800000a0 <vmm_read_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000bd2:	48 c7 c7 c8 4d 00 80 	mov    $0xffffffff80004dc8,%rdi
ffffffff80000bd9:	48 89 c6             	mov    %rax,%rsi
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000bdc:	48 89 05 dd 18 01 00 	mov    %rax,0x118dd(%rip)        # ffffffff800124c0 <kernel_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000be3:	31 c0                	xor    %eax,%eax
ffffffff80000be5:	e8 d6 29 00 00       	callq  ffffffff800035c0 <printf_>
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80000bea:	48 8b 05 2f 9c 00 00 	mov    0x9c2f(%rip),%rax        # ffffffff8000a820 <boot_info>

    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff80000bf1:	48 c7 c7 40 4e 00 80 	mov    $0xffffffff80004e40,%rdi
    uint64_t kernel_virt = boot_info.tag_kernel_base_address->virtual_base_address;
ffffffff80000bf8:	48 8b 58 18          	mov    0x18(%rax),%rbx
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80000bfc:	48 8b 68 10          	mov    0x10(%rax),%rbp
    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff80000c00:	31 c0                	xor    %eax,%eax
ffffffff80000c02:	48 89 ea             	mov    %rbp,%rdx
ffffffff80000c05:	48 89 de             	mov    %rbx,%rsi

    //Map the Kernel to 0xFFFFFFF8000...
    //TODO - Make the pages sensitive to RO/RW
    for(uint64_t i = 0; i < (kernel_size / 4096 + 1); i++)
    {
        vmm_map_4Kpage(RootPageDirectory, kernel_virt + (0x1000 * i), kernel_phys + (0x1000 * i), PTE_PRESENT | PTE_READWRITE);
ffffffff80000c08:	48 29 dd             	sub    %rbx,%rbp
    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff80000c0b:	e8 b0 29 00 00       	callq  ffffffff800035c0 <printf_>
    printf("Kernel: %p - %p Size: %d\n", &_start_of_kernel, &_end_of_kernel, kernel_size);
ffffffff80000c10:	4c 89 e1             	mov    %r12,%rcx
ffffffff80000c13:	4c 89 ea             	mov    %r13,%rdx
ffffffff80000c16:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000c1d:	48 c7 c7 d1 4d 00 80 	mov    $0xffffffff80004dd1,%rdi
ffffffff80000c24:	31 c0                	xor    %eax,%eax
ffffffff80000c26:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff80000c2d:	e8 8e 29 00 00       	callq  ffffffff800035c0 <printf_>
    printf("Text:   %p - %p \n", &_start_of_text, &_end_of_text);
ffffffff80000c32:	48 c7 c2 16 3d 00 80 	mov    $0xffffffff80003d16,%rdx
ffffffff80000c39:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000c40:	48 c7 c7 eb 4d 00 80 	mov    $0xffffffff80004deb,%rdi
ffffffff80000c47:	31 c0                	xor    %eax,%eax
ffffffff80000c49:	4e 8d a4 23 00 10 00 	lea    0x1000(%rbx,%r12,1),%r12
ffffffff80000c50:	00 
ffffffff80000c51:	e8 6a 29 00 00       	callq  ffffffff800035c0 <printf_>
    printf("Data:   %p - %p \n", &_start_of_data, &_end_of_data);
ffffffff80000c56:	48 c7 c2 20 88 00 80 	mov    $0xffffffff80008820,%rdx
ffffffff80000c5d:	48 c7 c6 3c 72 00 80 	mov    $0xffffffff8000723c,%rsi
ffffffff80000c64:	48 c7 c7 fd 4d 00 80 	mov    $0xffffffff80004dfd,%rdi
ffffffff80000c6b:	31 c0                	xor    %eax,%eax
ffffffff80000c6d:	e8 4e 29 00 00       	callq  ffffffff800035c0 <printf_>
    printf("ROData: %p - %p \n", &_start_of_rodata, &_end_of_rodata);
ffffffff80000c72:	48 c7 c2 20 56 00 80 	mov    $0xffffffff80005620,%rdx
ffffffff80000c79:	48 c7 c6 40 4d 00 80 	mov    $0xffffffff80004d40,%rsi
ffffffff80000c80:	48 c7 c7 0f 4e 00 80 	mov    $0xffffffff80004e0f,%rdi
ffffffff80000c87:	31 c0                	xor    %eax,%eax
ffffffff80000c89:	e8 32 29 00 00       	callq  ffffffff800035c0 <printf_>
    printf("BSS:    %p - %p \n", &_start_of_bss, &_end_of_bss);
ffffffff80000c8e:	48 c7 c2 40 36 01 80 	mov    $0xffffffff80013640,%rdx
ffffffff80000c95:	48 c7 c6 20 88 00 80 	mov    $0xffffffff80008820,%rsi
ffffffff80000c9c:	48 c7 c7 21 4e 00 80 	mov    $0xffffffff80004e21,%rdi
ffffffff80000ca3:	31 c0                	xor    %eax,%eax
ffffffff80000ca5:	e8 16 29 00 00       	callq  ffffffff800035c0 <printf_>
    RootPageDirectory = vmm_create_page_table();
ffffffff80000caa:	31 c0                	xor    %eax,%eax
ffffffff80000cac:	e8 3f fa ff ff       	callq  ffffffff800006f0 <vmm_create_page_table>
    printf("Root = %p\n", RootPageDirectory);
ffffffff80000cb1:	48 c7 c7 33 4e 00 80 	mov    $0xffffffff80004e33,%rdi
    RootPageDirectory = vmm_create_page_table();
ffffffff80000cb8:	48 89 05 09 18 01 00 	mov    %rax,0x11809(%rip)        # ffffffff800124c8 <RootPageDirectory>
    printf("Root = %p\n", RootPageDirectory);
ffffffff80000cbf:	48 89 c6             	mov    %rax,%rsi
ffffffff80000cc2:	31 c0                	xor    %eax,%eax
ffffffff80000cc4:	e8 f7 28 00 00       	callq  ffffffff800035c0 <printf_>
ffffffff80000cc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        vmm_map_4Kpage(RootPageDirectory, kernel_virt + (0x1000 * i), kernel_phys + (0x1000 * i), PTE_PRESENT | PTE_READWRITE);
ffffffff80000cd0:	48 8b 3d f1 17 01 00 	mov    0x117f1(%rip),%rdi        # ffffffff800124c8 <RootPageDirectory>
ffffffff80000cd7:	48 8d 54 1d 00       	lea    0x0(%rbp,%rbx,1),%rdx
ffffffff80000cdc:	48 89 de             	mov    %rbx,%rsi
ffffffff80000cdf:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80000ce4:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
ffffffff80000ceb:	e8 30 fb ff ff       	callq  ffffffff80000820 <vmm_map_4Kpage>
    for(uint64_t i = 0; i < (kernel_size / 4096 + 1); i++)
ffffffff80000cf0:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80000cf3:	75 db                	jne    ffffffff80000cd0 <vmm_init+0x120>

    //cycle through page entries


    
}
ffffffff80000cf5:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80000cf9:	5b                   	pop    %rbx
ffffffff80000cfa:	5d                   	pop    %rbp
ffffffff80000cfb:	41 5c                	pop    %r12
ffffffff80000cfd:	41 5d                	pop    %r13
ffffffff80000cff:	c3                   	retq   

ffffffff80000d00 <liballoc_lock>:



int liballoc_lock()
{
    asm("cli");
ffffffff80000d00:	fa                   	cli    
    return 0;
}
ffffffff80000d01:	31 c0                	xor    %eax,%eax
ffffffff80000d03:	c3                   	retq   
ffffffff80000d04:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000d0b:	00 00 00 00 
ffffffff80000d0f:	90                   	nop

ffffffff80000d10 <liballoc_unlock>:


int liballoc_unlock()
{
    asm("sti");
ffffffff80000d10:	fb                   	sti    
    return 0;
}
ffffffff80000d11:	31 c0                	xor    %eax,%eax
ffffffff80000d13:	c3                   	retq   
ffffffff80000d14:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000d1b:	00 00 00 00 
ffffffff80000d1f:	90                   	nop

ffffffff80000d20 <liballoc_free>:

int liballoc_free(void* page, size_t count)
{
    return 0;
}
ffffffff80000d20:	31 c0                	xor    %eax,%eax
ffffffff80000d22:	c3                   	retq   
ffffffff80000d23:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000d2a:	00 00 00 00 
ffffffff80000d2e:	66 90                	xchg   %ax,%ax

ffffffff80000d30 <liballoc_alloc>:

void* liballoc_alloc(size_t count)
{
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d30:	48 85 ff             	test   %rdi,%rdi
ffffffff80000d33:	74 6b                	je     ffffffff80000da0 <liballoc_alloc+0x70>
{
ffffffff80000d35:	55                   	push   %rbp
ffffffff80000d36:	53                   	push   %rbx
ffffffff80000d37:	48 89 fd             	mov    %rdi,%rbp
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d3a:	31 db                	xor    %ebx,%ebx
{
ffffffff80000d3c:	48 83 ec 08          	sub    $0x8,%rsp
    {
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000d40:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d42:	48 83 c3 01          	add    $0x1,%rbx
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000d46:	e8 e5 09 00 00       	callq  ffffffff80001730 <pmm_allocpage>
ffffffff80000d4b:	48 8b 0d 36 65 00 00 	mov    0x6536(%rip),%rcx        # ffffffff80007288 <kernel_heap_top>
ffffffff80000d52:	48 8b 3d 6f 17 01 00 	mov    0x1176f(%rip),%rdi        # ffffffff800124c8 <RootPageDirectory>
ffffffff80000d59:	48 89 c2             	mov    %rax,%rdx
ffffffff80000d5c:	48 8d b1 00 10 00 00 	lea    0x1000(%rcx),%rsi
ffffffff80000d63:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80000d68:	e8 b3 fa ff ff       	callq  ffffffff80000820 <vmm_map_4Kpage>
        kernel_heap_top += 4096;
ffffffff80000d6d:	48 8b 05 14 65 00 00 	mov    0x6514(%rip),%rax        # ffffffff80007288 <kernel_heap_top>
ffffffff80000d74:	48 05 00 10 00 00    	add    $0x1000,%rax
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d7a:	48 39 dd             	cmp    %rbx,%rbp
        kernel_heap_top += 4096;
ffffffff80000d7d:	48 89 05 04 65 00 00 	mov    %rax,0x6504(%rip)        # ffffffff80007288 <kernel_heap_top>
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d84:	75 ba                	jne    ffffffff80000d40 <liballoc_alloc+0x10>
    }
    return (void*)(phys_to_hh_data((uint64_t)kernel_heap_top));
ffffffff80000d86:	48 83 c4 08          	add    $0x8,%rsp
    return 0xFFFF800000000000 + addr;
ffffffff80000d8a:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000d91:	80 ff ff 
ffffffff80000d94:	48 01 d0             	add    %rdx,%rax
ffffffff80000d97:	5b                   	pop    %rbx
ffffffff80000d98:	5d                   	pop    %rbp
ffffffff80000d99:	c3                   	retq   
ffffffff80000d9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000da0:	48 8b 05 e1 64 00 00 	mov    0x64e1(%rip),%rax        # ffffffff80007288 <kernel_heap_top>
ffffffff80000da7:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000dae:	80 ff ff 
ffffffff80000db1:	48 01 d0             	add    %rdx,%rax
ffffffff80000db4:	c3                   	retq   
ffffffff80000db5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000dbc:	00 00 00 
ffffffff80000dbf:	90                   	nop

ffffffff80000dc0 <allocate_new_page>:
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
		st += sizeof(struct liballoc_minor);
ffffffff80000dc0:	83 c7 50             	add    $0x50,%edi
{
ffffffff80000dc3:	53                   	push   %rbx
ffffffff80000dc4:	bb 10 00 00 00       	mov    $0x10,%ebx
ffffffff80000dc9:	89 f8                	mov    %edi,%eax

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff80000dcb:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
ffffffff80000dd1:	c1 e8 0c             	shr    $0xc,%eax
			st  = st / (l_pageSize);
		else
			st  = st / (l_pageSize) + 1;
ffffffff80000dd4:	83 ff 01             	cmp    $0x1,%edi
ffffffff80000dd7:	83 d8 ff             	sbb    $0xffffffff,%eax
ffffffff80000dda:	83 f8 10             	cmp    $0x10,%eax
ffffffff80000ddd:	0f 43 d8             	cmovae %eax,%ebx

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80000de0:	89 df                	mov    %ebx,%edi
ffffffff80000de2:	e8 49 ff ff ff       	callq  ffffffff80000d30 <liballoc_alloc>

		if ( maj == NULL ) 
ffffffff80000de7:	48 85 c0             	test   %rax,%rax
ffffffff80000dea:	74 34                	je     ffffffff80000e20 <allocate_new_page+0x60>
			return NULL;	// uh oh, we ran out of memory.
		}
		
		maj->prev 	= NULL;
		maj->next 	= NULL;
		maj->pages 	= st;
ffffffff80000dec:	89 58 10             	mov    %ebx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff80000def:	c1 e3 0c             	shl    $0xc,%ebx
		maj->prev 	= NULL;
ffffffff80000df2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80000df9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80000e00:	00 
		maj->size 	= st * l_pageSize;
ffffffff80000e01:	89 58 14             	mov    %ebx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80000e04:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff80000e0b:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000e12:	00 

		l_allocated += maj->size;
ffffffff80000e13:	48 01 1d d6 16 01 00 	add    %rbx,0x116d6(%rip)        # ffffffff800124f0 <l_allocated>
		FLUSH();
		#endif
	
		
      return maj;
}
ffffffff80000e1a:	5b                   	pop    %rbx
ffffffff80000e1b:	c3                   	retq   
ffffffff80000e1c:	0f 1f 40 00          	nopl   0x0(%rax)
			l_warningCount += 1;
ffffffff80000e20:	48 83 05 b8 16 01 00 	addq   $0x1,0x116b8(%rip)        # ffffffff800124e0 <l_warningCount>
ffffffff80000e27:	01 
}
ffffffff80000e28:	5b                   	pop    %rbx
ffffffff80000e29:	c3                   	retq   
ffffffff80000e2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000e30 <kmalloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff80000e30:	41 57                	push   %r15
ffffffff80000e32:	41 56                	push   %r14
ffffffff80000e34:	41 55                	push   %r13
ffffffff80000e36:	41 54                	push   %r12
ffffffff80000e38:	49 89 fd             	mov    %rdi,%r13
ffffffff80000e3b:	55                   	push   %rbp
ffffffff80000e3c:	53                   	push   %rbx
ffffffff80000e3d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000e41:	eb 1a                	jmp    ffffffff80000e5d <kmalloc+0x2d>
ffffffff80000e43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80000e48:	31 c0                	xor    %eax,%eax
		return PREFIX(malloc)(1);
ffffffff80000e4a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		l_warningCount += 1;
ffffffff80000e50:	48 83 05 88 16 01 00 	addq   $0x1,0x11688(%rip)        # ffffffff800124e0 <l_warningCount>
ffffffff80000e57:	01 
		liballoc_unlock();
ffffffff80000e58:	e8 b3 fe ff ff       	callq  ffffffff80000d10 <liballoc_unlock>
		size += ALIGNMENT + ALIGN_INFO;
ffffffff80000e5d:	4d 8d 65 20          	lea    0x20(%r13),%r12
	liballoc_lock();
ffffffff80000e61:	31 c0                	xor    %eax,%eax
ffffffff80000e63:	e8 98 fe ff ff       	callq  ffffffff80000d00 <liballoc_lock>
	if ( size == 0 )
ffffffff80000e68:	4d 85 e4             	test   %r12,%r12
ffffffff80000e6b:	74 db                	je     ffffffff80000e48 <kmalloc+0x18>
	}
	

	if ( l_memRoot == NULL )
ffffffff80000e6d:	48 8b 35 8c 16 01 00 	mov    0x1168c(%rip),%rsi        # ffffffff80012500 <l_memRoot>
ffffffff80000e74:	48 85 f6             	test   %rsi,%rsi
ffffffff80000e77:	0f 84 c3 02 00 00    	je     ffffffff80001140 <kmalloc+0x310>

	maj = l_memRoot;
	startedBet = 0;
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80000e7d:	48 8b 15 74 16 01 00 	mov    0x11674(%rip),%rdx        # ffffffff800124f8 <l_bestBet>
ffffffff80000e84:	49 8d 5d 48          	lea    0x48(%r13),%rbx
ffffffff80000e88:	48 85 d2             	test   %rdx,%rdx
ffffffff80000e8b:	0f 84 3f 02 00 00    	je     ffffffff800010d0 <kmalloc+0x2a0>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000e91:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000e94:	8b 4a 18             	mov    0x18(%rdx),%ecx

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
		{
			maj = l_bestBet;
			startedBet = 1;
ffffffff80000e97:	41 bf 01 00 00 00    	mov    $0x1,%r15d
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000e9d:	41 89 c6             	mov    %eax,%r14d
ffffffff80000ea0:	41 29 ce             	sub    %ecx,%r14d
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80000ea3:	49 39 de             	cmp    %rbx,%r14
ffffffff80000ea6:	0f 86 b4 01 00 00    	jbe    ffffffff80001060 <kmalloc+0x230>
		}
	}
	
	while ( maj != NULL )
	{
		diff  = maj->size - maj->usage;	
ffffffff80000eac:	29 c8                	sub    %ecx,%eax
										// free memory in the block

		if ( bestSize < diff )
ffffffff80000eae:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000eb1:	76 0a                	jbe    ffffffff80000ebd <kmalloc+0x8d>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff80000eb3:	48 89 15 3e 16 01 00 	mov    %rdx,0x1163e(%rip)        # ffffffff800124f8 <l_bestBet>
ffffffff80000eba:	49 89 c6             	mov    %rax,%r14
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000ebd:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ec0:	73 22                	jae    ffffffff80000ee4 <kmalloc+0xb4>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80000ec2:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff80000ec6:	48 85 c0             	test   %rax,%rax
ffffffff80000ec9:	0f 84 b9 00 00 00    	je     ffffffff80000f88 <kmalloc+0x158>
ffffffff80000ecf:	48 89 c2             	mov    %rax,%rdx
ffffffff80000ed2:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000ed5:	8b 4a 18             	mov    0x18(%rdx),%ecx
		diff  = maj->size - maj->usage;	
ffffffff80000ed8:	29 c8                	sub    %ecx,%eax
		if ( bestSize < diff )
ffffffff80000eda:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000edd:	77 d4                	ja     ffffffff80000eb3 <kmalloc+0x83>
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000edf:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ee2:	72 de                	jb     ffffffff80000ec2 <kmalloc+0x92>
ffffffff80000ee4:	48 89 d5             	mov    %rdx,%rbp
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80000ee7:	48 8b 55 20          	mov    0x20(%rbp),%rdx
ffffffff80000eeb:	48 85 d2             	test   %rdx,%rdx
ffffffff80000eee:	0f 84 7d 01 00 00    	je     ffffffff80001071 <kmalloc+0x241>
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
		diff -= (uintptr_t)maj;
ffffffff80000ef4:	48 89 d0             	mov    %rdx,%rax
ffffffff80000ef7:	48 29 e8             	sub    %rbp,%rax
		diff -= sizeof(struct liballoc_major);
ffffffff80000efa:	48 83 e8 28          	sub    $0x28,%rax

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff80000efe:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000f01:	0f 83 62 02 00 00    	jae    ffffffff80001169 <kmalloc+0x339>
		
			// Looping within the block now...
		while ( min != NULL )
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80000f07:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000f0b:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000f0e:	48 85 c9             	test   %rcx,%rcx
ffffffff80000f11:	74 25                	je     ffffffff80000f38 <kmalloc+0x108>
				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
					diff -= (uintptr_t)min;
ffffffff80000f13:	48 89 c8             	mov    %rcx,%rax
ffffffff80000f16:	48 29 d0             	sub    %rdx,%rax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000f19:	48 83 e8 28          	sub    $0x28,%rax
					diff -= min->size;
ffffffff80000f1d:	48 29 f0             	sub    %rsi,%rax
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000f20:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000f23:	0f 83 b7 00 00 00    	jae    ffffffff80000fe0 <kmalloc+0x1b0>
ffffffff80000f29:	48 89 ca             	mov    %rcx,%rdx
				if ( min->next == NULL )
ffffffff80000f2c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000f30:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000f33:	48 85 c9             	test   %rcx,%rcx
ffffffff80000f36:	75 db                	jne    ffffffff80000f13 <kmalloc+0xe3>
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80000f38:	8b 45 14             	mov    0x14(%rbp),%eax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000f3b:	48 8d 44 05 d8       	lea    -0x28(%rbp,%rax,1),%rax
ffffffff80000f40:	48 29 d0             	sub    %rdx,%rax
					diff -= min->size; 
ffffffff80000f43:	48 29 f0             	sub    %rsi,%rax
					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000f46:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000f49:	0f 83 99 01 00 00    	jae    ffffffff800010e8 <kmalloc+0x2b8>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff80000f4f:	48 8b 55 08          	mov    0x8(%rbp),%rdx
ffffffff80000f53:	48 85 d2             	test   %rdx,%rdx
ffffffff80000f56:	0f 85 76 ff ff ff    	jne    ffffffff80000ed2 <kmalloc+0xa2>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff80000f5c:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000f60:	74 5e                	je     ffffffff80000fc0 <kmalloc+0x190>
				startedBet = 0;
				continue;
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000f62:	44 89 e7             	mov    %r12d,%edi
ffffffff80000f65:	e8 56 fe ff ff       	callq  ffffffff80000dc0 <allocate_new_page>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000f6a:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000f6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80000f70:	48 89 45 08          	mov    %rax,0x8(%rbp)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000f74:	0f 84 e1 01 00 00    	je     ffffffff8000115b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000f7a:	48 89 28             	mov    %rbp,(%rax)
ffffffff80000f7d:	e9 50 ff ff ff       	jmpq   ffffffff80000ed2 <kmalloc+0xa2>
ffffffff80000f82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80000f88:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000f8c:	74 32                	je     ffffffff80000fc0 <kmalloc+0x190>
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000f8e:	44 89 e7             	mov    %r12d,%edi
ffffffff80000f91:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80000f96:	e8 25 fe ff ff       	callq  ffffffff80000dc0 <allocate_new_page>
ffffffff80000f9b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000fa0:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000fa3:	48 89 c5             	mov    %rax,%rbp
ffffffff80000fa6:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000faa:	0f 84 ab 01 00 00    	je     ffffffff8000115b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000fb0:	48 89 10             	mov    %rdx,(%rax)
ffffffff80000fb3:	e9 2f ff ff ff       	jmpq   ffffffff80000ee7 <kmalloc+0xb7>
ffffffff80000fb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000fbf:	00 
				maj = l_memRoot;
ffffffff80000fc0:	48 8b 15 39 15 01 00 	mov    0x11539(%rip),%rdx        # ffffffff80012500 <l_memRoot>
	while ( maj != NULL )
ffffffff80000fc7:	48 85 d2             	test   %rdx,%rdx
ffffffff80000fca:	0f 84 8b 01 00 00    	je     ffffffff8000115b <kmalloc+0x32b>
ffffffff80000fd0:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000fd3:	e9 fa fe ff ff       	jmpq   ffffffff80000ed2 <kmalloc+0xa2>
ffffffff80000fd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000fdf:	00 
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fe0:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
						l_inuse += size;
ffffffff80000fe4:	4c 01 25 fd 14 01 00 	add    %r12,0x114fd(%rip)        # ffffffff800124e8 <l_inuse>
						new_min->next = min->next;
ffffffff80000feb:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
						min->next->prev = new_min;
ffffffff80000fef:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000ff3:	48 8d 43 28          	lea    0x28(%rbx),%rax
						new_min->magic = LIBALLOC_MAGIC;
ffffffff80000ff7:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
						ALIGN( p );
ffffffff80000ffe:	48 83 c3 60          	add    $0x60,%rbx
						new_min->prev = min;
ffffffff80001002:	48 89 53 c8          	mov    %rdx,-0x38(%rbx)
						new_min->size = size;
ffffffff80001006:	44 89 63 e4          	mov    %r12d,-0x1c(%rbx)
						new_min->req_size = req_size;
ffffffff8000100a:	44 89 6b e8          	mov    %r13d,-0x18(%rbx)
						new_min->block = maj;
ffffffff8000100e:	48 89 6b d8          	mov    %rbp,-0x28(%rbx)
						min->next->prev = new_min;
ffffffff80001012:	48 89 01             	mov    %rax,(%rcx)
						min->next = new_min;
ffffffff80001015:	48 89 42 08          	mov    %rax,0x8(%rdx)
						ALIGN( p );
ffffffff80001019:	48 89 da             	mov    %rbx,%rdx
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff8000101c:	41 8d 44 24 28       	lea    0x28(%r12),%eax
ffffffff80001021:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80001024:	83 e2 0f             	and    $0xf,%edx
ffffffff80001027:	0f 84 93 00 00 00    	je     ffffffff800010c0 <kmalloc+0x290>
ffffffff8000102d:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001032:	48 29 d0             	sub    %rdx,%rax
ffffffff80001035:	48 01 c3             	add    %rax,%rbx
ffffffff80001038:	83 c0 10             	add    $0x10,%eax
ffffffff8000103b:	88 43 f0             	mov    %al,-0x10(%rbx)
						liballoc_unlock();		// release the lock
ffffffff8000103e:	31 c0                	xor    %eax,%eax
ffffffff80001040:	e8 cb fc ff ff       	callq  ffffffff80000d10 <liballoc_unlock>
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
}
ffffffff80001045:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001049:	48 89 d8             	mov    %rbx,%rax
ffffffff8000104c:	5b                   	pop    %rbx
ffffffff8000104d:	5d                   	pop    %rbp
ffffffff8000104e:	41 5c                	pop    %r12
ffffffff80001050:	41 5d                	pop    %r13
ffffffff80001052:	41 5e                	pop    %r14
ffffffff80001054:	41 5f                	pop    %r15
ffffffff80001056:	c3                   	retq   
ffffffff80001057:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000105e:	00 00 
ffffffff80001060:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80001063:	8b 4e 18             	mov    0x18(%rsi),%ecx
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80001066:	48 89 f2             	mov    %rsi,%rdx
	startedBet = 0;
ffffffff80001069:	45 31 ff             	xor    %r15d,%r15d
ffffffff8000106c:	e9 3b fe ff ff       	jmpq   ffffffff80000eac <kmalloc+0x7c>
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001071:	48 8d 45 28          	lea    0x28(%rbp),%rax
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80001075:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 		= NULL;
ffffffff8000107c:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80001083:	00 
			maj->first->next 		= NULL;
ffffffff80001084:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff8000108b:	00 
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff8000108c:	48 89 45 20          	mov    %rax,0x20(%rbp)
			ALIGN( p );
ffffffff80001090:	48 8d 5d 60          	lea    0x60(%rbp),%rbx
			maj->first->block 	= maj;
ffffffff80001094:	48 89 6d 38          	mov    %rbp,0x38(%rbp)
			maj->first->size 	= size;
ffffffff80001098:	44 89 65 44          	mov    %r12d,0x44(%rbp)
			maj->first->req_size 	= req_size;
ffffffff8000109c:	44 89 6d 48          	mov    %r13d,0x48(%rbp)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff800010a0:	41 8d 44 24 28       	lea    0x28(%r12),%eax
			l_inuse += size;
ffffffff800010a5:	4c 01 25 3c 14 01 00 	add    %r12,0x1143c(%rip)        # ffffffff800124e8 <l_inuse>
			ALIGN( p );
ffffffff800010ac:	48 89 da             	mov    %rbx,%rdx
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff800010af:	01 45 18             	add    %eax,0x18(%rbp)
			ALIGN( p );
ffffffff800010b2:	83 e2 0f             	and    $0xf,%edx
ffffffff800010b5:	0f 85 72 ff ff ff    	jne    ffffffff8000102d <kmalloc+0x1fd>
ffffffff800010bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
						ALIGN( p );
ffffffff800010c0:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff800010c5:	e9 71 ff ff ff       	jmpq   ffffffff8000103b <kmalloc+0x20b>
ffffffff800010ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff800010d0:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff800010d3:	8b 4e 18             	mov    0x18(%rsi),%ecx
	if ( l_bestBet != NULL )
ffffffff800010d6:	48 89 f2             	mov    %rsi,%rdx
	unsigned long long bestSize = 0;
ffffffff800010d9:	45 31 f6             	xor    %r14d,%r14d
	startedBet = 0;
ffffffff800010dc:	45 31 ff             	xor    %r15d,%r15d
ffffffff800010df:	e9 c8 fd ff ff       	jmpq   ffffffff80000eac <kmalloc+0x7c>
ffffffff800010e4:	0f 1f 40 00          	nopl   0x0(%rax)
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010e8:	48 01 d6             	add    %rdx,%rsi
						l_inuse += size;
ffffffff800010eb:	4c 01 25 f6 13 01 00 	add    %r12,0x113f6(%rip)        # ffffffff800124e8 <l_inuse>
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010f2:	48 8d 46 28          	lea    0x28(%rsi),%rax
						ALIGN( p );
ffffffff800010f6:	48 8d 5e 60          	lea    0x60(%rsi),%rbx
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010fa:	48 89 42 08          	mov    %rax,0x8(%rdx)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff800010fe:	41 8d 44 24 28       	lea    0x28(%r12),%eax
						min->next->prev = min;
ffffffff80001103:	48 89 56 28          	mov    %rdx,0x28(%rsi)
						ALIGN( p );
ffffffff80001107:	48 89 da             	mov    %rbx,%rdx
						min->next = NULL;
ffffffff8000110a:	48 c7 46 30 00 00 00 	movq   $0x0,0x30(%rsi)
ffffffff80001111:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff80001112:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						min->block = maj;
ffffffff80001119:	48 89 6e 38          	mov    %rbp,0x38(%rsi)
						min->size = size;
ffffffff8000111d:	44 89 66 44          	mov    %r12d,0x44(%rsi)
						min->req_size = req_size;
ffffffff80001121:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80001125:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80001128:	83 e2 0f             	and    $0xf,%edx
ffffffff8000112b:	0f 85 fc fe ff ff    	jne    ffffffff8000102d <kmalloc+0x1fd>
						ALIGN( p );
ffffffff80001131:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001136:	e9 00 ff ff ff       	jmpq   ffffffff8000103b <kmalloc+0x20b>
ffffffff8000113b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		l_memRoot = allocate_new_page( size );
ffffffff80001140:	44 89 e7             	mov    %r12d,%edi
ffffffff80001143:	e8 78 fc ff ff       	callq  ffffffff80000dc0 <allocate_new_page>
		if ( l_memRoot == NULL )
ffffffff80001148:	48 85 c0             	test   %rax,%rax
		l_memRoot = allocate_new_page( size );
ffffffff8000114b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000114e:	48 89 05 ab 13 01 00 	mov    %rax,0x113ab(%rip)        # ffffffff80012500 <l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80001155:	0f 85 22 fd ff ff    	jne    ffffffff80000e7d <kmalloc+0x4d>
		  liballoc_unlock();
ffffffff8000115b:	31 c0                	xor    %eax,%eax
		  return NULL;
ffffffff8000115d:	31 db                	xor    %ebx,%ebx
		  liballoc_unlock();
ffffffff8000115f:	e8 ac fb ff ff       	callq  ffffffff80000d10 <liballoc_unlock>
		  return NULL;
ffffffff80001164:	e9 dc fe ff ff       	jmpq   ffffffff80001045 <kmalloc+0x215>
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001169:	48 8d 45 28          	lea    0x28(%rbp),%rax
ffffffff8000116d:	48 89 02             	mov    %rax,(%rdx)
			maj->first->prev->next = maj->first;
ffffffff80001170:	48 89 55 30          	mov    %rdx,0x30(%rbp)
			maj->first = maj->first->prev;
ffffffff80001174:	48 89 45 20          	mov    %rax,0x20(%rbp)
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80001178:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 	= NULL;
ffffffff8000117f:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80001186:	00 
ffffffff80001187:	e9 04 ff ff ff       	jmpq   ffffffff80001090 <kmalloc+0x260>
ffffffff8000118c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001190 <kfree>:
void PREFIX(free)(void *ptr)
{
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80001190:	48 85 ff             	test   %rdi,%rdi
ffffffff80001193:	0f 84 d7 00 00 00    	je     ffffffff80001270 <kfree+0xe0>
{
ffffffff80001199:	53                   	push   %rbx
		FLUSH();
		#endif
		return;
	}

	UNALIGN( ptr );
ffffffff8000119a:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff8000119f:	48 89 fb             	mov    %rdi,%rbx
ffffffff800011a2:	48 29 c3             	sub    %rax,%rbx
ffffffff800011a5:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff800011a9:	48 0f 43 df          	cmovae %rdi,%rbx

	liballoc_lock();		// lockit
ffffffff800011ad:	31 c0                	xor    %eax,%eax
ffffffff800011af:	e8 4c fb ff ff       	callq  ffffffff80000d00 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff800011b4:	8b 43 f0             	mov    -0x10(%rbx),%eax
	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff800011b7:	48 8d 73 d8          	lea    -0x28(%rbx),%rsi
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff800011bb:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff800011c0:	74 2e                	je     ffffffff800011f0 <kfree+0x60>
	{
		l_errorCount += 1;

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff800011c2:	89 c2                	mov    %eax,%edx
		l_errorCount += 1;
ffffffff800011c4:	48 83 05 0c 13 01 00 	addq   $0x1,0x1130c(%rip)        # ffffffff800124d8 <l_errorCount>
ffffffff800011cb:	01 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff800011cc:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
		if ( 
ffffffff800011d2:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff800011d8:	0f 84 82 00 00 00    	je     ffffffff80001260 <kfree+0xd0>
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff800011de:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff800011e2:	74 7c                	je     ffffffff80001260 <kfree+0xd0>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff800011e4:	3c de                	cmp    $0xde,%al
ffffffff800011e6:	74 78                	je     ffffffff80001260 <kfree+0xd0>
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
}
ffffffff800011e8:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff800011e9:	31 c0                	xor    %eax,%eax
ffffffff800011eb:	e9 20 fb ff ff       	jmpq   ffffffff80000d10 <liballoc_unlock>
		maj = min->block;
ffffffff800011f0:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
		l_inuse -= min->size;
ffffffff800011f4:	8b 53 f4             	mov    -0xc(%rbx),%edx
ffffffff800011f7:	48 29 15 ea 12 01 00 	sub    %rdx,0x112ea(%rip)        # ffffffff800124e8 <l_inuse>
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800011fe:	8b 4f 18             	mov    0x18(%rdi),%ecx
ffffffff80001201:	29 d1                	sub    %edx,%ecx
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80001203:	48 8b 53 e0          	mov    -0x20(%rbx),%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80001207:	89 c8                	mov    %ecx,%eax
ffffffff80001209:	48 8b 4b d8          	mov    -0x28(%rbx),%rcx
ffffffff8000120d:	83 e8 28             	sub    $0x28,%eax
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff80001210:	48 85 d2             	test   %rdx,%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff80001213:	89 47 18             	mov    %eax,0x18(%rdi)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff80001216:	c7 43 f0 ad de ad de 	movl   $0xdeaddead,-0x10(%rbx)
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff8000121d:	74 06                	je     ffffffff80001225 <kfree+0x95>
ffffffff8000121f:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff80001222:	48 8b 0e             	mov    (%rsi),%rcx
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff80001225:	48 85 c9             	test   %rcx,%rcx
ffffffff80001228:	74 56                	je     ffffffff80001280 <kfree+0xf0>
ffffffff8000122a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff8000122e:	48 8b 57 20          	mov    0x20(%rdi),%rdx
	if ( maj->first == NULL )	// Block completely unused.
ffffffff80001232:	48 85 d2             	test   %rdx,%rdx
ffffffff80001235:	48 8b 0d bc 12 01 00 	mov    0x112bc(%rip),%rcx        # ffffffff800124f8 <l_bestBet>
ffffffff8000123c:	74 52                	je     ffffffff80001290 <kfree+0x100>
		if ( l_bestBet != NULL )
ffffffff8000123e:	48 85 c9             	test   %rcx,%rcx
ffffffff80001241:	74 a5                	je     ffffffff800011e8 <kfree+0x58>
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001243:	8b 51 14             	mov    0x14(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80001246:	8b 77 14             	mov    0x14(%rdi),%esi
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001249:	2b 51 18             	sub    0x18(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff8000124c:	29 c6                	sub    %eax,%esi
			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff8000124e:	39 f2                	cmp    %esi,%edx
ffffffff80001250:	7d 96                	jge    ffffffff800011e8 <kfree+0x58>
ffffffff80001252:	48 89 3d 9f 12 01 00 	mov    %rdi,0x1129f(%rip)        # ffffffff800124f8 <l_bestBet>
ffffffff80001259:	eb 8d                	jmp    ffffffff800011e8 <kfree+0x58>
ffffffff8000125b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			l_possibleOverruns += 1;
ffffffff80001260:	48 83 05 68 12 01 00 	addq   $0x1,0x11268(%rip)        # ffffffff800124d0 <l_possibleOverruns>
ffffffff80001267:	01 
		liballoc_unlock();		// release the lock
ffffffff80001268:	31 c0                	xor    %eax,%eax
}
ffffffff8000126a:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff8000126b:	e9 a0 fa ff ff       	jmpq   ffffffff80000d10 <liballoc_unlock>
		l_warningCount += 1;
ffffffff80001270:	48 83 05 68 12 01 00 	addq   $0x1,0x11268(%rip)        # ffffffff800124e0 <l_warningCount>
ffffffff80001277:	01 
ffffffff80001278:	c3                   	retq   
ffffffff80001279:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80001280:	48 89 57 20          	mov    %rdx,0x20(%rdi)
ffffffff80001284:	eb ac                	jmp    ffffffff80001232 <kfree+0xa2>
ffffffff80001286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000128d:	00 00 00 
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001290:	48 39 3d 69 12 01 00 	cmp    %rdi,0x11269(%rip)        # ffffffff80012500 <l_memRoot>
ffffffff80001297:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff8000129b:	74 3b                	je     ffffffff800012d8 <kfree+0x148>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff8000129d:	48 39 cf             	cmp    %rcx,%rdi
ffffffff800012a0:	74 46                	je     ffffffff800012e8 <kfree+0x158>
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff800012a2:	48 8b 17             	mov    (%rdi),%rdx
ffffffff800012a5:	48 85 d2             	test   %rdx,%rdx
ffffffff800012a8:	74 08                	je     ffffffff800012b2 <kfree+0x122>
ffffffff800012aa:	48 89 42 08          	mov    %rax,0x8(%rdx)
ffffffff800012ae:	48 8b 47 08          	mov    0x8(%rdi),%rax
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff800012b2:	48 85 c0             	test   %rax,%rax
ffffffff800012b5:	74 03                	je     ffffffff800012ba <kfree+0x12a>
ffffffff800012b7:	48 89 10             	mov    %rdx,(%rax)
		liballoc_free( maj, maj->pages );
ffffffff800012ba:	8b 77 10             	mov    0x10(%rdi),%esi
		l_allocated -= maj->size;
ffffffff800012bd:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff800012c0:	48 29 05 29 12 01 00 	sub    %rax,0x11229(%rip)        # ffffffff800124f0 <l_allocated>
		liballoc_free( maj, maj->pages );
ffffffff800012c7:	e8 54 fa ff ff       	callq  ffffffff80000d20 <liballoc_free>
ffffffff800012cc:	e9 17 ff ff ff       	jmpq   ffffffff800011e8 <kfree+0x58>
ffffffff800012d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff800012d8:	48 89 05 21 12 01 00 	mov    %rax,0x11221(%rip)        # ffffffff80012500 <l_memRoot>
ffffffff800012df:	eb bc                	jmp    ffffffff8000129d <kfree+0x10d>
ffffffff800012e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff800012e8:	48 c7 05 05 12 01 00 	movq   $0x0,0x11205(%rip)        # ffffffff800124f8 <l_bestBet>
ffffffff800012ef:	00 00 00 00 
ffffffff800012f3:	eb ad                	jmp    ffffffff800012a2 <kfree+0x112>
ffffffff800012f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800012fc:	00 00 00 00 

ffffffff80001300 <kcalloc>:
void* PREFIX(calloc)(size_t nobj, size_t size)
{
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff80001300:	0f af fe             	imul   %esi,%edi
{
ffffffff80001303:	53                   	push   %rbx
       
       p = PREFIX(malloc)( real_size );
ffffffff80001304:	48 63 df             	movslq %edi,%rbx
ffffffff80001307:	48 89 df             	mov    %rbx,%rdi
ffffffff8000130a:	e8 21 fb ff ff       	callq  ffffffff80000e30 <kmalloc>
	for ( i = 0; i < n ; i++)
ffffffff8000130f:	48 85 db             	test   %rbx,%rbx
ffffffff80001312:	74 1b                	je     ffffffff8000132f <kcalloc+0x2f>
ffffffff80001314:	31 c9                	xor    %ecx,%ecx
ffffffff80001316:	31 d2                	xor    %edx,%edx
ffffffff80001318:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000131f:	00 
		((char*)s)[i] = c;
ffffffff80001320:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
	for ( i = 0; i < n ; i++)
ffffffff80001324:	8d 51 01             	lea    0x1(%rcx),%edx
ffffffff80001327:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8000132a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000132d:	77 f1                	ja     ffffffff80001320 <kcalloc+0x20>

       liballoc_memset( p, 0, real_size );

       return p;
}
ffffffff8000132f:	5b                   	pop    %rbx
ffffffff80001330:	c3                   	retq   
ffffffff80001331:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001338:	00 00 00 00 
ffffffff8000133c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001340 <krealloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff80001340:	41 54                	push   %r12
ffffffff80001342:	55                   	push   %rbp
ffffffff80001343:	53                   	push   %rbx
ffffffff80001344:	48 89 fb             	mov    %rdi,%rbx
ffffffff80001347:	48 83 ec 10          	sub    $0x10,%rsp
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff8000134b:	48 85 f6             	test   %rsi,%rsi
ffffffff8000134e:	0f 84 54 01 00 00    	je     ffffffff800014a8 <krealloc+0x168>
		PREFIX(free)( p );
		return NULL;
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001354:	48 85 ff             	test   %rdi,%rdi
ffffffff80001357:	49 89 f4             	mov    %rsi,%r12
ffffffff8000135a:	0f 84 e0 00 00 00    	je     ffffffff80001440 <krealloc+0x100>

	// Unalign the pointer if required.
	ptr = p;
	UNALIGN(ptr);
ffffffff80001360:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80001365:	48 89 fd             	mov    %rdi,%rbp
ffffffff80001368:	48 29 c5             	sub    %rax,%rbp
ffffffff8000136b:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff8000136f:	48 0f 43 ef          	cmovae %rdi,%rbp

	liballoc_lock();		// lockit
ffffffff80001373:	31 c0                	xor    %eax,%eax
ffffffff80001375:	e8 86 f9 ff ff       	callq  ffffffff80000d00 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff8000137a:	8b 45 f0             	mov    -0x10(%rbp),%eax
		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff8000137d:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001381:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80001386:	0f 85 c4 00 00 00    	jne    ffffffff80001450 <krealloc+0x110>
		
		// Definitely a memory block.
		
		real_size = min->req_size;

		if ( real_size >= size ) 
ffffffff8000138c:	8b 6d f8             	mov    -0x8(%rbp),%ebp
ffffffff8000138f:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80001392:	0f 83 90 00 00 00    	jae    ffffffff80001428 <krealloc+0xe8>
			min->req_size = size;
			liballoc_unlock();
			return p;
		}

	liballoc_unlock();
ffffffff80001398:	31 c0                	xor    %eax,%eax
ffffffff8000139a:	e8 71 f9 ff ff       	callq  ffffffff80000d10 <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff8000139f:	4c 89 e7             	mov    %r12,%rdi
ffffffff800013a2:	e8 89 fa ff ff       	callq  ffffffff80000e30 <kmalloc>
  while ( n >= sizeof(unsigned int) )
ffffffff800013a7:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff800013ab:	0f 86 e7 00 00 00    	jbe    ffffffff80001498 <krealloc+0x158>
ffffffff800013b1:	48 83 ed 04          	sub    $0x4,%rbp
ffffffff800013b5:	31 d2                	xor    %edx,%edx
ffffffff800013b7:	48 89 ef             	mov    %rbp,%rdi
ffffffff800013ba:	48 c1 ef 02          	shr    $0x2,%rdi
ffffffff800013be:	48 8d 34 bd 04 00 00 	lea    0x4(,%rdi,4),%rsi
ffffffff800013c5:	00 
ffffffff800013c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800013cd:	00 00 00 
      *ldest++ = *lsrc++;
ffffffff800013d0:	8b 0c 13             	mov    (%rbx,%rdx,1),%ecx
ffffffff800013d3:	89 0c 10             	mov    %ecx,(%rax,%rdx,1)
ffffffff800013d6:	48 83 c2 04          	add    $0x4,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff800013da:	48 39 f2             	cmp    %rsi,%rdx
ffffffff800013dd:	75 f1                	jne    ffffffff800013d0 <krealloc+0x90>
ffffffff800013df:	48 f7 df             	neg    %rdi
ffffffff800013e2:	4c 8d 04 13          	lea    (%rbx,%rdx,1),%r8
ffffffff800013e6:	48 01 c2             	add    %rax,%rdx
ffffffff800013e9:	48 8d 6c bd 00       	lea    0x0(%rbp,%rdi,4),%rbp
  while ( n > 0 )
ffffffff800013ee:	48 85 ed             	test   %rbp,%rbp
ffffffff800013f1:	74 14                	je     ffffffff80001407 <krealloc+0xc7>
ffffffff800013f3:	31 c9                	xor    %ecx,%ecx
      *cdest++ = *csrc++;
ffffffff800013f5:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff800013fa:	40 88 34 0a          	mov    %sil,(%rdx,%rcx,1)
ffffffff800013fe:	48 83 c1 01          	add    $0x1,%rcx
  while ( n > 0 )
ffffffff80001402:	48 39 e9             	cmp    %rbp,%rcx
ffffffff80001405:	75 ee                	jne    ffffffff800013f5 <krealloc+0xb5>
	liballoc_memcpy( ptr, p, real_size );
	PREFIX(free)( p );
ffffffff80001407:	48 89 df             	mov    %rbx,%rdi
ffffffff8000140a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8000140f:	e8 7c fd ff ff       	callq  ffffffff80001190 <kfree>
ffffffff80001414:	48 8b 44 24 08       	mov    0x8(%rsp),%rax

	return ptr;
}
ffffffff80001419:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000141d:	5b                   	pop    %rbx
ffffffff8000141e:	5d                   	pop    %rbp
ffffffff8000141f:	41 5c                	pop    %r12
ffffffff80001421:	c3                   	retq   
ffffffff80001422:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			min->req_size = size;
ffffffff80001428:	44 89 62 20          	mov    %r12d,0x20(%rdx)
			liballoc_unlock();
ffffffff8000142c:	31 c0                	xor    %eax,%eax
ffffffff8000142e:	e8 dd f8 ff ff       	callq  ffffffff80000d10 <liballoc_unlock>
			return p;
ffffffff80001433:	48 89 d8             	mov    %rbx,%rax
}
ffffffff80001436:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000143a:	5b                   	pop    %rbx
ffffffff8000143b:	5d                   	pop    %rbp
ffffffff8000143c:	41 5c                	pop    %r12
ffffffff8000143e:	c3                   	retq   
ffffffff8000143f:	90                   	nop
ffffffff80001440:	48 83 c4 10          	add    $0x10,%rsp
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001444:	48 89 f7             	mov    %rsi,%rdi
}
ffffffff80001447:	5b                   	pop    %rbx
ffffffff80001448:	5d                   	pop    %rbp
ffffffff80001449:	41 5c                	pop    %r12
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8000144b:	e9 e0 f9 ff ff       	jmpq   ffffffff80000e30 <kmalloc>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001450:	89 c2                	mov    %eax,%edx
			l_errorCount += 1;
ffffffff80001452:	48 83 05 7e 10 01 00 	addq   $0x1,0x1107e(%rip)        # ffffffff800124d8 <l_errorCount>
ffffffff80001459:	01 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000145a:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
			if ( 
ffffffff80001460:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80001466:	74 20                	je     ffffffff80001488 <krealloc+0x148>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001468:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff8000146c:	74 1a                	je     ffffffff80001488 <krealloc+0x148>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff8000146e:	3c de                	cmp    $0xde,%al
ffffffff80001470:	74 16                	je     ffffffff80001488 <krealloc+0x148>
			liballoc_unlock();		// release the lock
ffffffff80001472:	31 c0                	xor    %eax,%eax
ffffffff80001474:	e8 97 f8 ff ff       	callq  ffffffff80000d10 <liballoc_unlock>
}
ffffffff80001479:	48 83 c4 10          	add    $0x10,%rsp
			return NULL;
ffffffff8000147d:	31 c0                	xor    %eax,%eax
}
ffffffff8000147f:	5b                   	pop    %rbx
ffffffff80001480:	5d                   	pop    %rbp
ffffffff80001481:	41 5c                	pop    %r12
ffffffff80001483:	c3                   	retq   
ffffffff80001484:	0f 1f 40 00          	nopl   0x0(%rax)
				l_possibleOverruns += 1;
ffffffff80001488:	48 83 05 40 10 01 00 	addq   $0x1,0x11040(%rip)        # ffffffff800124d0 <l_possibleOverruns>
ffffffff8000148f:	01 
ffffffff80001490:	eb e0                	jmp    ffffffff80001472 <krealloc+0x132>
ffffffff80001492:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80001498:	48 89 c2             	mov    %rax,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff8000149b:	49 89 d8             	mov    %rbx,%r8
ffffffff8000149e:	e9 4b ff ff ff       	jmpq   ffffffff800013ee <krealloc+0xae>
ffffffff800014a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		PREFIX(free)( p );
ffffffff800014a8:	e8 e3 fc ff ff       	callq  ffffffff80001190 <kfree>
		return NULL;
ffffffff800014ad:	31 c0                	xor    %eax,%eax
ffffffff800014af:	eb 85                	jmp    ffffffff80001436 <krealloc+0xf6>
ffffffff800014b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800014b8:	00 00 00 
ffffffff800014bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800014c0 <pmm_init>:

//Initialize the Physical Memory Manager
void pmm_init()
{
    //memory map helper variables
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff800014c0:	48 8b 05 69 93 00 00 	mov    0x9369(%rip),%rax        # ffffffff8000a830 <boot_info+0x10>
ffffffff800014c7:	48 8b 35 d2 93 00 00 	mov    0x93d2(%rip),%rsi        # ffffffff8000a8a0 <pmm_info>
ffffffff800014ce:	4c 8b 58 10          	mov    0x10(%rax),%r11
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
    //uint8_t* type = NULL;

    //iterate through the memory map, find the largest memory segment, calculate total memory size
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014d2:	4d 85 db             	test   %r11,%r11
ffffffff800014d5:	0f 84 c5 00 00 00    	je     ffffffff800015a0 <pmm_init+0xe0>
{
ffffffff800014db:	55                   	push   %rbp
ffffffff800014dc:	53                   	push   %rbx
ffffffff800014dd:	48 83 c0 18          	add    $0x18,%rax
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014e1:	45 31 c9             	xor    %r9d,%r9d
ffffffff800014e4:	31 db                	xor    %ebx,%ebx
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
ffffffff800014e6:	45 31 d2             	xor    %r10d,%r10d
{
ffffffff800014e9:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
ffffffff800014ed:	31 c9                	xor    %ecx,%ecx
ffffffff800014ef:	4c 8b 05 e2 93 00 00 	mov    0x93e2(%rip),%r8        # ffffffff8000a8d8 <pmm_vmm_info+0x8>
ffffffff800014f6:	48 8b 3d e3 93 00 00 	mov    0x93e3(%rip),%rdi        # ffffffff8000a8e0 <pmm_vmm_info+0x10>
ffffffff800014fd:	eb 1e                	jmp    ffffffff8000151d <pmm_init+0x5d>
ffffffff800014ff:	90                   	nop
        {
            continue;
        }

        //Capture the largest segment size
        if(current_entry->length > mmap_largest_segment_size)
ffffffff80001500:	4c 39 d2             	cmp    %r10,%rdx
ffffffff80001503:	76 0b                	jbe    ffffffff80001510 <pmm_init+0x50>
ffffffff80001505:	83 fd 01             	cmp    $0x1,%ebp
ffffffff80001508:	75 06                	jne    ffffffff80001510 <pmm_init+0x50>
        {
            mmap_largest_segment_base = current_entry->base;
ffffffff8000150a:	48 8b 08             	mov    (%rax),%rcx
ffffffff8000150d:	49 89 d2             	mov    %rdx,%r10
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001510:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80001514:	48 83 c0 18          	add    $0x18,%rax
ffffffff80001518:	49 39 db             	cmp    %rbx,%r11
ffffffff8000151b:	74 2b                	je     ffffffff80001548 <pmm_init+0x88>
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff8000151d:	48 8b 50 08          	mov    0x8(%rax),%rdx
        if(current_entry->type == 0x1002)
ffffffff80001521:	8b 68 10             	mov    0x10(%rax),%ebp
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff80001524:	48 01 d6             	add    %rdx,%rsi
        if(current_entry->type == 0x1002)
ffffffff80001527:	81 fd 02 10 00 00    	cmp    $0x1002,%ebp
ffffffff8000152d:	75 d1                	jne    ffffffff80001500 <pmm_init+0x40>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff8000152f:	48 83 c3 01          	add    $0x1,%rbx
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff80001533:	4c 8b 00             	mov    (%rax),%r8
ffffffff80001536:	48 83 c0 18          	add    $0x18,%rax
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff8000153a:	49 39 db             	cmp    %rbx,%r11
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff8000153d:	48 89 d7             	mov    %rdx,%rdi
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff80001540:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001546:	75 d5                	jne    ffffffff8000151d <pmm_init+0x5d>
ffffffff80001548:	45 84 c9             	test   %r9b,%r9b
ffffffff8000154b:	48 89 35 4e 93 00 00 	mov    %rsi,0x934e(%rip)        # ffffffff8000a8a0 <pmm_info>
ffffffff80001552:	74 0e                	je     ffffffff80001562 <pmm_init+0xa2>
ffffffff80001554:	4c 89 05 7d 93 00 00 	mov    %r8,0x937d(%rip)        # ffffffff8000a8d8 <pmm_vmm_info+0x8>
ffffffff8000155b:	48 89 3d 7e 93 00 00 	mov    %rdi,0x937e(%rip)        # ffffffff8000a8e0 <pmm_vmm_info+0x10>
            mmap_largest_segment_size = current_entry->length;
        }
    };

    //Populate the PMM state variables
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001562:	48 89 f0             	mov    %rsi,%rax
ffffffff80001565:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80001569:	48 89 05 40 93 00 00 	mov    %rax,0x9340(%rip)        # ffffffff8000a8b0 <pmm_info+0x10>
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001570:	48 89 05 31 93 00 00 	mov    %rax,0x9331(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001577:	48 89 f0             	mov    %rsi,%rax
ffffffff8000157a:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000157e:	48 83 c0 01          	add    $0x1,%rax
    
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001582:	48 39 c2             	cmp    %rax,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001585:	48 89 05 34 93 00 00 	mov    %rax,0x9334(%rip)        # ffffffff8000a8c0 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff8000158c:	73 4a                	jae    ffffffff800015d8 <pmm_init+0x118>
        {
            printf("Bitmap too large");
ffffffff8000158e:	48 c7 c7 6a 4e 00 80 	mov    $0xffffffff80004e6a,%rdi
ffffffff80001595:	31 c0                	xor    %eax,%eax
ffffffff80001597:	e8 24 20 00 00       	callq  ffffffff800035c0 <printf_>
ffffffff8000159c:	eb fe                	jmp    ffffffff8000159c <pmm_init+0xdc>
ffffffff8000159e:	66 90                	xchg   %ax,%ax
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800015a0:	48 89 f0             	mov    %rsi,%rax
ffffffff800015a3:	48 c1 e8 0c          	shr    $0xc,%rax
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff800015a7:	48 89 05 fa 92 00 00 	mov    %rax,0x92fa(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff800015ae:	48 89 05 fb 92 00 00 	mov    %rax,0x92fb(%rip)        # ffffffff8000a8b0 <pmm_info+0x10>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff800015b5:	48 89 f0             	mov    %rsi,%rax
ffffffff800015b8:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff800015bc:	48 83 c0 01          	add    $0x1,%rax
ffffffff800015c0:	48 89 05 f9 92 00 00 	mov    %rax,0x92f9(%rip)        # ffffffff8000a8c0 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff800015c7:	48 8b 04 25 08 00 00 	mov    0x8,%rax
ffffffff800015ce:	00 
ffffffff800015cf:	0f 0b                	ud2    
ffffffff800015d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800015d8:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff800015df:	80 ff ff 
            for(;;){}   //hang
        }
    
    pmm_info.bitmap = (uint8_t*)phys_to_hh_data(mmap_largest_segment_base); 

    printf("Total Memory: %d\n", (pmm_info.totalmem));
ffffffff800015e2:	48 c7 c7 7b 4e 00 80 	mov    $0xffffffff80004e7b,%rdi
ffffffff800015e9:	48 01 c1             	add    %rax,%rcx
ffffffff800015ec:	31 c0                	xor    %eax,%eax
ffffffff800015ee:	48 89 0d c3 92 00 00 	mov    %rcx,0x92c3(%rip)        # ffffffff8000a8b8 <pmm_info+0x18>
ffffffff800015f5:	e8 c6 1f 00 00       	callq  ffffffff800035c0 <printf_>
    printf("Total Pages: %d   Used Pages: %d\n", pmm_info.totalpages, pmm_info.usedpages);
ffffffff800015fa:	48 8b 15 a7 92 00 00 	mov    0x92a7(%rip),%rdx        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff80001601:	48 8b 35 a8 92 00 00 	mov    0x92a8(%rip),%rsi        # ffffffff8000a8b0 <pmm_info+0x10>
ffffffff80001608:	48 c7 c7 b8 4e 00 80 	mov    $0xffffffff80004eb8,%rdi
ffffffff8000160f:	31 c0                	xor    %eax,%eax
ffffffff80001611:	e8 aa 1f 00 00       	callq  ffffffff800035c0 <printf_>
    printf("Bitmap Addr: %p  Bitmap Size (bytes): %d\n", pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001616:	48 8b 15 a3 92 00 00 	mov    0x92a3(%rip),%rdx        # ffffffff8000a8c0 <pmm_info+0x20>
ffffffff8000161d:	48 8b 35 94 92 00 00 	mov    0x9294(%rip),%rsi        # ffffffff8000a8b8 <pmm_info+0x18>
ffffffff80001624:	31 c0                	xor    %eax,%eax
ffffffff80001626:	48 c7 c7 e0 4e 00 80 	mov    $0xffffffff80004ee0,%rdi
ffffffff8000162d:	e8 8e 1f 00 00       	callq  ffffffff800035c0 <printf_>

    //Set all bitmap bits to 1
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff80001632:	48 83 3d 86 92 00 00 	cmpq   $0x0,0x9286(%rip)        # ffffffff8000a8c0 <pmm_info+0x20>
ffffffff80001639:	00 
ffffffff8000163a:	74 1c                	je     ffffffff80001658 <pmm_init+0x198>
ffffffff8000163c:	31 c0                	xor    %eax,%eax
ffffffff8000163e:	66 90                	xchg   %ax,%ax
        {
        pmm_info.bitmap[i] = 0xff;
ffffffff80001640:	48 8b 15 71 92 00 00 	mov    0x9271(%rip),%rdx        # ffffffff8000a8b8 <pmm_info+0x18>
ffffffff80001647:	c6 04 02 ff          	movb   $0xff,(%rdx,%rax,1)
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff8000164b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000164f:	48 39 05 6a 92 00 00 	cmp    %rax,0x926a(%rip)        # ffffffff8000a8c0 <pmm_info+0x20>
ffffffff80001656:	77 e8                	ja     ffffffff80001640 <pmm_init+0x180>
    

    //printf("Number of MMAP Entries: %d\n", mmap_entries);

    //Iterate through the memory map again, unset bitmap for available memory
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001658:	31 f6                	xor    %esi,%esi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff8000165a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
ffffffff80001660:	eb 0f                	jmp    ffffffff80001671 <pmm_init+0x1b1>
ffffffff80001662:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001668:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000166c:	48 39 de             	cmp    %rbx,%rsi
ffffffff8000166f:	74 69                	je     ffffffff800016da <pmm_init+0x21a>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];

        if(current_entry->type == 1)
ffffffff80001671:	48 8b 15 b8 91 00 00 	mov    0x91b8(%rip),%rdx        # ffffffff8000a830 <boot_info+0x10>
ffffffff80001678:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
ffffffff8000167c:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
ffffffff80001680:	83 78 28 01          	cmpl   $0x1,0x28(%rax)
ffffffff80001684:	75 e2                	jne    ffffffff80001668 <pmm_init+0x1a8>
        {
            uint64_t pages = current_entry->length / 4096;
ffffffff80001686:	48 8b 50 20          	mov    0x20(%rax),%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff8000168a:	48 8b 40 18          	mov    0x18(%rax),%rax
            uint64_t pages = current_entry->length / 4096;
ffffffff8000168e:	48 c1 ea 0c          	shr    $0xc,%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff80001692:	48 c1 e8 0c          	shr    $0xc,%rax
            //printf("Index: %d  Pages: %d\n", align, pages);

            for(uint64_t j = 0; j < pages; j++)
ffffffff80001696:	48 85 d2             	test   %rdx,%rdx
ffffffff80001699:	74 cd                	je     ffffffff80001668 <pmm_init+0x1a8>
ffffffff8000169b:	48 01 c2             	add    %rax,%rdx
ffffffff8000169e:	66 90                	xchg   %ax,%ax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800016a0:	48 89 c7             	mov    %rax,%rdi
ffffffff800016a3:	89 c1                	mov    %eax,%ecx
ffffffff800016a5:	45 89 c1             	mov    %r8d,%r9d
ffffffff800016a8:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff800016ac:	48 03 3d 05 92 00 00 	add    0x9205(%rip),%rdi        # ffffffff8000a8b8 <pmm_info+0x18>
ffffffff800016b3:	83 e1 07             	and    $0x7,%ecx
ffffffff800016b6:	41 d3 e1             	shl    %cl,%r9d
                //uint64_t bitindex = align % 8;
                //pmm_info.bitmap[byteindex] &= ~(1 << bitindex);
                
                bitmap_unset(pmm_info.bitmap, align);

                align++;                    //increment page index
ffffffff800016b9:	48 83 c0 01          	add    $0x1,%rax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800016bd:	44 89 c9             	mov    %r9d,%ecx
ffffffff800016c0:	f7 d1                	not    %ecx
ffffffff800016c2:	20 0f                	and    %cl,(%rdi)
                pmm_info.usedpages--;       //decrement used page counter
ffffffff800016c4:	48 83 2d dc 91 00 00 	subq   $0x1,0x91dc(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff800016cb:	01 
            for(uint64_t j = 0; j < pages; j++)
ffffffff800016cc:	48 39 d0             	cmp    %rdx,%rax
ffffffff800016cf:	75 cf                	jne    ffffffff800016a0 <pmm_init+0x1e0>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800016d1:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800016d5:	48 39 de             	cmp    %rbx,%rsi
ffffffff800016d8:	75 97                	jne    ffffffff80001671 <pmm_init+0x1b1>
            }
        }
    }

    //Make certain the NULL page is unavailable
    bitmap_set(pmm_info.bitmap, 0);
ffffffff800016da:	48 8b 05 d7 91 00 00 	mov    0x91d7(%rip),%rax        # ffffffff8000a8b8 <pmm_info+0x18>
    pmm_info.usedpages++;

    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016e1:	48 c7 c7 8d 4e 00 80 	mov    $0xffffffff80004e8d,%rdi
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800016e8:	80 08 01             	orb    $0x1,(%rax)
    pmm_info.usedpages++;
ffffffff800016eb:	48 8b 05 b6 91 00 00 	mov    0x91b6(%rip),%rax        # ffffffff8000a8a8 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016f2:	48 8b 35 b7 91 00 00 	mov    0x91b7(%rip),%rsi        # ffffffff8000a8b0 <pmm_info+0x10>
    pmm_info.usedpages++;
ffffffff800016f9:	48 83 c0 01          	add    $0x1,%rax
ffffffff800016fd:	48 89 05 a4 91 00 00 	mov    %rax,0x91a4(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff80001704:	48 29 c6             	sub    %rax,%rsi
ffffffff80001707:	31 c0                	xor    %eax,%eax
ffffffff80001709:	e8 b2 1e 00 00       	callq  ffffffff800035c0 <printf_>
    printf("PMM Initialized\n");

}
ffffffff8000170e:	48 83 c4 08          	add    $0x8,%rsp
    printf("PMM Initialized\n");
ffffffff80001712:	48 c7 c7 a2 4e 00 80 	mov    $0xffffffff80004ea2,%rdi
ffffffff80001719:	31 c0                	xor    %eax,%eax
}
ffffffff8000171b:	5b                   	pop    %rbx
ffffffff8000171c:	5d                   	pop    %rbp
    printf("PMM Initialized\n");
ffffffff8000171d:	e9 9e 1e 00 00       	jmpq   ffffffff800035c0 <printf_>
ffffffff80001722:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001729:	00 00 00 00 
ffffffff8000172d:	0f 1f 00             	nopl   (%rax)

ffffffff80001730 <pmm_allocpage>:


void* pmm_allocpage()
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff80001730:	48 8b 05 79 91 00 00 	mov    0x9179(%rip),%rax        # ffffffff8000a8b0 <pmm_info+0x10>
ffffffff80001737:	48 39 05 6a 91 00 00 	cmp    %rax,0x916a(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff8000173e:	0f 83 7c 00 00 00    	jae    ffffffff800017c0 <pmm_allocpage+0x90>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001744:	48 8b 3d 75 91 00 00 	mov    0x9175(%rip),%rdi        # ffffffff8000a8c0 <pmm_info+0x20>
ffffffff8000174b:	48 8b 35 66 91 00 00 	mov    0x9166(%rip),%rsi        # ffffffff8000a8b8 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001752:	48 85 ff             	test   %rdi,%rdi
ffffffff80001755:	74 25                	je     ffffffff8000177c <pmm_allocpage+0x4c>
ffffffff80001757:	31 c9                	xor    %ecx,%ecx
        if(bitmap[i] != 0xff)
ffffffff80001759:	0f b6 14 0e          	movzbl (%rsi,%rcx,1),%edx
ffffffff8000175d:	80 fa ff             	cmp    $0xff,%dl
ffffffff80001760:	74 11                	je     ffffffff80001773 <pmm_allocpage+0x43>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001762:	31 c0                	xor    %eax,%eax
                if(!(bitmap[i] & (1 << j)))
ffffffff80001764:	0f a3 c2             	bt     %eax,%edx
ffffffff80001767:	73 27                	jae    ffffffff80001790 <pmm_allocpage+0x60>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001769:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000176d:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80001771:	75 f1                	jne    ffffffff80001764 <pmm_allocpage+0x34>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001773:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80001777:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8000177a:	75 dd                	jne    ffffffff80001759 <pmm_allocpage+0x29>
ffffffff8000177c:	ba 01 00 00 00       	mov    $0x1,%edx
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff80001781:	08 16                	or     %dl,(%rsi)
    for(uint64_t i = 0; i < size; i++)
ffffffff80001783:	31 c0                	xor    %eax,%eax
    
    bitmap_set(pmm_info.bitmap, index);

    pmm_info.usedpages++;
ffffffff80001785:	48 83 05 1b 91 00 00 	addq   $0x1,0x911b(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff8000178c:	01 

    return (void*)(index * PAGE_SIZE);
ffffffff8000178d:	c3                   	retq   
ffffffff8000178e:	66 90                	xchg   %ax,%ax
                    return (i * 8) + j;
ffffffff80001790:	48 8d 0c c8          	lea    (%rax,%rcx,8),%rcx
ffffffff80001794:	48 89 ca             	mov    %rcx,%rdx
ffffffff80001797:	48 89 c8             	mov    %rcx,%rax
ffffffff8000179a:	83 e1 07             	and    $0x7,%ecx
ffffffff8000179d:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff800017a1:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff800017a5:	48 01 d6             	add    %rdx,%rsi
ffffffff800017a8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800017ad:	d3 e2                	shl    %cl,%edx
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800017af:	08 16                	or     %dl,(%rsi)
    pmm_info.usedpages++;
ffffffff800017b1:	48 83 05 ef 90 00 00 	addq   $0x1,0x90ef(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff800017b8:	01 
    return (void*)(index * PAGE_SIZE);
ffffffff800017b9:	c3                   	retq   
ffffffff800017ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return NULL;
ffffffff800017c0:	31 c0                	xor    %eax,%eax
}
ffffffff800017c2:	c3                   	retq   
ffffffff800017c3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800017ca:	00 00 00 00 
ffffffff800017ce:	66 90                	xchg   %ax,%ax

ffffffff800017d0 <pmm_freepage>:
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800017d0:	48 89 fa             	mov    %rdi,%rdx


void pmm_freepage(void* page)
{
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800017d3:	48 c1 ef 0c          	shr    $0xc,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800017d7:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800017dc:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff800017e0:	48 03 15 d1 90 00 00 	add    0x90d1(%rip),%rdx        # ffffffff8000a8b8 <pmm_info+0x18>
ffffffff800017e7:	89 f9                	mov    %edi,%ecx
ffffffff800017e9:	83 e1 07             	and    $0x7,%ecx
ffffffff800017ec:	d3 e0                	shl    %cl,%eax
ffffffff800017ee:	f7 d0                	not    %eax
ffffffff800017f0:	20 02                	and    %al,(%rdx)
    bitmap_unset(pmm_info.bitmap, index);
    pmm_info.usedpages--;
ffffffff800017f2:	48 83 2d ae 90 00 00 	subq   $0x1,0x90ae(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff800017f9:	01 
}
ffffffff800017fa:	c3                   	retq   
ffffffff800017fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001800 <pmm_allocpages>:

void* pmm_allocpages(uint64_t count)
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff80001800:	4c 8b 15 a1 90 00 00 	mov    0x90a1(%rip),%r10        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff80001807:	4c 3b 15 a2 90 00 00 	cmp    0x90a2(%rip),%r10        # ffffffff8000a8b0 <pmm_info+0x10>
ffffffff8000180e:	73 73                	jae    ffffffff80001883 <pmm_allocpages+0x83>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001810:	48 8b 05 a9 90 00 00 	mov    0x90a9(%rip),%rax        # ffffffff8000a8c0 <pmm_info+0x20>
ffffffff80001817:	4c 8b 05 9a 90 00 00 	mov    0x909a(%rip),%r8        # ffffffff8000a8b8 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff8000181e:	48 85 c0             	test   %rax,%rax
ffffffff80001821:	74 28                	je     ffffffff8000184b <pmm_allocpages+0x4b>
ffffffff80001823:	31 f6                	xor    %esi,%esi
        if(bitmap[i] != 0xff)
ffffffff80001825:	41 0f b6 0c 30       	movzbl (%r8,%rsi,1),%ecx
ffffffff8000182a:	80 f9 ff             	cmp    $0xff,%cl
ffffffff8000182d:	74 11                	je     ffffffff80001840 <pmm_allocpages+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff8000182f:	31 d2                	xor    %edx,%edx
                if(!(bitmap[i] & (1 << j)))
ffffffff80001831:	0f a3 d1             	bt     %edx,%ecx
ffffffff80001834:	73 5a                	jae    ffffffff80001890 <pmm_allocpages+0x90>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001836:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000183a:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8000183e:	75 f1                	jne    ffffffff80001831 <pmm_allocpages+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001840:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001844:	48 39 f0             	cmp    %rsi,%rax
ffffffff80001847:	75 dc                	jne    ffffffff80001825 <pmm_allocpages+0x25>
    return 0;
ffffffff80001849:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff8000184b:	48 85 ff             	test   %rdi,%rdi
ffffffff8000184e:	74 50                	je     ffffffff800018a0 <pmm_allocpages+0xa0>
ffffffff80001850:	31 d2                	xor    %edx,%edx
    {
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff80001852:	41 f6 00 01          	testb  $0x1,(%r8)
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001856:	41 b9 01 00 00 00    	mov    $0x1,%r9d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000185c:	74 25                	je     ffffffff80001883 <pmm_allocpages+0x83>
    for(uint64_t i = 0; i < count; i++)
ffffffff8000185e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80001862:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80001865:	74 39                	je     ffffffff800018a0 <pmm_allocpages+0xa0>
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001867:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000186a:	45 89 cb             	mov    %r9d,%r11d
ffffffff8000186d:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80001871:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff80001876:	89 d1                	mov    %edx,%ecx
ffffffff80001878:	83 e1 08             	and    $0x8,%ecx
ffffffff8000187b:	41 d3 e3             	shl    %cl,%r11d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000187e:	44 85 de             	test   %r11d,%esi
ffffffff80001881:	75 db                	jne    ffffffff8000185e <pmm_allocpages+0x5e>
        return NULL;
ffffffff80001883:	31 c0                	xor    %eax,%eax
    }

    pmm_info.usedpages += count;

    return (void*)(index * PAGE_SIZE);
}
ffffffff80001885:	c3                   	retq   
ffffffff80001886:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000188d:	00 00 00 
                    return (i * 8) + j;
ffffffff80001890:	48 8d 04 f2          	lea    (%rdx,%rsi,8),%rax
ffffffff80001894:	eb b5                	jmp    ffffffff8000184b <pmm_allocpages+0x4b>
ffffffff80001896:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000189d:	00 00 00 
    pmm_info.usedpages += count;
ffffffff800018a0:	4c 01 d7             	add    %r10,%rdi
    return (void*)(index * PAGE_SIZE);
ffffffff800018a3:	48 c1 e0 0c          	shl    $0xc,%rax
    pmm_info.usedpages += count;
ffffffff800018a7:	48 89 3d fa 8f 00 00 	mov    %rdi,0x8ffa(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
    return (void*)(index * PAGE_SIZE);
ffffffff800018ae:	c3                   	retq   
ffffffff800018af:	90                   	nop

ffffffff800018b0 <pmm_freepages>:

uint64_t pmm_freepages(void* page, uint64_t count)
{
    uint64_t pg = (uint64_t)page;

    for(uint64_t i=0; i < count; i++)
ffffffff800018b0:	48 85 f6             	test   %rsi,%rsi
ffffffff800018b3:	74 44                	je     ffffffff800018f9 <pmm_freepages+0x49>
ffffffff800018b5:	45 31 c0             	xor    %r8d,%r8d
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800018b8:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff800018be:	66 90                	xchg   %ax,%ax
ffffffff800018c0:	48 89 f8             	mov    %rdi,%rax
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800018c3:	48 89 f9             	mov    %rdi,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800018c6:	44 89 ca             	mov    %r9d,%edx
ffffffff800018c9:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff800018cd:	48 03 05 e4 8f 00 00 	add    0x8fe4(%rip),%rax        # ffffffff8000a8b8 <pmm_info+0x18>
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff800018d4:	48 c1 e9 0c          	shr    $0xc,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800018d8:	83 e1 07             	and    $0x7,%ecx
    for(uint64_t i=0; i < count; i++)
ffffffff800018db:	49 83 c0 01          	add    $0x1,%r8
    {
        pmm_freepage((void*)pg);
        pg += 0x1000;
ffffffff800018df:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800018e6:	d3 e2                	shl    %cl,%edx
ffffffff800018e8:	f7 d2                	not    %edx
ffffffff800018ea:	20 10                	and    %dl,(%rax)
    pmm_info.usedpages--;
ffffffff800018ec:	48 83 2d b4 8f 00 00 	subq   $0x1,0x8fb4(%rip)        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff800018f3:	01 
    for(uint64_t i=0; i < count; i++)
ffffffff800018f4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff800018f7:	75 c7                	jne    ffffffff800018c0 <pmm_freepages+0x10>
    }

    return 0;
}
ffffffff800018f9:	31 c0                	xor    %eax,%eax
ffffffff800018fb:	c3                   	retq   
ffffffff800018fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001900 <pmm_get_free_memory>:

uint64_t pmm_get_free_memory()
{
    return (pmm_info.totalpages - pmm_info.usedpages) * PAGE_SIZE;
ffffffff80001900:	48 8b 05 a9 8f 00 00 	mov    0x8fa9(%rip),%rax        # ffffffff8000a8b0 <pmm_info+0x10>
ffffffff80001907:	48 2b 05 9a 8f 00 00 	sub    0x8f9a(%rip),%rax        # ffffffff8000a8a8 <pmm_info+0x8>
ffffffff8000190e:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff80001912:	c3                   	retq   
ffffffff80001913:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000191a:	00 00 00 00 
ffffffff8000191e:	66 90                	xchg   %ax,%ax

ffffffff80001920 <pmm_get_total_memory>:

uint64_t pmm_get_total_memory()
{   
    return (pmm_info.totalpages) * PAGE_SIZE;
ffffffff80001920:	48 8b 05 89 8f 00 00 	mov    0x8f89(%rip),%rax        # ffffffff8000a8b0 <pmm_info+0x10>
ffffffff80001927:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8000192b:	c3                   	retq   
ffffffff8000192c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001930 <outb>:
#include <stdint.h>
#include <stddef.h>

void outb(uint16_t port, uint8_t val)
{
    asm volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80001930:	89 f0                	mov    %esi,%eax
ffffffff80001932:	89 fa                	mov    %edi,%edx
ffffffff80001934:	ee                   	out    %al,(%dx)
}
ffffffff80001935:	c3                   	retq   
ffffffff80001936:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000193d:	00 00 00 

ffffffff80001940 <inb>:

uint8_t inb(uint16_t port)
{
    uint8_t ret;
    asm volatile ( "inb %1, %0"
ffffffff80001940:	89 fa                	mov    %edi,%edx
ffffffff80001942:	ec                   	in     (%dx),%al
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
}
ffffffff80001943:	c3                   	retq   
ffffffff80001944:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000194b:	00 00 00 00 
ffffffff8000194f:	90                   	nop

ffffffff80001950 <io_wait>:
    asm volatile ( "inb %1, %0"
ffffffff80001950:	e4 80                	in     $0x80,%al

void io_wait()
{
    inb(0x80);
ffffffff80001952:	c3                   	retq   
ffffffff80001953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000195a:	00 00 00 
ffffffff8000195d:	0f 1f 00             	nopl   (%rax)

ffffffff80001960 <fb_init>:



void fb_init()
{
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001960:	48 8b 15 d1 8e 00 00 	mov    0x8ed1(%rip),%rdx        # ffffffff8000a838 <boot_info+0x18>
ffffffff80001967:	48 8b 42 10          	mov    0x10(%rdx),%rax
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff8000196b:	0f b7 4a 18          	movzwl 0x18(%rdx),%ecx
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff8000196f:	0f b7 72 1c          	movzwl 0x1c(%rdx),%esi
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001973:	48 89 05 f6 8e 00 00 	mov    %rax,0x8ef6(%rip)        # ffffffff8000a870 <fb_info>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff8000197a:	0f b7 42 1a          	movzwl 0x1a(%rdx),%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000197e:	0f b7 52 1e          	movzwl 0x1e(%rdx),%edx
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80001982:	66 89 0d f1 8e 00 00 	mov    %cx,0x8ef1(%rip)        # ffffffff8000a87a <fb_info+0xa>
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff80001989:	66 89 35 ec 8e 00 00 	mov    %si,0x8eec(%rip)        # ffffffff8000a87c <fb_info+0xc>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80001990:	66 89 05 e1 8e 00 00 	mov    %ax,0x8ee1(%rip)        # ffffffff8000a878 <fb_info+0x8>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001997:	0f af c1             	imul   %ecx,%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000199a:	66 89 15 dd 8e 00 00 	mov    %dx,0x8edd(%rip)        # ffffffff8000a87e <fb_info+0xe>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff800019a1:	89 05 d9 8e 00 00    	mov    %eax,0x8ed9(%rip)        # ffffffff8000a880 <fb_info+0x10>
    //printf("FB Base: %p", fb_info.base);
    //printf("FB Height: %d  FB Width: %d\n", fb_info.height, fb_info.width);
    //printf("FB BPP: %d   FB Pitch: %d\n", fb_info.bpp, fb_info.pitch);

    //fb_putpixel(100,100,FB_COLOR_WHITE);
}
ffffffff800019a7:	c3                   	retq   
ffffffff800019a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800019af:	00 

ffffffff800019b0 <fb_putpixel>:

void fb_putpixel(uint32_t x, uint32_t y, enum fb_color col)
{
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff800019b0:	0f b7 0d c7 8e 00 00 	movzwl 0x8ec7(%rip),%ecx        # ffffffff8000a87e <fb_info+0xe>
ffffffff800019b7:	0f b7 05 be 8e 00 00 	movzwl 0x8ebe(%rip),%eax        # ffffffff8000a87c <fb_info+0xc>
{
ffffffff800019be:	41 89 d0             	mov    %edx,%r8d
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff800019c1:	31 d2                	xor    %edx,%edx
ffffffff800019c3:	66 c1 e9 03          	shr    $0x3,%cx
ffffffff800019c7:	66 f7 f1             	div    %cx
ffffffff800019ca:	0f b7 c0             	movzwl %ax,%eax
ffffffff800019cd:	0f af c6             	imul   %esi,%eax
ffffffff800019d0:	8d 14 38             	lea    (%rax,%rdi,1),%edx
    //if(index > fb_info.max_pixels) return;
    *((uint32_t*)fb_info.base + index) = col;
ffffffff800019d3:	48 8b 05 96 8e 00 00 	mov    0x8e96(%rip),%rax        # ffffffff8000a870 <fb_info>
ffffffff800019da:	44 89 04 90          	mov    %r8d,(%rax,%rdx,4)
}
ffffffff800019de:	c3                   	retq   
ffffffff800019df:	90                   	nop

ffffffff800019e0 <fb_clearscreen>:

void fb_clearscreen(enum fb_color col)
{
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800019e0:	0f b7 05 91 8e 00 00 	movzwl 0x8e91(%rip),%eax        # ffffffff8000a878 <fb_info+0x8>
ffffffff800019e7:	0f b7 15 8c 8e 00 00 	movzwl 0x8e8c(%rip),%edx        # ffffffff8000a87a <fb_info+0xa>
ffffffff800019ee:	0f af c2             	imul   %edx,%eax
ffffffff800019f1:	85 c0                	test   %eax,%eax
ffffffff800019f3:	48 63 c8             	movslq %eax,%rcx
ffffffff800019f6:	74 1f                	je     ffffffff80001a17 <fb_clearscreen+0x37>
    {
        *((uint32_t*)fb_info.base + i) = col;
ffffffff800019f8:	48 8b 15 71 8e 00 00 	mov    0x8e71(%rip),%rdx        # ffffffff8000a870 <fb_info>
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800019ff:	31 c0                	xor    %eax,%eax
ffffffff80001a01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001a08:	48 83 c0 01          	add    $0x1,%rax
        *((uint32_t*)fb_info.base + i) = col;
ffffffff80001a0c:	89 3a                	mov    %edi,(%rdx)
ffffffff80001a0e:	48 83 c2 04          	add    $0x4,%rdx
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff80001a12:	48 39 c8             	cmp    %rcx,%rax
ffffffff80001a15:	75 f1                	jne    ffffffff80001a08 <fb_clearscreen+0x28>
    }
}
ffffffff80001a17:	f3 c3                	repz retq 
ffffffff80001a19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80001a20 <fb_drawline>:

void fb_drawline(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, enum fb_color col)
{

ffffffff80001a20:	f3 c3                	repz retq 
ffffffff80001a22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001a29:	00 00 00 
ffffffff80001a2c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001a30 <console_input>:

    //write the output buffer to screen
}

void console_input(KEY_INFO_t key)
{
ffffffff80001a30:	89 f8                	mov    %edi,%eax
ffffffff80001a32:	0f b6 fc             	movzbl %ah,%edi
    con_input_buffer.index++;
ffffffff80001a35:	48 8b 05 f4 9e 00 00 	mov    0x9ef4(%rip),%rax        # ffffffff8000b930 <con_input_buffer+0x10>
ffffffff80001a3c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001a40:	48 89 15 e9 9e 00 00 	mov    %rdx,0x9ee9(%rip)        # ffffffff8000b930 <con_input_buffer+0x10>
    con_input_buffer.buffer[con_input_buffer.index] = key.ascii;
ffffffff80001a47:	48 8b 15 d2 9e 00 00 	mov    0x9ed2(%rip),%rdx        # ffffffff8000b920 <con_input_buffer>
ffffffff80001a4e:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
    

    con_output_buffer.buffer[con_output_buffer.index] = key.ascii;
ffffffff80001a53:	48 8b 05 b6 9e 00 00 	mov    0x9eb6(%rip),%rax        # ffffffff8000b910 <con_output_buffer+0x10>
ffffffff80001a5a:	48 8b 15 9f 9e 00 00 	mov    0x9e9f(%rip),%rdx        # ffffffff8000b900 <con_output_buffer>
ffffffff80001a61:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
    con_output_buffer.index++;
ffffffff80001a65:	48 8b 05 a4 9e 00 00 	mov    0x9ea4(%rip),%rax        # ffffffff8000b910 <con_output_buffer+0x10>
ffffffff80001a6c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001a70:	48 89 15 99 9e 00 00 	mov    %rdx,0x9e99(%rip)        # ffffffff8000b910 <con_output_buffer+0x10>
    con_output_buffer.buffer[con_output_buffer.index] = 0x00;
ffffffff80001a77:	48 8b 15 82 9e 00 00 	mov    0x9e82(%rip),%rdx        # ffffffff8000b900 <con_output_buffer>
ffffffff80001a7e:	c6 44 02 01 00       	movb   $0x0,0x1(%rdx,%rax,1)
    return;
ffffffff80001a83:	c3                   	retq   
ffffffff80001a84:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001a8b:	00 00 00 00 
ffffffff80001a8f:	90                   	nop

ffffffff80001a90 <putchar>:
    switch(c)
ffffffff80001a90:	40 80 ff 0a          	cmp    $0xa,%dil
ffffffff80001a94:	0f 84 28 01 00 00    	je     ffffffff80001bc2 <putchar+0x132>
ffffffff80001a9a:	40 80 ff 0d          	cmp    $0xd,%dil
ffffffff80001a9e:	0f 84 ed 00 00 00    	je     ffffffff80001b91 <putchar+0x101>
ffffffff80001aa4:	40 80 ff 09          	cmp    $0x9,%dil
ffffffff80001aa8:	0f 84 be 00 00 00    	je     ffffffff80001b6c <putchar+0xdc>
{
ffffffff80001aae:	41 57                	push   %r15
ffffffff80001ab0:	41 56                	push   %r14
ffffffff80001ab2:	89 f8                	mov    %edi,%eax
ffffffff80001ab4:	41 55                	push   %r13
ffffffff80001ab6:	41 54                	push   %r12
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001ab8:	48 c1 e0 04          	shl    $0x4,%rax
{
ffffffff80001abc:	55                   	push   %rbp
ffffffff80001abd:	53                   	push   %rbx
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001abe:	25 f0 0f 00 00       	and    $0xff0,%eax
ffffffff80001ac3:	4c 8d a8 64 73 00 80 	lea    -0x7fff8c9c(%rax),%r13
ffffffff80001aca:	48 05 74 73 00 80    	add    $0xffffffff80007374,%rax
{
ffffffff80001ad0:	48 83 ec 18          	sub    $0x18,%rsp
    console_drawchar(c, console_info.cursor_x, console_info.cursor_y, console_info.foreground_color, console_info.background_color);
ffffffff80001ad4:	8b 0d 6e 9e 00 00    	mov    0x9e6e(%rip),%ecx        # ffffffff8000b948 <console_info+0x8>
ffffffff80001ada:	0f b7 1d 71 9e 00 00 	movzwl 0x9e71(%rip),%ebx        # ffffffff8000b952 <console_info+0x12>
ffffffff80001ae1:	44 8b 25 64 9e 00 00 	mov    0x9e64(%rip),%r12d        # ffffffff8000b94c <console_info+0xc>
ffffffff80001ae8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80001aed:	89 0c 24             	mov    %ecx,(%rsp)
ffffffff80001af0:	0f b7 0d 59 9e 00 00 	movzwl 0x9e59(%rip),%ecx        # ffffffff8000b950 <console_info+0x10>
ffffffff80001af7:	8d 69 08             	lea    0x8(%rcx),%ebp
ffffffff80001afa:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
ffffffff80001afe:	66 90                	xchg   %ax,%ax
        row = glyph[i];
ffffffff80001b00:	45 0f b6 75 00       	movzbl 0x0(%r13),%r14d
ffffffff80001b05:	44 8b 7c 24 04       	mov    0x4(%rsp),%r15d
ffffffff80001b0a:	eb 1d                	jmp    ffffffff80001b29 <putchar+0x99>
ffffffff80001b0c:	0f 1f 40 00          	nopl   0x0(%rax)
                fb_putpixel(x+j, y+i, background);
ffffffff80001b10:	44 89 ff             	mov    %r15d,%edi
ffffffff80001b13:	44 89 e2             	mov    %r12d,%edx
ffffffff80001b16:	89 de                	mov    %ebx,%esi
ffffffff80001b18:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff80001b1c:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, background);
ffffffff80001b1f:	e8 8c fe ff ff       	callq  ffffffff800019b0 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001b24:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001b27:	74 1e                	je     ffffffff80001b47 <putchar+0xb7>
            if(row & 0x80)
ffffffff80001b29:	45 84 f6             	test   %r14b,%r14b
ffffffff80001b2c:	79 e2                	jns    ffffffff80001b10 <putchar+0x80>
                fb_putpixel(x+j, y+i, foreground);
ffffffff80001b2e:	8b 14 24             	mov    (%rsp),%edx
ffffffff80001b31:	44 89 ff             	mov    %r15d,%edi
ffffffff80001b34:	89 de                	mov    %ebx,%esi
ffffffff80001b36:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff80001b3a:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, foreground);
ffffffff80001b3d:	e8 6e fe ff ff       	callq  ffffffff800019b0 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001b42:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001b45:	75 e2                	jne    ffffffff80001b29 <putchar+0x99>
ffffffff80001b47:	49 83 c5 01          	add    $0x1,%r13
ffffffff80001b4b:	83 c3 01             	add    $0x1,%ebx
    for (uint32_t i = 0; i < 16; i++)
ffffffff80001b4e:	4c 39 6c 24 08       	cmp    %r13,0x8(%rsp)
ffffffff80001b53:	75 ab                	jne    ffffffff80001b00 <putchar+0x70>
    console_info.cursor_x += 8;
ffffffff80001b55:	66 83 05 f3 9d 00 00 	addw   $0x8,0x9df3(%rip)        # ffffffff8000b950 <console_info+0x10>
ffffffff80001b5c:	08 
}
ffffffff80001b5d:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001b61:	5b                   	pop    %rbx
ffffffff80001b62:	5d                   	pop    %rbp
ffffffff80001b63:	41 5c                	pop    %r12
ffffffff80001b65:	41 5d                	pop    %r13
ffffffff80001b67:	41 5e                	pop    %r14
ffffffff80001b69:	41 5f                	pop    %r15
ffffffff80001b6b:	c3                   	retq   
            if((console_info.cursor_x += (PSF1_FONT_WIDTH * 4)) < fb_info.width)
ffffffff80001b6c:	0f b7 05 dd 9d 00 00 	movzwl 0x9ddd(%rip),%eax        # ffffffff8000b950 <console_info+0x10>
ffffffff80001b73:	0f b7 15 00 8d 00 00 	movzwl 0x8d00(%rip),%edx        # ffffffff8000a87a <fb_info+0xa>
ffffffff80001b7a:	8d 48 20             	lea    0x20(%rax),%ecx
ffffffff80001b7d:	66 39 d1             	cmp    %dx,%cx
ffffffff80001b80:	0f 83 4f 01 00 00    	jae    ffffffff80001cd5 <putchar+0x245>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001b86:	83 c0 40             	add    $0x40,%eax
ffffffff80001b89:	66 89 05 c0 9d 00 00 	mov    %ax,0x9dc0(%rip)        # ffffffff8000b950 <console_info+0x10>
                return;
ffffffff80001b90:	c3                   	retq   
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b91:	0f b7 05 ba 9d 00 00 	movzwl 0x9dba(%rip),%eax        # ffffffff8000b952 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b98:	0f b7 15 d9 8c 00 00 	movzwl 0x8cd9(%rip),%edx        # ffffffff8000a878 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001b9f:	31 f6                	xor    %esi,%esi
ffffffff80001ba1:	66 89 35 a8 9d 00 00 	mov    %si,0x9da8(%rip)        # ffffffff8000b950 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001ba8:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001bab:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001bae:	66 89 05 9d 9d 00 00 	mov    %ax,0x9d9d(%rip)        # ffffffff8000b952 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001bb5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001bb8:	39 c1                	cmp    %eax,%ecx
ffffffff80001bba:	0f 8e 9d 00 00 00    	jle    ffffffff80001c5d <putchar+0x1cd>
ffffffff80001bc0:	f3 c3                	repz retq 
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001bc2:	0f b7 05 89 9d 00 00 	movzwl 0x9d89(%rip),%eax        # ffffffff8000b952 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001bc9:	0f b7 15 a8 8c 00 00 	movzwl 0x8ca8(%rip),%edx        # ffffffff8000a878 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001bd0:	31 ff                	xor    %edi,%edi
ffffffff80001bd2:	66 89 3d 77 9d 00 00 	mov    %di,0x9d77(%rip)        # ffffffff8000b950 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001bd9:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001bdc:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001bdf:	66 89 05 6c 9d 00 00 	mov    %ax,0x9d6c(%rip)        # ffffffff8000b952 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001be6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001be9:	39 c1                	cmp    %eax,%ecx
ffffffff80001beb:	7f d3                	jg     ffffffff80001bc0 <putchar+0x130>
    start_index = fb_info.width * 16 * 4;
ffffffff80001bed:	0f b7 05 86 8c 00 00 	movzwl 0x8c86(%rip),%eax        # ffffffff8000a87a <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001bf4:	4c 8b 05 75 8c 00 00 	mov    0x8c75(%rip),%r8        # ffffffff8000a870 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001bfb:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001bfe:	89 c1                	mov    %eax,%ecx
ffffffff80001c00:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001c03:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001c06:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001c09:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c0c:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001c0f:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c12:	48 89 c7             	mov    %rax,%rdi
ffffffff80001c15:	74 20                	je     ffffffff80001c37 <putchar+0x1a7>
ffffffff80001c17:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001c1b:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001c1f:	4c 89 c0             	mov    %r8,%rax
ffffffff80001c22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001c28:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001c2b:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001c2f:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c32:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001c35:	75 f1                	jne    ffffffff80001c28 <putchar+0x198>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c37:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001c3b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001c3e:	76 80                	jbe    ffffffff80001bc0 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001c40:	8b 0d 06 9d 00 00    	mov    0x9d06(%rip),%ecx        # ffffffff8000b94c <console_info+0xc>
ffffffff80001c46:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001c4a:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001c4e:	66 90                	xchg   %ax,%ax
ffffffff80001c50:	89 08                	mov    %ecx,(%rax)
ffffffff80001c52:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c56:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001c59:	75 f5                	jne    ffffffff80001c50 <putchar+0x1c0>
ffffffff80001c5b:	f3 c3                	repz retq 
    start_index = fb_info.width * 16 * 4;
ffffffff80001c5d:	0f b7 05 16 8c 00 00 	movzwl 0x8c16(%rip),%eax        # ffffffff8000a87a <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001c64:	4c 8b 05 05 8c 00 00 	mov    0x8c05(%rip),%r8        # ffffffff8000a870 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001c6b:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001c6e:	89 c1                	mov    %eax,%ecx
ffffffff80001c70:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001c73:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001c76:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001c79:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c7c:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001c7f:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c82:	48 89 c7             	mov    %rax,%rdi
ffffffff80001c85:	74 20                	je     ffffffff80001ca7 <putchar+0x217>
ffffffff80001c87:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001c8b:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001c8f:	4c 89 c0             	mov    %r8,%rax
ffffffff80001c92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001c98:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001c9b:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001c9f:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001ca2:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001ca5:	75 f1                	jne    ffffffff80001c98 <putchar+0x208>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001ca7:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001cab:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001cae:	0f 86 0c ff ff ff    	jbe    ffffffff80001bc0 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001cb4:	8b 0d 92 9c 00 00    	mov    0x9c92(%rip),%ecx        # ffffffff8000b94c <console_info+0xc>
ffffffff80001cba:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001cbe:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001cc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001cc8:	89 08                	mov    %ecx,(%rax)
ffffffff80001cca:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001cce:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001cd1:	75 f5                	jne    ffffffff80001cc8 <putchar+0x238>
ffffffff80001cd3:	f3 c3                	repz retq 
    console_info.cursor_x = 0;
ffffffff80001cd5:	31 c9                	xor    %ecx,%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001cd7:	0f b7 05 74 9c 00 00 	movzwl 0x9c74(%rip),%eax        # ffffffff8000b952 <console_info+0x12>
    console_info.cursor_x = 0;
ffffffff80001cde:	66 89 0d 6b 9c 00 00 	mov    %cx,0x9c6b(%rip)        # ffffffff8000b950 <console_info+0x10>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001ce5:	0f b7 0d 8c 8b 00 00 	movzwl 0x8b8c(%rip),%ecx        # ffffffff8000a878 <fb_info+0x8>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001cec:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001cef:	8d 71 f1             	lea    -0xf(%rcx),%esi
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001cf2:	66 89 05 59 9c 00 00 	mov    %ax,0x9c59(%rip)        # ffffffff8000b952 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001cf9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001cfc:	39 c6                	cmp    %eax,%esi
ffffffff80001cfe:	7e 0d                	jle    ffffffff80001d0d <putchar+0x27d>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001d00:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff80001d05:	66 89 05 44 9c 00 00 	mov    %ax,0x9c44(%rip)        # ffffffff8000b950 <console_info+0x10>
ffffffff80001d0c:	c3                   	retq   
    start_index = fb_info.width * 16 * 4;
ffffffff80001d0d:	89 d0                	mov    %edx,%eax
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001d0f:	48 8b 3d 5a 8b 00 00 	mov    0x8b5a(%rip),%rdi        # ffffffff8000a870 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001d16:	0f af d1             	imul   %ecx,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001d19:	c1 e0 06             	shl    $0x6,%eax
ffffffff80001d1c:	48 98                	cltq   
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001d1e:	48 63 f2             	movslq %edx,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001d21:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001d24:	48 29 c6             	sub    %rax,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001d27:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001d2a:	74 20                	je     ffffffff80001d4c <putchar+0x2bc>
ffffffff80001d2c:	4c 8d 0c b7          	lea    (%rdi,%rsi,4),%r9
ffffffff80001d30:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
ffffffff80001d37:	00 
ffffffff80001d38:	48 89 f8             	mov    %rdi,%rax
        base[i] = base[start_index + i];
ffffffff80001d3b:	44 8b 04 01          	mov    (%rcx,%rax,1),%r8d
ffffffff80001d3f:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001d43:	44 89 40 fc          	mov    %r8d,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001d47:	49 39 c1             	cmp    %rax,%r9
ffffffff80001d4a:	75 ef                	jne    ffffffff80001d3b <putchar+0x2ab>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001d4c:	48 8d 46 01          	lea    0x1(%rsi),%rax
ffffffff80001d50:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001d53:	76 ab                	jbe    ffffffff80001d00 <putchar+0x270>
        base[i] = console_info.background_color;
ffffffff80001d55:	8b 0d f1 9b 00 00    	mov    0x9bf1(%rip),%ecx        # ffffffff8000b94c <console_info+0xc>
ffffffff80001d5b:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
ffffffff80001d5f:	48 8d 14 97          	lea    (%rdi,%rdx,4),%rdx
ffffffff80001d63:	89 08                	mov    %ecx,(%rax)
ffffffff80001d65:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001d69:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001d6c:	75 f5                	jne    ffffffff80001d63 <putchar+0x2d3>
ffffffff80001d6e:	eb 90                	jmp    ffffffff80001d00 <putchar+0x270>

ffffffff80001d70 <putstring>:
{
ffffffff80001d70:	53                   	push   %rbx
ffffffff80001d71:	48 89 fb             	mov    %rdi,%rbx
    while(*str)
ffffffff80001d74:	0f b6 3f             	movzbl (%rdi),%edi
ffffffff80001d77:	40 84 ff             	test   %dil,%dil
ffffffff80001d7a:	74 15                	je     ffffffff80001d91 <putstring+0x21>
ffffffff80001d7c:	0f 1f 40 00          	nopl   0x0(%rax)
        str++;
ffffffff80001d80:	48 83 c3 01          	add    $0x1,%rbx
        putchar(*str);
ffffffff80001d84:	e8 07 fd ff ff       	callq  ffffffff80001a90 <putchar>
    while(*str)
ffffffff80001d89:	0f b6 3b             	movzbl (%rbx),%edi
ffffffff80001d8c:	40 84 ff             	test   %dil,%dil
ffffffff80001d8f:	75 ef                	jne    ffffffff80001d80 <putstring+0x10>
}
ffffffff80001d91:	5b                   	pop    %rbx
ffffffff80001d92:	c3                   	retq   
ffffffff80001d93:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001d9a:	00 00 00 00 
ffffffff80001d9e:	66 90                	xchg   %ax,%ax

ffffffff80001da0 <console_init>:
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001da0:	0f b7 05 d1 8a 00 00 	movzwl 0x8ad1(%rip),%eax        # ffffffff8000a878 <fb_info+0x8>
    uint64_t index = y * fb_info.width;
ffffffff80001da7:	0f b7 3d cc 8a 00 00 	movzwl 0x8acc(%rip),%edi        # ffffffff8000a87a <fb_info+0xa>
    console_info.font = (struct PSF1_FONT*)&_binary_zapl16_psf_start;
ffffffff80001dae:	48 c7 05 9f 9b 00 00 	movq   $0xffffffff80007360,0x9b9f(%rip)        # ffffffff8000b958 <console_info+0x18>
ffffffff80001db5:	60 73 00 80 
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff80001db9:	c7 05 85 9b 00 00 ff 	movl   $0xffffffff,0x9b85(%rip)        # ffffffff8000b948 <console_info+0x8>
ffffffff80001dc0:	ff ff ff 
    console_info.background_color = FB_COLOR_BLACK;
ffffffff80001dc3:	c7 05 7f 9b 00 00 00 	movl   $0xff000000,0x9b7f(%rip)        # ffffffff8000b94c <console_info+0xc>
ffffffff80001dca:	00 00 ff 
    console_info.cursor_x = 0;
ffffffff80001dcd:	c7 05 79 9b 00 00 00 	movl   $0x0,0x9b79(%rip)        # ffffffff8000b950 <console_info+0x10>
ffffffff80001dd4:	00 00 00 
    con_output_buffer.buffer = console_buffer;
ffffffff80001dd7:	48 c7 05 1e 9b 00 00 	movq   $0xffffffff8000a900,0x9b1e(%rip)        # ffffffff8000b900 <con_output_buffer>
ffffffff80001dde:	00 a9 00 80 
    con_output_buffer.buffer_size = sizeof(console_buffer);
ffffffff80001de2:	48 c7 05 1b 9b 00 00 	movq   $0x1000,0x9b1b(%rip)        # ffffffff8000b908 <con_output_buffer+0x8>
ffffffff80001de9:	00 10 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001ded:	89 c2                	mov    %eax,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001def:	66 c1 e8 02          	shr    $0x2,%ax
    con_output_buffer.index = 0;
ffffffff80001df3:	48 c7 05 12 9b 00 00 	movq   $0x0,0x9b12(%rip)        # ffffffff8000b910 <con_output_buffer+0x10>
ffffffff80001dfa:	00 00 00 00 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001dfe:	0f b7 c0             	movzwl %ax,%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001e01:	66 c1 ea 04          	shr    $0x4,%dx
    con_input_buffer.buffer = cmd_buffer;
ffffffff80001e05:	48 c7 05 10 9b 00 00 	movq   $0xffffffff8000b980,0x9b10(%rip)        # ffffffff8000b920 <con_input_buffer>
ffffffff80001e0c:	80 b9 00 80 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001e10:	8d 04 40             	lea    (%rax,%rax,2),%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001e13:	0f b7 d2             	movzwl %dx,%edx
    con_input_buffer.buffer_size = sizeof(cmd_buffer);
ffffffff80001e16:	48 c7 05 07 9b 00 00 	movq   $0x100,0x9b07(%rip)        # ffffffff8000b928 <con_input_buffer+0x8>
ffffffff80001e1d:	00 01 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001e21:	89 15 1d 9b 00 00    	mov    %edx,0x9b1d(%rip)        # ffffffff8000b944 <console_info+0x4>
    uint64_t index = y * fb_info.width;
ffffffff80001e27:	48 89 f9             	mov    %rdi,%rcx
    console_draw_hline(console_info.start_pos, FB_COLOR_YELLOW);
ffffffff80001e2a:	48 63 d0             	movslq %eax,%rdx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001e2d:	89 05 0d 9b 00 00    	mov    %eax,0x9b0d(%rip)        # ffffffff8000b940 <console_info>
    uint64_t index = y * fb_info.width;
ffffffff80001e33:	48 0f af d7          	imul   %rdi,%rdx
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001e37:	66 85 ff             	test   %di,%di
ffffffff80001e3a:	74 53                	je     ffffffff80001e8f <console_init+0xef>
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001e3c:	48 8b 35 2d 8a 00 00 	mov    0x8a2d(%rip),%rsi        # ffffffff8000a870 <fb_info>
ffffffff80001e43:	83 e9 01             	sub    $0x1,%ecx
ffffffff80001e46:	4c 8d 46 04          	lea    0x4(%rsi),%r8
ffffffff80001e4a:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001e4e:	48 01 ca             	add    %rcx,%rdx
ffffffff80001e51:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001e55:	0f 1f 00             	nopl   (%rax)
ffffffff80001e58:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001e5e:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001e62:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001e65:	75 f1                	jne    ffffffff80001e58 <console_init+0xb8>
    console_draw_hline(console_info.start_pos + 1, FB_COLOR_YELLOW);
ffffffff80001e67:	8b 05 d3 9a 00 00    	mov    0x9ad3(%rip),%eax        # ffffffff8000b940 <console_info>
ffffffff80001e6d:	8d 50 01             	lea    0x1(%rax),%edx
    uint64_t index = y * fb_info.width;
ffffffff80001e70:	48 0f af d7          	imul   %rdi,%rdx
ffffffff80001e74:	48 01 d1             	add    %rdx,%rcx
ffffffff80001e77:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001e7b:	49 8d 14 88          	lea    (%r8,%rcx,4),%rdx
ffffffff80001e7f:	90                   	nop
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001e80:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001e86:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001e8a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001e8d:	75 f1                	jne    ffffffff80001e80 <console_init+0xe0>
    kbd_set_target(console_input);
ffffffff80001e8f:	48 c7 c7 30 1a 00 80 	mov    $0xffffffff80001a30,%rdi
ffffffff80001e96:	e9 75 02 00 00       	jmpq   ffffffff80002110 <kbd_set_target>
ffffffff80001e9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001ea0 <console_exec>:
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001ea0:	0f b7 05 d3 89 00 00 	movzwl 0x89d3(%rip),%eax        # ffffffff8000a87a <fb_info+0xa>
ffffffff80001ea7:	8b 15 93 9a 00 00    	mov    0x9a93(%rip),%edx        # ffffffff8000b940 <console_info>
ffffffff80001ead:	8d 34 42             	lea    (%rdx,%rax,2),%esi
ffffffff80001eb0:	0f b7 15 c1 89 00 00 	movzwl 0x89c1(%rip),%edx        # ffffffff8000a878 <fb_info+0x8>
ffffffff80001eb7:	0f af d0             	imul   %eax,%edx
ffffffff80001eba:	39 d6                	cmp    %edx,%esi
ffffffff80001ebc:	7d 2d                	jge    ffffffff80001eeb <console_exec+0x4b>
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff80001ebe:	48 8b 3d ab 89 00 00 	mov    0x89ab(%rip),%rdi        # ffffffff8000a870 <fb_info>
ffffffff80001ec5:	83 ea 01             	sub    $0x1,%edx
ffffffff80001ec8:	4c 63 c6             	movslq %esi,%r8
ffffffff80001ecb:	29 f2                	sub    %esi,%edx
ffffffff80001ecd:	8b 0d 79 9a 00 00    	mov    0x9a79(%rip),%ecx        # ffffffff8000b94c <console_info+0xc>
ffffffff80001ed3:	4c 01 c2             	add    %r8,%rdx
ffffffff80001ed6:	4a 8d 04 87          	lea    (%rdi,%r8,4),%rax
ffffffff80001eda:	48 8d 54 97 04       	lea    0x4(%rdi,%rdx,4),%rdx
ffffffff80001edf:	90                   	nop
ffffffff80001ee0:	89 08                	mov    %ecx,(%rax)
ffffffff80001ee2:	48 83 c0 04          	add    $0x4,%rax
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001ee6:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001ee9:	75 f5                	jne    ffffffff80001ee0 <console_exec+0x40>
}
ffffffff80001eeb:	f3 c3                	repz retq 
ffffffff80001eed:	0f 1f 00             	nopl   (%rax)

ffffffff80001ef0 <stty_sendcmd>:
#include <serial.h>



void stty_sendcmd(uint16_t cmd)
{
ffffffff80001ef0:	48 83 ec 08          	sub    $0x8,%rsp
    serial_write(SERIAL_PORT1, 0x1B);
ffffffff80001ef4:	be 1b 00 00 00       	mov    $0x1b,%esi
ffffffff80001ef9:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001efe:	e8 7d 01 00 00       	callq  ffffffff80002080 <serial_write>
    serial_write(SERIAL_PORT1, 0x5B);
ffffffff80001f03:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff80001f08:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001f0d:	e8 6e 01 00 00       	callq  ffffffff80002080 <serial_write>
    serial_write(SERIAL_PORT1, '[');
ffffffff80001f12:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff80001f17:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001f1c:	e8 5f 01 00 00       	callq  ffffffff80002080 <serial_write>
    serial_write(SERIAL_PORT1, 'H');
ffffffff80001f21:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80001f26:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001f2b:	e8 50 01 00 00       	callq  ffffffff80002080 <serial_write>
    serial_write(SERIAL_PORT1, '~');
ffffffff80001f30:	be 7e 00 00 00       	mov    $0x7e,%esi
ffffffff80001f35:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001f3a:	48 83 c4 08          	add    $0x8,%rsp
    serial_write(SERIAL_PORT1, '~');
ffffffff80001f3e:	e9 3d 01 00 00       	jmpq   ffffffff80002080 <serial_write>
ffffffff80001f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001f4a:	00 00 00 
ffffffff80001f4d:	0f 1f 00             	nopl   (%rax)

ffffffff80001f50 <serial_init>:
#include <io.h>

char serial_buffer[256];

uint64_t serial_init(uint16_t port)
{
ffffffff80001f50:	41 55                	push   %r13
ffffffff80001f52:	41 54                	push   %r12
    outb(port + 1, 0x00);
ffffffff80001f54:	44 8d 67 01          	lea    0x1(%rdi),%r12d
{
ffffffff80001f58:	55                   	push   %rbp
ffffffff80001f59:	53                   	push   %rbx
ffffffff80001f5a:	89 fb                	mov    %edi,%ebx
    outb(port + 3, 0x80);
ffffffff80001f5c:	8d 6b 03             	lea    0x3(%rbx),%ebp
    outb(port + 1, 0x00);
ffffffff80001f5f:	45 0f b7 e4          	movzwl %r12w,%r12d
ffffffff80001f63:	31 f6                	xor    %esi,%esi
{
ffffffff80001f65:	48 83 ec 08          	sub    $0x8,%rsp
    outb(port + 1, 0x00);
ffffffff80001f69:	44 89 e7             	mov    %r12d,%edi
    outb(port + 0, 0x00);
ffffffff80001f6c:	44 0f b7 eb          	movzwl %bx,%r13d
    outb(port + 3, 0x80);
ffffffff80001f70:	0f b7 ed             	movzwl %bp,%ebp
    outb(port + 1, 0x00);
ffffffff80001f73:	e8 b8 f9 ff ff       	callq  ffffffff80001930 <outb>
    outb(port + 3, 0x80);
ffffffff80001f78:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80001f7d:	89 ef                	mov    %ebp,%edi
ffffffff80001f7f:	e8 ac f9 ff ff       	callq  ffffffff80001930 <outb>
    outb(port + 0, 0x00);
ffffffff80001f84:	31 f6                	xor    %esi,%esi
ffffffff80001f86:	44 89 ef             	mov    %r13d,%edi
ffffffff80001f89:	e8 a2 f9 ff ff       	callq  ffffffff80001930 <outb>
    outb(port + 1, 0x00);
ffffffff80001f8e:	31 f6                	xor    %esi,%esi
ffffffff80001f90:	44 89 e7             	mov    %r12d,%edi
ffffffff80001f93:	e8 98 f9 ff ff       	callq  ffffffff80001930 <outb>
    outb(port + 3, 0x03);
ffffffff80001f98:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80001f9d:	89 ef                	mov    %ebp,%edi
ffffffff80001f9f:	e8 8c f9 ff ff       	callq  ffffffff80001930 <outb>
    outb(port + 2, 0xC7);
ffffffff80001fa4:	8d 7b 02             	lea    0x2(%rbx),%edi
    outb(port + 4, 0x0B);
ffffffff80001fa7:	83 c3 04             	add    $0x4,%ebx
    outb(port + 2, 0xC7);
ffffffff80001faa:	be c7 00 00 00       	mov    $0xc7,%esi
    outb(port + 4, 0x0B);
ffffffff80001faf:	0f b7 db             	movzwl %bx,%ebx
    outb(port + 2, 0xC7);
ffffffff80001fb2:	0f b7 ff             	movzwl %di,%edi
ffffffff80001fb5:	e8 76 f9 ff ff       	callq  ffffffff80001930 <outb>
    outb(port + 4, 0x0B);
ffffffff80001fba:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80001fbf:	89 df                	mov    %ebx,%edi
ffffffff80001fc1:	e8 6a f9 ff ff       	callq  ffffffff80001930 <outb>

    if(inb(port + 0) != 0xAE)
ffffffff80001fc6:	44 89 ef             	mov    %r13d,%edi
ffffffff80001fc9:	e8 72 f9 ff ff       	callq  ffffffff80001940 <inb>
ffffffff80001fce:	3c ae                	cmp    $0xae,%al
ffffffff80001fd0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001fd5:	74 11                	je     ffffffff80001fe8 <serial_init+0x98>
        return 1;
    }

    outb(port + 4, 0x0F);
    return 0;
}
ffffffff80001fd7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80001fdb:	48 89 d0             	mov    %rdx,%rax
ffffffff80001fde:	5b                   	pop    %rbx
ffffffff80001fdf:	5d                   	pop    %rbp
ffffffff80001fe0:	41 5c                	pop    %r12
ffffffff80001fe2:	41 5d                	pop    %r13
ffffffff80001fe4:	c3                   	retq   
ffffffff80001fe5:	0f 1f 00             	nopl   (%rax)
    outb(port + 4, 0x0F);
ffffffff80001fe8:	89 df                	mov    %ebx,%edi
ffffffff80001fea:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80001fef:	e8 3c f9 ff ff       	callq  ffffffff80001930 <outb>
}
ffffffff80001ff4:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff80001ff8:	31 d2                	xor    %edx,%edx
}
ffffffff80001ffa:	5b                   	pop    %rbx
ffffffff80001ffb:	48 89 d0             	mov    %rdx,%rax
ffffffff80001ffe:	5d                   	pop    %rbp
ffffffff80001fff:	41 5c                	pop    %r12
ffffffff80002001:	41 5d                	pop    %r13
ffffffff80002003:	c3                   	retq   
ffffffff80002004:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000200b:	00 00 00 00 
ffffffff8000200f:	90                   	nop

ffffffff80002010 <serial_received>:

uint64_t serial_received(uint16_t port)
{
    return inb(port + 5) & 1;
ffffffff80002010:	83 c7 05             	add    $0x5,%edi
{
ffffffff80002013:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80002017:	0f b7 ff             	movzwl %di,%edi
ffffffff8000201a:	e8 21 f9 ff ff       	callq  ffffffff80001940 <inb>
}
ffffffff8000201f:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80002023:	83 e0 01             	and    $0x1,%eax
}
ffffffff80002026:	c3                   	retq   
ffffffff80002027:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000202e:	00 00 

ffffffff80002030 <serial_read>:

uint8_t serial_read(uint16_t port)
{
ffffffff80002030:	55                   	push   %rbp
ffffffff80002031:	53                   	push   %rbx
ffffffff80002032:	0f b7 ef             	movzwl %di,%ebp
ffffffff80002035:	83 c7 05             	add    $0x5,%edi
ffffffff80002038:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8000203c:	0f b7 df             	movzwl %di,%ebx
ffffffff8000203f:	90                   	nop
    return inb(port + 5) & 1;
ffffffff80002040:	89 df                	mov    %ebx,%edi
ffffffff80002042:	e8 f9 f8 ff ff       	callq  ffffffff80001940 <inb>
    while(serial_received(port) == 0);
ffffffff80002047:	a8 01                	test   $0x1,%al
ffffffff80002049:	74 f5                	je     ffffffff80002040 <serial_read+0x10>

    return inb(port);
}
ffffffff8000204b:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port);
ffffffff8000204f:	89 ef                	mov    %ebp,%edi
}
ffffffff80002051:	5b                   	pop    %rbx
ffffffff80002052:	5d                   	pop    %rbp
    return inb(port);
ffffffff80002053:	e9 e8 f8 ff ff       	jmpq   ffffffff80001940 <inb>
ffffffff80002058:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000205f:	00 

ffffffff80002060 <serial_is_tx_empty>:

uint64_t serial_is_tx_empty(uint16_t port)
{
    return inb(port + 5) & 0x20;
ffffffff80002060:	83 c7 05             	add    $0x5,%edi
{
ffffffff80002063:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80002067:	0f b7 ff             	movzwl %di,%edi
ffffffff8000206a:	e8 d1 f8 ff ff       	callq  ffffffff80001940 <inb>
ffffffff8000206f:	83 e0 20             	and    $0x20,%eax
}
ffffffff80002072:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80002076:	0f b6 c0             	movzbl %al,%eax
}
ffffffff80002079:	c3                   	retq   
ffffffff8000207a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80002080 <serial_write>:

void serial_write(uint16_t port, uint8_t data)
{
ffffffff80002080:	41 54                	push   %r12
ffffffff80002082:	44 0f b7 e7          	movzwl %di,%r12d
ffffffff80002086:	83 c7 05             	add    $0x5,%edi
ffffffff80002089:	55                   	push   %rbp
ffffffff8000208a:	89 f5                	mov    %esi,%ebp
ffffffff8000208c:	53                   	push   %rbx
ffffffff8000208d:	0f b7 df             	movzwl %di,%ebx
    return inb(port + 5) & 0x20;
ffffffff80002090:	89 df                	mov    %ebx,%edi
ffffffff80002092:	e8 a9 f8 ff ff       	callq  ffffffff80001940 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80002097:	a8 20                	test   $0x20,%al
ffffffff80002099:	74 f5                	je     ffffffff80002090 <serial_write+0x10>
    outb(port, data);
}
ffffffff8000209b:	5b                   	pop    %rbx
    outb(port, data);
ffffffff8000209c:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff800020a0:	44 89 e7             	mov    %r12d,%edi
}
ffffffff800020a3:	5d                   	pop    %rbp
ffffffff800020a4:	41 5c                	pop    %r12
    outb(port, data);
ffffffff800020a6:	e9 85 f8 ff ff       	jmpq   ffffffff80001930 <outb>
ffffffff800020ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800020b0 <serial_write_str>:

void serial_write_str(uint16_t port, char* data)
{
    uint8_t i = 0;
    while(data[i] != 0)
ffffffff800020b0:	0f b6 06             	movzbl (%rsi),%eax
ffffffff800020b3:	84 c0                	test   %al,%al
ffffffff800020b5:	74 39                	je     ffffffff800020f0 <serial_write_str+0x40>
{
ffffffff800020b7:	41 54                	push   %r12
ffffffff800020b9:	49 89 f4             	mov    %rsi,%r12
ffffffff800020bc:	55                   	push   %rbp
ffffffff800020bd:	0f b7 ef             	movzwl %di,%ebp
ffffffff800020c0:	53                   	push   %rbx
    uint8_t i = 0;
ffffffff800020c1:	31 db                	xor    %ebx,%ebx
ffffffff800020c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        serial_write(port, data[i]);
ffffffff800020c8:	0f b6 f0             	movzbl %al,%esi
        i++;
ffffffff800020cb:	83 c3 01             	add    $0x1,%ebx
        serial_write(port, data[i]);
ffffffff800020ce:	89 ef                	mov    %ebp,%edi
ffffffff800020d0:	e8 ab ff ff ff       	callq  ffffffff80002080 <serial_write>
    while(data[i] != 0)
ffffffff800020d5:	0f b6 c3             	movzbl %bl,%eax
ffffffff800020d8:	41 0f b6 04 04       	movzbl (%r12,%rax,1),%eax
ffffffff800020dd:	84 c0                	test   %al,%al
ffffffff800020df:	75 e7                	jne    ffffffff800020c8 <serial_write_str+0x18>
    }
ffffffff800020e1:	5b                   	pop    %rbx
ffffffff800020e2:	5d                   	pop    %rbp
ffffffff800020e3:	41 5c                	pop    %r12
ffffffff800020e5:	c3                   	retq   
ffffffff800020e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800020ed:	00 00 00 
ffffffff800020f0:	f3 c3                	repz retq 
ffffffff800020f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800020f9:	00 00 00 
ffffffff800020fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002100 <kbd_init>:


void kbd_init()
{

}
ffffffff80002100:	f3 c3                	repz retq 
ffffffff80002102:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002109:	00 00 00 00 
ffffffff8000210d:	0f 1f 00             	nopl   (%rax)

ffffffff80002110 <kbd_set_target>:

void kbd_set_target(void* handler)
{
    kbd_handler = handler;
ffffffff80002110:	48 89 3d f1 03 01 00 	mov    %rdi,0x103f1(%rip)        # ffffffff80012508 <kbd_handler>
    kbd_active = 1;
ffffffff80002117:	c6 05 f2 03 01 00 01 	movb   $0x1,0x103f2(%rip)        # ffffffff80012510 <kbd_active>
}
ffffffff8000211e:	c3                   	retq   
ffffffff8000211f:	90                   	nop

ffffffff80002120 <kbd_translate>:

uint8_t kbd_translate(uint8_t scancode, uint8_t uppercase)
{
    if(scancode > 58) return 0;
ffffffff80002120:	31 c0                	xor    %eax,%eax
ffffffff80002122:	40 80 ff 3a          	cmp    $0x3a,%dil
ffffffff80002126:	77 14                	ja     ffffffff8000213c <kbd_translate+0x1c>
ffffffff80002128:	40 0f b6 ff          	movzbl %dil,%edi

    if(uppercase) return kbd_table[scancode] - 32;
ffffffff8000212c:	40 84 f6             	test   %sil,%sil
ffffffff8000212f:	0f b6 87 20 4f 00 80 	movzbl -0x7fffb0e0(%rdi),%eax
ffffffff80002136:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80002139:	0f 45 c2             	cmovne %edx,%eax

    return kbd_table[scancode];
}
ffffffff8000213c:	f3 c3                	repz retq 
ffffffff8000213e:	66 90                	xchg   %ax,%ax

ffffffff80002140 <kbd_handle>:
void kbd_handle()
{
    uint8_t data;
    KEY_INFO_t key_info;

    if(!kbd_active) return;
ffffffff80002140:	80 3d c9 03 01 00 00 	cmpb   $0x0,0x103c9(%rip)        # ffffffff80012510 <kbd_active>
ffffffff80002147:	75 07                	jne    ffffffff80002150 <kbd_handle+0x10>
ffffffff80002149:	f3 c3                	repz retq 
ffffffff8000214b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
{
ffffffff80002150:	48 83 ec 08          	sub    $0x8,%rsp

    data = inb(0x60);
ffffffff80002154:	bf 60 00 00 00       	mov    $0x60,%edi
ffffffff80002159:	e8 e2 f7 ff ff       	callq  ffffffff80001940 <inb>

    uint8_t buffer[20];

    switch(data)
ffffffff8000215e:	3c 36                	cmp    $0x36,%al
ffffffff80002160:	74 36                	je     ffffffff80002198 <kbd_handle+0x58>
ffffffff80002162:	77 1c                	ja     ffffffff80002180 <kbd_handle+0x40>
ffffffff80002164:	3c 01                	cmp    $0x1,%al
ffffffff80002166:	0f 84 84 00 00 00    	je     ffffffff800021f0 <kbd_handle+0xb0>
ffffffff8000216c:	3c 2a                	cmp    $0x2a,%al
ffffffff8000216e:	75 48                	jne    ffffffff800021b8 <kbd_handle+0x78>
    {
        case KBD_LEFT_SHIFT:
            lshift_status = 1;
ffffffff80002170:	c6 05 29 9b 00 00 01 	movb   $0x1,0x9b29(%rip)        # ffffffff8000bca0 <lshift_status>
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
    key_info.scancode = data;

    kbd_handler(key_info);

ffffffff80002177:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000217b:	c3                   	retq   
ffffffff8000217c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(data)
ffffffff80002180:	3c aa                	cmp    $0xaa,%al
ffffffff80002182:	74 24                	je     ffffffff800021a8 <kbd_handle+0x68>
ffffffff80002184:	3c b6                	cmp    $0xb6,%al
ffffffff80002186:	75 30                	jne    ffffffff800021b8 <kbd_handle+0x78>
            rshift_status = 0;
ffffffff80002188:	c6 05 f9 99 00 00 00 	movb   $0x0,0x99f9(%rip)        # ffffffff8000bb88 <rshift_status>
            return;
ffffffff8000218f:	eb e6                	jmp    ffffffff80002177 <kbd_handle+0x37>
ffffffff80002191:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            rshift_status = 1;
ffffffff80002198:	c6 05 e9 99 00 00 01 	movb   $0x1,0x99e9(%rip)        # ffffffff8000bb88 <rshift_status>
            return;
ffffffff8000219f:	eb d6                	jmp    ffffffff80002177 <kbd_handle+0x37>
ffffffff800021a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            lshift_status = 0;
ffffffff800021a8:	c6 05 f1 9a 00 00 00 	movb   $0x0,0x9af1(%rip)        # ffffffff8000bca0 <lshift_status>
            return;
ffffffff800021af:	eb c6                	jmp    ffffffff80002177 <kbd_handle+0x37>
ffffffff800021b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(scancode > 58) return 0;
ffffffff800021b8:	31 d2                	xor    %edx,%edx
ffffffff800021ba:	3c 3a                	cmp    $0x3a,%al
ffffffff800021bc:	77 1e                	ja     ffffffff800021dc <kbd_handle+0x9c>
ffffffff800021be:	0f b6 d0             	movzbl %al,%edx
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff800021c1:	0f b6 35 d8 9a 00 00 	movzbl 0x9ad8(%rip),%esi        # ffffffff8000bca0 <lshift_status>
ffffffff800021c8:	0f b6 92 20 4f 00 80 	movzbl -0x7fffb0e0(%rdx),%edx
ffffffff800021cf:	40 0a 35 b2 99 00 00 	or     0x99b2(%rip),%sil        # ffffffff8000bb88 <rshift_status>
ffffffff800021d6:	8d 4a e0             	lea    -0x20(%rdx),%ecx
ffffffff800021d9:	0f 45 d1             	cmovne %ecx,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff800021dc:	31 c9                	xor    %ecx,%ecx
ffffffff800021de:	48 83 c4 08          	add    $0x8,%rsp
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff800021e2:	88 d5                	mov    %dl,%ch
    key_info.scancode = data;
ffffffff800021e4:	88 c1                	mov    %al,%cl
    kbd_handler(key_info);
ffffffff800021e6:	89 cf                	mov    %ecx,%edi
ffffffff800021e8:	ff 25 1a 03 01 00    	jmpq   *0x1031a(%rip)        # ffffffff80012508 <kbd_handler>
ffffffff800021ee:	66 90                	xchg   %ax,%ax
            printf("%d\n", pit_ticks);
ffffffff800021f0:	48 8b 35 29 04 01 00 	mov    0x10429(%rip),%rsi        # ffffffff80012620 <pit_ticks>
ffffffff800021f7:	48 c7 c7 e7 4d 00 80 	mov    $0xffffffff80004de7,%rdi
ffffffff800021fe:	31 c0                	xor    %eax,%eax
ffffffff80002200:	48 83 c4 08          	add    $0x8,%rsp
            printf("%d\n", pit_ticks);
ffffffff80002204:	e9 b7 13 00 00       	jmpq   ffffffff800035c0 <printf_>
ffffffff80002209:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002210 <cpu_init>:

void cpu_init()
{
    uint64_t a,b,c,d;
    __cpuid(0,a,b,c,d);
ffffffff80002210:	f3 c3                	repz retq 
ffffffff80002212:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002219:	00 00 00 
ffffffff8000221c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002220 <acpi_init>:
    struct RSDP20Descriptor* rsdp;

}ACPI_Info;

void acpi_init()
{
ffffffff80002220:	48 83 ec 18          	sub    $0x18,%rsp
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80002224:	48 8b 05 1d 86 00 00 	mov    0x861d(%rip),%rax        # ffffffff8000a848 <boot_info+0x28>
    
    uint8_t test[8] = {'R', 'S', 'P', ' ', 'P', 'T', 'R', ' '};
ffffffff8000222b:	48 bf 52 53 50 20 50 	movabs $0x2052545020505352,%rdi
ffffffff80002232:	54 52 20 
ffffffff80002235:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff8000223a:	31 d2                	xor    %edx,%edx
ffffffff8000223c:	b9 52 00 00 00       	mov    $0x52,%ecx
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff80002241:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80002245:	48 89 05 5c 9a 00 00 	mov    %rax,0x9a5c(%rip)        # ffffffff8000bca8 <ACPI_Info>
    for(uint32_t i = 0; i < 8; i++)
    {
        if(test[i] == ACPI_Info.rsdp->header.signature[i]) 
ffffffff8000224c:	38 0c 10             	cmp    %cl,(%rax,%rdx,1)
ffffffff8000224f:	74 0f                	je     ffffffff80002260 <acpi_init+0x40>
            return;
    }

    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
    
ffffffff80002251:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80002255:	c3                   	retq   
ffffffff80002256:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000225d:	00 00 00 
ffffffff80002260:	48 83 c2 01          	add    $0x1,%rdx
    for(uint32_t i = 0; i < 8; i++)
ffffffff80002264:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff80002268:	75 16                	jne    ffffffff80002280 <acpi_init+0x60>
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff8000226a:	0f b6 70 0f          	movzbl 0xf(%rax),%esi
ffffffff8000226e:	48 c7 c7 60 4f 00 80 	mov    $0xffffffff80004f60,%rdi
ffffffff80002275:	31 c0                	xor    %eax,%eax
ffffffff80002277:	48 83 c4 18          	add    $0x18,%rsp
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff8000227b:	e9 40 13 00 00       	jmpq   ffffffff800035c0 <printf_>
ffffffff80002280:	0f b6 4c 14 08       	movzbl 0x8(%rsp,%rdx,1),%ecx
ffffffff80002285:	eb c5                	jmp    ffffffff8000224c <acpi_init+0x2c>
ffffffff80002287:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000228e:	00 00 

ffffffff80002290 <pic_EOI>:

uint64_t ticks;

void pic_EOI(uint8_t IRQ)
{
    if(IRQ >= 8)
ffffffff80002290:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80002294:	77 12                	ja     ffffffff800022a8 <pic_EOI+0x18>
    {
        outb(PIC2_CMD, PIC_EOI);
    }
    
    outb(PIC1_CMD, PIC_EOI);
ffffffff80002296:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000229b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800022a0:	e9 8b f6 ff ff       	jmpq   ffffffff80001930 <outb>
ffffffff800022a5:	0f 1f 00             	nopl   (%rax)
{
ffffffff800022a8:	48 83 ec 08          	sub    $0x8,%rsp
        outb(PIC2_CMD, PIC_EOI);
ffffffff800022ac:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800022b1:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff800022b6:	e8 75 f6 ff ff       	callq  ffffffff80001930 <outb>
    outb(PIC1_CMD, PIC_EOI);
ffffffff800022bb:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800022c0:	bf 20 00 00 00       	mov    $0x20,%edi
}
ffffffff800022c5:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_CMD, PIC_EOI);
ffffffff800022c9:	e9 62 f6 ff ff       	jmpq   ffffffff80001930 <outb>
ffffffff800022ce:	66 90                	xchg   %ax,%ax

ffffffff800022d0 <pic_set_mask>:

void pic_set_mask(uint8_t IRQ)
{
ffffffff800022d0:	55                   	push   %rbp
ffffffff800022d1:	53                   	push   %rbx
ffffffff800022d2:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff800022d6:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff800022da:	76 34                	jbe    ffffffff80002310 <pic_set_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff800022dc:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff800022df:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) | (1 << IRQ);
ffffffff800022e4:	89 df                	mov    %ebx,%edi
ffffffff800022e6:	e8 55 f6 ff ff       	callq  ffffffff80001940 <inb>
    outb(port, value);
}
ffffffff800022eb:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) | (1 << IRQ);
ffffffff800022ef:	89 e9                	mov    %ebp,%ecx
ffffffff800022f1:	be 01 00 00 00       	mov    $0x1,%esi
    outb(port, value);
ffffffff800022f6:	89 df                	mov    %ebx,%edi
    value = inb(port) | (1 << IRQ);
ffffffff800022f8:	d3 e6                	shl    %cl,%esi
}
ffffffff800022fa:	5b                   	pop    %rbx
ffffffff800022fb:	5d                   	pop    %rbp
    value = inb(port) | (1 << IRQ);
ffffffff800022fc:	09 f0                	or     %esi,%eax
    outb(port, value);
ffffffff800022fe:	0f b6 f0             	movzbl %al,%esi
ffffffff80002301:	e9 2a f6 ff ff       	jmpq   ffffffff80001930 <outb>
ffffffff80002306:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000230d:	00 00 00 
ffffffff80002310:	89 fd                	mov    %edi,%ebp
ffffffff80002312:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80002317:	eb cb                	jmp    ffffffff800022e4 <pic_set_mask+0x14>
ffffffff80002319:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002320 <pic_clear_mask>:

void pic_clear_mask(uint8_t IRQ)
{
ffffffff80002320:	55                   	push   %rbp
ffffffff80002321:	53                   	push   %rbx
ffffffff80002322:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80002326:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff8000232a:	76 34                	jbe    ffffffff80002360 <pic_clear_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff8000232c:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff8000232f:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) & ~(1 << IRQ);
ffffffff80002334:	89 df                	mov    %ebx,%edi
ffffffff80002336:	e8 05 f6 ff ff       	callq  ffffffff80001940 <inb>
    outb(port, value);
}
ffffffff8000233b:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) & ~(1 << IRQ);
ffffffff8000233f:	89 e9                	mov    %ebp,%ecx
ffffffff80002341:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    outb(port, value);
ffffffff80002346:	89 df                	mov    %ebx,%edi
    value = inb(port) & ~(1 << IRQ);
ffffffff80002348:	d3 c2                	rol    %cl,%edx
}
ffffffff8000234a:	5b                   	pop    %rbx
ffffffff8000234b:	5d                   	pop    %rbp
    value = inb(port) & ~(1 << IRQ);
ffffffff8000234c:	21 d0                	and    %edx,%eax
    outb(port, value);
ffffffff8000234e:	0f b6 f0             	movzbl %al,%esi
ffffffff80002351:	e9 da f5 ff ff       	jmpq   ffffffff80001930 <outb>
ffffffff80002356:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000235d:	00 00 00 
ffffffff80002360:	89 fd                	mov    %edi,%ebp
ffffffff80002362:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff80002367:	eb cb                	jmp    ffffffff80002334 <pic_clear_mask+0x14>
ffffffff80002369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002370 <pic_disable>:

void pic_disable()
{
ffffffff80002370:	48 83 ec 08          	sub    $0x8,%rsp
    outb(PIC2_DATA, 0xff);
ffffffff80002374:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002379:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000237e:	e8 ad f5 ff ff       	callq  ffffffff80001930 <outb>
    outb(PIC1_DATA, 0xff);
ffffffff80002383:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002388:	bf 21 00 00 00       	mov    $0x21,%edi
}
ffffffff8000238d:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_DATA, 0xff);
ffffffff80002391:	e9 9a f5 ff ff       	jmpq   ffffffff80001930 <outb>
ffffffff80002396:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000239d:	00 00 00 

ffffffff800023a0 <pic_remap>:

void pic_remap()
{
ffffffff800023a0:	55                   	push   %rbp
ffffffff800023a1:	53                   	push   %rbx
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff800023a2:	bf 21 00 00 00       	mov    $0x21,%edi
{
ffffffff800023a7:	48 83 ec 08          	sub    $0x8,%rsp
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff800023ab:	e8 90 f5 ff ff       	callq  ffffffff80001940 <inb>
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff800023b0:	bf a1 00 00 00       	mov    $0xa1,%edi
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff800023b5:	89 c5                	mov    %eax,%ebp
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff800023b7:	e8 84 f5 ff ff       	callq  ffffffff80001940 <inb>

    outb(PIC1_CMD, 0x11);
ffffffff800023bc:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff800023c1:	bf 20 00 00 00       	mov    $0x20,%edi
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff800023c6:	89 c3                	mov    %eax,%ebx
    outb(PIC1_CMD, 0x11);
ffffffff800023c8:	e8 63 f5 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff800023cd:	31 c0                	xor    %eax,%eax
ffffffff800023cf:	e8 7c f5 ff ff       	callq  ffffffff80001950 <io_wait>
    outb(PIC2_CMD, 0x11);
ffffffff800023d4:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff800023d9:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff800023de:	e8 4d f5 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff800023e3:	31 c0                	xor    %eax,%eax
ffffffff800023e5:	e8 66 f5 ff ff       	callq  ffffffff80001950 <io_wait>

    outb(PIC1_DATA, 0x20);
ffffffff800023ea:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800023ef:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800023f4:	e8 37 f5 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff800023f9:	31 c0                	xor    %eax,%eax
ffffffff800023fb:	e8 50 f5 ff ff       	callq  ffffffff80001950 <io_wait>
    outb(PIC2_DATA, 0x20);
ffffffff80002400:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80002405:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000240a:	e8 21 f5 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff8000240f:	31 c0                	xor    %eax,%eax
ffffffff80002411:	e8 3a f5 ff ff       	callq  ffffffff80001950 <io_wait>

    outb(PIC1_DATA, 0x04);
ffffffff80002416:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff8000241b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002420:	e8 0b f5 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff80002425:	31 c0                	xor    %eax,%eax
ffffffff80002427:	e8 24 f5 ff ff       	callq  ffffffff80001950 <io_wait>
    outb(PIC2_DATA, 0x02);
ffffffff8000242c:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80002431:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80002436:	e8 f5 f4 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff8000243b:	31 c0                	xor    %eax,%eax
ffffffff8000243d:	e8 0e f5 ff ff       	callq  ffffffff80001950 <io_wait>

    outb(PIC1_DATA, 0x01);
ffffffff80002442:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80002447:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8000244c:	e8 df f4 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff80002451:	31 c0                	xor    %eax,%eax
ffffffff80002453:	e8 f8 f4 ff ff       	callq  ffffffff80001950 <io_wait>
    outb(PIC2_DATA, 0x01);
ffffffff80002458:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000245d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80002462:	e8 c9 f4 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff80002467:	31 c0                	xor    %eax,%eax
ffffffff80002469:	e8 e2 f4 ff ff       	callq  ffffffff80001950 <io_wait>

    outb(PIC1_DATA, mask1);
ffffffff8000246e:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80002472:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002477:	e8 b4 f4 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff8000247c:	31 c0                	xor    %eax,%eax
ffffffff8000247e:	e8 cd f4 ff ff       	callq  ffffffff80001950 <io_wait>
    outb(PIC2_DATA, mask2);
ffffffff80002483:	0f b6 f3             	movzbl %bl,%esi
ffffffff80002486:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000248b:	e8 a0 f4 ff ff       	callq  ffffffff80001930 <outb>
    io_wait();
ffffffff80002490:	31 c0                	xor    %eax,%eax
}
ffffffff80002492:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80002496:	5b                   	pop    %rbx
ffffffff80002497:	5d                   	pop    %rbp
    io_wait();
ffffffff80002498:	e9 b3 f4 ff ff       	jmpq   ffffffff80001950 <io_wait>
ffffffff8000249d:	0f 1f 00             	nopl   (%rax)

ffffffff800024a0 <pit_init>:



void pit_init(uint64_t freq)
{
ffffffff800024a0:	53                   	push   %rbx
    if(freq > 1193181)
        working_freq = 1193181;

    uint32_t divisor = 1193180 / working_freq;

    outb(0x43, 0x36);
ffffffff800024a1:	be 36 00 00 00       	mov    $0x36,%esi
{
ffffffff800024a6:	48 89 fb             	mov    %rdi,%rbx
    outb(0x43, 0x36);
ffffffff800024a9:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff800024ae:	e8 7d f4 ff ff       	callq  ffffffff80001930 <outb>
    uint32_t divisor = 1193180 / working_freq;
ffffffff800024b3:	48 81 fb dd 34 12 00 	cmp    $0x1234dd,%rbx
ffffffff800024ba:	bf dd 34 12 00       	mov    $0x1234dd,%edi
ffffffff800024bf:	b8 10 27 00 00       	mov    $0x2710,%eax
ffffffff800024c4:	48 0f 46 fb          	cmovbe %rbx,%rdi
ffffffff800024c8:	48 81 ff 10 27 00 00 	cmp    $0x2710,%rdi
ffffffff800024cf:	48 0f 42 f8          	cmovb  %rax,%rdi
ffffffff800024d3:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
ffffffff800024d8:	31 d2                	xor    %edx,%edx
ffffffff800024da:	48 f7 f7             	div    %rdi
    outb(0x40, divisor & 0xff);
ffffffff800024dd:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff800024e2:	89 c6                	mov    %eax,%esi
ffffffff800024e4:	e8 47 f4 ff ff       	callq  ffffffff80001930 <outb>
    outb(0x40, divisor >> 8);
ffffffff800024e9:	5b                   	pop    %rbx
    outb(0x40, divisor >> 8);
ffffffff800024ea:	31 f6                	xor    %esi,%esi
ffffffff800024ec:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff800024f1:	e9 3a f4 ff ff       	jmpq   ffffffff80001930 <outb>
ffffffff800024f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800024fd:	00 00 00 

ffffffff80002500 <vfs_init>:
void vfs_init()
{
    //create file descriptors for STDIN, STDOUT, and STDERR
    

};
ffffffff80002500:	f3 c3                	repz retq 
ffffffff80002502:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002509:	00 00 00 
ffffffff8000250c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002510 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
ffffffff80002510:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80002513:	73 04                	jae    ffffffff80002519 <_out_buffer+0x9>
    ((char*)buffer)[idx] = character;
ffffffff80002515:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  }
}
ffffffff80002519:	f3 c3                	repz retq 
ffffffff8000251b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80002520 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
ffffffff80002520:	f3 c3                	repz retq 
ffffffff80002522:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002529:	00 00 00 00 
ffffffff8000252d:	0f 1f 00             	nopl   (%rax)

ffffffff80002530 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
ffffffff80002530:	40 84 ff             	test   %dil,%dil
{
ffffffff80002533:	48 89 f0             	mov    %rsi,%rax
  if (character) {
ffffffff80002536:	74 10                	je     ffffffff80002548 <_out_fct+0x18>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
ffffffff80002538:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffffff8000253c:	40 0f be ff          	movsbl %dil,%edi
ffffffff80002540:	ff 20                	jmpq   *(%rax)
ffffffff80002542:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  }
}
ffffffff80002548:	f3 c3                	repz retq 
ffffffff8000254a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80002550 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002550:	41 57                	push   %r15
ffffffff80002552:	41 56                	push   %r14
ffffffff80002554:	41 55                	push   %r13
ffffffff80002556:	41 54                	push   %r12
ffffffff80002558:	49 89 cd             	mov    %rcx,%r13
ffffffff8000255b:	55                   	push   %rbp
ffffffff8000255c:	53                   	push   %rbx
ffffffff8000255d:	48 89 fd             	mov    %rdi,%rbp
ffffffff80002560:	4c 89 c3             	mov    %r8,%rbx
ffffffff80002563:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80002567:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
ffffffff8000256e:	48 89 34 24          	mov    %rsi,(%rsp)
ffffffff80002572:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80002577:	8b 7c 24 60          	mov    0x60(%rsp),%edi
ffffffff8000257b:	89 c6                	mov    %eax,%esi
ffffffff8000257d:	89 c1                	mov    %eax,%ecx
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
ffffffff8000257f:	89 c2                	mov    %eax,%edx
ffffffff80002581:	83 e6 10             	and    $0x10,%esi
ffffffff80002584:	83 e1 03             	and    $0x3,%ecx
ffffffff80002587:	83 e2 02             	and    $0x2,%edx
ffffffff8000258a:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
ffffffff8000258e:	75 79                	jne    ffffffff80002609 <_ntoa_format+0xb9>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002590:	44 8b 54 24 78       	mov    0x78(%rsp),%r10d
ffffffff80002595:	41 89 c0             	mov    %eax,%r8d
ffffffff80002598:	8b 54 24 70          	mov    0x70(%rsp),%edx
ffffffff8000259c:	41 83 e0 01          	and    $0x1,%r8d
ffffffff800025a0:	45 85 d2             	test   %r10d,%r10d
ffffffff800025a3:	0f 85 d7 00 00 00    	jne    ffffffff80002680 <_ntoa_format+0x130>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025a9:	49 39 d1             	cmp    %rdx,%r9
ffffffff800025ac:	73 27                	jae    ffffffff800025d5 <_ntoa_format+0x85>
ffffffff800025ae:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800025b2:	75 12                	jne    ffffffff800025c6 <_ntoa_format+0x76>
ffffffff800025b4:	e9 b7 02 00 00       	jmpq   ffffffff80002870 <_ntoa_format+0x320>
ffffffff800025b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800025c0:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800025c4:	74 0f                	je     ffffffff800025d5 <_ntoa_format+0x85>
      buf[len++] = '0';
ffffffff800025c6:	49 83 c1 01          	add    $0x1,%r9
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025ca:	49 39 d1             	cmp    %rdx,%r9
      buf[len++] = '0';
ffffffff800025cd:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025d3:	72 eb                	jb     ffffffff800025c0 <_ntoa_format+0x70>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025d5:	45 85 c0             	test   %r8d,%r8d
ffffffff800025d8:	74 2f                	je     ffffffff80002609 <_ntoa_format+0xb9>
ffffffff800025da:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff800025df:	4d 39 ce             	cmp    %r9,%r14
ffffffff800025e2:	76 25                	jbe    ffffffff80002609 <_ntoa_format+0xb9>
ffffffff800025e4:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800025e8:	75 10                	jne    ffffffff800025fa <_ntoa_format+0xaa>
ffffffff800025ea:	e9 8b 03 00 00       	jmpq   ffffffff8000297a <_ntoa_format+0x42a>
ffffffff800025ef:	90                   	nop
ffffffff800025f0:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800025f4:	0f 84 76 02 00 00    	je     ffffffff80002870 <_ntoa_format+0x320>
      buf[len++] = '0';
ffffffff800025fa:	49 83 c1 01          	add    $0x1,%r9
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025fe:	4d 39 f1             	cmp    %r14,%r9
      buf[len++] = '0';
ffffffff80002601:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002607:	75 e7                	jne    ffffffff800025f0 <_ntoa_format+0xa0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
ffffffff80002609:	85 f6                	test   %esi,%esi
ffffffff8000260b:	74 41                	je     ffffffff8000264e <_ntoa_format+0xfe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff8000260d:	f6 c4 04             	test   $0x4,%ah
ffffffff80002610:	0f 85 5a 01 00 00    	jne    ffffffff80002770 <_ntoa_format+0x220>
ffffffff80002616:	4d 85 c9             	test   %r9,%r9
ffffffff80002619:	0f 85 31 01 00 00    	jne    ffffffff80002750 <_ntoa_format+0x200>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000261f:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff80002624:	0f 84 2f 03 00 00    	je     ffffffff80002959 <_ntoa_format+0x409>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000262a:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff8000262f:	0f 85 37 03 00 00    	jne    ffffffff8000296c <_ntoa_format+0x41c>
      buf[len++] = 'b';
ffffffff80002635:	c6 03 62             	movb   $0x62,(%rbx)
ffffffff80002638:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
ffffffff8000263f:	00 00 
ffffffff80002641:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80002646:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
ffffffff8000264a:	c6 04 33 30          	movb   $0x30,(%rbx,%rsi,1)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff8000264e:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002652:	0f 84 38 02 00 00    	je     ffffffff80002890 <_ntoa_format+0x340>
    if (negative) {
ffffffff80002658:	40 84 ff             	test   %dil,%dil
ffffffff8000265b:	75 4b                	jne    ffffffff800026a8 <_ntoa_format+0x158>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
ffffffff8000265d:	a8 04                	test   $0x4,%al
ffffffff8000265f:	0f 85 a3 01 00 00    	jne    ffffffff80002808 <_ntoa_format+0x2b8>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
ffffffff80002665:	a8 08                	test   $0x8,%al
ffffffff80002667:	0f 84 9b 02 00 00    	je     ffffffff80002908 <_ntoa_format+0x3b8>
      buf[len++] = ' ';
ffffffff8000266d:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80002671:	42 c6 04 0b 20       	movb   $0x20,(%rbx,%r9,1)
ffffffff80002676:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff8000267b:	eb 39                	jmp    ffffffff800026b6 <_ntoa_format+0x166>
ffffffff8000267d:	0f 1f 00             	nopl   (%rax)
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002680:	45 85 c0             	test   %r8d,%r8d
ffffffff80002683:	0f 84 97 01 00 00    	je     ffffffff80002820 <_ntoa_format+0x2d0>
ffffffff80002689:	40 84 ff             	test   %dil,%dil
ffffffff8000268c:	75 04                	jne    ffffffff80002692 <_ntoa_format+0x142>
ffffffff8000268e:	a8 0c                	test   $0xc,%al
ffffffff80002690:	74 05                	je     ffffffff80002697 <_ntoa_format+0x147>
      width--;
ffffffff80002692:	83 6c 24 78 01       	subl   $0x1,0x78(%rsp)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002697:	49 39 d1             	cmp    %rdx,%r9
ffffffff8000269a:	0f 82 0e ff ff ff    	jb     ffffffff800025ae <_ntoa_format+0x5e>
ffffffff800026a0:	e9 35 ff ff ff       	jmpq   ffffffff800025da <_ntoa_format+0x8a>
ffffffff800026a5:	0f 1f 00             	nopl   (%rax)
      buf[len++] = '-';
ffffffff800026a8:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff800026ac:	42 c6 04 0b 2d       	movb   $0x2d,(%rbx,%r9,1)
ffffffff800026b1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800026b6:	85 c9                	test   %ecx,%ecx
ffffffff800026b8:	0f 84 fa 00 00 00    	je     ffffffff800027b8 <_ntoa_format+0x268>
ffffffff800026be:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    for (size_t i = len; i < width; i++) {
ffffffff800026c3:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
ffffffff800026c8:	4c 89 fa             	mov    %r15,%rdx
ffffffff800026cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    out(buf[--len], buffer, idx++, maxlen);
ffffffff800026d0:	49 83 ec 01          	sub    $0x1,%r12
ffffffff800026d4:	4c 8d 72 01          	lea    0x1(%rdx),%r14
ffffffff800026d8:	4c 89 e9             	mov    %r13,%rcx
ffffffff800026db:	42 0f be 3c 23       	movsbl (%rbx,%r12,1),%edi
ffffffff800026e0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800026e4:	ff d5                	callq  *%rbp
  while (len) {
ffffffff800026e6:	4d 85 e4             	test   %r12,%r12
    out(buf[--len], buffer, idx++, maxlen);
ffffffff800026e9:	4c 89 f2             	mov    %r14,%rdx
  while (len) {
ffffffff800026ec:	75 e2                	jne    ffffffff800026d0 <_ntoa_format+0x180>
ffffffff800026ee:	4c 03 7c 24 10       	add    0x10(%rsp),%r15
  if (flags & FLAGS_LEFT) {
ffffffff800026f3:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
ffffffff800026f7:	85 c0                	test   %eax,%eax
ffffffff800026f9:	74 3a                	je     ffffffff80002735 <_ntoa_format+0x1e5>
    while (idx - start_idx < width) {
ffffffff800026fb:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff80002700:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002703:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
ffffffff80002708:	49 39 d6             	cmp    %rdx,%r14
ffffffff8000270b:	76 28                	jbe    ffffffff80002735 <_ntoa_format+0x1e5>
ffffffff8000270d:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80002710:	49 8d 5f 01          	lea    0x1(%r15),%rbx
ffffffff80002714:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002717:	4c 89 e9             	mov    %r13,%rcx
ffffffff8000271a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000271e:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002723:	ff d5                	callq  *%rbp
    while (idx - start_idx < width) {
ffffffff80002725:	48 89 da             	mov    %rbx,%rdx
ffffffff80002728:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
      out(' ', buffer, idx++, maxlen);
ffffffff8000272d:	49 89 df             	mov    %rbx,%r15
    while (idx - start_idx < width) {
ffffffff80002730:	4c 39 f2             	cmp    %r14,%rdx
ffffffff80002733:	72 db                	jb     ffffffff80002710 <_ntoa_format+0x1c0>
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
ffffffff80002735:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80002739:	4c 89 f8             	mov    %r15,%rax
ffffffff8000273c:	5b                   	pop    %rbx
ffffffff8000273d:	5d                   	pop    %rbp
ffffffff8000273e:	41 5c                	pop    %r12
ffffffff80002740:	41 5d                	pop    %r13
ffffffff80002742:	41 5e                	pop    %r14
ffffffff80002744:	41 5f                	pop    %r15
ffffffff80002746:	c3                   	retq   
ffffffff80002747:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000274e:	00 00 
ffffffff80002750:	8b 54 24 70          	mov    0x70(%rsp),%edx
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80002754:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80002757:	0f 84 e3 00 00 00    	je     ffffffff80002840 <_ntoa_format+0x2f0>
ffffffff8000275d:	8b 54 24 78          	mov    0x78(%rsp),%edx
ffffffff80002761:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80002764:	0f 84 d6 00 00 00    	je     ffffffff80002840 <_ntoa_format+0x2f0>
ffffffff8000276a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002770:	49 83 f9 1f          	cmp    $0x1f,%r9
ffffffff80002774:	0f 96 c2             	setbe  %dl
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002777:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff8000277c:	0f 84 1e 01 00 00    	je     ffffffff800028a0 <_ntoa_format+0x350>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002782:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80002787:	0f 85 a3 00 00 00    	jne    ffffffff80002830 <_ntoa_format+0x2e0>
ffffffff8000278d:	84 d2                	test   %dl,%dl
ffffffff8000278f:	0f 84 9b 00 00 00    	je     ffffffff80002830 <_ntoa_format+0x2e0>
ffffffff80002795:	49 8d 71 01          	lea    0x1(%r9),%rsi
      buf[len++] = 'b';
ffffffff80002799:	42 c6 04 0b 62       	movb   $0x62,(%rbx,%r9,1)
ffffffff8000279e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff800027a3:	48 83 7c 24 10 1f    	cmpq   $0x1f,0x10(%rsp)
ffffffff800027a9:	0f 86 92 fe ff ff    	jbe    ffffffff80002641 <_ntoa_format+0xf1>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800027af:	85 c9                	test   %ecx,%ecx
ffffffff800027b1:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff800027b6:	75 3a                	jne    ffffffff800027f2 <_ntoa_format+0x2a2>
ffffffff800027b8:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff800027bd:	4c 3b 74 24 10       	cmp    0x10(%rsp),%r14
ffffffff800027c2:	0f 86 50 01 00 00    	jbe    ffffffff80002918 <_ntoa_format+0x3c8>
ffffffff800027c8:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff800027cd:	49 01 d6             	add    %rdx,%r14
ffffffff800027d0:	4c 2b 74 24 10       	sub    0x10(%rsp),%r14
ffffffff800027d5:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff800027d8:	4c 8d 7a 01          	lea    0x1(%rdx),%r15
ffffffff800027dc:	4c 89 e9             	mov    %r13,%rcx
ffffffff800027df:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800027e3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800027e8:	ff d5                	callq  *%rbp
    for (size_t i = len; i < width; i++) {
ffffffff800027ea:	4d 39 f7             	cmp    %r14,%r15
ffffffff800027ed:	4c 89 fa             	mov    %r15,%rdx
ffffffff800027f0:	75 e6                	jne    ffffffff800027d8 <_ntoa_format+0x288>
  while (len) {
ffffffff800027f2:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
ffffffff800027f8:	0f 85 c5 fe ff ff    	jne    ffffffff800026c3 <_ntoa_format+0x173>
ffffffff800027fe:	e9 f0 fe ff ff       	jmpq   ffffffff800026f3 <_ntoa_format+0x1a3>
ffffffff80002803:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      buf[len++] = '+';  // ignore the space if the '+' exists
ffffffff80002808:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff8000280c:	42 c6 04 0b 2b       	movb   $0x2b,(%rbx,%r9,1)
ffffffff80002811:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80002816:	e9 9b fe ff ff       	jmpq   ffffffff800026b6 <_ntoa_format+0x166>
ffffffff8000281b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002820:	49 39 d1             	cmp    %rdx,%r9
ffffffff80002823:	0f 82 85 fd ff ff    	jb     ffffffff800025ae <_ntoa_format+0x5e>
ffffffff80002829:	e9 db fd ff ff       	jmpq   ffffffff80002609 <_ntoa_format+0xb9>
ffffffff8000282e:	66 90                	xchg   %ax,%ax
ffffffff80002830:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80002835:	e9 69 ff ff ff       	jmpq   ffffffff800027a3 <_ntoa_format+0x253>
ffffffff8000283a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (len && (base == 16U)) {
ffffffff80002840:	4d 89 c8             	mov    %r9,%r8
ffffffff80002843:	49 83 e8 01          	sub    $0x1,%r8
ffffffff80002847:	0f 95 c2             	setne  %dl
ffffffff8000284a:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff8000284f:	40 0f 94 c6          	sete   %sil
ffffffff80002853:	40 20 f2             	and    %sil,%dl
ffffffff80002856:	0f 84 d9 00 00 00    	je     ffffffff80002935 <_ntoa_format+0x3e5>
        len--;
ffffffff8000285c:	49 8d 71 fe          	lea    -0x2(%r9),%rsi
ffffffff80002860:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002865:	eb 3e                	jmp    ffffffff800028a5 <_ntoa_format+0x355>
ffffffff80002867:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000286e:	00 00 
  if (flags & FLAGS_HASH) {
ffffffff80002870:	85 f6                	test   %esi,%esi
ffffffff80002872:	74 6c                	je     ffffffff800028e0 <_ntoa_format+0x390>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80002874:	f6 c4 04             	test   $0x4,%ah
ffffffff80002877:	41 b9 20 00 00 00    	mov    $0x20,%r9d
ffffffff8000287d:	0f 84 d1 fe ff ff    	je     ffffffff80002754 <_ntoa_format+0x204>
ffffffff80002883:	e9 e8 fe ff ff       	jmpq   ffffffff80002770 <_ntoa_format+0x220>
ffffffff80002888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000288f:	00 
ffffffff80002890:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80002897:	00 00 
ffffffff80002899:	e9 18 fe ff ff       	jmpq   ffffffff800026b6 <_ntoa_format+0x166>
ffffffff8000289e:	66 90                	xchg   %ax,%ax
ffffffff800028a0:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800028a5:	89 c6                	mov    %eax,%esi
ffffffff800028a7:	83 e6 20             	and    $0x20,%esi
ffffffff800028aa:	75 08                	jne    ffffffff800028b4 <_ntoa_format+0x364>
ffffffff800028ac:	84 d2                	test   %dl,%dl
ffffffff800028ae:	0f 85 8e 00 00 00    	jne    ffffffff80002942 <_ntoa_format+0x3f2>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800028b4:	85 f6                	test   %esi,%esi
ffffffff800028b6:	0f 84 e7 fe ff ff    	je     ffffffff800027a3 <_ntoa_format+0x253>
ffffffff800028bc:	84 d2                	test   %dl,%dl
ffffffff800028be:	0f 84 df fe ff ff    	je     ffffffff800027a3 <_ntoa_format+0x253>
      buf[len++] = 'X';
ffffffff800028c4:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff800028c9:	c6 04 33 58          	movb   $0x58,(%rbx,%rsi,1)
ffffffff800028cd:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800028d1:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff800028d6:	e9 c8 fe ff ff       	jmpq   ffffffff800027a3 <_ntoa_format+0x253>
ffffffff800028db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800028e0:	85 c9                	test   %ecx,%ecx
ffffffff800028e2:	75 3e                	jne    ffffffff80002922 <_ntoa_format+0x3d2>
ffffffff800028e4:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff800028e9:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff800028f0:	00 00 
ffffffff800028f2:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff800028f6:	0f 87 cc fe ff ff    	ja     ffffffff800027c8 <_ntoa_format+0x278>
ffffffff800028fc:	e9 bd fd ff ff       	jmpq   ffffffff800026be <_ntoa_format+0x16e>
ffffffff80002901:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80002908:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff8000290d:	e9 9d fe ff ff       	jmpq   ffffffff800027af <_ntoa_format+0x25f>
ffffffff80002912:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002918:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff8000291d:	e9 d0 fe ff ff       	jmpq   ffffffff800027f2 <_ntoa_format+0x2a2>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002922:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80002927:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000292e:	00 00 
ffffffff80002930:	e9 8e fd ff ff       	jmpq   ffffffff800026c3 <_ntoa_format+0x173>
      len--;
ffffffff80002935:	4d 89 c1             	mov    %r8,%r9
ffffffff80002938:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000293d:	e9 35 fe ff ff       	jmpq   ffffffff80002777 <_ntoa_format+0x227>
      buf[len++] = 'x';
ffffffff80002942:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80002947:	c6 04 33 78          	movb   $0x78,(%rbx,%rsi,1)
ffffffff8000294b:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000294f:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002954:	e9 4a fe ff ff       	jmpq   ffffffff800027a3 <_ntoa_format+0x253>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002959:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
ffffffff80002960:	00 00 
ffffffff80002962:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002967:	e9 39 ff ff ff       	jmpq   ffffffff800028a5 <_ntoa_format+0x355>
      buf[len++] = '0';
ffffffff8000296c:	c6 03 30             	movb   $0x30,(%rbx)
ffffffff8000296f:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80002975:	e9 de fc ff ff       	jmpq   ffffffff80002658 <_ntoa_format+0x108>
  if (flags & FLAGS_HASH) {
ffffffff8000297a:	85 f6                	test   %esi,%esi
ffffffff8000297c:	74 17                	je     ffffffff80002995 <_ntoa_format+0x445>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff8000297e:	f6 c4 04             	test   $0x4,%ah
ffffffff80002981:	0f 84 cd fd ff ff    	je     ffffffff80002754 <_ntoa_format+0x204>
ffffffff80002987:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000298e:	00 00 
ffffffff80002990:	e9 1a fe ff ff       	jmpq   ffffffff800027af <_ntoa_format+0x25f>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002995:	85 c9                	test   %ecx,%ecx
    for (size_t i = len; i < width; i++) {
ffffffff80002997:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000299e:	00 00 
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800029a0:	0f 85 18 fd ff ff    	jne    ffffffff800026be <_ntoa_format+0x16e>
    for (size_t i = len; i < width; i++) {
ffffffff800029a6:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff800029aa:	0f 87 18 fe ff ff    	ja     ffffffff800027c8 <_ntoa_format+0x278>
ffffffff800029b0:	e9 09 fd ff ff       	jmpq   ffffffff800026be <_ntoa_format+0x16e>
ffffffff800029b5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800029bc:	00 00 00 00 

ffffffff800029c0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff800029c0:	41 55                	push   %r13
ffffffff800029c2:	41 54                	push   %r12
ffffffff800029c4:	4c 89 c0             	mov    %r8,%rax
ffffffff800029c7:	55                   	push   %rbp
ffffffff800029c8:	53                   	push   %rbx
ffffffff800029c9:	48 89 d3             	mov    %rdx,%rbx
ffffffff800029cc:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff800029d0:	4d 85 c0             	test   %r8,%r8
{
ffffffff800029d3:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff800029d8:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff800029dc:	75 13                	jne    ffffffff800029f1 <_ntoa_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff800029de:	89 ea                	mov    %ebp,%edx
ffffffff800029e0:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800029e3:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff800029e9:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff800029eb:	0f 85 7f 00 00 00    	jne    ffffffff80002a70 <_ntoa_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800029f1:	89 ea                	mov    %ebp,%edx
ffffffff800029f3:	83 e2 20             	and    $0x20,%edx
ffffffff800029f6:	83 fa 01             	cmp    $0x1,%edx
ffffffff800029f9:	45 19 db             	sbb    %r11d,%r11d
ffffffff800029fc:	45 31 c0             	xor    %r8d,%r8d
ffffffff800029ff:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002a03:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002a07:	eb 0d                	jmp    ffffffff80002a16 <_ntoa_long+0x56>
ffffffff80002a09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002a10:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80002a14:	77 26                	ja     ffffffff80002a3c <_ntoa_long+0x7c>
ffffffff80002a16:	31 d2                	xor    %edx,%edx
ffffffff80002a18:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002a1b:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff80002a1f:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80002a23:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80002a27:	44 89 ea             	mov    %r13d,%edx
ffffffff80002a2a:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff80002a2e:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002a32:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002a35:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002a3a:	75 d4                	jne    ffffffff80002a10 <_ntoa_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff80002a3c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002a40:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002a44:	48 89 da             	mov    %rbx,%rdx
ffffffff80002a47:	55                   	push   %rbp
ffffffff80002a48:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002a4c:	50                   	push   %rax
ffffffff80002a4d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002a51:	50                   	push   %rax
ffffffff80002a52:	41 52                	push   %r10
ffffffff80002a54:	41 51                	push   %r9
ffffffff80002a56:	4d 89 c1             	mov    %r8,%r9
ffffffff80002a59:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff80002a5e:	e8 ed fa ff ff       	callq  ffffffff80002550 <_ntoa_format>
}
ffffffff80002a63:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002a67:	5b                   	pop    %rbx
ffffffff80002a68:	5d                   	pop    %rbp
ffffffff80002a69:	41 5c                	pop    %r12
ffffffff80002a6b:	41 5d                	pop    %r13
ffffffff80002a6d:	c3                   	retq   
ffffffff80002a6e:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002a70:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002a73:	eb c7                	jmp    ffffffff80002a3c <_ntoa_long+0x7c>
ffffffff80002a75:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002a7c:	00 00 00 00 

ffffffff80002a80 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002a80:	41 55                	push   %r13
ffffffff80002a82:	41 54                	push   %r12
ffffffff80002a84:	4c 89 c0             	mov    %r8,%rax
ffffffff80002a87:	55                   	push   %rbp
ffffffff80002a88:	53                   	push   %rbx
ffffffff80002a89:	48 89 d3             	mov    %rdx,%rbx
ffffffff80002a8c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80002a90:	4d 85 c0             	test   %r8,%r8
{
ffffffff80002a93:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80002a98:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff80002a9c:	75 13                	jne    ffffffff80002ab1 <_ntoa_long_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff80002a9e:	89 ea                	mov    %ebp,%edx
ffffffff80002aa0:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002aa3:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80002aa9:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002aab:	0f 85 7f 00 00 00    	jne    ffffffff80002b30 <_ntoa_long_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002ab1:	89 ea                	mov    %ebp,%edx
ffffffff80002ab3:	83 e2 20             	and    $0x20,%edx
ffffffff80002ab6:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002ab9:	45 19 db             	sbb    %r11d,%r11d
ffffffff80002abc:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002abf:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002ac3:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002ac7:	eb 0d                	jmp    ffffffff80002ad6 <_ntoa_long_long+0x56>
ffffffff80002ac9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002ad0:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80002ad4:	77 26                	ja     ffffffff80002afc <_ntoa_long_long+0x7c>
ffffffff80002ad6:	31 d2                	xor    %edx,%edx
ffffffff80002ad8:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002adb:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff80002adf:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80002ae3:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80002ae7:	44 89 ea             	mov    %r13d,%edx
ffffffff80002aea:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff80002aee:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002af2:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002af5:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002afa:	75 d4                	jne    ffffffff80002ad0 <_ntoa_long_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff80002afc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002b00:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002b04:	48 89 da             	mov    %rbx,%rdx
ffffffff80002b07:	55                   	push   %rbp
ffffffff80002b08:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002b0c:	50                   	push   %rax
ffffffff80002b0d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002b11:	50                   	push   %rax
ffffffff80002b12:	41 52                	push   %r10
ffffffff80002b14:	41 51                	push   %r9
ffffffff80002b16:	4d 89 c1             	mov    %r8,%r9
ffffffff80002b19:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff80002b1e:	e8 2d fa ff ff       	callq  ffffffff80002550 <_ntoa_format>
}
ffffffff80002b23:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002b27:	5b                   	pop    %rbx
ffffffff80002b28:	5d                   	pop    %rbp
ffffffff80002b29:	41 5c                	pop    %r12
ffffffff80002b2b:	41 5d                	pop    %r13
ffffffff80002b2d:	c3                   	retq   
ffffffff80002b2e:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002b30:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002b33:	eb c7                	jmp    ffffffff80002afc <_ntoa_long_long+0x7c>
ffffffff80002b35:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002b3c:	00 00 00 00 

ffffffff80002b40 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
ffffffff80002b40:	41 57                	push   %r15
ffffffff80002b42:	41 56                	push   %r14
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
ffffffff80002b44:	48 c7 c0 20 25 00 80 	mov    $0xffffffff80002520,%rax
{
ffffffff80002b4b:	41 55                	push   %r13
ffffffff80002b4d:	41 54                	push   %r12
ffffffff80002b4f:	49 89 f7             	mov    %rsi,%r15
ffffffff80002b52:	55                   	push   %rbp
ffffffff80002b53:	53                   	push   %rbx
ffffffff80002b54:	48 89 fd             	mov    %rdi,%rbp
ffffffff80002b57:	49 89 d6             	mov    %rdx,%r14
ffffffff80002b5a:	49 89 cd             	mov    %rcx,%r13
ffffffff80002b5d:	48 83 ec 38          	sub    $0x38,%rsp
    out = _out_null;
ffffffff80002b61:	48 85 f6             	test   %rsi,%rsi
ffffffff80002b64:	48 0f 44 e8          	cmove  %rax,%rbp
{
ffffffff80002b68:	4c 89 04 24          	mov    %r8,(%rsp)
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
ffffffff80002b6c:	31 db                	xor    %ebx,%ebx
  while (*format)
ffffffff80002b6e:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff80002b73:	40 84 ff             	test   %dil,%dil
ffffffff80002b76:	74 26                	je     ffffffff80002b9e <_vsnprintf+0x5e>
ffffffff80002b78:	49 83 c5 01          	add    $0x1,%r13
    if (*format != '%') {
ffffffff80002b7c:	40 80 ff 25          	cmp    $0x25,%dil
ffffffff80002b80:	74 46                	je     ffffffff80002bc8 <_vsnprintf+0x88>
      out(*format, buffer, idx++, maxlen);
ffffffff80002b82:	4c 8d 63 01          	lea    0x1(%rbx),%r12
        out(*format, buffer, idx++, maxlen);
ffffffff80002b86:	48 89 da             	mov    %rbx,%rdx
ffffffff80002b89:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002b8c:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002b8f:	ff d5                	callq  *%rbp
  while (*format)
ffffffff80002b91:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
        out(*format, buffer, idx++, maxlen);
ffffffff80002b96:	4c 89 e3             	mov    %r12,%rbx
  while (*format)
ffffffff80002b99:	40 84 ff             	test   %dil,%dil
ffffffff80002b9c:	75 da                	jne    ffffffff80002b78 <_vsnprintf+0x38>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
ffffffff80002b9e:	49 8d 56 ff          	lea    -0x1(%r14),%rdx
ffffffff80002ba2:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80002ba5:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002ba8:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002bab:	48 0f 42 d3          	cmovb  %rbx,%rdx
ffffffff80002baf:	31 ff                	xor    %edi,%edi
ffffffff80002bb1:	ff d5                	callq  *%rbp

  // return written chars without terminating \0
  return (int)idx;
}
ffffffff80002bb3:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80002bb7:	89 d8                	mov    %ebx,%eax
ffffffff80002bb9:	5b                   	pop    %rbx
ffffffff80002bba:	5d                   	pop    %rbp
ffffffff80002bbb:	41 5c                	pop    %r12
ffffffff80002bbd:	41 5d                	pop    %r13
ffffffff80002bbf:	41 5e                	pop    %r14
ffffffff80002bc1:	41 5f                	pop    %r15
ffffffff80002bc3:	c3                   	retq   
ffffffff80002bc4:	0f 1f 40 00          	nopl   0x0(%rax)
    flags = 0U;
ffffffff80002bc8:	31 c9                	xor    %ecx,%ecx
ffffffff80002bca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      switch (*format) {
ffffffff80002bd0:	41 0f be 45 00       	movsbl 0x0(%r13),%eax
ffffffff80002bd5:	49 8d 75 01          	lea    0x1(%r13),%rsi
ffffffff80002bd9:	48 89 f7             	mov    %rsi,%rdi
ffffffff80002bdc:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80002bdf:	80 fa 10             	cmp    $0x10,%dl
ffffffff80002be2:	77 3c                	ja     ffffffff80002c20 <_vsnprintf+0xe0>
ffffffff80002be4:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002be7:	ff 24 d5 00 50 00 80 	jmpq   *-0x7fffb000(,%rdx,8)
ffffffff80002bee:	66 90                	xchg   %ax,%ax
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
ffffffff80002bf0:	83 c9 01             	or     $0x1,%ecx
ffffffff80002bf3:	49 89 f5             	mov    %rsi,%r13
ffffffff80002bf6:	eb d8                	jmp    ffffffff80002bd0 <_vsnprintf+0x90>
ffffffff80002bf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002bff:	00 
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ffffffff80002c00:	83 c9 04             	or     $0x4,%ecx
ffffffff80002c03:	eb ee                	jmp    ffffffff80002bf3 <_vsnprintf+0xb3>
ffffffff80002c05:	0f 1f 00             	nopl   (%rax)
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ffffffff80002c08:	83 c9 02             	or     $0x2,%ecx
ffffffff80002c0b:	eb e6                	jmp    ffffffff80002bf3 <_vsnprintf+0xb3>
ffffffff80002c0d:	0f 1f 00             	nopl   (%rax)
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ffffffff80002c10:	83 c9 10             	or     $0x10,%ecx
ffffffff80002c13:	eb de                	jmp    ffffffff80002bf3 <_vsnprintf+0xb3>
ffffffff80002c15:	0f 1f 00             	nopl   (%rax)
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ffffffff80002c18:	83 c9 08             	or     $0x8,%ecx
ffffffff80002c1b:	eb d6                	jmp    ffffffff80002bf3 <_vsnprintf+0xb3>
ffffffff80002c1d:	0f 1f 00             	nopl   (%rax)
  return (ch >= '0') && (ch <= '9');
ffffffff80002c20:	8d 50 d0             	lea    -0x30(%rax),%edx
    if (_is_digit(*format)) {
ffffffff80002c23:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002c26:	0f 86 54 02 00 00    	jbe    ffffffff80002e80 <_vsnprintf+0x340>
    width = 0U;
ffffffff80002c2c:	45 31 e4             	xor    %r12d,%r12d
    else if (*format == '*') {
ffffffff80002c2f:	3c 2a                	cmp    $0x2a,%al
ffffffff80002c31:	0f 84 75 07 00 00    	je     ffffffff800033ac <_vsnprintf+0x86c>
    precision = 0U;
ffffffff80002c37:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002c3a:	3c 2e                	cmp    $0x2e,%al
ffffffff80002c3c:	0f 84 73 02 00 00    	je     ffffffff80002eb5 <_vsnprintf+0x375>
    switch (*format) {
ffffffff80002c42:	3c 6a                	cmp    $0x6a,%al
ffffffff80002c44:	74 12                	je     ffffffff80002c58 <_vsnprintf+0x118>
ffffffff80002c46:	0f 8e bc 02 00 00    	jle    ffffffff80002f08 <_vsnprintf+0x3c8>
ffffffff80002c4c:	3c 6c                	cmp    $0x6c,%al
ffffffff80002c4e:	74 30                	je     ffffffff80002c80 <_vsnprintf+0x140>
ffffffff80002c50:	3c 7a                	cmp    $0x7a,%al
ffffffff80002c52:	0f 85 d0 02 00 00    	jne    ffffffff80002f28 <_vsnprintf+0x3e8>
ffffffff80002c58:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002c5d:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ffffffff80002c61:	80 cd 01             	or     $0x1,%ch
    switch (*format) {
ffffffff80002c64:	8d 50 db             	lea    -0x25(%rax),%edx
ffffffff80002c67:	80 fa 53             	cmp    $0x53,%dl
ffffffff80002c6a:	0f 87 00 02 00 00    	ja     ffffffff80002e70 <_vsnprintf+0x330>
ffffffff80002c70:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002c73:	ff 24 d5 88 50 00 80 	jmpq   *-0x7fffaf78(,%rdx,8)
ffffffff80002c7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if (*format == 'l') {
ffffffff80002c80:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002c85:	3c 6c                	cmp    $0x6c,%al
ffffffff80002c87:	0f 84 98 04 00 00    	je     ffffffff80003125 <_vsnprintf+0x5e5>
        flags |= FLAGS_LONG;
ffffffff80002c8d:	80 cd 01             	or     $0x1,%ch
ffffffff80002c90:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002c94:	eb ce                	jmp    ffffffff80002c64 <_vsnprintf+0x124>
ffffffff80002c96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002c9d:	00 00 00 
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002ca0:	48 8b 34 24          	mov    (%rsp),%rsi
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
ffffffff80002ca4:	83 c9 21             	or     $0x21,%ecx
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002ca7:	8b 06                	mov    (%rsi),%eax
ffffffff80002ca9:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80002cac:	0f 87 45 08 00 00    	ja     ffffffff800034f7 <_vsnprintf+0x9b7>
ffffffff80002cb2:	89 c2                	mov    %eax,%edx
ffffffff80002cb4:	48 03 56 10          	add    0x10(%rsi),%rdx
ffffffff80002cb8:	83 c0 08             	add    $0x8,%eax
ffffffff80002cbb:	89 06                	mov    %eax,(%rsi)
ffffffff80002cbd:	51                   	push   %rcx
ffffffff80002cbe:	6a 10                	pushq  $0x10
ffffffff80002cc0:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002cc3:	41 52                	push   %r10
ffffffff80002cc5:	6a 10                	pushq  $0x10
ffffffff80002cc7:	4c 8b 02             	mov    (%rdx),%r8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80002cca:	48 89 da             	mov    %rbx,%rdx
ffffffff80002ccd:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002cd0:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002cd3:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002cd6:	e8 a5 fd ff ff       	callq  ffffffff80002a80 <_ntoa_long_long>
ffffffff80002cdb:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002cdf:	48 89 c3             	mov    %rax,%rbx
ffffffff80002ce2:	e9 87 fe ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
ffffffff80002ce7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002cee:	00 00 
ffffffff80002cf0:	4c 8d 43 01          	lea    0x1(%rbx),%r8
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002cf4:	83 e1 02             	and    $0x2,%ecx
ffffffff80002cf7:	4c 89 c0             	mov    %r8,%rax
ffffffff80002cfa:	0f 84 47 04 00 00    	je     ffffffff80003147 <_vsnprintf+0x607>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002d00:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002d04:	8b 16                	mov    (%rsi),%edx
ffffffff80002d06:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002d09:	0f 87 34 06 00 00    	ja     ffffffff80003343 <_vsnprintf+0x803>
ffffffff80002d0f:	89 d1                	mov    %edx,%ecx
ffffffff80002d11:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80002d15:	83 c2 08             	add    $0x8,%edx
ffffffff80002d18:	89 16                	mov    %edx,(%rsi)
ffffffff80002d1a:	0f be 39             	movsbl (%rcx),%edi
ffffffff80002d1d:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffffff80002d22:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002d25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80002d2a:	48 89 da             	mov    %rbx,%rdx
ffffffff80002d2d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002d30:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002d32:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff80002d36:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80002d3b:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
ffffffff80002d40:	0f 86 e8 02 00 00    	jbe    ffffffff8000302e <_vsnprintf+0x4ee>
ffffffff80002d46:	41 8d 4c 24 fe       	lea    -0x2(%r12),%ecx
ffffffff80002d4b:	48 83 c3 02          	add    $0x2,%rbx
ffffffff80002d4f:	48 89 c2             	mov    %rax,%rdx
ffffffff80002d52:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
ffffffff80002d57:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80002d5c:	48 01 cb             	add    %rcx,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff80002d5f:	4c 8d 62 01          	lea    0x1(%rdx),%r12
ffffffff80002d63:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002d66:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002d69:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002d6e:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002d70:	49 39 dc             	cmp    %rbx,%r12
ffffffff80002d73:	4c 89 e2             	mov    %r12,%rdx
ffffffff80002d76:	75 e7                	jne    ffffffff80002d5f <_vsnprintf+0x21f>
ffffffff80002d78:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
ffffffff80002d7d:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
        break;
ffffffff80002d82:	e9 e7 fd ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
ffffffff80002d87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002d8e:	00 00 
        out('%', buffer, idx++, maxlen);
ffffffff80002d90:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002d94:	48 89 da             	mov    %rbx,%rdx
ffffffff80002d97:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002d9a:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002d9d:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff80002da2:	4c 89 e3             	mov    %r12,%rbx
ffffffff80002da5:	ff d5                	callq  *%rbp
        break;
ffffffff80002da7:	e9 c2 fd ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
ffffffff80002dac:	0f 1f 40 00          	nopl   0x0(%rax)
        if (*format == 'x' || *format == 'X') {
ffffffff80002db0:	89 c2                	mov    %eax,%edx
ffffffff80002db2:	83 e2 df             	and    $0xffffffdf,%edx
ffffffff80002db5:	80 fa 58             	cmp    $0x58,%dl
ffffffff80002db8:	0f 84 66 02 00 00    	je     ffffffff80003024 <_vsnprintf+0x4e4>
        else if (*format == 'o') {
ffffffff80002dbe:	3c 6f                	cmp    $0x6f,%al
ffffffff80002dc0:	0f 84 b6 04 00 00    	je     ffffffff8000327c <_vsnprintf+0x73c>
        else if (*format == 'b') {
ffffffff80002dc6:	3c 62                	cmp    $0x62,%al
ffffffff80002dc8:	0f 84 20 05 00 00    	je     ffffffff800032ee <_vsnprintf+0x7ae>
          flags &= ~FLAGS_HASH;   // no hash for dec format
ffffffff80002dce:	83 e1 ef             	and    $0xffffffef,%ecx
ffffffff80002dd1:	bf 0a 00 00 00       	mov    $0xa,%edi
        if (*format == 'X') {
ffffffff80002dd6:	3c 58                	cmp    $0x58,%al
ffffffff80002dd8:	0f 84 3c 03 00 00    	je     ffffffff8000311a <_vsnprintf+0x5da>
        if ((*format != 'i') && (*format != 'd')) {
ffffffff80002dde:	3c 69                	cmp    $0x69,%al
ffffffff80002de0:	74 08                	je     ffffffff80002dea <_vsnprintf+0x2aa>
ffffffff80002de2:	3c 64                	cmp    $0x64,%al
ffffffff80002de4:	0f 85 33 03 00 00    	jne    ffffffff8000311d <_vsnprintf+0x5dd>
          flags &= ~FLAGS_ZEROPAD;
ffffffff80002dea:	89 ca                	mov    %ecx,%edx
ffffffff80002dec:	83 e2 fe             	and    $0xfffffffe,%edx
ffffffff80002def:	f6 c5 04             	test   $0x4,%ch
ffffffff80002df2:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80002df5:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff80002df9:	89 ce                	mov    %ecx,%esi
ffffffff80002dfb:	81 e6 00 02 00 00    	and    $0x200,%esi
        if ((*format == 'i') || (*format == 'd')) {
ffffffff80002e01:	3c 69                	cmp    $0x69,%al
ffffffff80002e03:	8b 12                	mov    (%rdx),%edx
ffffffff80002e05:	0f 84 b8 02 00 00    	je     ffffffff800030c3 <_vsnprintf+0x583>
ffffffff80002e0b:	3c 64                	cmp    $0x64,%al
ffffffff80002e0d:	0f 84 b0 02 00 00    	je     ffffffff800030c3 <_vsnprintf+0x583>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002e13:	85 f6                	test   %esi,%esi
ffffffff80002e15:	0f 85 38 04 00 00    	jne    ffffffff80003253 <_vsnprintf+0x713>
          else if (flags & FLAGS_LONG) {
ffffffff80002e1b:	f6 c5 01             	test   $0x1,%ch
ffffffff80002e1e:	0f 85 a1 04 00 00    	jne    ffffffff800032c5 <_vsnprintf+0x785>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002e24:	f6 c1 40             	test   $0x40,%cl
ffffffff80002e27:	0f 84 6e 04 00 00    	je     ffffffff8000329b <_vsnprintf+0x75b>
ffffffff80002e2d:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002e30:	0f 87 d2 05 00 00    	ja     ffffffff80003408 <_vsnprintf+0x8c8>
ffffffff80002e36:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002e3a:	89 d0                	mov    %edx,%eax
ffffffff80002e3c:	83 c2 08             	add    $0x8,%edx
ffffffff80002e3f:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002e43:	89 16                	mov    %edx,(%rsi)
ffffffff80002e45:	44 0f b6 00          	movzbl (%rax),%r8d
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff80002e49:	51                   	push   %rcx
ffffffff80002e4a:	41 54                	push   %r12
ffffffff80002e4c:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002e4f:	41 52                	push   %r10
ffffffff80002e51:	57                   	push   %rdi
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002e52:	48 89 da             	mov    %rbx,%rdx
ffffffff80002e55:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002e58:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002e5b:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002e5e:	e8 5d fb ff ff       	callq  ffffffff800029c0 <_ntoa_long>
ffffffff80002e63:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002e67:	48 89 c3             	mov    %rax,%rbx
ffffffff80002e6a:	e9 ff fc ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
ffffffff80002e6f:	90                   	nop
        out(*format, buffer, idx++, maxlen);
ffffffff80002e70:	4c 8d 63 01          	lea    0x1(%rbx),%r12
    switch (*format) {
ffffffff80002e74:	0f be f8             	movsbl %al,%edi
ffffffff80002e77:	e9 0a fd ff ff       	jmpq   ffffffff80002b86 <_vsnprintf+0x46>
ffffffff80002e7c:	0f 1f 40 00          	nopl   0x0(%rax)
  unsigned int i = 0U;
ffffffff80002e80:	45 31 e4             	xor    %r12d,%r12d
ffffffff80002e83:	eb 0a                	jmp    ffffffff80002e8f <_vsnprintf+0x34f>
ffffffff80002e85:	0f 1f 00             	nopl   (%rax)
  while (_is_digit(**str)) {
ffffffff80002e88:	49 89 f5             	mov    %rsi,%r13
ffffffff80002e8b:	48 83 c6 01          	add    $0x1,%rsi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002e8f:	43 8d 14 a4          	lea    (%r12,%r12,4),%edx
ffffffff80002e93:	44 8d 64 50 d0       	lea    -0x30(%rax,%rdx,2),%r12d
  while (_is_digit(**str)) {
ffffffff80002e98:	0f be 06             	movsbl (%rsi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002e9b:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002e9e:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002ea1:	76 e5                	jbe    ffffffff80002e88 <_vsnprintf+0x348>
ffffffff80002ea3:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80002ea7:	49 89 f5             	mov    %rsi,%r13
    precision = 0U;
ffffffff80002eaa:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002ead:	3c 2e                	cmp    $0x2e,%al
ffffffff80002eaf:	0f 85 8d fd ff ff    	jne    ffffffff80002c42 <_vsnprintf+0x102>
      if (_is_digit(*format)) {
ffffffff80002eb5:	41 0f be 45 01       	movsbl 0x1(%r13),%eax
      flags |= FLAGS_PRECISION;
ffffffff80002eba:	80 cd 04             	or     $0x4,%ch
  return (ch >= '0') && (ch <= '9');
ffffffff80002ebd:	8d 50 d0             	lea    -0x30(%rax),%edx
      if (_is_digit(*format)) {
ffffffff80002ec0:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002ec3:	76 1e                	jbe    ffffffff80002ee3 <_vsnprintf+0x3a3>
      else if (*format == '*') {
ffffffff80002ec5:	3c 2a                	cmp    $0x2a,%al
ffffffff80002ec7:	0f 84 3f 06 00 00    	je     ffffffff8000350c <_vsnprintf+0x9cc>
      format++;
ffffffff80002ecd:	49 89 fd             	mov    %rdi,%r13
      else if (*format == '*') {
ffffffff80002ed0:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80002ed4:	e9 69 fd ff ff       	jmpq   ffffffff80002c42 <_vsnprintf+0x102>
ffffffff80002ed9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  while (_is_digit(**str)) {
ffffffff80002ee0:	4c 89 ef             	mov    %r13,%rdi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002ee3:	43 8d 14 92          	lea    (%r10,%r10,4),%edx
ffffffff80002ee7:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002eeb:	44 8d 54 50 d0       	lea    -0x30(%rax,%rdx,2),%r10d
  while (_is_digit(**str)) {
ffffffff80002ef0:	0f be 47 01          	movsbl 0x1(%rdi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002ef4:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002ef7:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002efa:	76 e4                	jbe    ffffffff80002ee0 <_vsnprintf+0x3a0>
ffffffff80002efc:	48 83 c7 02          	add    $0x2,%rdi
ffffffff80002f00:	e9 3d fd ff ff       	jmpq   ffffffff80002c42 <_vsnprintf+0x102>
ffffffff80002f05:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002f08:	3c 68                	cmp    $0x68,%al
ffffffff80002f0a:	75 1c                	jne    ffffffff80002f28 <_vsnprintf+0x3e8>
        if (*format == 'h') {
ffffffff80002f0c:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002f11:	3c 68                	cmp    $0x68,%al
ffffffff80002f13:	0f 84 1d 02 00 00    	je     ffffffff80003136 <_vsnprintf+0x5f6>
        flags |= FLAGS_SHORT;
ffffffff80002f19:	80 c9 80             	or     $0x80,%cl
ffffffff80002f1c:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002f20:	e9 3f fd ff ff       	jmpq   ffffffff80002c64 <_vsnprintf+0x124>
ffffffff80002f25:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002f28:	49 89 fd             	mov    %rdi,%r13
ffffffff80002f2b:	e9 34 fd ff ff       	jmpq   ffffffff80002c64 <_vsnprintf+0x124>
        const char* p = va_arg(va, char*);
ffffffff80002f30:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002f34:	8b 16                	mov    (%rsi),%edx
ffffffff80002f36:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002f39:	0f 87 2e 04 00 00    	ja     ffffffff8000336d <_vsnprintf+0x82d>
ffffffff80002f3f:	89 d0                	mov    %edx,%eax
ffffffff80002f41:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002f45:	83 c2 08             	add    $0x8,%edx
ffffffff80002f48:	89 16                	mov    %edx,(%rsi)
ffffffff80002f4a:	4c 8b 08             	mov    (%rax),%r9
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80002f4d:	45 85 d2             	test   %r10d,%r10d
ffffffff80002f50:	41 0f be 39          	movsbl (%r9),%edi
ffffffff80002f54:	0f 85 54 01 00 00    	jne    ffffffff800030ae <_vsnprintf+0x56e>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002f5a:	40 84 ff             	test   %dil,%dil
ffffffff80002f5d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80002f64:	0f 84 b8 03 00 00    	je     ffffffff80003322 <_vsnprintf+0x7e2>
ffffffff80002f6a:	4c 89 c8             	mov    %r9,%rax
ffffffff80002f6d:	eb 11                	jmp    ffffffff80002f80 <_vsnprintf+0x440>
ffffffff80002f6f:	90                   	nop
ffffffff80002f70:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002f75:	48 29 c2             	sub    %rax,%rdx
ffffffff80002f78:	4c 01 ca             	add    %r9,%rdx
ffffffff80002f7b:	48 01 f2             	add    %rsi,%rdx
ffffffff80002f7e:	74 09                	je     ffffffff80002f89 <_vsnprintf+0x449>
ffffffff80002f80:	48 83 c0 01          	add    $0x1,%rax
ffffffff80002f84:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff80002f87:	75 e7                	jne    ffffffff80002f70 <_vsnprintf+0x430>
ffffffff80002f89:	44 29 c8             	sub    %r9d,%eax
ffffffff80002f8c:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (flags & FLAGS_PRECISION) {
ffffffff80002f90:	89 c8                	mov    %ecx,%eax
ffffffff80002f92:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80002f97:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff80002f9b:	74 0f                	je     ffffffff80002fac <_vsnprintf+0x46c>
          l = (l < precision ? l : precision);
ffffffff80002f9d:	8b 44 24 20          	mov    0x20(%rsp),%eax
ffffffff80002fa1:	44 39 d0             	cmp    %r10d,%eax
ffffffff80002fa4:	41 0f 47 c2          	cmova  %r10d,%eax
ffffffff80002fa8:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002fac:	83 e1 02             	and    $0x2,%ecx
ffffffff80002faf:	89 4c 24 24          	mov    %ecx,0x24(%rsp)
ffffffff80002fb3:	0f 84 0e 02 00 00    	je     ffffffff800031c7 <_vsnprintf+0x687>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002fb9:	40 84 ff             	test   %dil,%dil
ffffffff80002fbc:	0f 84 94 00 00 00    	je     ffffffff80003056 <_vsnprintf+0x516>
ffffffff80002fc2:	49 29 d9             	sub    %rbx,%r9
ffffffff80002fc5:	44 89 64 24 28       	mov    %r12d,0x28(%rsp)
ffffffff80002fca:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff80002fcf:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
ffffffff80002fd4:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80002fd9:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
ffffffff80002fde:	49 89 dd             	mov    %rbx,%r13
ffffffff80002fe1:	eb 27                	jmp    ffffffff8000300a <_vsnprintf+0x4ca>
ffffffff80002fe3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002fe8:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002feb:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002fee:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002ff1:	ff d5                	callq  *%rbp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002ff3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002ff8:	49 8d 5d 01          	lea    0x1(%r13),%rbx
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002ffc:	41 0f be 7c 05 01    	movsbl 0x1(%r13,%rax,1),%edi
ffffffff80003002:	40 84 ff             	test   %dil,%dil
ffffffff80003005:	74 39                	je     ffffffff80003040 <_vsnprintf+0x500>
          out(*(p++), buffer, idx++, maxlen);
ffffffff80003007:	49 89 dd             	mov    %rbx,%r13
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff8000300a:	45 85 e4             	test   %r12d,%r12d
ffffffff8000300d:	74 d9                	je     ffffffff80002fe8 <_vsnprintf+0x4a8>
ffffffff8000300f:	8b 44 24 10          	mov    0x10(%rsp),%eax
ffffffff80003013:	85 c0                	test   %eax,%eax
ffffffff80003015:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80003018:	0f 84 68 02 00 00    	je     ffffffff80003286 <_vsnprintf+0x746>
ffffffff8000301e:	89 54 24 10          	mov    %edx,0x10(%rsp)
ffffffff80003022:	eb c4                	jmp    ffffffff80002fe8 <_vsnprintf+0x4a8>
ffffffff80003024:	bf 10 00 00 00       	mov    $0x10,%edi
ffffffff80003029:	e9 a8 fd ff ff       	jmpq   ffffffff80002dd6 <_vsnprintf+0x296>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000302e:	4c 89 c3             	mov    %r8,%rbx
ffffffff80003031:	e9 38 fb ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
ffffffff80003036:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000303d:	00 00 00 
ffffffff80003040:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff80003045:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
        if (flags & FLAGS_LEFT) {
ffffffff8000304a:	8b 44 24 24          	mov    0x24(%rsp),%eax
ffffffff8000304e:	85 c0                	test   %eax,%eax
ffffffff80003050:	0f 84 18 fb ff ff    	je     ffffffff80002b6e <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80003056:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff8000305a:	41 39 cc             	cmp    %ecx,%r12d
ffffffff8000305d:	0f 86 0b fb ff ff    	jbe    ffffffff80002b6e <_vsnprintf+0x2e>
ffffffff80003063:	41 83 ec 01          	sub    $0x1,%r12d
ffffffff80003067:	48 89 da             	mov    %rbx,%rdx
ffffffff8000306a:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff8000306f:	44 89 e0             	mov    %r12d,%eax
ffffffff80003072:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80003076:	29 c8                	sub    %ecx,%eax
ffffffff80003078:	4c 01 e0             	add    %r12,%rax
ffffffff8000307b:	4d 89 e5             	mov    %r12,%r13
ffffffff8000307e:	48 89 c3             	mov    %rax,%rbx
ffffffff80003081:	eb 09                	jmp    ffffffff8000308c <_vsnprintf+0x54c>
ffffffff80003083:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80003088:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000308c:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000308f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003092:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003097:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80003099:	49 39 dd             	cmp    %rbx,%r13
ffffffff8000309c:	4c 89 ea             	mov    %r13,%rdx
ffffffff8000309f:	75 e7                	jne    ffffffff80003088 <_vsnprintf+0x548>
ffffffff800030a1:	4c 89 eb             	mov    %r13,%rbx
ffffffff800030a4:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
        break;
ffffffff800030a9:	e9 c0 fa ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
  for (s = str; *s && maxsize--; ++s);
ffffffff800030ae:	40 84 ff             	test   %dil,%dil
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff800030b1:	44 89 d6             	mov    %r10d,%esi
  for (s = str; *s && maxsize--; ++s);
ffffffff800030b4:	0f 84 68 02 00 00    	je     ffffffff80003322 <_vsnprintf+0x7e2>
ffffffff800030ba:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff800030be:	e9 a7 fe ff ff       	jmpq   ffffffff80002f6a <_vsnprintf+0x42a>
          if (flags & FLAGS_LONG_LONG) {
ffffffff800030c3:	85 f6                	test   %esi,%esi
ffffffff800030c5:	0f 85 bd 03 00 00    	jne    ffffffff80003488 <_vsnprintf+0x948>
          else if (flags & FLAGS_LONG) {
ffffffff800030cb:	f6 c5 01             	test   $0x1,%ch
ffffffff800030ce:	0f 85 7e 03 00 00    	jne    ffffffff80003452 <_vsnprintf+0x912>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff800030d4:	f6 c1 40             	test   $0x40,%cl
ffffffff800030d7:	0f 84 1b 02 00 00    	je     ffffffff800032f8 <_vsnprintf+0x7b8>
ffffffff800030dd:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800030e0:	0f 87 b1 02 00 00    	ja     ffffffff80003397 <_vsnprintf+0x857>
ffffffff800030e6:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800030ea:	89 d0                	mov    %edx,%eax
ffffffff800030ec:	83 c2 08             	add    $0x8,%edx
ffffffff800030ef:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800030f3:	89 16                	mov    %edx,(%rsi)
ffffffff800030f5:	44 0f be 08          	movsbl (%rax),%r9d
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff800030f9:	44 89 c8             	mov    %r9d,%eax
ffffffff800030fc:	51                   	push   %rcx
ffffffff800030fd:	41 54                	push   %r12
ffffffff800030ff:	c1 f8 1f             	sar    $0x1f,%eax
ffffffff80003102:	41 52                	push   %r10
ffffffff80003104:	57                   	push   %rdi
ffffffff80003105:	41 89 c0             	mov    %eax,%r8d
ffffffff80003108:	45 31 c8             	xor    %r9d,%r8d
ffffffff8000310b:	41 c1 e9 1f          	shr    $0x1f,%r9d
ffffffff8000310f:	41 29 c0             	sub    %eax,%r8d
ffffffff80003112:	4d 63 c0             	movslq %r8d,%r8
ffffffff80003115:	e9 38 fd ff ff       	jmpq   ffffffff80002e52 <_vsnprintf+0x312>
          flags |= FLAGS_UPPERCASE;
ffffffff8000311a:	83 c9 20             	or     $0x20,%ecx
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ffffffff8000311d:	83 e1 f3             	and    $0xfffffff3,%ecx
ffffffff80003120:	e9 c5 fc ff ff       	jmpq   ffffffff80002dea <_vsnprintf+0x2aa>
ffffffff80003125:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_LONG_LONG;
ffffffff8000312a:	80 cd 03             	or     $0x3,%ch
ffffffff8000312d:	49 83 c5 03          	add    $0x3,%r13
ffffffff80003131:	e9 2e fb ff ff       	jmpq   ffffffff80002c64 <_vsnprintf+0x124>
ffffffff80003136:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_CHAR;
ffffffff8000313b:	80 c9 c0             	or     $0xc0,%cl
ffffffff8000313e:	49 83 c5 03          	add    $0x3,%r13
ffffffff80003142:	e9 1d fb ff ff       	jmpq   ffffffff80002c64 <_vsnprintf+0x124>
          while (l++ < width) {
ffffffff80003147:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff8000314b:	0f 86 de 01 00 00    	jbe    ffffffff8000332f <_vsnprintf+0x7ef>
ffffffff80003151:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
ffffffff80003156:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
ffffffff8000315b:	4d 89 c5             	mov    %r8,%r13
ffffffff8000315e:	4c 01 c0             	add    %r8,%rax
ffffffff80003161:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80003166:	eb 0f                	jmp    ffffffff80003177 <_vsnprintf+0x637>
ffffffff80003168:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000316f:	00 
ffffffff80003170:	4c 89 eb             	mov    %r13,%rbx
ffffffff80003173:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80003177:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000317a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000317d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003180:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003185:	4d 89 ec             	mov    %r13,%r12
ffffffff80003188:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff8000318a:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff8000318f:	75 df                	jne    ffffffff80003170 <_vsnprintf+0x630>
ffffffff80003191:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
ffffffff80003196:	48 83 c3 02          	add    $0x2,%rbx
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000319a:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff8000319e:	8b 01                	mov    (%rcx),%eax
ffffffff800031a0:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff800031a3:	0f 87 d9 01 00 00    	ja     ffffffff80003382 <_vsnprintf+0x842>
ffffffff800031a9:	89 c2                	mov    %eax,%edx
ffffffff800031ab:	48 03 51 10          	add    0x10(%rcx),%rdx
ffffffff800031af:	83 c0 08             	add    $0x8,%eax
ffffffff800031b2:	89 01                	mov    %eax,(%rcx)
ffffffff800031b4:	0f be 3a             	movsbl (%rdx),%edi
ffffffff800031b7:	4c 89 f1             	mov    %r14,%rcx
ffffffff800031ba:	4c 89 e2             	mov    %r12,%rdx
ffffffff800031bd:	4c 89 fe             	mov    %r15,%rsi
ffffffff800031c0:	ff d5                	callq  *%rbp
ffffffff800031c2:	e9 a7 f9 ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff800031c7:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff800031cb:	41 39 cc             	cmp    %ecx,%r12d
ffffffff800031ce:	8d 41 01             	lea    0x1(%rcx),%eax
ffffffff800031d1:	0f 86 63 01 00 00    	jbe    ffffffff8000333a <_vsnprintf+0x7fa>
ffffffff800031d7:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
ffffffff800031dc:	4c 8d 43 01          	lea    0x1(%rbx),%r8
ffffffff800031e0:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
ffffffff800031e5:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
ffffffff800031ea:	48 89 da             	mov    %rbx,%rdx
ffffffff800031ed:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff800031f2:	29 c8                	sub    %ecx,%eax
ffffffff800031f4:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff800031f9:	4d 89 c5             	mov    %r8,%r13
ffffffff800031fc:	4c 01 c0             	add    %r8,%rax
ffffffff800031ff:	49 89 c4             	mov    %rax,%r12
ffffffff80003202:	eb 08                	jmp    ffffffff8000320c <_vsnprintf+0x6cc>
ffffffff80003204:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80003208:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000320c:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000320f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003212:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003217:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80003219:	4d 39 e5             	cmp    %r12,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000321c:	4c 89 eb             	mov    %r13,%rbx
ffffffff8000321f:	4c 89 ea             	mov    %r13,%rdx
          while (l++ < width) {
ffffffff80003222:	75 e4                	jne    ffffffff80003208 <_vsnprintf+0x6c8>
ffffffff80003224:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
ffffffff80003229:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
ffffffff8000322e:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
ffffffff80003233:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffffff80003238:	41 0f be 39          	movsbl (%r9),%edi
ffffffff8000323c:	41 8d 44 24 01       	lea    0x1(%r12),%eax
ffffffff80003241:	89 44 24 20          	mov    %eax,0x20(%rsp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80003245:	40 84 ff             	test   %dil,%dil
ffffffff80003248:	0f 85 74 fd ff ff    	jne    ffffffff80002fc2 <_vsnprintf+0x482>
ffffffff8000324e:	e9 1b f9 ff ff       	jmpq   ffffffff80002b6e <_vsnprintf+0x2e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80003253:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003256:	0f 87 97 01 00 00    	ja     ffffffff800033f3 <_vsnprintf+0x8b3>
ffffffff8000325c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003260:	89 d0                	mov    %edx,%eax
ffffffff80003262:	83 c2 08             	add    $0x8,%edx
ffffffff80003265:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003269:	89 16                	mov    %edx,(%rsi)
ffffffff8000326b:	51                   	push   %rcx
ffffffff8000326c:	45 31 c9             	xor    %r9d,%r9d
ffffffff8000326f:	41 54                	push   %r12
ffffffff80003271:	41 52                	push   %r10
ffffffff80003273:	57                   	push   %rdi
ffffffff80003274:	4c 8b 00             	mov    (%rax),%r8
ffffffff80003277:	e9 4e fa ff ff       	jmpq   ffffffff80002cca <_vsnprintf+0x18a>
ffffffff8000327c:	bf 08 00 00 00       	mov    $0x8,%edi
ffffffff80003281:	e9 97 fe ff ff       	jmpq   ffffffff8000311d <_vsnprintf+0x5dd>
ffffffff80003286:	4c 89 e8             	mov    %r13,%rax
ffffffff80003289:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff8000328e:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
ffffffff80003293:	48 89 c3             	mov    %rax,%rbx
ffffffff80003296:	e9 af fd ff ff       	jmpq   ffffffff8000304a <_vsnprintf+0x50a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000329b:	f6 c1 80             	test   $0x80,%cl
ffffffff8000329e:	0f 84 8e 01 00 00    	je     ffffffff80003432 <_vsnprintf+0x8f2>
ffffffff800032a4:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800032a7:	0f 87 70 01 00 00    	ja     ffffffff8000341d <_vsnprintf+0x8dd>
ffffffff800032ad:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032b1:	89 d0                	mov    %edx,%eax
ffffffff800032b3:	83 c2 08             	add    $0x8,%edx
ffffffff800032b6:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800032ba:	89 16                	mov    %edx,(%rsi)
ffffffff800032bc:	44 0f b7 00          	movzwl (%rax),%r8d
ffffffff800032c0:	e9 84 fb ff ff       	jmpq   ffffffff80002e49 <_vsnprintf+0x309>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff800032c5:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800032c8:	0f 87 8a 00 00 00    	ja     ffffffff80003358 <_vsnprintf+0x818>
ffffffff800032ce:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032d2:	89 d0                	mov    %edx,%eax
ffffffff800032d4:	83 c2 08             	add    $0x8,%edx
ffffffff800032d7:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800032db:	89 16                	mov    %edx,(%rsi)
ffffffff800032dd:	51                   	push   %rcx
ffffffff800032de:	45 31 c9             	xor    %r9d,%r9d
ffffffff800032e1:	41 54                	push   %r12
ffffffff800032e3:	41 52                	push   %r10
ffffffff800032e5:	57                   	push   %rdi
ffffffff800032e6:	4c 8b 00             	mov    (%rax),%r8
ffffffff800032e9:	e9 64 fb ff ff       	jmpq   ffffffff80002e52 <_vsnprintf+0x312>
ffffffff800032ee:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff800032f3:	e9 25 fe ff ff       	jmpq   ffffffff8000311d <_vsnprintf+0x5dd>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff800032f8:	f6 c1 80             	test   $0x80,%cl
ffffffff800032fb:	0f 84 56 02 00 00    	je     ffffffff80003557 <_vsnprintf+0xa17>
ffffffff80003301:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003304:	0f 87 38 02 00 00    	ja     ffffffff80003542 <_vsnprintf+0xa02>
ffffffff8000330a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000330e:	89 d0                	mov    %edx,%eax
ffffffff80003310:	83 c2 08             	add    $0x8,%edx
ffffffff80003313:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003317:	89 16                	mov    %edx,(%rsi)
ffffffff80003319:	44 0f bf 08          	movswl (%rax),%r9d
ffffffff8000331d:	e9 d7 fd ff ff       	jmpq   ffffffff800030f9 <_vsnprintf+0x5b9>
  for (s = str; *s && maxsize--; ++s);
ffffffff80003322:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
ffffffff80003329:	00 
ffffffff8000332a:	e9 61 fc ff ff       	jmpq   ffffffff80002f90 <_vsnprintf+0x450>
          while (l++ < width) {
ffffffff8000332f:	49 89 dc             	mov    %rbx,%r12
ffffffff80003332:	4c 89 c3             	mov    %r8,%rbx
ffffffff80003335:	e9 60 fe ff ff       	jmpq   ffffffff8000319a <_vsnprintf+0x65a>
          while (l++ < width) {
ffffffff8000333a:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff8000333e:	e9 02 ff ff ff       	jmpq   ffffffff80003245 <_vsnprintf+0x705>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003343:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003347:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff8000334b:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff8000334f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003353:	e9 c2 f9 ff ff       	jmpq   ffffffff80002d1a <_vsnprintf+0x1da>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80003358:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000335c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003360:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003364:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003368:	e9 70 ff ff ff       	jmpq   ffffffff800032dd <_vsnprintf+0x79d>
        const char* p = va_arg(va, char*);
ffffffff8000336d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003371:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003375:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003379:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000337d:	e9 c8 fb ff ff       	jmpq   ffffffff80002f4a <_vsnprintf+0x40a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003382:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff80003386:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff8000338a:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff8000338e:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80003392:	e9 1d fe ff ff       	jmpq   ffffffff800031b4 <_vsnprintf+0x674>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003397:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000339b:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000339f:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033a3:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800033a7:	e9 49 fd ff ff       	jmpq   ffffffff800030f5 <_vsnprintf+0x5b5>
      const int w = va_arg(va, int);
ffffffff800033ac:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff800033b0:	8b 17                	mov    (%rdi),%edx
ffffffff800033b2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800033b5:	77 2a                	ja     ffffffff800033e1 <_vsnprintf+0x8a1>
ffffffff800033b7:	89 d0                	mov    %edx,%eax
ffffffff800033b9:	48 03 47 10          	add    0x10(%rdi),%rax
ffffffff800033bd:	83 c2 08             	add    $0x8,%edx
ffffffff800033c0:	89 17                	mov    %edx,(%rdi)
ffffffff800033c2:	44 8b 20             	mov    (%rax),%r12d
      if (w < 0) {
ffffffff800033c5:	45 85 e4             	test   %r12d,%r12d
ffffffff800033c8:	79 06                	jns    ffffffff800033d0 <_vsnprintf+0x890>
        flags |= FLAGS_LEFT;    // reverse padding
ffffffff800033ca:	83 c9 02             	or     $0x2,%ecx
        width = (unsigned int)-w;
ffffffff800033cd:	41 f7 dc             	neg    %r12d
ffffffff800033d0:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff800033d5:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff800033d9:	49 89 f5             	mov    %rsi,%r13
ffffffff800033dc:	e9 c9 fa ff ff       	jmpq   ffffffff80002eaa <_vsnprintf+0x36a>
      const int w = va_arg(va, int);
ffffffff800033e1:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff800033e5:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff800033e9:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033ed:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff800033f1:	eb cf                	jmp    ffffffff800033c2 <_vsnprintf+0x882>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff800033f3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033f7:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033fb:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033ff:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003403:	e9 63 fe ff ff       	jmpq   ffffffff8000326b <_vsnprintf+0x72b>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003408:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000340c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003410:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003414:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003418:	e9 28 fa ff ff       	jmpq   ffffffff80002e45 <_vsnprintf+0x305>
ffffffff8000341d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003421:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003425:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003429:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000342d:	e9 8a fe ff ff       	jmpq   ffffffff800032bc <_vsnprintf+0x77c>
ffffffff80003432:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003435:	0f 87 83 00 00 00    	ja     ffffffff800034be <_vsnprintf+0x97e>
ffffffff8000343b:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000343f:	89 d0                	mov    %edx,%eax
ffffffff80003441:	83 c2 08             	add    $0x8,%edx
ffffffff80003444:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003448:	89 16                	mov    %edx,(%rsi)
ffffffff8000344a:	44 8b 00             	mov    (%rax),%r8d
ffffffff8000344d:	e9 f7 f9 ff ff       	jmpq   ffffffff80002e49 <_vsnprintf+0x309>
            const long value = va_arg(va, long);
ffffffff80003452:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003455:	77 7c                	ja     ffffffff800034d3 <_vsnprintf+0x993>
ffffffff80003457:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000345b:	89 d0                	mov    %edx,%eax
ffffffff8000345d:	83 c2 08             	add    $0x8,%edx
ffffffff80003460:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003464:	89 16                	mov    %edx,(%rsi)
ffffffff80003466:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80003469:	51                   	push   %rcx
ffffffff8000346a:	41 54                	push   %r12
ffffffff8000346c:	41 52                	push   %r10
ffffffff8000346e:	57                   	push   %rdi
ffffffff8000346f:	4c 89 c8             	mov    %r9,%rax
ffffffff80003472:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff80003476:	49 89 c0             	mov    %rax,%r8
ffffffff80003479:	4d 31 c8             	xor    %r9,%r8
ffffffff8000347c:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003480:	49 29 c0             	sub    %rax,%r8
ffffffff80003483:	e9 ca f9 ff ff       	jmpq   ffffffff80002e52 <_vsnprintf+0x312>
            const long long value = va_arg(va, long long);
ffffffff80003488:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff8000348b:	77 58                	ja     ffffffff800034e5 <_vsnprintf+0x9a5>
ffffffff8000348d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003491:	89 d0                	mov    %edx,%eax
ffffffff80003493:	83 c2 08             	add    $0x8,%edx
ffffffff80003496:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000349a:	89 16                	mov    %edx,(%rsi)
ffffffff8000349c:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff8000349f:	51                   	push   %rcx
ffffffff800034a0:	41 54                	push   %r12
ffffffff800034a2:	41 52                	push   %r10
ffffffff800034a4:	57                   	push   %rdi
ffffffff800034a5:	4c 89 c8             	mov    %r9,%rax
ffffffff800034a8:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff800034ac:	49 89 c0             	mov    %rax,%r8
ffffffff800034af:	4d 31 c8             	xor    %r9,%r8
ffffffff800034b2:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff800034b6:	49 29 c0             	sub    %rax,%r8
ffffffff800034b9:	e9 0c f8 ff ff       	jmpq   ffffffff80002cca <_vsnprintf+0x18a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff800034be:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800034c2:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800034c6:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800034ca:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800034ce:	e9 77 ff ff ff       	jmpq   ffffffff8000344a <_vsnprintf+0x90a>
            const long value = va_arg(va, long);
ffffffff800034d3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800034d7:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800034db:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800034df:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800034e3:	eb 81                	jmp    ffffffff80003466 <_vsnprintf+0x926>
            const long long value = va_arg(va, long long);
ffffffff800034e5:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800034e9:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800034ed:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800034f1:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800034f5:	eb a5                	jmp    ffffffff8000349c <_vsnprintf+0x95c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff800034f7:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800034fb:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff800034ff:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80003503:	48 89 46 08          	mov    %rax,0x8(%rsi)
ffffffff80003507:	e9 b1 f7 ff ff       	jmpq   ffffffff80002cbd <_vsnprintf+0x17d>
        const int prec = (int)va_arg(va, int);
ffffffff8000350c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003510:	8b 16                	mov    (%rsi),%edx
ffffffff80003512:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003515:	77 5c                	ja     ffffffff80003573 <_vsnprintf+0xa33>
ffffffff80003517:	89 d0                	mov    %edx,%eax
ffffffff80003519:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000351d:	83 c2 08             	add    $0x8,%edx
ffffffff80003520:	89 16                	mov    %edx,(%rsi)
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff80003522:	8b 10                	mov    (%rax),%edx
ffffffff80003524:	41 ba 00 00 00 00    	mov    $0x0,%r10d
ffffffff8000352a:	49 8d 7d 03          	lea    0x3(%r13),%rdi
ffffffff8000352e:	85 d2                	test   %edx,%edx
ffffffff80003530:	44 0f 49 10          	cmovns (%rax),%r10d
ffffffff80003534:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
        format++;
ffffffff80003539:	49 83 c5 02          	add    $0x2,%r13
ffffffff8000353d:	e9 00 f7 ff ff       	jmpq   ffffffff80002c42 <_vsnprintf+0x102>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003542:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003546:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000354a:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000354e:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003552:	e9 c2 fd ff ff       	jmpq   ffffffff80003319 <_vsnprintf+0x7d9>
ffffffff80003557:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff8000355a:	77 29                	ja     ffffffff80003585 <_vsnprintf+0xa45>
ffffffff8000355c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003560:	89 d0                	mov    %edx,%eax
ffffffff80003562:	83 c2 08             	add    $0x8,%edx
ffffffff80003565:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003569:	89 16                	mov    %edx,(%rsi)
ffffffff8000356b:	44 8b 08             	mov    (%rax),%r9d
ffffffff8000356e:	e9 86 fb ff ff       	jmpq   ffffffff800030f9 <_vsnprintf+0x5b9>
        const int prec = (int)va_arg(va, int);
ffffffff80003573:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003577:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000357b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000357f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003583:	eb 9d                	jmp    ffffffff80003522 <_vsnprintf+0x9e2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003585:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003589:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000358d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003591:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003595:	eb d4                	jmp    ffffffff8000356b <_vsnprintf+0xa2b>
ffffffff80003597:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000359e:	00 00 

ffffffff800035a0 <_out_char>:
  if (character) {
ffffffff800035a0:	40 84 ff             	test   %dil,%dil
ffffffff800035a3:	75 0b                	jne    ffffffff800035b0 <_out_char+0x10>
}
ffffffff800035a5:	f3 c3                	repz retq 
ffffffff800035a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800035ae:	00 00 
    _putchar(character);
ffffffff800035b0:	40 0f be ff          	movsbl %dil,%edi
ffffffff800035b4:	e9 c7 01 00 00       	jmpq   ffffffff80003780 <_putchar>
ffffffff800035b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800035c0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
ffffffff800035c0:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff800035c4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff800035c9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
ffffffff800035ce:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800035d3:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
ffffffff800035d8:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff800035dd:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  va_start(va, format);
ffffffff800035e2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800035e7:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
{
ffffffff800035ec:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800035f1:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff800035f8:	48 89 f9             	mov    %rdi,%rcx
ffffffff800035fb:	48 c7 c7 a0 35 00 80 	mov    $0xffffffff800035a0,%rdi
{
ffffffff80003602:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003607:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
ffffffff8000360e:	00 
ffffffff8000360f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80003614:	e8 27 f5 ff ff       	callq  ffffffff80002b40 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80003619:	48 83 c4 58          	add    $0x58,%rsp
ffffffff8000361d:	c3                   	retq   
ffffffff8000361e:	66 90                	xchg   %ax,%ax

ffffffff80003620 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
ffffffff80003620:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003624:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003629:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000362e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80003633:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffffff80003638:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000363d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff80003644:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003649:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000364e:	48 89 f1             	mov    %rsi,%rcx
ffffffff80003651:	48 89 fe             	mov    %rdi,%rsi
ffffffff80003654:	48 c7 c7 10 25 00 80 	mov    $0xffffffff80002510,%rdi
{
ffffffff8000365b:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003660:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff80003667:	00 
ffffffff80003668:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff8000366d:	e8 ce f4 ff ff       	callq  ffffffff80002b40 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80003672:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80003676:	c3                   	retq   
ffffffff80003677:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000367e:	00 00 

ffffffff80003680 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
ffffffff80003680:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003684:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003689:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff8000368e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80003693:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003698:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000369b:	48 89 f2             	mov    %rsi,%rdx
  va_start(va, format);
ffffffff8000369e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800036a3:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff800036a8:	48 89 fe             	mov    %rdi,%rsi
ffffffff800036ab:	48 c7 c7 10 25 00 80 	mov    $0xffffffff80002510,%rdi
{
ffffffff800036b2:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff800036b7:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%rsp)
ffffffff800036be:	00 
ffffffff800036bf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff800036c4:	e8 77 f4 ff ff       	callq  ffffffff80002b40 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff800036c9:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800036cd:	c3                   	retq   
ffffffff800036ce:	66 90                	xchg   %ax,%ax

ffffffff800036d0 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
ffffffff800036d0:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800036d4:	49 89 f0             	mov    %rsi,%r8
ffffffff800036d7:	48 89 f9             	mov    %rdi,%rcx
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800036da:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
ffffffff800036df:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff800036e6:	48 c7 c7 a0 35 00 80 	mov    $0xffffffff800035a0,%rdi
ffffffff800036ed:	e8 4e f4 ff ff       	callq  ffffffff80002b40 <_vsnprintf>
}
ffffffff800036f2:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800036f6:	c3                   	retq   
ffffffff800036f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800036fe:	00 00 

ffffffff80003700 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
ffffffff80003700:	49 89 c8             	mov    %rcx,%r8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003703:	48 89 d1             	mov    %rdx,%rcx
ffffffff80003706:	48 89 f2             	mov    %rsi,%rdx
ffffffff80003709:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000370c:	48 c7 c7 10 25 00 80 	mov    $0xffffffff80002510,%rdi
ffffffff80003713:	e9 28 f4 ff ff       	jmpq   ffffffff80002b40 <_vsnprintf>
ffffffff80003718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000371f:	00 

ffffffff80003720 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
ffffffff80003720:	48 83 ec 68          	sub    $0x68,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003724:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
{
ffffffff80003729:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff8000372e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003733:	4c 8d 44 24 18       	lea    0x18(%rsp),%r8
ffffffff80003738:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
{
ffffffff8000373d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  va_start(va, format);
ffffffff80003742:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff80003747:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff8000374c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003751:	48 89 d1             	mov    %rdx,%rcx
ffffffff80003754:	48 c7 c7 30 25 00 80 	mov    $0xffffffff80002530,%rdi
ffffffff8000375b:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff80003762:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
  va_start(va, format);
ffffffff80003767:	c7 44 24 18 18 00 00 	movl   $0x18,0x18(%rsp)
ffffffff8000376e:	00 
ffffffff8000376f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003774:	e8 c7 f3 ff ff       	callq  ffffffff80002b40 <_vsnprintf>
  va_end(va);
  return ret;
ffffffff80003779:	48 83 c4 68          	add    $0x68,%rsp
ffffffff8000377d:	c3                   	retq   
ffffffff8000377e:	66 90                	xchg   %ax,%ax

ffffffff80003780 <_putchar>:
#include "../device/console/console.h"

void _putchar(char character)
{
    
    putchar(character);
ffffffff80003780:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80003784:	e9 07 e3 ff ff       	jmpq   ffffffff80001a90 <putchar>
ffffffff80003789:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003790 <serial_printf>:
    
    //serial_write(0x3F8, character);
}

void serial_printf(uint16_t port, const char* format, ...)
{
ffffffff80003790:	53                   	push   %rbx
ffffffff80003791:	89 fb                	mov    %edi,%ebx
ffffffff80003793:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    char buffer[64];

    va_list argptr;
    va_start(argptr, format);
ffffffff8000379a:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
ffffffff800037a1:	00 
{
ffffffff800037a2:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff800037a7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
ffffffff800037ac:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
{
ffffffff800037b1:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff800037b6:	48 89 f2             	mov    %rsi,%rdx
    va_start(argptr, format);
ffffffff800037b9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800037be:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
    vsnprintf(buffer, 64, format, argptr);
ffffffff800037c3:	be 40 00 00 00       	mov    $0x40,%esi
{
ffffffff800037c8:	4c 89 84 24 80 00 00 	mov    %r8,0x80(%rsp)
ffffffff800037cf:	00 
ffffffff800037d0:	4c 89 8c 24 88 00 00 	mov    %r9,0x88(%rsp)
ffffffff800037d7:	00 
    va_start(argptr, format);
ffffffff800037d8:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff800037df:	00 
ffffffff800037e0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff800037e5:	e8 16 ff ff ff       	callq  ffffffff80003700 <vsnprintf_>
    va_end(argptr);

    serial_write_str(port, buffer);
ffffffff800037ea:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff800037ef:	0f b7 fb             	movzwl %bx,%edi
ffffffff800037f2:	e8 b9 e8 ff ff       	callq  ffffffff800020b0 <serial_write_str>
ffffffff800037f7:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
ffffffff800037fe:	5b                   	pop    %rbx
ffffffff800037ff:	c3                   	retq   

ffffffff80003800 <print_gdt>:
uint8_t ist2[4096];

void print_gdt()
{

}
ffffffff80003800:	f3 c3                	repz retq 
ffffffff80003802:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80003809:	00 00 00 00 
ffffffff8000380d:	0f 1f 00             	nopl   (%rax)

ffffffff80003810 <gdt_init>:

void gdt_init()
{
    gdt.null0.raw = 0x00;
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80003810:	48 b8 ff ff 00 00 00 	movabs $0xaf9a000000ffff,%rax
ffffffff80003817:	9a af 00 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);

    gdtr.base = (uint64_t)&gdt;
    gdtr.limit = sizeof(gdt);

    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff8000381a:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff8000381f:	48 c7 c7 20 25 01 80 	mov    $0xffffffff80012520,%rdi
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff80003826:	48 89 05 9b ed 00 00 	mov    %rax,0xed9b(%rip)        # ffffffff800125c8 <gdt+0x8>
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff8000382d:	48 b8 ff ff 00 00 00 	movabs $0xaf92000000ffff,%rax
ffffffff80003834:	92 af 00 
    gdt.null0.raw = 0x00;
ffffffff80003837:	48 c7 05 7e ed 00 00 	movq   $0x0,0xed7e(%rip)        # ffffffff800125c0 <gdt>
ffffffff8000383e:	00 00 00 00 
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff80003842:	48 89 05 87 ed 00 00 	mov    %rax,0xed87(%rip)        # ffffffff800125d0 <gdt+0x10>
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff80003849:	48 b8 ff ff 00 00 00 	movabs $0xaffa000000ffff,%rax
ffffffff80003850:	fa af 00 
    gdt.null1.raw = 0x00;
ffffffff80003853:	48 c7 05 7a ed 00 00 	movq   $0x0,0xed7a(%rip)        # ffffffff800125d8 <gdt+0x18>
ffffffff8000385a:	00 00 00 00 
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff8000385e:	48 89 05 83 ed 00 00 	mov    %rax,0xed83(%rip)        # ffffffff800125e8 <gdt+0x28>
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff80003865:	48 b8 ff ff 00 00 00 	movabs $0xaff2000000ffff,%rax
ffffffff8000386c:	f2 af 00 
    gdt.null2.raw = 0x00;
ffffffff8000386f:	48 c7 05 76 ed 00 00 	movq   $0x0,0xed76(%rip)        # ffffffff800125f0 <gdt+0x30>
ffffffff80003876:	00 00 00 00 
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff8000387a:	48 89 05 5f ed 00 00 	mov    %rax,0xed5f(%rip)        # ffffffff800125e0 <gdt+0x20>
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003881:	48 c7 c0 40 25 01 80 	mov    $0xffffffff80012540,%rax
    gdt.null3.raw = 0x00;
ffffffff80003888:	48 c7 05 65 ed 00 00 	movq   $0x0,0xed65(%rip)        # ffffffff800125f8 <gdt+0x38>
ffffffff8000388f:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003893:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003896:	66 89 05 75 ed 00 00 	mov    %ax,0xed75(%rip)        # ffffffff80012612 <gdt+0x52>
    gdt.null4.raw = 0x00;
ffffffff8000389d:	48 c7 05 58 ed 00 00 	movq   $0x0,0xed58(%rip)        # ffffffff80012600 <gdt+0x40>
ffffffff800038a4:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff800038a8:	48 c1 ea 10          	shr    $0x10,%rdx
    gdt.null5.raw = 0x00;
ffffffff800038ac:	48 c7 05 51 ed 00 00 	movq   $0x0,0xed51(%rip)        # ffffffff80012608 <gdt+0x48>
ffffffff800038b3:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff800038b7:	c6 05 57 ed 00 00 89 	movb   $0x89,0xed57(%rip)        # ffffffff80012615 <gdt+0x55>
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff800038be:	88 15 50 ed 00 00    	mov    %dl,0xed50(%rip)        # ffffffff80012614 <gdt+0x54>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800038c4:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff800038c7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff800038cb:	89 05 47 ed 00 00    	mov    %eax,0xed47(%rip)        # ffffffff80012618 <gdt+0x58>
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff800038d1:	b8 68 00 00 00       	mov    $0x68,%eax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800038d6:	48 c1 ea 18          	shr    $0x18,%rdx
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff800038da:	66 89 05 2f ed 00 00 	mov    %ax,0xed2f(%rip)        # ffffffff80012610 <gdt+0x50>
    gdt.tss_entry.reserved0 = 0;
ffffffff800038e1:	0f b6 05 2e ed 00 00 	movzbl 0xed2e(%rip),%eax        # ffffffff80012616 <gdt+0x56>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff800038e8:	88 15 29 ed 00 00    	mov    %dl,0xed29(%rip)        # ffffffff80012617 <gdt+0x57>
    gdtr.limit = sizeof(gdt);
ffffffff800038ee:	ba 60 00 00 00       	mov    $0x60,%edx
    gdt.tss_entry.reserved1 = 0;
ffffffff800038f3:	c7 05 1f ed 00 00 00 	movl   $0x0,0xed1f(%rip)        # ffffffff8001261c <gdt+0x5c>
ffffffff800038fa:	00 00 00 
    tss.reserved0 = 0x00;
ffffffff800038fd:	c7 05 39 ec 00 00 00 	movl   $0x0,0xec39(%rip)        # ffffffff80012540 <tss>
ffffffff80003904:	00 00 00 
    tss.RSP0 = (uint64_t)stack + sizeof(stack);
ffffffff80003907:	48 c7 05 32 ec 00 00 	movq   $0xffffffff8000a820,0xec32(%rip)        # ffffffff80012544 <tss+0x4>
ffffffff8000390e:	20 a8 00 80 
    tss.RSP2 = (uint64_t)rsp2stack + sizeof(rsp2stack);
ffffffff80003912:	48 c7 05 37 ec 00 00 	movq   $0xffffffff8000e4c0,0xec37(%rip)        # ffffffff80012554 <tss+0x14>
ffffffff80003919:	c0 e4 00 80 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);
ffffffff8000391d:	48 c7 05 3c ec 00 00 	movq   $0xffffffff800104c0,0xec3c(%rip)        # ffffffff80012564 <tss+0x24>
ffffffff80003924:	c0 04 01 80 
    gdt.tss_entry.reserved0 = 0;
ffffffff80003928:	83 e0 40             	and    $0x40,%eax
    gdtr.base = (uint64_t)&gdt;
ffffffff8000392b:	48 c7 05 ec eb 00 00 	movq   $0xffffffff800125c0,0xebec(%rip)        # ffffffff80012522 <gdtr+0x2>
ffffffff80003932:	c0 25 01 80 
    gdtr.limit = sizeof(gdt);
ffffffff80003936:	66 89 15 e3 eb 00 00 	mov    %dx,0xebe3(%rip)        # ffffffff80012520 <gdtr>
    gdt.tss_entry.reserved0 = 0;
ffffffff8000393d:	88 05 d3 ec 00 00    	mov    %al,0xecd3(%rip)        # ffffffff80012616 <gdt+0x56>
    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff80003943:	e9 68 c7 ff ff       	jmpq   ffffffff800000b0 <gdt_load>
ffffffff80003948:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000394f:	00 

ffffffff80003950 <load_elf>:
//#include <memory.h>

uint64_t load_elf(void* ptr)
{

ffffffff80003950:	f3 c3                	repz retq 
ffffffff80003952:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80003959:	00 00 00 
ffffffff8000395c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80003960 <oct2bin>:

uint64_t oct2bin(uint8_t* str, uint16_t size)
{
    uint64_t n = 0;
    uint8_t* c = str;
    while (size-- > 0)
ffffffff80003960:	66 85 f6             	test   %si,%si
ffffffff80003963:	8d 46 ff             	lea    -0x1(%rsi),%eax
ffffffff80003966:	74 28                	je     ffffffff80003990 <oct2bin+0x30>
ffffffff80003968:	0f b7 c0             	movzwl %ax,%eax
ffffffff8000396b:	48 8d 4c 07 01       	lea    0x1(%rdi,%rax,1),%rcx
    uint64_t n = 0;
ffffffff80003970:	31 c0                	xor    %eax,%eax
ffffffff80003972:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    {
        n *= 8;
        n += *c - '0';
ffffffff80003978:	0f b6 17             	movzbl (%rdi),%edx
        c++;
ffffffff8000397b:	48 83 c7 01          	add    $0x1,%rdi
        n += *c - '0';
ffffffff8000397f:	83 ea 30             	sub    $0x30,%edx
    while (size-- > 0)
ffffffff80003982:	48 39 cf             	cmp    %rcx,%rdi
        n += *c - '0';
ffffffff80003985:	48 63 d2             	movslq %edx,%rdx
ffffffff80003988:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    while (size-- > 0)
ffffffff8000398c:	75 ea                	jne    ffffffff80003978 <oct2bin+0x18>
ffffffff8000398e:	f3 c3                	repz retq 
    uint64_t n = 0;
ffffffff80003990:	31 c0                	xor    %eax,%eax
    }
    return n;
}
ffffffff80003992:	c3                   	retq   
ffffffff80003993:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000399a:	00 00 00 
ffffffff8000399d:	0f 1f 00             	nopl   (%rax)

ffffffff800039a0 <user_function>:
uint64_t user_stack [1024];

void user_function()
{
    
    printf("Hello User World!");
ffffffff800039a0:	48 c7 c7 28 53 00 80 	mov    $0xffffffff80005328,%rdi
{
ffffffff800039a7:	48 83 ec 08          	sub    $0x8,%rsp
    printf("Hello User World!");
ffffffff800039ab:	31 c0                	xor    %eax,%eax
ffffffff800039ad:	e8 0e fc ff ff       	callq  ffffffff800035c0 <printf_>
    serial_write_str(0x3F8, "Hello User World!");
ffffffff800039b2:	48 c7 c6 28 53 00 80 	mov    $0xffffffff80005328,%rsi
ffffffff800039b9:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800039be:	e8 ed e6 ff ff       	callq  ffffffff800020b0 <serial_write_str>
ffffffff800039c3:	eb fe                	jmp    ffffffff800039c3 <user_function+0x23>
ffffffff800039c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800039cc:	00 00 00 00 

ffffffff800039d0 <kernel>:

    for(;;);
}

void kernel()
{
ffffffff800039d0:	48 83 ec 08          	sub    $0x8,%rsp

    //printf("Kernel Now\n");
    serial_init(0x3F8);     //COM1
ffffffff800039d4:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff800039d9:	e8 72 e5 ff ff       	callq  ffffffff80001f50 <serial_init>
    gdt_init();
ffffffff800039de:	31 c0                	xor    %eax,%eax
ffffffff800039e0:	e8 2b fe ff ff       	callq  ffffffff80003810 <gdt_init>
    idt_init();
ffffffff800039e5:	31 c0                	xor    %eax,%eax
ffffffff800039e7:	e8 b4 00 00 00       	callq  ffffffff80003aa0 <idt_init>
    fb_init();
ffffffff800039ec:	31 c0                	xor    %eax,%eax
ffffffff800039ee:	e8 6d df ff ff       	callq  ffffffff80001960 <fb_init>
    console_init();
ffffffff800039f3:	31 c0                	xor    %eax,%eax
ffffffff800039f5:	e8 a6 e3 ff ff       	callq  ffffffff80001da0 <console_init>

    //serial_write(0x3F8, 'm');

    pmm_init();
ffffffff800039fa:	31 c0                	xor    %eax,%eax
ffffffff800039fc:	e8 bf da ff ff       	callq  ffffffff800014c0 <pmm_init>
    vmm_init();
ffffffff80003a01:	31 c0                	xor    %eax,%eax
ffffffff80003a03:	e8 a8 d1 ff ff       	callq  ffffffff80000bb0 <vmm_init>

    user_init();
ffffffff80003a08:	31 c0                	xor    %eax,%eax
ffffffff80003a0a:	e8 41 ca ff ff       	callq  ffffffff80000450 <user_init>
    
    printf("Go to user mode!\n");
ffffffff80003a0f:	48 c7 c7 3a 53 00 80 	mov    $0xffffffff8000533a,%rdi
ffffffff80003a16:	31 c0                	xor    %eax,%eax
ffffffff80003a18:	e8 a3 fb ff ff       	callq  ffffffff800035c0 <printf_>

    to_usermode(user_function, &user_stack[1023]);
ffffffff80003a1d:	48 c7 c6 b8 24 01 80 	mov    $0xffffffff800124b8,%rsi
ffffffff80003a24:	48 c7 c7 a0 39 00 80 	mov    $0xffffffff800039a0,%rdi
ffffffff80003a2b:	e8 d0 c5 ff ff       	callq  ffffffff80000000 <to_usermode>
    //fb_clearscreen(FB_COLOR_BLUE);

    //int_test();

    //stty_sendcmd(0);
    printf("Kernel Done!\n"); 
ffffffff80003a30:	48 c7 c7 4c 53 00 80 	mov    $0xffffffff8000534c,%rdi
ffffffff80003a37:	31 c0                	xor    %eax,%eax
ffffffff80003a39:	e8 82 fb ff ff       	callq  ffffffff800035c0 <printf_>
    putstring("Putstring.\n");
ffffffff80003a3e:	48 c7 c7 5a 53 00 80 	mov    $0xffffffff8000535a,%rdi
ffffffff80003a45:	e8 26 e3 ff ff       	callq  ffffffff80001d70 <putstring>
ffffffff80003a4a:	eb fe                	jmp    ffffffff80003a4a <kernel+0x7a>
ffffffff80003a4c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80003a50 <create_descriptor>:

void create_descriptor(uint16_t index, void* isr, uint8_t ist, uint8_t cs, uint8_t attr)
{
    struct idt_entry* entry = &idt[index];

    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003a50:	0f b7 ff             	movzwl %di,%edi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a53:	48 89 f0             	mov    %rsi,%rax
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
    entry->ist = ist;
    entry->kernel_cs = cs;
ffffffff80003a56:	0f b6 c9             	movzbl %cl,%ecx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003a59:	48 c1 e7 04          	shl    $0x4,%rdi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a5d:	48 c1 e8 10          	shr    $0x10,%rax
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003a61:	66 89 b7 40 26 01 80 	mov    %si,-0x7ffed9c0(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003a68:	48 c1 ee 20          	shr    $0x20,%rsi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a6c:	66 89 87 46 26 01 80 	mov    %ax,-0x7ffed9ba(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003a73:	89 b7 48 26 01 80    	mov    %esi,-0x7ffed9b8(%rdi)
    entry->ist = ist;
ffffffff80003a79:	88 97 44 26 01 80    	mov    %dl,-0x7ffed9bc(%rdi)
    entry->kernel_cs = cs;
ffffffff80003a7f:	66 89 8f 42 26 01 80 	mov    %cx,-0x7ffed9be(%rdi)
    entry->attributes = attr;
ffffffff80003a86:	44 88 87 45 26 01 80 	mov    %r8b,-0x7ffed9bb(%rdi)
    entry->reserved = 0;
ffffffff80003a8d:	c7 87 4c 26 01 80 00 	movl   $0x0,-0x7ffed9b4(%rdi)
ffffffff80003a94:	00 00 00 
}
ffffffff80003a97:	c3                   	retq   
ffffffff80003a98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80003a9f:	00 

ffffffff80003aa0 <idt_init>:

void idt_init()
{
    //uint64_t idt_ptr = hh_code_to_phys((uint64_t)&idt[0]);
    idtr.base = (uint64_t)&idt[0];
ffffffff80003aa0:	48 c7 c0 40 26 01 80 	mov    $0xffffffff80012640,%rax
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003aa7:	b9 ff 0f 00 00       	mov    $0xfff,%ecx
{
ffffffff80003aac:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80003ab0:	48 8d b8 f0 02 00 00 	lea    0x2f0(%rax),%rdi
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff80003ab7:	66 89 0d 6a eb 00 00 	mov    %cx,0xeb6a(%rip)        # ffffffff80012628 <idtr>
    idtr.base = (uint64_t)&idt[0];
ffffffff80003abe:	48 89 05 65 eb 00 00 	mov    %rax,0xeb65(%rip)        # ffffffff8001262a <idtr+0x2>
ffffffff80003ac5:	48 c7 c1 b8 02 00 80 	mov    $0xffffffff800002b8,%rcx
ffffffff80003acc:	0f 1f 40 00          	nopl   0x0(%rax)

    for(uint8_t index = 0; index < 47; index++)
    {
        create_descriptor(index, isr_stub_table[index], 0x00, 0x08, 0x8E);
ffffffff80003ad0:	48 8b 11             	mov    (%rcx),%rdx
    entry->ist = ist;
ffffffff80003ad3:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80003ad7:	48 83 c0 10          	add    $0x10,%rax
    entry->attributes = attr;
ffffffff80003adb:	c6 40 f5 8e          	movb   $0x8e,-0xb(%rax)
    entry->reserved = 0;
ffffffff80003adf:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
ffffffff80003ae6:	48 83 c1 08          	add    $0x8,%rcx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003aea:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003aee:	48 89 d6             	mov    %rdx,%rsi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003af1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80003af5:	89 50 f8             	mov    %edx,-0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003af8:	48 c1 ee 10          	shr    $0x10,%rsi
    entry->kernel_cs = cs;
ffffffff80003afc:	ba 08 00 00 00       	mov    $0x8,%edx
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003b01:	66 89 70 f6          	mov    %si,-0xa(%rax)
    entry->kernel_cs = cs;
ffffffff80003b05:	66 89 50 f2          	mov    %dx,-0xe(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80003b09:	48 39 f8             	cmp    %rdi,%rax
ffffffff80003b0c:	75 c2                	jne    ffffffff80003ad0 <idt_init+0x30>
    }

    create_descriptor(127, isr_stub_table[48], 0x00, 0x08, 0x8E);
ffffffff80003b0e:	48 8b 05 23 c9 ff ff 	mov    -0x36dd(%rip),%rax        # ffffffff80000438 <isr_stub_table+0x180>
    entry->kernel_cs = cs;
ffffffff80003b15:	c7 05 13 f3 00 00 08 	movl   $0x8e000008,0xf313(%rip)        # ffffffff80012e32 <idt+0x7f2>
ffffffff80003b1c:	00 00 8e 
    entry->reserved = 0;
ffffffff80003b1f:	c7 05 13 f3 00 00 00 	movl   $0x0,0xf313(%rip)        # ffffffff80012e3c <idt+0x7fc>
ffffffff80003b26:	00 00 00 
    entry->kernel_cs = cs;
ffffffff80003b29:	c7 05 0f f3 00 00 08 	movl   $0x8e000008,0xf30f(%rip)        # ffffffff80012e42 <idt+0x802>
ffffffff80003b30:	00 00 8e 
    entry->reserved = 0;
ffffffff80003b33:	c7 05 0f f3 00 00 00 	movl   $0x0,0xf30f(%rip)        # ffffffff80012e4c <idt+0x80c>
ffffffff80003b3a:	00 00 00 
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003b3d:	66 89 05 ec f2 00 00 	mov    %ax,0xf2ec(%rip)        # ffffffff80012e30 <idt+0x7f0>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003b44:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003b47:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80003b4b:	89 05 e7 f2 00 00    	mov    %eax,0xf2e7(%rip)        # ffffffff80012e38 <idt+0x7f8>
    create_descriptor(128, isr_stub_table[49], 0x00, 0x08, 0x8E);
ffffffff80003b51:	48 8b 05 e8 c8 ff ff 	mov    -0x3718(%rip),%rax        # ffffffff80000440 <isr_stub_table+0x188>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003b58:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80003b5c:	66 89 15 d3 f2 00 00 	mov    %dx,0xf2d3(%rip)        # ffffffff80012e36 <idt+0x7f6>
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003b63:	66 89 05 d6 f2 00 00 	mov    %ax,0xf2d6(%rip)        # ffffffff80012e40 <idt+0x800>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003b6a:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003b6d:	48 c1 e8 20          	shr    $0x20,%rax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003b71:	48 c1 ea 10          	shr    $0x10,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003b75:	89 05 cd f2 00 00    	mov    %eax,0xf2cd(%rip)        # ffffffff80012e48 <idt+0x808>

    pic_remap();
ffffffff80003b7b:	31 c0                	xor    %eax,%eax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003b7d:	66 89 15 c2 f2 00 00 	mov    %dx,0xf2c2(%rip)        # ffffffff80012e46 <idt+0x806>
    pic_remap();
ffffffff80003b84:	e8 17 e8 ff ff       	callq  ffffffff800023a0 <pic_remap>
    pic_disable();
ffffffff80003b89:	31 c0                	xor    %eax,%eax
ffffffff80003b8b:	e8 e0 e7 ff ff       	callq  ffffffff80002370 <pic_disable>

    

    idt_load(&idtr);
ffffffff80003b90:	48 c7 c7 28 26 01 80 	mov    $0xffffffff80012628,%rdi
ffffffff80003b97:	e8 ac c8 ff ff       	callq  ffffffff80000448 <idt_load>

    pit_init(10000);
ffffffff80003b9c:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff80003ba1:	e8 fa e8 ff ff       	callq  ffffffff800024a0 <pit_init>

    pic_clear_mask(1);
ffffffff80003ba6:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80003bab:	e8 70 e7 ff ff       	callq  ffffffff80002320 <pic_clear_mask>
    pic_clear_mask(0);
ffffffff80003bb0:	31 ff                	xor    %edi,%edi


    //__asm__ volatile ("lidt %0" : : "m"(idtr));
    //__asm__ volatile ("sti");
}
ffffffff80003bb2:	48 83 c4 08          	add    $0x8,%rsp
    pic_clear_mask(0);
ffffffff80003bb6:	e9 65 e7 ff ff       	jmpq   ffffffff80002320 <pic_clear_mask>
ffffffff80003bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80003bc0 <interrupt_handler>:

uint64_t interrupt_handler(uint64_t rsp)
{
ffffffff80003bc0:	55                   	push   %rbp
ffffffff80003bc1:	53                   	push   %rbx
ffffffff80003bc2:	48 89 fb             	mov    %rdi,%rbx
ffffffff80003bc5:	48 83 ec 08          	sub    $0x8,%rsp
    struct interrupt_stack_frame* frame = (struct interrupt_stack_frame*)rsp;
    
    if(frame->int_no < 32)
ffffffff80003bc9:	48 8b 77 78          	mov    0x78(%rdi),%rsi
ffffffff80003bcd:	48 83 fe 1f          	cmp    $0x1f,%rsi
ffffffff80003bd1:	77 1d                	ja     ffffffff80003bf0 <interrupt_handler+0x30>
    {
        if(frame->cs == 0x08)
ffffffff80003bd3:	48 83 bf 90 00 00 00 	cmpq   $0x8,0x90(%rdi)
ffffffff80003bda:	08 
ffffffff80003bdb:	74 63                	je     ffffffff80003c40 <interrupt_handler+0x80>
    {
        printf("Syscall 127\n");
        return rsp;
    }
    return rsp;
ffffffff80003bdd:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003be1:	48 89 d8             	mov    %rbx,%rax
ffffffff80003be4:	5b                   	pop    %rbx
ffffffff80003be5:	5d                   	pop    %rbp
ffffffff80003be6:	c3                   	retq   
ffffffff80003be7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003bee:	00 00 
    else if (frame->int_no < 48)
ffffffff80003bf0:	48 83 fe 2f          	cmp    $0x2f,%rsi
ffffffff80003bf4:	77 32                	ja     ffffffff80003c28 <interrupt_handler+0x68>
        uint64_t irq = frame->int_no - 32;
ffffffff80003bf6:	48 8d 6e e0          	lea    -0x20(%rsi),%rbp
        if(irq > 1)
ffffffff80003bfa:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff80003bfe:	0f 87 fc 00 00 00    	ja     ffffffff80003d00 <interrupt_handler+0x140>
        switch(irq)
ffffffff80003c04:	0f 84 e6 00 00 00    	je     ffffffff80003cf0 <interrupt_handler+0x130>
                pit_ticks++;
ffffffff80003c0a:	48 83 05 0e ea 00 00 	addq   $0x1,0xea0e(%rip)        # ffffffff80012620 <pit_ticks>
ffffffff80003c11:	01 
        pic_EOI(irq);
ffffffff80003c12:	89 ef                	mov    %ebp,%edi
ffffffff80003c14:	e8 77 e6 ff ff       	callq  ffffffff80002290 <pic_EOI>
ffffffff80003c19:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003c1d:	48 89 d8             	mov    %rbx,%rax
ffffffff80003c20:	5b                   	pop    %rbx
ffffffff80003c21:	5d                   	pop    %rbp
ffffffff80003c22:	c3                   	retq   
ffffffff80003c23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    else if (frame->int_no == 127)
ffffffff80003c28:	48 83 fe 7f          	cmp    $0x7f,%rsi
ffffffff80003c2c:	75 af                	jne    ffffffff80003bdd <interrupt_handler+0x1d>
        printf("Syscall 127\n");
ffffffff80003c2e:	48 c7 c7 eb 53 00 80 	mov    $0xffffffff800053eb,%rdi
ffffffff80003c35:	31 c0                	xor    %eax,%eax
ffffffff80003c37:	e8 84 f9 ff ff       	callq  ffffffff800035c0 <printf_>
        return rsp;
ffffffff80003c3c:	eb 9f                	jmp    ffffffff80003bdd <interrupt_handler+0x1d>
ffffffff80003c3e:	66 90                	xchg   %ax,%ax
            uint64_t cr2 = read_cr2();
ffffffff80003c40:	31 c0                	xor    %eax,%eax
ffffffff80003c42:	e8 99 c4 ff ff       	callq  ffffffff800000e0 <read_cr2>
ffffffff80003c47:	48 89 c5             	mov    %rax,%rbp
            serial_write(0x3F8, frame->int_no + 65);
ffffffff80003c4a:	0f b6 43 78          	movzbl 0x78(%rbx),%eax
ffffffff80003c4e:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80003c53:	8d 70 41             	lea    0x41(%rax),%esi
ffffffff80003c56:	40 0f b6 f6          	movzbl %sil,%esi
ffffffff80003c5a:	e8 21 e4 ff ff       	callq  ffffffff80002080 <serial_write>
            printf("\nCPU Exception! INT %d   ERR %x  CR2 %p\n", frame->int_no, frame->err_no, cr2);
ffffffff80003c5f:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff80003c66:	48 8b 73 78          	mov    0x78(%rbx),%rsi
ffffffff80003c6a:	48 89 e9             	mov    %rbp,%rcx
ffffffff80003c6d:	48 c7 c7 68 53 00 80 	mov    $0xffffffff80005368,%rdi
ffffffff80003c74:	31 c0                	xor    %eax,%eax
ffffffff80003c76:	e8 45 f9 ff ff       	callq  ffffffff800035c0 <printf_>
            printf(_exception_messages[frame->int_no]);
ffffffff80003c7b:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff80003c7f:	48 8b 3c c5 20 55 00 	mov    -0x7fffaae0(,%rax,8),%rdi
ffffffff80003c86:	80 
ffffffff80003c87:	31 c0                	xor    %eax,%eax
ffffffff80003c89:	e8 32 f9 ff ff       	callq  ffffffff800035c0 <printf_>
            printf("\n");
ffffffff80003c8e:	48 c7 c7 c6 4d 00 80 	mov    $0xffffffff80004dc6,%rdi
ffffffff80003c95:	31 c0                	xor    %eax,%eax
ffffffff80003c97:	e8 24 f9 ff ff       	callq  ffffffff800035c0 <printf_>
            printf("SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff80003c9c:	48 8b 8b 98 00 00 00 	mov    0x98(%rbx),%rcx
ffffffff80003ca3:	48 8b 93 a0 00 00 00 	mov    0xa0(%rbx),%rdx
ffffffff80003caa:	48 c7 c7 98 53 00 80 	mov    $0xffffffff80005398,%rdi
ffffffff80003cb1:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
ffffffff80003cb8:	4c 8b 8b 88 00 00 00 	mov    0x88(%rbx),%r9
ffffffff80003cbf:	31 c0                	xor    %eax,%eax
ffffffff80003cc1:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80003cc8:	e8 f3 f8 ff ff       	callq  ffffffff800035c0 <printf_>
            printf("rax: %x  rdi: %x", frame->rax, frame->rdi);
ffffffff80003ccd:	48 8b 53 48          	mov    0x48(%rbx),%rdx
ffffffff80003cd1:	48 8b 73 70          	mov    0x70(%rbx),%rsi
ffffffff80003cd5:	48 c7 c7 c6 53 00 80 	mov    $0xffffffff800053c6,%rdi
ffffffff80003cdc:	31 c0                	xor    %eax,%eax
ffffffff80003cde:	e8 dd f8 ff ff       	callq  ffffffff800035c0 <printf_>
            asm("cli");
ffffffff80003ce3:	fa                   	cli    
            asm("hlt");
ffffffff80003ce4:	f4                   	hlt    
ffffffff80003ce5:	eb fe                	jmp    ffffffff80003ce5 <interrupt_handler+0x125>
ffffffff80003ce7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003cee:	00 00 
                kbd_handle();
ffffffff80003cf0:	31 c0                	xor    %eax,%eax
ffffffff80003cf2:	e8 49 e4 ff ff       	callq  ffffffff80002140 <kbd_handle>
                break;
ffffffff80003cf7:	e9 16 ff ff ff       	jmpq   ffffffff80003c12 <interrupt_handler+0x52>
ffffffff80003cfc:	0f 1f 40 00          	nopl   0x0(%rax)
            printf("INT: %d  IRQ: %d  \n", frame->int_no, irq);
ffffffff80003d00:	48 89 ea             	mov    %rbp,%rdx
ffffffff80003d03:	48 c7 c7 d7 53 00 80 	mov    $0xffffffff800053d7,%rdi
ffffffff80003d0a:	31 c0                	xor    %eax,%eax
ffffffff80003d0c:	e8 af f8 ff ff       	callq  ffffffff800035c0 <printf_>
ffffffff80003d11:	e9 fc fe ff ff       	jmpq   ffffffff80003c12 <interrupt_handler+0x52>
