
./bin/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <to_usermode>:
ffffffff80000000:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000003:	48 89 f4             	mov    %rsi,%rsp
ffffffff80000006:	41 bb 02 02 00 00    	mov    $0x202,%r11d
ffffffff8000000c:	0f 07                	sysret 

ffffffff8000000e <read_msr>:
ffffffff8000000e:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000011:	0f 32                	rdmsr  
ffffffff80000013:	c3                   	retq   

ffffffff80000014 <enable_sce>:
ffffffff80000014:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff80000019:	0f 32                	rdmsr  
ffffffff8000001b:	83 c8 01             	or     $0x1,%eax
ffffffff8000001e:	0f 30                	wrmsr  
ffffffff80000020:	b9 81 00 00 c0       	mov    $0xc0000081,%ecx
ffffffff80000025:	0f 32                	rdmsr  
ffffffff80000027:	ba 08 00 20 00       	mov    $0x200008,%edx
ffffffff8000002c:	0f 30                	wrmsr  
ffffffff8000002e:	c3                   	retq   

ffffffff8000002f <__syscall>:
ffffffff8000002f:	c3                   	retq   

ffffffff80000030 <switch_to_task>:
ffffffff80000030:	50                   	push   %rax
ffffffff80000031:	53                   	push   %rbx
ffffffff80000032:	51                   	push   %rcx
ffffffff80000033:	52                   	push   %rdx
ffffffff80000034:	56                   	push   %rsi
ffffffff80000035:	57                   	push   %rdi
ffffffff80000036:	55                   	push   %rbp
ffffffff80000037:	41 50                	push   %r8
ffffffff80000039:	41 51                	push   %r9
ffffffff8000003b:	41 52                	push   %r10
ffffffff8000003d:	41 53                	push   %r11
ffffffff8000003f:	41 54                	push   %r12
ffffffff80000041:	41 55                	push   %r13
ffffffff80000043:	41 56                	push   %r14
ffffffff80000045:	41 57                	push   %r15

ffffffff80000047 <switch_to_task.end>:
ffffffff80000047:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000004e:	00 00 

ffffffff80000050 <vmm_read_cr3>:
ffffffff80000050:	0f 20 d8             	mov    %cr3,%rax
ffffffff80000053:	c3                   	retq   

ffffffff80000054 <vmm_write_cr3>:
ffffffff80000054:	0f 22 df             	mov    %rdi,%cr3
ffffffff80000057:	c3                   	retq   

ffffffff80000058 <vmm_flush_tlb>:
ffffffff80000058:	0f 01 3f             	invlpg (%rdi)
ffffffff8000005b:	c3                   	retq   

ffffffff8000005c <vmm_flush_tlb.end>:
ffffffff8000005c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000060 <gdt_load>:
ffffffff80000060:	0f 01 17             	lgdt   (%rdi)
ffffffff80000063:	55                   	push   %rbp
ffffffff80000064:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000067:	6a 10                	pushq  $0x10
ffffffff80000069:	55                   	push   %rbp
ffffffff8000006a:	9c                   	pushfq 
ffffffff8000006b:	6a 08                	pushq  $0x8
ffffffff8000006d:	68 74 00 00 80       	pushq  $0xffffffff80000074
ffffffff80000072:	48 cf                	iretq  

ffffffff80000074 <gdt_load.trampoline>:
ffffffff80000074:	5d                   	pop    %rbp
ffffffff80000075:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80000079:	8e d8                	mov    %eax,%ds
ffffffff8000007b:	8e c0                	mov    %eax,%es
ffffffff8000007d:	8e e0                	mov    %eax,%fs
ffffffff8000007f:	8e e8                	mov    %eax,%gs
ffffffff80000081:	8e d0                	mov    %eax,%ss
ffffffff80000083:	66 b8 50 00          	mov    $0x50,%ax
ffffffff80000087:	0f 00 d8             	ltr    %ax
ffffffff8000008a:	c3                   	retq   

ffffffff8000008b <gdt_load.end>:
ffffffff8000008b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000090 <read_cr2>:
ffffffff80000090:	0f 20 d0             	mov    %cr2,%rax
ffffffff80000093:	c3                   	retq   

ffffffff80000094 <_interrupt_common>:
ffffffff80000094:	fc                   	cld    
ffffffff80000095:	50                   	push   %rax
ffffffff80000096:	53                   	push   %rbx
ffffffff80000097:	51                   	push   %rcx
ffffffff80000098:	52                   	push   %rdx
ffffffff80000099:	56                   	push   %rsi
ffffffff8000009a:	57                   	push   %rdi
ffffffff8000009b:	55                   	push   %rbp
ffffffff8000009c:	41 50                	push   %r8
ffffffff8000009e:	41 51                	push   %r9
ffffffff800000a0:	41 52                	push   %r10
ffffffff800000a2:	41 53                	push   %r11
ffffffff800000a4:	41 54                	push   %r12
ffffffff800000a6:	41 55                	push   %r13
ffffffff800000a8:	41 56                	push   %r14
ffffffff800000aa:	41 57                	push   %r15
ffffffff800000ac:	48 89 e7             	mov    %rsp,%rdi
ffffffff800000af:	e8 4c 3a 00 00       	callq  ffffffff80003b00 <interrupt_handler>
ffffffff800000b4:	48 89 c4             	mov    %rax,%rsp
ffffffff800000b7:	41 5f                	pop    %r15
ffffffff800000b9:	41 5e                	pop    %r14
ffffffff800000bb:	41 5d                	pop    %r13
ffffffff800000bd:	41 5c                	pop    %r12
ffffffff800000bf:	41 5b                	pop    %r11
ffffffff800000c1:	41 5a                	pop    %r10
ffffffff800000c3:	41 59                	pop    %r9
ffffffff800000c5:	41 58                	pop    %r8
ffffffff800000c7:	5d                   	pop    %rbp
ffffffff800000c8:	5f                   	pop    %rdi
ffffffff800000c9:	5e                   	pop    %rsi
ffffffff800000ca:	5a                   	pop    %rdx
ffffffff800000cb:	59                   	pop    %rcx
ffffffff800000cc:	5b                   	pop    %rbx
ffffffff800000cd:	58                   	pop    %rax
ffffffff800000ce:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800000d2:	48 cf                	iretq  

ffffffff800000d4 <_interrupt0>:
ffffffff800000d4:	6a 00                	pushq  $0x0
ffffffff800000d6:	6a 00                	pushq  $0x0
ffffffff800000d8:	eb ba                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff800000da <_interrupt1>:
ffffffff800000da:	6a 00                	pushq  $0x0
ffffffff800000dc:	6a 01                	pushq  $0x1
ffffffff800000de:	eb b4                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff800000e0 <_interrupt2>:
ffffffff800000e0:	6a 00                	pushq  $0x0
ffffffff800000e2:	6a 02                	pushq  $0x2
ffffffff800000e4:	eb ae                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff800000e6 <_interrupt3>:
ffffffff800000e6:	6a 00                	pushq  $0x0
ffffffff800000e8:	6a 03                	pushq  $0x3
ffffffff800000ea:	eb a8                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff800000ec <_interrupt4>:
ffffffff800000ec:	6a 00                	pushq  $0x0
ffffffff800000ee:	6a 04                	pushq  $0x4
ffffffff800000f0:	eb a2                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff800000f2 <_interrupt5>:
ffffffff800000f2:	6a 00                	pushq  $0x0
ffffffff800000f4:	6a 05                	pushq  $0x5
ffffffff800000f6:	eb 9c                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff800000f8 <_interrupt6>:
ffffffff800000f8:	6a 00                	pushq  $0x0
ffffffff800000fa:	6a 06                	pushq  $0x6
ffffffff800000fc:	eb 96                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff800000fe <_interrupt7>:
ffffffff800000fe:	6a 00                	pushq  $0x0
ffffffff80000100:	6a 07                	pushq  $0x7
ffffffff80000102:	eb 90                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff80000104 <_interrupt8>:
ffffffff80000104:	6a 08                	pushq  $0x8
ffffffff80000106:	eb 8c                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff80000108 <_interrupt9>:
ffffffff80000108:	6a 00                	pushq  $0x0
ffffffff8000010a:	6a 09                	pushq  $0x9
ffffffff8000010c:	eb 86                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff8000010e <_interrupt10>:
ffffffff8000010e:	6a 0a                	pushq  $0xa
ffffffff80000110:	eb 82                	jmp    ffffffff80000094 <_interrupt_common>

ffffffff80000112 <_interrupt11>:
ffffffff80000112:	6a 0b                	pushq  $0xb
ffffffff80000114:	e9 7b ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000119 <_interrupt12>:
ffffffff80000119:	6a 0c                	pushq  $0xc
ffffffff8000011b:	e9 74 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000120 <_interrupt13>:
ffffffff80000120:	6a 0d                	pushq  $0xd
ffffffff80000122:	e9 6d ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000127 <_interrupt14>:
ffffffff80000127:	6a 0e                	pushq  $0xe
ffffffff80000129:	e9 66 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000012e <_interrupt15>:
ffffffff8000012e:	6a 00                	pushq  $0x0
ffffffff80000130:	6a 0f                	pushq  $0xf
ffffffff80000132:	e9 5d ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000137 <_interrupt16>:
ffffffff80000137:	6a 00                	pushq  $0x0
ffffffff80000139:	6a 10                	pushq  $0x10
ffffffff8000013b:	e9 54 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000140 <_interrupt17>:
ffffffff80000140:	6a 11                	pushq  $0x11
ffffffff80000142:	e9 4d ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000147 <_interrupt18>:
ffffffff80000147:	6a 00                	pushq  $0x0
ffffffff80000149:	6a 12                	pushq  $0x12
ffffffff8000014b:	e9 44 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000150 <_interrupt19>:
ffffffff80000150:	6a 00                	pushq  $0x0
ffffffff80000152:	6a 13                	pushq  $0x13
ffffffff80000154:	e9 3b ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000159 <_interrupt20>:
ffffffff80000159:	6a 00                	pushq  $0x0
ffffffff8000015b:	6a 14                	pushq  $0x14
ffffffff8000015d:	e9 32 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000162 <_interrupt21>:
ffffffff80000162:	6a 00                	pushq  $0x0
ffffffff80000164:	6a 15                	pushq  $0x15
ffffffff80000166:	e9 29 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000016b <_interrupt22>:
ffffffff8000016b:	6a 00                	pushq  $0x0
ffffffff8000016d:	6a 16                	pushq  $0x16
ffffffff8000016f:	e9 20 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000174 <_interrupt23>:
ffffffff80000174:	6a 00                	pushq  $0x0
ffffffff80000176:	6a 17                	pushq  $0x17
ffffffff80000178:	e9 17 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000017d <_interrupt24>:
ffffffff8000017d:	6a 00                	pushq  $0x0
ffffffff8000017f:	6a 18                	pushq  $0x18
ffffffff80000181:	e9 0e ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000186 <_interrupt25>:
ffffffff80000186:	6a 00                	pushq  $0x0
ffffffff80000188:	6a 19                	pushq  $0x19
ffffffff8000018a:	e9 05 ff ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000018f <_interrupt26>:
ffffffff8000018f:	6a 00                	pushq  $0x0
ffffffff80000191:	6a 1a                	pushq  $0x1a
ffffffff80000193:	e9 fc fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000198 <_interrupt27>:
ffffffff80000198:	6a 00                	pushq  $0x0
ffffffff8000019a:	6a 1b                	pushq  $0x1b
ffffffff8000019c:	e9 f3 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001a1 <_interrupt28>:
ffffffff800001a1:	6a 00                	pushq  $0x0
ffffffff800001a3:	6a 1c                	pushq  $0x1c
ffffffff800001a5:	e9 ea fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001aa <_interrupt29>:
ffffffff800001aa:	6a 00                	pushq  $0x0
ffffffff800001ac:	6a 1d                	pushq  $0x1d
ffffffff800001ae:	e9 e1 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001b3 <_interrupt30>:
ffffffff800001b3:	6a 1e                	pushq  $0x1e
ffffffff800001b5:	e9 da fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001ba <_interrupt31>:
ffffffff800001ba:	6a 00                	pushq  $0x0
ffffffff800001bc:	6a 1f                	pushq  $0x1f
ffffffff800001be:	e9 d1 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001c3 <_interrupt32>:
ffffffff800001c3:	6a 00                	pushq  $0x0
ffffffff800001c5:	6a 20                	pushq  $0x20
ffffffff800001c7:	e9 c8 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001cc <_interrupt33>:
ffffffff800001cc:	6a 00                	pushq  $0x0
ffffffff800001ce:	6a 21                	pushq  $0x21
ffffffff800001d0:	e9 bf fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001d5 <_interrupt34>:
ffffffff800001d5:	6a 00                	pushq  $0x0
ffffffff800001d7:	6a 22                	pushq  $0x22
ffffffff800001d9:	e9 b6 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001de <_interrupt35>:
ffffffff800001de:	6a 00                	pushq  $0x0
ffffffff800001e0:	6a 23                	pushq  $0x23
ffffffff800001e2:	e9 ad fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001e7 <_interrupt36>:
ffffffff800001e7:	6a 00                	pushq  $0x0
ffffffff800001e9:	6a 24                	pushq  $0x24
ffffffff800001eb:	e9 a4 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001f0 <_interrupt37>:
ffffffff800001f0:	6a 00                	pushq  $0x0
ffffffff800001f2:	6a 25                	pushq  $0x25
ffffffff800001f4:	e9 9b fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff800001f9 <_interrupt38>:
ffffffff800001f9:	6a 00                	pushq  $0x0
ffffffff800001fb:	6a 26                	pushq  $0x26
ffffffff800001fd:	e9 92 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000202 <_interrupt39>:
ffffffff80000202:	6a 00                	pushq  $0x0
ffffffff80000204:	6a 27                	pushq  $0x27
ffffffff80000206:	e9 89 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000020b <_interrupt40>:
ffffffff8000020b:	6a 00                	pushq  $0x0
ffffffff8000020d:	6a 28                	pushq  $0x28
ffffffff8000020f:	e9 80 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000214 <_interrupt41>:
ffffffff80000214:	6a 00                	pushq  $0x0
ffffffff80000216:	6a 29                	pushq  $0x29
ffffffff80000218:	e9 77 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000021d <_interrupt42>:
ffffffff8000021d:	6a 00                	pushq  $0x0
ffffffff8000021f:	6a 2a                	pushq  $0x2a
ffffffff80000221:	e9 6e fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000226 <_interrupt43>:
ffffffff80000226:	6a 00                	pushq  $0x0
ffffffff80000228:	6a 2b                	pushq  $0x2b
ffffffff8000022a:	e9 65 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000022f <_interrupt44>:
ffffffff8000022f:	6a 00                	pushq  $0x0
ffffffff80000231:	6a 2c                	pushq  $0x2c
ffffffff80000233:	e9 5c fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000238 <_interrupt45>:
ffffffff80000238:	6a 00                	pushq  $0x0
ffffffff8000023a:	6a 2d                	pushq  $0x2d
ffffffff8000023c:	e9 53 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000241 <_interrupt46>:
ffffffff80000241:	6a 00                	pushq  $0x0
ffffffff80000243:	6a 2e                	pushq  $0x2e
ffffffff80000245:	e9 4a fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000024a <_interrupt47>:
ffffffff8000024a:	6a 00                	pushq  $0x0
ffffffff8000024c:	6a 2f                	pushq  $0x2f
ffffffff8000024e:	e9 41 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000253 <_interrupt127>:
ffffffff80000253:	6a 00                	pushq  $0x0
ffffffff80000255:	6a 7f                	pushq  $0x7f
ffffffff80000257:	e9 38 fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff8000025c <_interrupt128>:
ffffffff8000025c:	6a 00                	pushq  $0x0
ffffffff8000025e:	68 80 00 00 00       	pushq  $0x80
ffffffff80000263:	e9 2c fe ff ff       	jmpq   ffffffff80000094 <_interrupt_common>

ffffffff80000268 <isr_stub_table>:
ffffffff80000268:	d4 00 00 80 ff ff ff ff da 00 00 80 ff ff ff ff     ................
ffffffff80000278:	e0 00 00 80 ff ff ff ff e6 00 00 80 ff ff ff ff     ................
ffffffff80000288:	ec 00 00 80 ff ff ff ff f2 00 00 80 ff ff ff ff     ................
ffffffff80000298:	f8 00 00 80 ff ff ff ff fe 00 00 80 ff ff ff ff     ................
ffffffff800002a8:	04 01 00 80 ff ff ff ff 08 01 00 80 ff ff ff ff     ................
ffffffff800002b8:	0e 01 00 80 ff ff ff ff 12 01 00 80 ff ff ff ff     ................
ffffffff800002c8:	19 01 00 80 ff ff ff ff 20 01 00 80 ff ff ff ff     ........ .......
ffffffff800002d8:	27 01 00 80 ff ff ff ff 2e 01 00 80 ff ff ff ff     '...............
ffffffff800002e8:	37 01 00 80 ff ff ff ff 40 01 00 80 ff ff ff ff     7.......@.......
ffffffff800002f8:	47 01 00 80 ff ff ff ff 50 01 00 80 ff ff ff ff     G.......P.......
ffffffff80000308:	59 01 00 80 ff ff ff ff 62 01 00 80 ff ff ff ff     Y.......b.......
ffffffff80000318:	6b 01 00 80 ff ff ff ff 74 01 00 80 ff ff ff ff     k.......t.......
ffffffff80000328:	7d 01 00 80 ff ff ff ff 86 01 00 80 ff ff ff ff     }...............
ffffffff80000338:	8f 01 00 80 ff ff ff ff 98 01 00 80 ff ff ff ff     ................
ffffffff80000348:	a1 01 00 80 ff ff ff ff aa 01 00 80 ff ff ff ff     ................
ffffffff80000358:	b3 01 00 80 ff ff ff ff ba 01 00 80 ff ff ff ff     ................
ffffffff80000368:	c3 01 00 80 ff ff ff ff cc 01 00 80 ff ff ff ff     ................
ffffffff80000378:	d5 01 00 80 ff ff ff ff de 01 00 80 ff ff ff ff     ................
ffffffff80000388:	e7 01 00 80 ff ff ff ff f0 01 00 80 ff ff ff ff     ................
ffffffff80000398:	f9 01 00 80 ff ff ff ff 02 02 00 80 ff ff ff ff     ................
ffffffff800003a8:	0b 02 00 80 ff ff ff ff 14 02 00 80 ff ff ff ff     ................
ffffffff800003b8:	1d 02 00 80 ff ff ff ff 26 02 00 80 ff ff ff ff     ........&.......
ffffffff800003c8:	2f 02 00 80 ff ff ff ff 38 02 00 80 ff ff ff ff     /.......8.......
ffffffff800003d8:	41 02 00 80 ff ff ff ff 4a 02 00 80 ff ff ff ff     A.......J.......
ffffffff800003e8:	53 02 00 80 ff ff ff ff 5c 02 00 80 ff ff ff ff     S.......\.......

ffffffff800003f8 <idt_load>:
ffffffff800003f8:	0f 01 1f             	lidt   (%rdi)
ffffffff800003fb:	fb                   	sti    
ffffffff800003fc:	c3                   	retq   

ffffffff800003fd <int_test>:
ffffffff800003fd:	cd 7f                	int    $0x7f
ffffffff800003ff:	c3                   	retq   

ffffffff80000400 <_syscall>:
extern void enable_sce();

uint64_t _syscall(uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e)
{
    
}
ffffffff80000400:	f3 c3                	repz retq 
ffffffff80000402:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000409:	00 00 00 00 
ffffffff8000040d:	0f 1f 00             	nopl   (%rax)

ffffffff80000410 <user_init>:

void user_init()
{
    enable_sce();
ffffffff80000410:	31 c0                	xor    %eax,%eax
ffffffff80000412:	e9 fd fb ff ff       	jmpq   ffffffff80000014 <enable_sce>
ffffffff80000417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000041e:	00 00 

ffffffff80000420 <schedule>:
ffffffff80000420:	f3 c3                	repz retq 
ffffffff80000422:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000429:	00 00 00 00 
ffffffff8000042d:	0f 1f 00             	nopl   (%rax)

ffffffff80000430 <scheduler_init>:
}

void scheduler_init()
{

ffffffff80000430:	f3 c3                	repz retq 
ffffffff80000432:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000439:	00 00 00 
ffffffff8000043c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000440 <_start>:



    // Let's get the terminal structure tag from the bootloader.
    struct stivale2_struct_tag_terminal *term_str_tag;
    term_str_tag = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_TERMINAL_ID);
ffffffff80000440:	48 8b 87 80 00 00 00 	mov    0x80(%rdi),%rax
        if (current_tag == NULL) {
ffffffff80000447:	48 85 c0             	test   %rax,%rax
ffffffff8000044a:	74 2c                	je     ffffffff80000478 <_start+0x38>
        if (current_tag->identifier == id) {
ffffffff8000044c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8000044f:	48 be 74 09 3b 23 c3 	movabs $0xc2b3f4c3233b0974,%rsi
ffffffff80000456:	f4 b3 c2 
ffffffff80000459:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8000045c:	0f 84 a1 01 00 00    	je     ffffffff80000603 <_start+0x1c3>
ffffffff80000462:	48 89 c1             	mov    %rax,%rcx
ffffffff80000465:	eb 05                	jmp    ffffffff8000046c <_start+0x2c>
ffffffff80000467:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff8000046a:	74 0f                	je     ffffffff8000047b <_start+0x3b>
        current_tag = (void *)current_tag->next;
ffffffff8000046c:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000470:	48 85 c9             	test   %rcx,%rcx
ffffffff80000473:	75 f2                	jne    ffffffff80000467 <_start+0x27>
ffffffff80000475:	0f 1f 00             	nopl   (%rax)

    // Check if the tag was actually found.
    if (term_str_tag == NULL) {
        // It wasn't found, just hang...
        for (;;) {
            asm ("hlt");
ffffffff80000478:	f4                   	hlt    
ffffffff80000479:	eb fd                	jmp    ffffffff80000478 <_start+0x38>
        }
    }

    void* term_write_ptr = (void *)term_str_tag->term_write;
    term_write = term_write_ptr;
ffffffff8000047b:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff8000047f:	48 89 0d 9a a2 00 00 	mov    %rcx,0xa29a(%rip)        # ffffffff8000a720 <term_write>
        if (current_tag->identifier == id) {
ffffffff80000486:	48 b9 fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rcx
ffffffff8000048d:	61 64 50 
ffffffff80000490:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000493:	0f 84 a7 01 00 00    	je     ffffffff80000640 <_start+0x200>
ffffffff80000499:	48 89 c1             	mov    %rax,%rcx
ffffffff8000049c:	48 be fa 08 04 95 d2 	movabs $0x506461d2950408fa,%rsi
ffffffff800004a3:	61 64 50 
ffffffff800004a6:	eb 05                	jmp    ffffffff800004ad <_start+0x6d>
ffffffff800004a8:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff800004ab:	74 1e                	je     ffffffff800004cb <_start+0x8b>
        current_tag = (void *)current_tag->next;
ffffffff800004ad:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800004b1:	48 85 c9             	test   %rcx,%rcx
ffffffff800004b4:	75 f2                	jne    ffffffff800004a8 <_start+0x68>
    //printf("Terminal Initialized\n");

    //Grab the Framebuffer
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800004b6:	48 c7 05 37 a2 00 00 	movq   $0x0,0xa237(%rip)        # ffffffff8000a6f8 <boot_info+0x18>
ffffffff800004bd:	00 00 00 00 
ffffffff800004c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (boot_info.tag_framebuffer == NULL)
    {
    //    printf("Framebuffer Not Found\n");
        for( ;; ) 
            asm("hlt");
ffffffff800004c8:	f4                   	hlt    
ffffffff800004c9:	eb fd                	jmp    ffffffff800004c8 <_start+0x88>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff800004cb:	48 89 0d 26 a2 00 00 	mov    %rcx,0xa226(%rip)        # ffffffff8000a6f8 <boot_info+0x18>
        if (current_tag->identifier == id) {
ffffffff800004d2:	48 b9 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rcx
ffffffff800004d9:	f7 87 21 
ffffffff800004dc:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800004df:	0f 84 4f 01 00 00    	je     ffffffff80000634 <_start+0x1f4>
ffffffff800004e5:	48 89 c1             	mov    %rax,%rcx
ffffffff800004e8:	48 be 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rsi
ffffffff800004ef:	f7 87 21 
        current_tag = (void *)current_tag->next;
ffffffff800004f2:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800004f6:	48 85 c9             	test   %rcx,%rcx
ffffffff800004f9:	0f 84 f4 00 00 00    	je     ffffffff800005f3 <_start+0x1b3>
        if (current_tag->identifier == id) {
ffffffff800004ff:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000502:	75 ee                	jne    ffffffff800004f2 <_start+0xb2>
    }
    //printf("Framebuffer found at %x\n", boot_info.tag_framebuffer->framebuffer_addr);

    //Memory Map
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000504:	48 89 0d e5 a1 00 00 	mov    %rcx,0xa1e5(%rip)        # ffffffff8000a6f0 <boot_info+0x10>
        if (current_tag->identifier == id) {
ffffffff8000050b:	48 b9 f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rcx
ffffffff80000512:	78 0d 06 
ffffffff80000515:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000518:	0f 84 0a 01 00 00    	je     ffffffff80000628 <_start+0x1e8>
ffffffff8000051e:	48 89 c1             	mov    %rax,%rcx
ffffffff80000521:	48 be f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rsi
ffffffff80000528:	78 0d 06 
ffffffff8000052b:	eb 05                	jmp    ffffffff80000532 <_start+0xf2>
ffffffff8000052d:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000530:	74 09                	je     ffffffff8000053b <_start+0xfb>
        current_tag = (void *)current_tag->next;
ffffffff80000532:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff80000536:	48 85 c9             	test   %rcx,%rcx
ffffffff80000539:	75 f2                	jne    ffffffff8000052d <_start+0xed>
            asm("hlt");
    }
    //printf("Memory Map at %x\n", boot_info.tag_memmap);

    //Kernel Base Address
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff8000053b:	48 89 0d 9e a1 00 00 	mov    %rcx,0xa19e(%rip)        # ffffffff8000a6e0 <boot_info>
        if (current_tag->identifier == id) {
ffffffff80000542:	48 b9 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rcx
ffffffff80000549:	86 17 9e 
ffffffff8000054c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000054f:	0f 84 c7 00 00 00    	je     ffffffff8000061c <_start+0x1dc>
            return NULL;
ffffffff80000555:	48 89 c1             	mov    %rax,%rcx
        if (current_tag->identifier == id) {
ffffffff80000558:	48 be 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rsi
ffffffff8000055f:	86 17 9e 
ffffffff80000562:	eb 05                	jmp    ffffffff80000569 <_start+0x129>
ffffffff80000564:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff80000567:	74 09                	je     ffffffff80000572 <_start+0x132>
        current_tag = (void *)current_tag->next;
ffffffff80000569:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff8000056d:	48 85 c9             	test   %rcx,%rcx
ffffffff80000570:	75 f2                	jne    ffffffff80000564 <_start+0x124>
    }
    //printf("Kernel Physical Base Address %x\n", boot_info.tag_kernel_base_address->physical_base_address);
    //printf("Kernel Virtual Base Address  %x\n", boot_info.tag_kernel_base_address->virtual_base_address);
    //printf("--------\n");

    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff80000572:	48 89 0d 8f a1 00 00 	mov    %rcx,0xa18f(%rip)        # ffffffff8000a708 <boot_info+0x28>
        if (current_tag->identifier == id) {
ffffffff80000579:	48 b9 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rcx
ffffffff80000580:	25 ed b0 
ffffffff80000583:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80000586:	0f 84 87 00 00 00    	je     ffffffff80000613 <_start+0x1d3>
            return NULL;
ffffffff8000058c:	48 89 c1             	mov    %rax,%rcx
        if (current_tag->identifier == id) {
ffffffff8000058f:	48 be 8f b5 8c b1 7d 	movabs $0xb0ed257db18cb58f,%rsi
ffffffff80000596:	25 ed b0 
ffffffff80000599:	eb 05                	jmp    ffffffff800005a0 <_start+0x160>
ffffffff8000059b:	48 39 31             	cmp    %rsi,(%rcx)
ffffffff8000059e:	74 09                	je     ffffffff800005a9 <_start+0x169>
        current_tag = (void *)current_tag->next;
ffffffff800005a0:	48 8b 49 08          	mov    0x8(%rcx),%rcx
        if (current_tag == NULL) {
ffffffff800005a4:	48 85 c9             	test   %rcx,%rcx
ffffffff800005a7:	75 f2                	jne    ffffffff8000059b <_start+0x15b>
    
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff800005a9:	48 89 0d 68 a1 00 00 	mov    %rcx,0xa168(%rip)        # ffffffff8000a718 <boot_info+0x38>
        if (current_tag->identifier == id) {
ffffffff800005b0:	48 b9 ce 04 de aa 66 	movabs $0x4b6fe466aade04ce,%rcx
ffffffff800005b7:	e4 6f 4b 
ffffffff800005ba:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800005bd:	74 1a                	je     ffffffff800005d9 <_start+0x199>
ffffffff800005bf:	48 ba ce 04 de aa 66 	movabs $0x4b6fe466aade04ce,%rdx
ffffffff800005c6:	e4 6f 4b 
ffffffff800005c9:	eb 05                	jmp    ffffffff800005d0 <_start+0x190>
ffffffff800005cb:	48 39 10             	cmp    %rdx,(%rax)
ffffffff800005ce:	74 09                	je     ffffffff800005d9 <_start+0x199>
        current_tag = (void *)current_tag->next;
ffffffff800005d0:	48 8b 40 08          	mov    0x8(%rax),%rax
        if (current_tag == NULL) {
ffffffff800005d4:	48 85 c0             	test   %rax,%rax
ffffffff800005d7:	75 f2                	jne    ffffffff800005cb <_start+0x18b>
{
ffffffff800005d9:	52                   	push   %rdx

    boot_info.tag_modules = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MODULES_ID);
ffffffff800005da:	48 89 05 1f a1 00 00 	mov    %rax,0xa11f(%rip)        # ffffffff8000a700 <boot_info+0x20>

    kernel();
ffffffff800005e1:	31 c0                	xor    %eax,%eax
ffffffff800005e3:	e8 58 33 00 00       	callq  ffffffff80003940 <kernel>
ffffffff800005e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800005ef:	00 


    // We should never get here, but just in case...
    for (;;) {
        asm ("hlt");
ffffffff800005f0:	f4                   	hlt    
ffffffff800005f1:	eb fd                	jmp    ffffffff800005f0 <_start+0x1b0>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff800005f3:	48 c7 05 f2 a0 00 00 	movq   $0x0,0xa0f2(%rip)        # ffffffff8000a6f0 <boot_info+0x10>
ffffffff800005fa:	00 00 00 00 
ffffffff800005fe:	66 90                	xchg   %ax,%ax
            asm("hlt");
ffffffff80000600:	f4                   	hlt    
ffffffff80000601:	eb fd                	jmp    ffffffff80000600 <_start+0x1c0>
    term_write = term_write_ptr;
ffffffff80000603:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80000607:	48 89 0d 12 a1 00 00 	mov    %rcx,0xa112(%rip)        # ffffffff8000a720 <term_write>
ffffffff8000060e:	e9 86 fe ff ff       	jmpq   ffffffff80000499 <_start+0x59>
    boot_info.tag_hhdm = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_HHDM_ID);
ffffffff80000613:	48 89 05 fe a0 00 00 	mov    %rax,0xa0fe(%rip)        # ffffffff8000a718 <boot_info+0x38>
ffffffff8000061a:	eb a3                	jmp    ffffffff800005bf <_start+0x17f>
    boot_info.tag_rsdp = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_RSDP_ID);
ffffffff8000061c:	48 89 05 e5 a0 00 00 	mov    %rax,0xa0e5(%rip)        # ffffffff8000a708 <boot_info+0x28>
ffffffff80000623:	e9 64 ff ff ff       	jmpq   ffffffff8000058c <_start+0x14c>
    boot_info.tag_kernel_base_address = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_KERNEL_BASE_ADDRESS_ID);
ffffffff80000628:	48 89 05 b1 a0 00 00 	mov    %rax,0xa0b1(%rip)        # ffffffff8000a6e0 <boot_info>
ffffffff8000062f:	e9 21 ff ff ff       	jmpq   ffffffff80000555 <_start+0x115>
    boot_info.tag_memmap = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_MEMMAP_ID);
ffffffff80000634:	48 89 05 b5 a0 00 00 	mov    %rax,0xa0b5(%rip)        # ffffffff8000a6f0 <boot_info+0x10>
ffffffff8000063b:	e9 de fe ff ff       	jmpq   ffffffff8000051e <_start+0xde>
    boot_info.tag_framebuffer = stivale2_get_tag(stivale2_struct, STIVALE2_STRUCT_TAG_FRAMEBUFFER_ID);
ffffffff80000640:	48 89 05 b1 a0 00 00 	mov    %rax,0xa0b1(%rip)        # ffffffff8000a6f8 <boot_info+0x18>
ffffffff80000647:	e9 99 fe ff ff       	jmpq   ffffffff800004e5 <_start+0xa5>
ffffffff8000064c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000650 <vmm_create_page_table>:
struct PageTable* kernel_cr3 = {0};

uint64_t magic = 0xdeadbeef;

struct PageTable* vmm_create_page_table()
{
ffffffff80000650:	48 83 ec 08          	sub    $0x8,%rsp
    void* page = pmm_allocpage();   //get a page
ffffffff80000654:	31 c0                	xor    %eax,%eax
ffffffff80000656:	e8 95 10 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000065b:	48 85 c0             	test   %rax,%rax
ffffffff8000065e:	74 1d                	je     ffffffff8000067d <vmm_create_page_table+0x2d>
ffffffff80000660:	48 8d 88 00 10 00 00 	lea    0x1000(%rax),%rcx
ffffffff80000667:	48 89 c2             	mov    %rax,%rdx
ffffffff8000066a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
static inline void* memset(void* s, uint64_t c, uint64_t len)
{
    unsigned char* p=(uint8_t*)s;
    while(len--)
    {
        *p++ = (unsigned char)c;
ffffffff80000670:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80000674:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80000678:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8000067b:	75 f3                	jne    ffffffff80000670 <vmm_create_page_table+0x20>

    memset((uint8_t*)page, 0, 4096);    //clear the page
    return (struct PageTable*)page;
    
    //return (struct PageTable*)phys_to_hh_data((uint64_t)page);
}
ffffffff8000067d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80000681:	c3                   	retq   
ffffffff80000682:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000689:	00 00 00 00 
ffffffff8000068d:	0f 1f 00             	nopl   (%rax)

ffffffff80000690 <vmm_map_2Mpage>:
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
    }
}

void vmm_map_2Mpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff80000690:	41 56                	push   %r14
ffffffff80000692:	41 55                	push   %r13
    uint64_t index2, index3, index4;
    vaddr >>= 12;
    //index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000694:	49 89 f5             	mov    %rsi,%r13
{
ffffffff80000697:	41 54                	push   %r12
ffffffff80000699:	55                   	push   %rbp
    vaddr >>= 9;
ffffffff8000069a:	48 89 f5             	mov    %rsi,%rbp
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff8000069d:	48 c1 ee 24          	shr    $0x24,%rsi
{
ffffffff800006a1:	53                   	push   %rbx
    vaddr >>= 9;
ffffffff800006a2:	48 c1 ed 15          	shr    $0x15,%rbp
ffffffff800006a6:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
    vaddr >>= 9;
ffffffff800006ac:	49 c1 ed 1e          	shr    $0x1e,%r13
    index2 = vaddr & 0x1ff;
ffffffff800006b0:	81 e5 ff 01 00 00    	and    $0x1ff,%ebp
ffffffff800006b6:	4c 8d 34 37          	lea    (%rdi,%rsi,1),%r14
    index3 = vaddr & 0x1ff;
ffffffff800006ba:	41 81 e5 ff 01 00 00 	and    $0x1ff,%r13d
{
ffffffff800006c1:	48 89 d3             	mov    %rdx,%rbx
ffffffff800006c4:	49 89 cc             	mov    %rcx,%r12
    if(pagemap->entry[index] & 1)
ffffffff800006c7:	49 8b 06             	mov    (%r14),%rax
ffffffff800006ca:	a8 01                	test   $0x1,%al
ffffffff800006cc:	74 72                	je     ffffffff80000740 <vmm_map_2Mpage+0xb0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800006ce:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff800006d4:	4e 8d 2c e8          	lea    (%rax,%r13,8),%r13
    if(pagemap->entry[index] & 1)
ffffffff800006d8:	49 8b 45 00          	mov    0x0(%r13),%rax
ffffffff800006dc:	a8 01                	test   $0x1,%al
ffffffff800006de:	74 20                	je     ffffffff80000700 <vmm_map_2Mpage+0x70>

    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);

    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff800006e0:	80 cb 80             	or     $0x80,%bl
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800006e3:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML2->entry[index2] = physical | flags | PTE_PAGESIZE;
ffffffff800006e9:	49 09 dc             	or     %rbx,%r12
ffffffff800006ec:	4c 89 24 e8          	mov    %r12,(%rax,%rbp,8)
}
ffffffff800006f0:	5b                   	pop    %rbx
ffffffff800006f1:	5d                   	pop    %rbp
ffffffff800006f2:	41 5c                	pop    %r12
ffffffff800006f4:	41 5d                	pop    %r13
ffffffff800006f6:	41 5e                	pop    %r14
ffffffff800006f8:	c3                   	retq   
ffffffff800006f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    void* page = pmm_allocpage();   //get a page
ffffffff80000700:	31 c0                	xor    %eax,%eax
ffffffff80000702:	e8 e9 0f 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000707:	48 85 c0             	test   %rax,%rax
ffffffff8000070a:	48 8d b8 00 10 00 00 	lea    0x1000(%rax),%rdi
ffffffff80000711:	48 89 c6             	mov    %rax,%rsi
ffffffff80000714:	74 62                	je     ffffffff80000778 <vmm_map_2Mpage+0xe8>
ffffffff80000716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000071d:	00 00 00 
        *p++ = (unsigned char)c;
ffffffff80000720:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80000724:	c6 46 ff 00          	movb   $0x0,-0x1(%rsi)
    while(len--)
ffffffff80000728:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8000072b:	75 f3                	jne    ffffffff80000720 <vmm_map_2Mpage+0x90>
ffffffff8000072d:	4c 09 e0             	or     %r12,%rax
        pagemap->entry[index] = newentry | flags;
ffffffff80000730:	49 89 45 00          	mov    %rax,0x0(%r13)
ffffffff80000734:	eb aa                	jmp    ffffffff800006e0 <vmm_map_2Mpage+0x50>
ffffffff80000736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000073d:	00 00 00 
    void* page = pmm_allocpage();   //get a page
ffffffff80000740:	31 c0                	xor    %eax,%eax
ffffffff80000742:	e8 a9 0f 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000747:	48 85 c0             	test   %rax,%rax
ffffffff8000074a:	4c 8d 80 00 10 00 00 	lea    0x1000(%rax),%r8
ffffffff80000751:	48 89 c6             	mov    %rax,%rsi
ffffffff80000754:	74 33                	je     ffffffff80000789 <vmm_map_2Mpage+0xf9>
ffffffff80000756:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000075d:	00 00 00 
        *p++ = (unsigned char)c;
ffffffff80000760:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80000764:	c6 46 ff 00          	movb   $0x0,-0x1(%rsi)
    while(len--)
ffffffff80000768:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8000076b:	75 f3                	jne    ffffffff80000760 <vmm_map_2Mpage+0xd0>
ffffffff8000076d:	4c 09 e0             	or     %r12,%rax
        pagemap->entry[index] = newentry | flags;
ffffffff80000770:	49 89 06             	mov    %rax,(%r14)
ffffffff80000773:	e9 56 ff ff ff       	jmpq   ffffffff800006ce <vmm_map_2Mpage+0x3e>
        if(!newentry) printf("Null page allocated!\n");
ffffffff80000778:	48 c7 c7 80 4c 00 80 	mov    $0xffffffff80004c80,%rdi
ffffffff8000077f:	e8 cc 2d 00 00       	callq  ffffffff80003550 <printf_>
ffffffff80000784:	4c 89 e0             	mov    %r12,%rax
ffffffff80000787:	eb a7                	jmp    ffffffff80000730 <vmm_map_2Mpage+0xa0>
ffffffff80000789:	48 c7 c7 80 4c 00 80 	mov    $0xffffffff80004c80,%rdi
ffffffff80000790:	e8 bb 2d 00 00       	callq  ffffffff80003550 <printf_>
ffffffff80000795:	4c 89 e0             	mov    %r12,%rax
ffffffff80000798:	eb d6                	jmp    ffffffff80000770 <vmm_map_2Mpage+0xe0>
ffffffff8000079a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff800007a0 <vmm_map_4Kpage>:

void vmm_map_4Kpage(struct PageTable* pagetable, uint64_t virtual, uint64_t physical, uint64_t flags)
{
ffffffff800007a0:	41 57                	push   %r15
ffffffff800007a2:	41 56                	push   %r14
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff800007a4:	49 89 f6             	mov    %rsi,%r14
{
ffffffff800007a7:	41 55                	push   %r13
    vaddr >>= 9;
ffffffff800007a9:	49 89 f5             	mov    %rsi,%r13
{
ffffffff800007ac:	41 54                	push   %r12
ffffffff800007ae:	55                   	push   %rbp
ffffffff800007af:	53                   	push   %rbx
    vaddr >>= 12;
ffffffff800007b0:	48 89 f3             	mov    %rsi,%rbx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
    index4 = vaddr & 0x1ff;
ffffffff800007b3:	48 c1 ee 24          	shr    $0x24,%rsi
    vaddr >>= 12;
ffffffff800007b7:	48 c1 eb 0c          	shr    $0xc,%rbx
    vaddr >>= 9;
ffffffff800007bb:	49 c1 ed 15          	shr    $0x15,%r13
ffffffff800007bf:	81 e6 f8 0f 00 00    	and    $0xff8,%esi
{
ffffffff800007c5:	48 83 ec 08          	sub    $0x8,%rsp
    vaddr >>= 9;
ffffffff800007c9:	49 c1 ee 1e          	shr    $0x1e,%r14
ffffffff800007cd:	4c 8d 3c 37          	lea    (%rdi,%rsi,1),%r15
    index1 = vaddr & 0x1ff;
ffffffff800007d1:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
    index2 = vaddr & 0x1ff;
ffffffff800007d7:	41 81 e5 ff 01 00 00 	and    $0x1ff,%r13d
    index3 = vaddr & 0x1ff;
ffffffff800007de:	41 81 e6 ff 01 00 00 	and    $0x1ff,%r14d
{
ffffffff800007e5:	48 89 d5             	mov    %rdx,%rbp
ffffffff800007e8:	49 89 cc             	mov    %rcx,%r12
    if(pagemap->entry[index] & 1)
ffffffff800007eb:	49 8b 07             	mov    (%r15),%rax
ffffffff800007ee:	a8 01                	test   $0x1,%al
ffffffff800007f0:	0f 84 ba 00 00 00    	je     ffffffff800008b0 <vmm_map_4Kpage+0x110>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff800007f6:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff800007fc:	4e 8d 34 f0          	lea    (%rax,%r14,8),%r14
    if(pagemap->entry[index] & 1)
ffffffff80000800:	49 8b 06             	mov    (%r14),%rax
ffffffff80000803:	a8 01                	test   $0x1,%al
ffffffff80000805:	74 69                	je     ffffffff80000870 <vmm_map_4Kpage+0xd0>
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff80000807:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
ffffffff8000080d:	4e 8d 2c e8          	lea    (%rax,%r13,8),%r13
    if(pagemap->entry[index] & 1)
ffffffff80000811:	49 8b 45 00          	mov    0x0(%r13),%rax
ffffffff80000815:	a8 01                	test   $0x1,%al
ffffffff80000817:	74 1f                	je     ffffffff80000838 <vmm_map_4Kpage+0x98>
    PML4 = pagetable;
    PML3 = vmm_get_pagemap(PML4, index4, flags);
    PML2 = vmm_get_pagemap(PML3, index3, flags);
    PML1 = vmm_get_pagemap(PML2, index2, flags);

    PML1->entry[index1] = physical | flags;
ffffffff80000819:	4c 09 e5             	or     %r12,%rbp
        return (struct PageTable*)(pagemap->entry[index] & (~0x1ff));
ffffffff8000081c:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
    PML1->entry[index1] = physical | flags;
ffffffff80000822:	48 89 2c d8          	mov    %rbp,(%rax,%rbx,8)
    //serial_printf(SERIAL_PORT1, "%p, %p, %p, %p\r\n", PML4->entry[index4], PML3->entry[index3], PML2->entry[index2], PML1->entry[index1]);
    //serial_printf(SERIAL_PORT1, "%p, %d, %d, %d, %d, %p\r\n", virtual, index4, index3, index2, index1, physical);

    //vmm_flush_tlb((void*)virtual);

}
ffffffff80000826:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000082a:	5b                   	pop    %rbx
ffffffff8000082b:	5d                   	pop    %rbp
ffffffff8000082c:	41 5c                	pop    %r12
ffffffff8000082e:	41 5d                	pop    %r13
ffffffff80000830:	41 5e                	pop    %r14
ffffffff80000832:	41 5f                	pop    %r15
ffffffff80000834:	c3                   	retq   
ffffffff80000835:	0f 1f 00             	nopl   (%rax)
    void* page = pmm_allocpage();   //get a page
ffffffff80000838:	31 c0                	xor    %eax,%eax
ffffffff8000083a:	e8 b1 0e 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff8000083f:	48 85 c0             	test   %rax,%rax
ffffffff80000842:	48 8d b8 00 10 00 00 	lea    0x1000(%rax),%rdi
ffffffff80000849:	48 89 c6             	mov    %rax,%rsi
ffffffff8000084c:	0f 84 96 00 00 00    	je     ffffffff800008e8 <vmm_map_4Kpage+0x148>
ffffffff80000852:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        *p++ = (unsigned char)c;
ffffffff80000858:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000085c:	c6 46 ff 00          	movb   $0x0,-0x1(%rsi)
    while(len--)
ffffffff80000860:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80000863:	75 f3                	jne    ffffffff80000858 <vmm_map_4Kpage+0xb8>
ffffffff80000865:	4c 09 e0             	or     %r12,%rax
        pagemap->entry[index] = newentry | flags;
ffffffff80000868:	49 89 45 00          	mov    %rax,0x0(%r13)
ffffffff8000086c:	eb ab                	jmp    ffffffff80000819 <vmm_map_4Kpage+0x79>
ffffffff8000086e:	66 90                	xchg   %ax,%ax
    void* page = pmm_allocpage();   //get a page
ffffffff80000870:	31 c0                	xor    %eax,%eax
ffffffff80000872:	e8 79 0e 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000877:	48 85 c0             	test   %rax,%rax
ffffffff8000087a:	48 8d b8 00 10 00 00 	lea    0x1000(%rax),%rdi
ffffffff80000881:	48 89 c6             	mov    %rax,%rsi
ffffffff80000884:	0f 84 83 00 00 00    	je     ffffffff8000090d <vmm_map_4Kpage+0x16d>
ffffffff8000088a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        *p++ = (unsigned char)c;
ffffffff80000890:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80000894:	c6 46 ff 00          	movb   $0x0,-0x1(%rsi)
    while(len--)
ffffffff80000898:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8000089b:	75 f3                	jne    ffffffff80000890 <vmm_map_4Kpage+0xf0>
ffffffff8000089d:	4c 09 e0             	or     %r12,%rax
        pagemap->entry[index] = newentry | flags;
ffffffff800008a0:	49 89 06             	mov    %rax,(%r14)
ffffffff800008a3:	e9 5f ff ff ff       	jmpq   ffffffff80000807 <vmm_map_4Kpage+0x67>
ffffffff800008a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800008af:	00 
    void* page = pmm_allocpage();   //get a page
ffffffff800008b0:	31 c0                	xor    %eax,%eax
ffffffff800008b2:	e8 39 0e 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff800008b7:	48 85 c0             	test   %rax,%rax
ffffffff800008ba:	4c 8d 80 00 10 00 00 	lea    0x1000(%rax),%r8
ffffffff800008c1:	48 89 c6             	mov    %rax,%rsi
ffffffff800008c4:	74 36                	je     ffffffff800008fc <vmm_map_4Kpage+0x15c>
ffffffff800008c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800008cd:	00 00 00 
        *p++ = (unsigned char)c;
ffffffff800008d0:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800008d4:	c6 46 ff 00          	movb   $0x0,-0x1(%rsi)
    while(len--)
ffffffff800008d8:	4c 39 c6             	cmp    %r8,%rsi
ffffffff800008db:	75 f3                	jne    ffffffff800008d0 <vmm_map_4Kpage+0x130>
ffffffff800008dd:	4c 09 e0             	or     %r12,%rax
        pagemap->entry[index] = newentry | flags;
ffffffff800008e0:	49 89 07             	mov    %rax,(%r15)
ffffffff800008e3:	e9 0e ff ff ff       	jmpq   ffffffff800007f6 <vmm_map_4Kpage+0x56>
        if(!newentry) printf("Null page allocated!\n");
ffffffff800008e8:	48 c7 c7 80 4c 00 80 	mov    $0xffffffff80004c80,%rdi
ffffffff800008ef:	e8 5c 2c 00 00       	callq  ffffffff80003550 <printf_>
ffffffff800008f4:	4c 89 e0             	mov    %r12,%rax
ffffffff800008f7:	e9 6c ff ff ff       	jmpq   ffffffff80000868 <vmm_map_4Kpage+0xc8>
ffffffff800008fc:	48 c7 c7 80 4c 00 80 	mov    $0xffffffff80004c80,%rdi
ffffffff80000903:	e8 48 2c 00 00       	callq  ffffffff80003550 <printf_>
ffffffff80000908:	4c 89 e0             	mov    %r12,%rax
ffffffff8000090b:	eb d3                	jmp    ffffffff800008e0 <vmm_map_4Kpage+0x140>
ffffffff8000090d:	48 c7 c7 80 4c 00 80 	mov    $0xffffffff80004c80,%rdi
ffffffff80000914:	e8 37 2c 00 00       	callq  ffffffff80003550 <printf_>
ffffffff80000919:	4c 89 e0             	mov    %r12,%rax
ffffffff8000091c:	eb 82                	jmp    ffffffff800008a0 <vmm_map_4Kpage+0x100>
ffffffff8000091e:	66 90                	xchg   %ax,%ax

ffffffff80000920 <vmm_unmap_page>:
            }
        }
    }


}
ffffffff80000920:	f3 c3                	repz retq 
ffffffff80000922:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000929:	00 00 00 00 
ffffffff8000092d:	0f 1f 00             	nopl   (%rax)

ffffffff80000930 <vmm_pagewalk>:
uint64_t vmm_pagewalk(uint64_t vaddr, uint64_t* cr3)
{
    uint64_t* PML4 = (uint64_t*)(phys_to_hh_data((uint64_t)cr3));
    
    uint64_t index1, index2, index3, index4;
    vaddr >>= 12;
ffffffff80000930:	49 89 f8             	mov    %rdi,%r8
    index1 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000933:	48 89 f9             	mov    %rdi,%rcx
    index2 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000936:	48 89 fa             	mov    %rdi,%rdx
    index3 = vaddr & 0x1ff;
    vaddr >>= 9;
ffffffff80000939:	48 c1 ef 27          	shr    $0x27,%rdi
    index4 = vaddr & 0x1ff;
   
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff8000093d:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80000944:	80 ff ff 
{
ffffffff80000947:	53                   	push   %rbx
    index4 = vaddr & 0x1ff;
ffffffff80000948:	81 e7 ff 01 00 00    	and    $0x1ff,%edi
    vaddr >>= 9;
ffffffff8000094e:	48 c1 ea 1e          	shr    $0x1e,%rdx
    vaddr >>= 9;
ffffffff80000952:	48 c1 e9 15          	shr    $0x15,%rcx
    uint64_t* PDPTE = (uint64_t*)((phys_to_hh_data(PML4[index4]) >> 12) * 4096);
ffffffff80000956:	48 8d 34 fe          	lea    (%rsi,%rdi,8),%rsi
    index3 = vaddr & 0x1ff;
ffffffff8000095a:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    index2 = vaddr & 0x1ff;
ffffffff80000960:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
    vaddr >>= 12;
ffffffff80000966:	49 c1 e8 0c          	shr    $0xc,%r8
    return addr - 0xFFFF800000000000;
}

static inline uint64_t phys_to_hh_data(uint64_t addr)
{
    return 0xFFFF800000000000 + addr;
ffffffff8000096a:	48 8b 1c 06          	mov    (%rsi,%rax,1),%rbx
    index1 = vaddr & 0x1ff;
ffffffff8000096e:	41 81 e0 ff 01 00 00 	and    $0x1ff,%r8d
ffffffff80000975:	48 01 c3             	add    %rax,%rbx
ffffffff80000978:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PDE = (uint64_t*)((phys_to_hh_data(PDPTE[index3]) >> 12) * 4096);
ffffffff8000097b:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff80000982:	48 8b 1c d6          	mov    (%rsi,%rdx,8),%rbx
ffffffff80000986:	48 01 c3             	add    %rax,%rbx
ffffffff80000989:	48 89 de             	mov    %rbx,%rsi
    uint64_t* PTE = (uint64_t*)((phys_to_hh_data(PDE[index2]) >> 12) * 4096);
ffffffff8000098c:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
ffffffff80000993:	48 8b 1c ce          	mov    (%rsi,%rcx,8),%rbx
ffffffff80000997:	48 01 c3             	add    %rax,%rbx
ffffffff8000099a:	48 89 de             	mov    %rbx,%rsi
    return addr - 0xFFFF800000000000;
ffffffff8000099d:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff800009a4:	80 00 00 
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff800009a7:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
    return 0xFFFF800000000000 + addr;
ffffffff800009ae:	4a 03 04 c6          	add    (%rsi,%r8,8),%rax

    uint64_t pageaddr = hh_data_to_phys((uint64_t)PD);
    
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff800009b2:	48 89 fe             	mov    %rdi,%rsi
ffffffff800009b5:	48 c7 c7 96 4c 00 80 	mov    $0xffffffff80004c96,%rdi
    uint64_t* PD = (uint64_t*)((phys_to_hh_data(PTE[index1]) >> 12) * 4096);
ffffffff800009bc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    return addr - 0xFFFF800000000000;
ffffffff800009c2:	48 01 c3             	add    %rax,%rbx
    printf("%d  %d  %d  %d  %p\n", index4, index3, index2, index1, pageaddr);
ffffffff800009c5:	31 c0                	xor    %eax,%eax
ffffffff800009c7:	49 89 d9             	mov    %rbx,%r9
ffffffff800009ca:	e8 81 2b 00 00       	callq  ffffffff80003550 <printf_>
    
    
    pageaddr >>= 12;
    pageaddr *= 4096;
ffffffff800009cf:	48 89 d8             	mov    %rbx,%rax

    return pageaddr;
}
ffffffff800009d2:	5b                   	pop    %rbx
ffffffff800009d3:	c3                   	retq   
ffffffff800009d4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800009db:	00 00 00 00 
ffffffff800009df:	90                   	nop

ffffffff800009e0 <vmm_PMLwalk>:

void vmm_PMLwalk(struct PageTable* pagetable)
{
ffffffff800009e0:	41 57                	push   %r15
ffffffff800009e2:	41 56                	push   %r14
ffffffff800009e4:	48 89 fa             	mov    %rdi,%rdx
ffffffff800009e7:	41 55                	push   %r13
ffffffff800009e9:	41 54                	push   %r12
    struct PageTable* PML4 = pagetable;
    struct PageTable* PML3 = NULL;
    struct PageTable* PML2 = NULL;
    struct PageTable* PML1 = NULL;

    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff800009eb:	48 c7 c6 aa 4c 00 80 	mov    $0xffffffff80004caa,%rsi
{
ffffffff800009f2:	55                   	push   %rbp
ffffffff800009f3:	53                   	push   %rbx
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff800009f4:	31 c0                	xor    %eax,%eax
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
                                for(uint64_t l = 0; l < 512; l++)
                                {
                                    if(PML1->entry[l] & 0x01)
                                    {
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff800009f6:	48 c7 c3 ec 4c 00 80 	mov    $0xffffffff80004cec,%rbx
{
ffffffff800009fd:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80000a01:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    serial_printf(SERIAL_PORT1, "Begin Pagewalk\r\nPML 4 %p\r\n", (uint64_t)PML4);
ffffffff80000a06:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000a0b:	e8 10 2d 00 00       	callq  ffffffff80003720 <serial_printf>
    for(uint64_t i = 0; i < 512; i++)
ffffffff80000a10:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80000a17:	00 00 
ffffffff80000a19:	eb 1c                	jmp    ffffffff80000a37 <vmm_PMLwalk+0x57>
ffffffff80000a1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80000a20:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff80000a26:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80000a2b:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80000a31:	0f 84 17 01 00 00    	je     ffffffff80000b4e <vmm_PMLwalk+0x16e>
        if(pagetable->entry[i] & 0x01)
ffffffff80000a37:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff80000a3c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80000a41:	4c 8b 04 c8          	mov    (%rax,%rcx,8),%r8
ffffffff80000a45:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000a49:	74 d5                	je     ffffffff80000a20 <vmm_PMLwalk+0x40>
                serial_printf(SERIAL_PORT1, "4,%p,%d,%p\r\n",pagetable, i, pagetable->entry[i]);
ffffffff80000a4b:	49 89 cf             	mov    %rcx,%r15
ffffffff80000a4e:	49 89 c6             	mov    %rax,%r14
ffffffff80000a51:	48 89 c2             	mov    %rax,%rdx
ffffffff80000a54:	48 c7 c6 c5 4c 00 80 	mov    $0xffffffff80004cc5,%rsi
ffffffff80000a5b:	31 c0                	xor    %eax,%eax
ffffffff80000a5d:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000a62:	e8 b9 2c 00 00       	callq  ffffffff80003720 <serial_printf>
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff80000a67:	4b 8b 04 fe          	mov    (%r14,%r15,8),%rax
                for(uint64_t j = 0; j < 512; j++)
ffffffff80000a6b:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
ffffffff80000a72:	00 
                PML3 = (struct PageTable*)(pagetable->entry[i] & ~(0x1FF));
ffffffff80000a73:	49 89 c5             	mov    %rax,%r13
ffffffff80000a76:	49 81 e5 00 fe ff ff 	and    $0xfffffffffffffe00,%r13
ffffffff80000a7d:	eb 12                	jmp    ffffffff80000a91 <vmm_PMLwalk+0xb1>
ffffffff80000a7f:	90                   	nop
                for(uint64_t j = 0; j < 512; j++)
ffffffff80000a80:	48 83 04 24 01       	addq   $0x1,(%rsp)
ffffffff80000a85:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80000a89:	48 3d 00 02 00 00    	cmp    $0x200,%rax
ffffffff80000a8f:	74 8f                	je     ffffffff80000a20 <vmm_PMLwalk+0x40>
                    if(PML3->entry[j] & 0x01)
ffffffff80000a91:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80000a95:	4d 8b 44 c5 00       	mov    0x0(%r13,%rax,8),%r8
ffffffff80000a9a:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000a9e:	74 e0                	je     ffffffff80000a80 <vmm_PMLwalk+0xa0>
                        serial_printf(SERIAL_PORT1, "3,%p,%d,%p\r\n",PML3, j, PML3->entry[j]);
ffffffff80000aa0:	49 89 c6             	mov    %rax,%r14
ffffffff80000aa3:	48 89 c1             	mov    %rax,%rcx
ffffffff80000aa6:	4c 89 ea             	mov    %r13,%rdx
ffffffff80000aa9:	31 c0                	xor    %eax,%eax
ffffffff80000aab:	48 c7 c6 d2 4c 00 80 	mov    $0xffffffff80004cd2,%rsi
ffffffff80000ab2:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000ab7:	e8 64 2c 00 00       	callq  ffffffff80003720 <serial_printf>
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80000abc:	4b 8b 44 f5 00       	mov    0x0(%r13,%r14,8),%rax
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000ac1:	31 ed                	xor    %ebp,%ebp
                        PML2 = (struct PageTable*)(PML3->entry[j] & ~(0x1FF));
ffffffff80000ac3:	49 89 c4             	mov    %rax,%r12
ffffffff80000ac6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80000acb:	49 81 e4 00 fe ff ff 	and    $0xfffffffffffffe00,%r12
ffffffff80000ad2:	eb 11                	jmp    ffffffff80000ae5 <vmm_PMLwalk+0x105>
ffffffff80000ad4:	0f 1f 40 00          	nopl   0x0(%rax)
                        for(uint64_t k = 0; k < 512; k++)
ffffffff80000ad8:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80000adc:	48 81 fd 00 02 00 00 	cmp    $0x200,%rbp
ffffffff80000ae3:	74 9b                	je     ffffffff80000a80 <vmm_PMLwalk+0xa0>
                            if(PML2->entry[k] & 0x01)
ffffffff80000ae5:	4d 8b 04 ec          	mov    (%r12,%rbp,8),%r8
ffffffff80000ae9:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000aed:	74 e9                	je     ffffffff80000ad8 <vmm_PMLwalk+0xf8>
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000aef:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000af2:	4c 89 e2             	mov    %r12,%rdx
ffffffff80000af5:	48 c7 c6 df 4c 00 80 	mov    $0xffffffff80004cdf,%rsi
ffffffff80000afc:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000b01:	31 c0                	xor    %eax,%eax
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000b03:	45 31 ff             	xor    %r15d,%r15d
                                serial_printf(SERIAL_PORT1, "2,%p,%d,%p\r\n",PML2, k, PML2->entry[k]);
ffffffff80000b06:	e8 15 2c 00 00       	callq  ffffffff80003720 <serial_printf>
                                PML1 = (struct PageTable*)(PML3->entry[k] & ~(0x1FF));
ffffffff80000b0b:	4d 8b 74 ed 00       	mov    0x0(%r13,%rbp,8),%r14
ffffffff80000b10:	49 81 e6 00 fe ff ff 	and    $0xfffffffffffffe00,%r14
ffffffff80000b17:	eb 14                	jmp    ffffffff80000b2d <vmm_PMLwalk+0x14d>
ffffffff80000b19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                for(uint64_t l = 0; l < 512; l++)
ffffffff80000b20:	49 83 c7 01          	add    $0x1,%r15
ffffffff80000b24:	49 81 ff 00 02 00 00 	cmp    $0x200,%r15
ffffffff80000b2b:	74 ab                	je     ffffffff80000ad8 <vmm_PMLwalk+0xf8>
                                    if(PML1->entry[l] & 0x01)
ffffffff80000b2d:	4f 8b 04 fe          	mov    (%r14,%r15,8),%r8
ffffffff80000b31:	41 f6 c0 01          	test   $0x1,%r8b
ffffffff80000b35:	74 e9                	je     ffffffff80000b20 <vmm_PMLwalk+0x140>
                                        serial_printf(SERIAL_PORT1, "1,%p,%d,%p\r\n", PML1, l, PML1->entry[l]);
ffffffff80000b37:	4c 89 f9             	mov    %r15,%rcx
ffffffff80000b3a:	4c 89 f2             	mov    %r14,%rdx
ffffffff80000b3d:	48 89 de             	mov    %rbx,%rsi
ffffffff80000b40:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80000b45:	31 c0                	xor    %eax,%eax
ffffffff80000b47:	e8 d4 2b 00 00       	callq  ffffffff80003720 <serial_printf>
ffffffff80000b4c:	eb d2                	jmp    ffffffff80000b20 <vmm_PMLwalk+0x140>
                }//PML3
            }
    }//PML4

    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
}
ffffffff80000b4e:	48 83 c4 28          	add    $0x28,%rsp
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000b52:	48 c7 c6 f9 4c 00 80 	mov    $0xffffffff80004cf9,%rsi
ffffffff80000b59:	bf f8 03 00 00       	mov    $0x3f8,%edi
}
ffffffff80000b5e:	5b                   	pop    %rbx
ffffffff80000b5f:	5d                   	pop    %rbp
ffffffff80000b60:	41 5c                	pop    %r12
ffffffff80000b62:	41 5d                	pop    %r13
ffffffff80000b64:	41 5e                	pop    %r14
ffffffff80000b66:	41 5f                	pop    %r15
    serial_printf(SERIAL_PORT1, "End Pagewalk\r\n");
ffffffff80000b68:	31 c0                	xor    %eax,%eax
ffffffff80000b6a:	e9 b1 2b 00 00       	jmpq   ffffffff80003720 <serial_printf>
ffffffff80000b6f:	90                   	nop

ffffffff80000b70 <vmm_init>:

void vmm_init()
{
ffffffff80000b70:	55                   	push   %rbp
ffffffff80000b71:	53                   	push   %rbx
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000b72:	31 c0                	xor    %eax,%eax
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
 
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
    uint64_t kernel_virt = boot_info.tag_kernel_base_address->virtual_base_address;
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000b74:	48 c7 c3 00 35 01 80 	mov    $0xffffffff80013500,%rbx
{
ffffffff80000b7b:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000b7f:	48 89 dd             	mov    %rbx,%rbp
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000b82:	e8 c9 f4 ff ff       	callq  ffffffff80000050 <vmm_read_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000b87:	48 c7 c7 08 4d 00 80 	mov    $0xffffffff80004d08,%rdi
ffffffff80000b8e:	48 89 c6             	mov    %rax,%rsi
    kernel_cr3 = (struct PageTable*)vmm_read_cr3();
ffffffff80000b91:	48 89 05 e8 17 01 00 	mov    %rax,0x117e8(%rip)        # ffffffff80012380 <kernel_cr3>
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000b98:	31 c0                	xor    %eax,%eax
    uint64_t kernel_size = (uint64_t)&_end_of_kernel - (uint64_t)&_start_of_kernel;
ffffffff80000b9a:	48 81 ed 00 00 00 80 	sub    $0xffffffff80000000,%rbp
    printf("CR3: %p\n", (uint64_t)kernel_cr3);
ffffffff80000ba1:	e8 aa 29 00 00       	callq  ffffffff80003550 <printf_>
    uint64_t kernel_phys = boot_info.tag_kernel_base_address->physical_base_address;
ffffffff80000ba6:	48 8b 05 33 9b 00 00 	mov    0x9b33(%rip),%rax        # ffffffff8000a6e0 <boot_info>

    printf("Kernel Virtual: %p   Kernal Physical: %p\n", kernel_virt, kernel_phys);
ffffffff80000bad:	48 c7 c7 80 4d 00 80 	mov    $0xffffffff80004d80,%rdi
ffffffff80000bb4:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80000bb8:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff80000bbc:	31 c0                	xor    %eax,%eax
ffffffff80000bbe:	e8 8d 29 00 00       	callq  ffffffff80003550 <printf_>

    printf("Kernel: %p - %p Size: %d\n", &_start_of_kernel, &_end_of_kernel, kernel_size);
ffffffff80000bc3:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000bc6:	48 89 da             	mov    %rbx,%rdx
ffffffff80000bc9:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000bd0:	48 c7 c7 11 4d 00 80 	mov    $0xffffffff80004d11,%rdi
ffffffff80000bd7:	31 c0                	xor    %eax,%eax
ffffffff80000bd9:	e8 72 29 00 00       	callq  ffffffff80003550 <printf_>
    printf("Text:   %p - %p \n", &_start_of_text, &_end_of_text);
ffffffff80000bde:	48 c7 c2 56 3c 00 80 	mov    $0xffffffff80003c56,%rdx
ffffffff80000be5:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
ffffffff80000bec:	48 c7 c7 2b 4d 00 80 	mov    $0xffffffff80004d2b,%rdi
ffffffff80000bf3:	31 c0                	xor    %eax,%eax
ffffffff80000bf5:	e8 56 29 00 00       	callq  ffffffff80003550 <printf_>
    printf("Data:   %p - %p \n", &_start_of_data, &_end_of_data);
ffffffff80000bfa:	48 c7 c2 e0 86 00 80 	mov    $0xffffffff800086e0,%rdx
ffffffff80000c01:	48 c7 c6 fc 70 00 80 	mov    $0xffffffff800070fc,%rsi
ffffffff80000c08:	48 c7 c7 3d 4d 00 80 	mov    $0xffffffff80004d3d,%rdi
ffffffff80000c0f:	31 c0                	xor    %eax,%eax
ffffffff80000c11:	e8 3a 29 00 00       	callq  ffffffff80003550 <printf_>
    printf("ROData: %p - %p \n", &_start_of_rodata, &_end_of_rodata);
ffffffff80000c16:	48 c7 c2 40 55 00 80 	mov    $0xffffffff80005540,%rdx
ffffffff80000c1d:	48 c7 c6 80 4c 00 80 	mov    $0xffffffff80004c80,%rsi
ffffffff80000c24:	48 c7 c7 4f 4d 00 80 	mov    $0xffffffff80004d4f,%rdi
ffffffff80000c2b:	31 c0                	xor    %eax,%eax
ffffffff80000c2d:	e8 1e 29 00 00       	callq  ffffffff80003550 <printf_>
    printf("BSS:    %p - %p \n", &_start_of_bss, &_end_of_bss);
ffffffff80000c32:	48 c7 c2 00 35 01 80 	mov    $0xffffffff80013500,%rdx
ffffffff80000c39:	48 c7 c6 e0 86 00 80 	mov    $0xffffffff800086e0,%rsi
ffffffff80000c40:	48 c7 c7 61 4d 00 80 	mov    $0xffffffff80004d61,%rdi
ffffffff80000c47:	31 c0                	xor    %eax,%eax
ffffffff80000c49:	e8 02 29 00 00       	callq  ffffffff80003550 <printf_>
    void* page = pmm_allocpage();   //get a page
ffffffff80000c4e:	31 c0                	xor    %eax,%eax
ffffffff80000c50:	e8 9b 0a 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
    if(page == NULL) return NULL;   //If it's null, we can't continue
ffffffff80000c55:	48 85 c0             	test   %rax,%rax
ffffffff80000c58:	74 1b                	je     ffffffff80000c75 <vmm_init+0x105>
ffffffff80000c5a:	48 8d 88 00 10 00 00 	lea    0x1000(%rax),%rcx
ffffffff80000c61:	48 89 c2             	mov    %rax,%rdx
ffffffff80000c64:	0f 1f 40 00          	nopl   0x0(%rax)
        *p++ = (unsigned char)c;
ffffffff80000c68:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80000c6c:	c6 42 ff 00          	movb   $0x0,-0x1(%rdx)
    while(len--)
ffffffff80000c70:	48 39 d1             	cmp    %rdx,%rcx
ffffffff80000c73:	75 f3                	jne    ffffffff80000c68 <vmm_init+0xf8>

    //vmm_pagewalk((uint64_t)&_start_of_kernel, (uint64_t*)read_cr3());
    //vmm_pagewalk((uint64_t)&_end_of_kernel, (uint64_t*)read_cr3());

    //Create the Kernel PML4 table
    RootPageDirectory = vmm_create_page_table();
ffffffff80000c75:	48 89 05 0c 17 01 00 	mov    %rax,0x1170c(%rip)        # ffffffff80012388 <RootPageDirectory>

    printf("Root = %p\n", RootPageDirectory);
ffffffff80000c7c:	48 89 c6             	mov    %rax,%rsi
ffffffff80000c7f:	48 c7 c7 73 4d 00 80 	mov    $0xffffffff80004d73,%rdi
ffffffff80000c86:	31 c0                	xor    %eax,%eax
ffffffff80000c88:	e8 c3 28 00 00       	callq  ffffffff80003550 <printf_>

    RootPageDirectory->entry[256] = kernel_cr3->entry[256];
ffffffff80000c8d:	48 8b 15 ec 16 01 00 	mov    0x116ec(%rip),%rdx        # ffffffff80012380 <kernel_cr3>
ffffffff80000c94:	48 8b 05 ed 16 01 00 	mov    0x116ed(%rip),%rax        # ffffffff80012388 <RootPageDirectory>
ffffffff80000c9b:	48 8b 8a 00 08 00 00 	mov    0x800(%rdx),%rcx
ffffffff80000ca2:	48 89 88 00 08 00 00 	mov    %rcx,0x800(%rax)
    RootPageDirectory->entry[511] = kernel_cr3->entry[511];
ffffffff80000ca9:	48 8b 92 f8 0f 00 00 	mov    0xff8(%rdx),%rdx
ffffffff80000cb0:	48 89 90 f8 0f 00 00 	mov    %rdx,0xff8(%rax)

    //cycle through page entries


    
}
ffffffff80000cb7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80000cbb:	5b                   	pop    %rbx
ffffffff80000cbc:	5d                   	pop    %rbp
ffffffff80000cbd:	c3                   	retq   
ffffffff80000cbe:	66 90                	xchg   %ax,%ax

ffffffff80000cc0 <liballoc_lock>:



int liballoc_lock()
{
    asm("cli");
ffffffff80000cc0:	fa                   	cli    
    return 0;
}
ffffffff80000cc1:	31 c0                	xor    %eax,%eax
ffffffff80000cc3:	c3                   	retq   
ffffffff80000cc4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000ccb:	00 00 00 00 
ffffffff80000ccf:	90                   	nop

ffffffff80000cd0 <liballoc_unlock>:


int liballoc_unlock()
{
    asm("sti");
ffffffff80000cd0:	fb                   	sti    
    return 0;
}
ffffffff80000cd1:	31 c0                	xor    %eax,%eax
ffffffff80000cd3:	c3                   	retq   
ffffffff80000cd4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000cdb:	00 00 00 00 
ffffffff80000cdf:	90                   	nop

ffffffff80000ce0 <liballoc_free>:

int liballoc_free(void* page, size_t count)
{
    return 0;
}
ffffffff80000ce0:	31 c0                	xor    %eax,%eax
ffffffff80000ce2:	c3                   	retq   
ffffffff80000ce3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80000cea:	00 00 00 00 
ffffffff80000cee:	66 90                	xchg   %ax,%ax

ffffffff80000cf0 <liballoc_alloc>:

void* liballoc_alloc(size_t count)
{
    for(uint64_t i = 0; i < count; i++)
ffffffff80000cf0:	48 85 ff             	test   %rdi,%rdi
ffffffff80000cf3:	74 6b                	je     ffffffff80000d60 <liballoc_alloc+0x70>
{
ffffffff80000cf5:	55                   	push   %rbp
ffffffff80000cf6:	53                   	push   %rbx
ffffffff80000cf7:	48 89 fd             	mov    %rdi,%rbp
    for(uint64_t i = 0; i < count; i++)
ffffffff80000cfa:	31 db                	xor    %ebx,%ebx
{
ffffffff80000cfc:	48 83 ec 08          	sub    $0x8,%rsp
    {
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000d00:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d02:	48 83 c3 01          	add    $0x1,%rbx
        vmm_map_4Kpage(RootPageDirectory, (kernel_heap_top + 4096), (uint64_t)pmm_allocpage(), PTE_PRESENT | PTE_READWRITE);
ffffffff80000d06:	e8 e5 09 00 00       	callq  ffffffff800016f0 <pmm_allocpage>
ffffffff80000d0b:	48 8b 0d 36 64 00 00 	mov    0x6436(%rip),%rcx        # ffffffff80007148 <kernel_heap_top>
ffffffff80000d12:	48 8b 3d 6f 16 01 00 	mov    0x1166f(%rip),%rdi        # ffffffff80012388 <RootPageDirectory>
ffffffff80000d19:	48 89 c2             	mov    %rax,%rdx
ffffffff80000d1c:	48 8d b1 00 10 00 00 	lea    0x1000(%rcx),%rsi
ffffffff80000d23:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80000d28:	e8 73 fa ff ff       	callq  ffffffff800007a0 <vmm_map_4Kpage>
        kernel_heap_top += 4096;
ffffffff80000d2d:	48 8b 05 14 64 00 00 	mov    0x6414(%rip),%rax        # ffffffff80007148 <kernel_heap_top>
ffffffff80000d34:	48 05 00 10 00 00    	add    $0x1000,%rax
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d3a:	48 39 dd             	cmp    %rbx,%rbp
        kernel_heap_top += 4096;
ffffffff80000d3d:	48 89 05 04 64 00 00 	mov    %rax,0x6404(%rip)        # ffffffff80007148 <kernel_heap_top>
    for(uint64_t i = 0; i < count; i++)
ffffffff80000d44:	75 ba                	jne    ffffffff80000d00 <liballoc_alloc+0x10>
    }
    return (void*)(phys_to_hh_data((uint64_t)kernel_heap_top));
ffffffff80000d46:	48 83 c4 08          	add    $0x8,%rsp
    return 0xFFFF800000000000 + addr;
ffffffff80000d4a:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000d51:	80 ff ff 
ffffffff80000d54:	48 01 d0             	add    %rdx,%rax
ffffffff80000d57:	5b                   	pop    %rbx
ffffffff80000d58:	5d                   	pop    %rbp
ffffffff80000d59:	c3                   	retq   
ffffffff80000d5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000d60:	48 8b 05 e1 63 00 00 	mov    0x63e1(%rip),%rax        # ffffffff80007148 <kernel_heap_top>
ffffffff80000d67:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000d6e:	80 ff ff 
ffffffff80000d71:	48 01 d0             	add    %rdx,%rax
ffffffff80000d74:	c3                   	retq   
ffffffff80000d75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80000d7c:	00 00 00 
ffffffff80000d7f:	90                   	nop

ffffffff80000d80 <allocate_new_page>:
	unsigned int st;
	struct liballoc_major *maj;

		// This is how much space is required.
		st  = size + sizeof(struct liballoc_major);
		st += sizeof(struct liballoc_minor);
ffffffff80000d80:	83 c7 50             	add    $0x50,%edi
{
ffffffff80000d83:	53                   	push   %rbx
ffffffff80000d84:	bb 10 00 00 00       	mov    $0x10,%ebx
ffffffff80000d89:	89 f8                	mov    %edi,%eax

				// Perfect amount of space?
		if ( (st % l_pageSize) == 0 )
ffffffff80000d8b:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
ffffffff80000d91:	c1 e8 0c             	shr    $0xc,%eax
			st  = st / (l_pageSize);
		else
			st  = st / (l_pageSize) + 1;
ffffffff80000d94:	83 ff 01             	cmp    $0x1,%edi
ffffffff80000d97:	83 d8 ff             	sbb    $0xffffffff,%eax
ffffffff80000d9a:	83 f8 10             	cmp    $0x10,%eax
ffffffff80000d9d:	0f 43 d8             	cmovae %eax,%ebx

		
		// Make sure it's >= the minimum size.
		if ( st < l_pageCount ) st = l_pageCount;
		
		maj = (struct liballoc_major*)liballoc_alloc( st );
ffffffff80000da0:	89 df                	mov    %ebx,%edi
ffffffff80000da2:	e8 49 ff ff ff       	callq  ffffffff80000cf0 <liballoc_alloc>

		if ( maj == NULL ) 
ffffffff80000da7:	48 85 c0             	test   %rax,%rax
ffffffff80000daa:	74 34                	je     ffffffff80000de0 <allocate_new_page+0x60>
			return NULL;	// uh oh, we ran out of memory.
		}
		
		maj->prev 	= NULL;
		maj->next 	= NULL;
		maj->pages 	= st;
ffffffff80000dac:	89 58 10             	mov    %ebx,0x10(%rax)
		maj->size 	= st * l_pageSize;
ffffffff80000daf:	c1 e3 0c             	shl    $0xc,%ebx
		maj->prev 	= NULL;
ffffffff80000db2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		maj->next 	= NULL;
ffffffff80000db9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80000dc0:	00 
		maj->size 	= st * l_pageSize;
ffffffff80000dc1:	89 58 14             	mov    %ebx,0x14(%rax)
		maj->usage 	= sizeof(struct liballoc_major);
ffffffff80000dc4:	c7 40 18 28 00 00 00 	movl   $0x28,0x18(%rax)
		maj->first 	= NULL;
ffffffff80000dcb:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000dd2:	00 

		l_allocated += maj->size;
ffffffff80000dd3:	48 01 1d d6 15 01 00 	add    %rbx,0x115d6(%rip)        # ffffffff800123b0 <l_allocated>
		FLUSH();
		#endif
	
		
      return maj;
}
ffffffff80000dda:	5b                   	pop    %rbx
ffffffff80000ddb:	c3                   	retq   
ffffffff80000ddc:	0f 1f 40 00          	nopl   0x0(%rax)
			l_warningCount += 1;
ffffffff80000de0:	48 83 05 b8 15 01 00 	addq   $0x1,0x115b8(%rip)        # ffffffff800123a0 <l_warningCount>
ffffffff80000de7:	01 
}
ffffffff80000de8:	5b                   	pop    %rbx
ffffffff80000de9:	c3                   	retq   
ffffffff80000dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000df0 <kmalloc>:

	


void *PREFIX(malloc)(size_t req_size)
{
ffffffff80000df0:	41 57                	push   %r15
ffffffff80000df2:	41 56                	push   %r14
ffffffff80000df4:	41 55                	push   %r13
ffffffff80000df6:	41 54                	push   %r12
ffffffff80000df8:	49 89 fd             	mov    %rdi,%r13
ffffffff80000dfb:	55                   	push   %rbp
ffffffff80000dfc:	53                   	push   %rbx
ffffffff80000dfd:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000e01:	eb 1a                	jmp    ffffffff80000e1d <kmalloc+0x2d>
ffffffff80000e03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		#if defined DEBUG || defined INFO
		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
							__builtin_return_address(0) );
		FLUSH();
		#endif
		liballoc_unlock();
ffffffff80000e08:	31 c0                	xor    %eax,%eax
		return PREFIX(malloc)(1);
ffffffff80000e0a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		l_warningCount += 1;
ffffffff80000e10:	48 83 05 88 15 01 00 	addq   $0x1,0x11588(%rip)        # ffffffff800123a0 <l_warningCount>
ffffffff80000e17:	01 
		liballoc_unlock();
ffffffff80000e18:	e8 b3 fe ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
		size += ALIGNMENT + ALIGN_INFO;
ffffffff80000e1d:	4d 8d 65 20          	lea    0x20(%r13),%r12
	liballoc_lock();
ffffffff80000e21:	31 c0                	xor    %eax,%eax
ffffffff80000e23:	e8 98 fe ff ff       	callq  ffffffff80000cc0 <liballoc_lock>
	if ( size == 0 )
ffffffff80000e28:	4d 85 e4             	test   %r12,%r12
ffffffff80000e2b:	74 db                	je     ffffffff80000e08 <kmalloc+0x18>
	}
	

	if ( l_memRoot == NULL )
ffffffff80000e2d:	48 8b 35 8c 15 01 00 	mov    0x1158c(%rip),%rsi        # ffffffff800123c0 <l_memRoot>
ffffffff80000e34:	48 85 f6             	test   %rsi,%rsi
ffffffff80000e37:	0f 84 c3 02 00 00    	je     ffffffff80001100 <kmalloc+0x310>

	maj = l_memRoot;
	startedBet = 0;
	
	// Start at the best bet....
	if ( l_bestBet != NULL )
ffffffff80000e3d:	48 8b 15 74 15 01 00 	mov    0x11574(%rip),%rdx        # ffffffff800123b8 <l_bestBet>
ffffffff80000e44:	49 8d 5d 48          	lea    0x48(%r13),%rbx
ffffffff80000e48:	48 85 d2             	test   %rdx,%rdx
ffffffff80000e4b:	0f 84 3f 02 00 00    	je     ffffffff80001090 <kmalloc+0x2a0>
	{
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000e51:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000e54:	8b 4a 18             	mov    0x18(%rdx),%ecx

		if ( bestSize > (size + sizeof(struct liballoc_minor)))
		{
			maj = l_bestBet;
			startedBet = 1;
ffffffff80000e57:	41 bf 01 00 00 00    	mov    $0x1,%r15d
		bestSize = l_bestBet->size - l_bestBet->usage;
ffffffff80000e5d:	41 89 c6             	mov    %eax,%r14d
ffffffff80000e60:	41 29 ce             	sub    %ecx,%r14d
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80000e63:	49 39 de             	cmp    %rbx,%r14
ffffffff80000e66:	0f 86 b4 01 00 00    	jbe    ffffffff80001020 <kmalloc+0x230>
		}
	}
	
	while ( maj != NULL )
	{
		diff  = maj->size - maj->usage;	
ffffffff80000e6c:	29 c8                	sub    %ecx,%eax
										// free memory in the block

		if ( bestSize < diff )
ffffffff80000e6e:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000e71:	76 0a                	jbe    ffffffff80000e7d <kmalloc+0x8d>
		{
			// Hmm.. this one has more memory then our bestBet. Remember!
			l_bestBet = maj;
ffffffff80000e73:	48 89 15 3e 15 01 00 	mov    %rdx,0x1153e(%rip)        # ffffffff800123b8 <l_bestBet>
ffffffff80000e7a:	49 89 c6             	mov    %rax,%r14
		
		
#ifdef USE_CASE1
			
		// CASE 1:  There is not enough space in this major block.
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000e7d:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000e80:	73 22                	jae    ffffffff80000ea4 <kmalloc+0xb4>
			printf( "CASE 1: Insufficient space in block %x\n", maj);
			FLUSH();
			#endif
				
				// Another major block next to this one?
			if ( maj->next != NULL ) 
ffffffff80000e82:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff80000e86:	48 85 c0             	test   %rax,%rax
ffffffff80000e89:	0f 84 b9 00 00 00    	je     ffffffff80000f48 <kmalloc+0x158>
ffffffff80000e8f:	48 89 c2             	mov    %rax,%rdx
ffffffff80000e92:	8b 42 14             	mov    0x14(%rdx),%eax
ffffffff80000e95:	8b 4a 18             	mov    0x18(%rdx),%ecx
		diff  = maj->size - maj->usage;	
ffffffff80000e98:	29 c8                	sub    %ecx,%eax
		if ( bestSize < diff )
ffffffff80000e9a:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000e9d:	77 d4                	ja     ffffffff80000e73 <kmalloc+0x83>
		if ( diff < (size + sizeof( struct liballoc_minor )) )
ffffffff80000e9f:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ea2:	72 de                	jb     ffffffff80000e82 <kmalloc+0x92>
ffffffff80000ea4:	48 89 d5             	mov    %rdx,%rbp
#endif

#ifdef USE_CASE2
		
		// CASE 2: It's a brand new block.
		if ( maj->first == NULL )
ffffffff80000ea7:	48 8b 55 20          	mov    0x20(%rbp),%rdx
ffffffff80000eab:	48 85 d2             	test   %rdx,%rdx
ffffffff80000eae:	0f 84 7d 01 00 00    	je     ffffffff80001031 <kmalloc+0x241>
				
#ifdef USE_CASE3

		// CASE 3: Block in use and enough space at the start of the block.
		diff =  (uintptr_t)(maj->first);
		diff -= (uintptr_t)maj;
ffffffff80000eb4:	48 89 d0             	mov    %rdx,%rax
ffffffff80000eb7:	48 29 e8             	sub    %rbp,%rax
		diff -= sizeof(struct liballoc_major);
ffffffff80000eba:	48 83 e8 28          	sub    $0x28,%rax

		if ( diff >= (size + sizeof(struct liballoc_minor)) )
ffffffff80000ebe:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ec1:	0f 83 62 02 00 00    	jae    ffffffff80001129 <kmalloc+0x339>
		
			// Looping within the block now...
		while ( min != NULL )
		{
				// CASE 4.1: End of minors in a block. Space from last and end?
				if ( min->next == NULL )
ffffffff80000ec7:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000ecb:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000ece:	48 85 c9             	test   %rcx,%rcx
ffffffff80000ed1:	74 25                	je     ffffffff80000ef8 <kmalloc+0x108>
				// CASE 4.2: Is there space between two minors?
				if ( min->next != NULL )
				{
					// is the difference between here and next big enough?
					diff  = (uintptr_t)(min->next);
					diff -= (uintptr_t)min;
ffffffff80000ed3:	48 89 c8             	mov    %rcx,%rax
ffffffff80000ed6:	48 29 d0             	sub    %rdx,%rax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000ed9:	48 83 e8 28          	sub    $0x28,%rax
					diff -= min->size;
ffffffff80000edd:	48 29 f0             	sub    %rsi,%rax
										// minus our existing usage.

					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000ee0:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000ee3:	0f 83 b7 00 00 00    	jae    ffffffff80000fa0 <kmalloc+0x1b0>
ffffffff80000ee9:	48 89 ca             	mov    %rcx,%rdx
				if ( min->next == NULL )
ffffffff80000eec:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80000ef0:	8b 72 1c             	mov    0x1c(%rdx),%esi
ffffffff80000ef3:	48 85 c9             	test   %rcx,%rcx
ffffffff80000ef6:	75 db                	jne    ffffffff80000ed3 <kmalloc+0xe3>
					diff = (uintptr_t)(maj) + maj->size;
ffffffff80000ef8:	8b 45 14             	mov    0x14(%rbp),%eax
					diff -= sizeof( struct liballoc_minor );
ffffffff80000efb:	48 8d 44 05 d8       	lea    -0x28(%rbp,%rax,1),%rax
ffffffff80000f00:	48 29 d0             	sub    %rdx,%rax
					diff -= min->size; 
ffffffff80000f03:	48 29 f0             	sub    %rsi,%rax
					if ( diff >= (size + sizeof( struct liballoc_minor )) )
ffffffff80000f06:	48 39 d8             	cmp    %rbx,%rax
ffffffff80000f09:	0f 83 99 01 00 00    	jae    ffffffff800010a8 <kmalloc+0x2b8>
#endif

#ifdef USE_CASE5

		// CASE 5: Block full! Ensure next block and loop.
		if ( maj->next == NULL ) 
ffffffff80000f0f:	48 8b 55 08          	mov    0x8(%rbp),%rdx
ffffffff80000f13:	48 85 d2             	test   %rdx,%rdx
ffffffff80000f16:	0f 85 76 ff ff ff    	jne    ffffffff80000e92 <kmalloc+0xa2>
			#ifdef DEBUG
			printf( "CASE 5: block full\n");
			FLUSH();
			#endif

			if ( startedBet == 1 )
ffffffff80000f1c:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000f20:	74 5e                	je     ffffffff80000f80 <kmalloc+0x190>
				startedBet = 0;
				continue;
			}
				
			// we've run out. we need more...
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000f22:	44 89 e7             	mov    %r12d,%edi
ffffffff80000f25:	e8 56 fe ff ff       	callq  ffffffff80000d80 <allocate_new_page>
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000f2a:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );		// next one guaranteed to be okay
ffffffff80000f2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80000f30:	48 89 45 08          	mov    %rax,0x8(%rbp)
			if ( maj->next == NULL ) break;			//  uh oh,  no more memory.....
ffffffff80000f34:	0f 84 e1 01 00 00    	je     ffffffff8000111b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000f3a:	48 89 28             	mov    %rbp,(%rax)
ffffffff80000f3d:	e9 50 ff ff ff       	jmpq   ffffffff80000e92 <kmalloc+0xa2>
ffffffff80000f42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			if ( startedBet == 1 )		// If we started at the best bet,
ffffffff80000f48:	41 83 ff 01          	cmp    $0x1,%r15d
ffffffff80000f4c:	74 32                	je     ffffffff80000f80 <kmalloc+0x190>
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000f4e:	44 89 e7             	mov    %r12d,%edi
ffffffff80000f51:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80000f56:	e8 25 fe ff ff       	callq  ffffffff80000d80 <allocate_new_page>
ffffffff80000f5b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000f60:	48 85 c0             	test   %rax,%rax
			maj->next = allocate_new_page( size );	// next one will be okay.
ffffffff80000f63:	48 89 c5             	mov    %rax,%rbp
ffffffff80000f66:	48 89 42 08          	mov    %rax,0x8(%rdx)
			if ( maj->next == NULL ) break;			// no more memory.
ffffffff80000f6a:	0f 84 ab 01 00 00    	je     ffffffff8000111b <kmalloc+0x32b>
			maj->next->prev = maj;
ffffffff80000f70:	48 89 10             	mov    %rdx,(%rax)
ffffffff80000f73:	e9 2f ff ff ff       	jmpq   ffffffff80000ea7 <kmalloc+0xb7>
ffffffff80000f78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000f7f:	00 
				maj = l_memRoot;
ffffffff80000f80:	48 8b 15 39 14 01 00 	mov    0x11439(%rip),%rdx        # ffffffff800123c0 <l_memRoot>
	while ( maj != NULL )
ffffffff80000f87:	48 85 d2             	test   %rdx,%rdx
ffffffff80000f8a:	0f 84 8b 01 00 00    	je     ffffffff8000111b <kmalloc+0x32b>
ffffffff80000f90:	45 31 ff             	xor    %r15d,%r15d
ffffffff80000f93:	e9 fa fe ff ff       	jmpq   ffffffff80000e92 <kmalloc+0xa2>
ffffffff80000f98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80000f9f:	00 
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fa0:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
						l_inuse += size;
ffffffff80000fa4:	4c 01 25 fd 13 01 00 	add    %r12,0x113fd(%rip)        # ffffffff800123a8 <l_inuse>
						new_min->next = min->next;
ffffffff80000fab:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
						min->next->prev = new_min;
ffffffff80000faf:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
						new_min = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff80000fb3:	48 8d 43 28          	lea    0x28(%rbx),%rax
						new_min->magic = LIBALLOC_MAGIC;
ffffffff80000fb7:	c7 43 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbx)
						ALIGN( p );
ffffffff80000fbe:	48 83 c3 60          	add    $0x60,%rbx
						new_min->prev = min;
ffffffff80000fc2:	48 89 53 c8          	mov    %rdx,-0x38(%rbx)
						new_min->size = size;
ffffffff80000fc6:	44 89 63 e4          	mov    %r12d,-0x1c(%rbx)
						new_min->req_size = req_size;
ffffffff80000fca:	44 89 6b e8          	mov    %r13d,-0x18(%rbx)
						new_min->block = maj;
ffffffff80000fce:	48 89 6b d8          	mov    %rbp,-0x28(%rbx)
						min->next->prev = new_min;
ffffffff80000fd2:	48 89 01             	mov    %rax,(%rcx)
						min->next = new_min;
ffffffff80000fd5:	48 89 42 08          	mov    %rax,0x8(%rdx)
						ALIGN( p );
ffffffff80000fd9:	48 89 da             	mov    %rbx,%rdx
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff80000fdc:	41 8d 44 24 28       	lea    0x28(%r12),%eax
ffffffff80000fe1:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff80000fe4:	83 e2 0f             	and    $0xf,%edx
ffffffff80000fe7:	0f 84 93 00 00 00    	je     ffffffff80001080 <kmalloc+0x290>
ffffffff80000fed:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80000ff2:	48 29 d0             	sub    %rdx,%rax
ffffffff80000ff5:	48 01 c3             	add    %rax,%rbx
ffffffff80000ff8:	83 c0 10             	add    $0x10,%eax
ffffffff80000ffb:	88 43 f0             	mov    %al,-0x10(%rbx)
						liballoc_unlock();		// release the lock
ffffffff80000ffe:	31 c0                	xor    %eax,%eax
ffffffff80001000:	e8 cb fc ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
	liballoc_dump();
	FLUSH();
	#endif
	return NULL;
}
ffffffff80001005:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001009:	48 89 d8             	mov    %rbx,%rax
ffffffff8000100c:	5b                   	pop    %rbx
ffffffff8000100d:	5d                   	pop    %rbp
ffffffff8000100e:	41 5c                	pop    %r12
ffffffff80001010:	41 5d                	pop    %r13
ffffffff80001012:	41 5e                	pop    %r14
ffffffff80001014:	41 5f                	pop    %r15
ffffffff80001016:	c3                   	retq   
ffffffff80001017:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000101e:	00 00 
ffffffff80001020:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80001023:	8b 4e 18             	mov    0x18(%rsi),%ecx
		if ( bestSize > (size + sizeof(struct liballoc_minor)))
ffffffff80001026:	48 89 f2             	mov    %rsi,%rdx
	startedBet = 0;
ffffffff80001029:	45 31 ff             	xor    %r15d,%r15d
ffffffff8000102c:	e9 3b fe ff ff       	jmpq   ffffffff80000e6c <kmalloc+0x7c>
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001031:	48 8d 45 28          	lea    0x28(%rbp),%rax
			maj->first->magic 		= LIBALLOC_MAGIC;
ffffffff80001035:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 		= NULL;
ffffffff8000103c:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80001043:	00 
			maj->first->next 		= NULL;
ffffffff80001044:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff8000104b:	00 
			maj->first = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff8000104c:	48 89 45 20          	mov    %rax,0x20(%rbp)
			ALIGN( p );
ffffffff80001050:	48 8d 5d 60          	lea    0x60(%rbp),%rbx
			maj->first->block 	= maj;
ffffffff80001054:	48 89 6d 38          	mov    %rbp,0x38(%rbp)
			maj->first->size 	= size;
ffffffff80001058:	44 89 65 44          	mov    %r12d,0x44(%rbp)
			maj->first->req_size 	= req_size;
ffffffff8000105c:	44 89 6d 48          	mov    %r13d,0x48(%rbp)
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff80001060:	41 8d 44 24 28       	lea    0x28(%r12),%eax
			l_inuse += size;
ffffffff80001065:	4c 01 25 3c 13 01 00 	add    %r12,0x1133c(%rip)        # ffffffff800123a8 <l_inuse>
			ALIGN( p );
ffffffff8000106c:	48 89 da             	mov    %rbx,%rdx
			maj->usage 			+= size + sizeof( struct liballoc_minor );
ffffffff8000106f:	01 45 18             	add    %eax,0x18(%rbp)
			ALIGN( p );
ffffffff80001072:	83 e2 0f             	and    $0xf,%edx
ffffffff80001075:	0f 85 72 ff ff ff    	jne    ffffffff80000fed <kmalloc+0x1fd>
ffffffff8000107b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
						ALIGN( p );
ffffffff80001080:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80001085:	e9 71 ff ff ff       	jmpq   ffffffff80000ffb <kmalloc+0x20b>
ffffffff8000108a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001090:	8b 46 14             	mov    0x14(%rsi),%eax
ffffffff80001093:	8b 4e 18             	mov    0x18(%rsi),%ecx
	if ( l_bestBet != NULL )
ffffffff80001096:	48 89 f2             	mov    %rsi,%rdx
	unsigned long long bestSize = 0;
ffffffff80001099:	45 31 f6             	xor    %r14d,%r14d
	startedBet = 0;
ffffffff8000109c:	45 31 ff             	xor    %r15d,%r15d
ffffffff8000109f:	e9 c8 fd ff ff       	jmpq   ffffffff80000e6c <kmalloc+0x7c>
ffffffff800010a4:	0f 1f 40 00          	nopl   0x0(%rax)
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010a8:	48 01 d6             	add    %rdx,%rsi
						l_inuse += size;
ffffffff800010ab:	4c 01 25 f6 12 01 00 	add    %r12,0x112f6(%rip)        # ffffffff800123a8 <l_inuse>
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010b2:	48 8d 46 28          	lea    0x28(%rsi),%rax
						ALIGN( p );
ffffffff800010b6:	48 8d 5e 60          	lea    0x60(%rsi),%rbx
						min->next = (struct liballoc_minor*)((uintptr_t)min + sizeof( struct liballoc_minor ) + min->size);
ffffffff800010ba:	48 89 42 08          	mov    %rax,0x8(%rdx)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff800010be:	41 8d 44 24 28       	lea    0x28(%r12),%eax
						min->next->prev = min;
ffffffff800010c3:	48 89 56 28          	mov    %rdx,0x28(%rsi)
						ALIGN( p );
ffffffff800010c7:	48 89 da             	mov    %rbx,%rdx
						min->next = NULL;
ffffffff800010ca:	48 c7 46 30 00 00 00 	movq   $0x0,0x30(%rsi)
ffffffff800010d1:	00 
						min->magic = LIBALLOC_MAGIC;
ffffffff800010d2:	c7 46 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rsi)
						min->block = maj;
ffffffff800010d9:	48 89 6e 38          	mov    %rbp,0x38(%rsi)
						min->size = size;
ffffffff800010dd:	44 89 66 44          	mov    %r12d,0x44(%rsi)
						min->req_size = req_size;
ffffffff800010e1:	44 89 6e 48          	mov    %r13d,0x48(%rsi)
						maj->usage += size + sizeof( struct liballoc_minor );
ffffffff800010e5:	01 45 18             	add    %eax,0x18(%rbp)
						ALIGN( p );
ffffffff800010e8:	83 e2 0f             	and    $0xf,%edx
ffffffff800010eb:	0f 85 fc fe ff ff    	jne    ffffffff80000fed <kmalloc+0x1fd>
						ALIGN( p );
ffffffff800010f1:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff800010f6:	e9 00 ff ff ff       	jmpq   ffffffff80000ffb <kmalloc+0x20b>
ffffffff800010fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		l_memRoot = allocate_new_page( size );
ffffffff80001100:	44 89 e7             	mov    %r12d,%edi
ffffffff80001103:	e8 78 fc ff ff       	callq  ffffffff80000d80 <allocate_new_page>
		if ( l_memRoot == NULL )
ffffffff80001108:	48 85 c0             	test   %rax,%rax
		l_memRoot = allocate_new_page( size );
ffffffff8000110b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000110e:	48 89 05 ab 12 01 00 	mov    %rax,0x112ab(%rip)        # ffffffff800123c0 <l_memRoot>
		if ( l_memRoot == NULL )
ffffffff80001115:	0f 85 22 fd ff ff    	jne    ffffffff80000e3d <kmalloc+0x4d>
		  liballoc_unlock();
ffffffff8000111b:	31 c0                	xor    %eax,%eax
		  return NULL;
ffffffff8000111d:	31 db                	xor    %ebx,%ebx
		  liballoc_unlock();
ffffffff8000111f:	e8 ac fb ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
		  return NULL;
ffffffff80001124:	e9 dc fe ff ff       	jmpq   ffffffff80001005 <kmalloc+0x215>
			maj->first->prev = (struct liballoc_minor*)((uintptr_t)maj + sizeof(struct liballoc_major) );
ffffffff80001129:	48 8d 45 28          	lea    0x28(%rbp),%rax
ffffffff8000112d:	48 89 02             	mov    %rax,(%rdx)
			maj->first->prev->next = maj->first;
ffffffff80001130:	48 89 55 30          	mov    %rdx,0x30(%rbp)
			maj->first = maj->first->prev;
ffffffff80001134:	48 89 45 20          	mov    %rax,0x20(%rbp)
			maj->first->magic 	= LIBALLOC_MAGIC;
ffffffff80001138:	c7 45 40 de c0 01 c0 	movl   $0xc001c0de,0x40(%rbp)
			maj->first->prev 	= NULL;
ffffffff8000113f:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff80001146:	00 
ffffffff80001147:	e9 04 ff ff ff       	jmpq   ffffffff80001050 <kmalloc+0x260>
ffffffff8000114c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001150 <kfree>:
void PREFIX(free)(void *ptr)
{
	struct liballoc_minor *min;
	struct liballoc_major *maj;

	if ( ptr == NULL ) 
ffffffff80001150:	48 85 ff             	test   %rdi,%rdi
ffffffff80001153:	0f 84 d7 00 00 00    	je     ffffffff80001230 <kfree+0xe0>
{
ffffffff80001159:	53                   	push   %rbx
		FLUSH();
		#endif
		return;
	}

	UNALIGN( ptr );
ffffffff8000115a:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff8000115f:	48 89 fb             	mov    %rdi,%rbx
ffffffff80001162:	48 29 c3             	sub    %rax,%rbx
ffffffff80001165:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80001169:	48 0f 43 df          	cmovae %rdi,%rbx

	liballoc_lock();		// lockit
ffffffff8000116d:	31 c0                	xor    %eax,%eax
ffffffff8000116f:	e8 4c fb ff ff       	callq  ffffffff80000cc0 <liballoc_lock>


	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

	
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001174:	8b 43 f0             	mov    -0x10(%rbx),%eax
	min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff80001177:	48 8d 73 d8          	lea    -0x28(%rbx),%rsi
	if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff8000117b:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80001180:	74 2e                	je     ffffffff800011b0 <kfree+0x60>
	{
		l_errorCount += 1;

		// Check for overrun errors. For all bytes of LIBALLOC_MAGIC 
		if ( 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001182:	89 c2                	mov    %eax,%edx
		l_errorCount += 1;
ffffffff80001184:	48 83 05 0c 12 01 00 	addq   $0x1,0x1120c(%rip)        # ffffffff80012398 <l_errorCount>
ffffffff8000118b:	01 
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000118c:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
		if ( 
ffffffff80001192:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80001198:	0f 84 82 00 00 00    	je     ffffffff80001220 <kfree+0xd0>
			((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000119e:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff800011a2:	74 7c                	je     ffffffff80001220 <kfree+0xd0>
			((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff800011a4:	3c de                	cmp    $0xde,%al
ffffffff800011a6:	74 78                	je     ffffffff80001220 <kfree+0xd0>
	printf( "OK\n");
	FLUSH();
	#endif
	
	liballoc_unlock();		// release the lock
}
ffffffff800011a8:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff800011a9:	31 c0                	xor    %eax,%eax
ffffffff800011ab:	e9 20 fb ff ff       	jmpq   ffffffff80000cd0 <liballoc_unlock>
		maj = min->block;
ffffffff800011b0:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
		l_inuse -= min->size;
ffffffff800011b4:	8b 53 f4             	mov    -0xc(%rbx),%edx
ffffffff800011b7:	48 29 15 ea 11 01 00 	sub    %rdx,0x111ea(%rip)        # ffffffff800123a8 <l_inuse>
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800011be:	8b 4f 18             	mov    0x18(%rdi),%ecx
ffffffff800011c1:	29 d1                	sub    %edx,%ecx
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff800011c3:	48 8b 53 e0          	mov    -0x20(%rbx),%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800011c7:	89 c8                	mov    %ecx,%eax
ffffffff800011c9:	48 8b 4b d8          	mov    -0x28(%rbx),%rcx
ffffffff800011cd:	83 e8 28             	sub    $0x28,%eax
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff800011d0:	48 85 d2             	test   %rdx,%rdx
		maj->usage -= (min->size + sizeof( struct liballoc_minor ));
ffffffff800011d3:	89 47 18             	mov    %eax,0x18(%rdi)
		min->magic  = LIBALLOC_DEAD;		// No mojo.
ffffffff800011d6:	c7 43 f0 ad de ad de 	movl   $0xdeaddead,-0x10(%rbx)
		if ( min->next != NULL ) min->next->prev = min->prev;
ffffffff800011dd:	74 06                	je     ffffffff800011e5 <kfree+0x95>
ffffffff800011df:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff800011e2:	48 8b 0e             	mov    (%rsi),%rcx
		if ( min->prev != NULL ) min->prev->next = min->next;
ffffffff800011e5:	48 85 c9             	test   %rcx,%rcx
ffffffff800011e8:	74 56                	je     ffffffff80001240 <kfree+0xf0>
ffffffff800011ea:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff800011ee:	48 8b 57 20          	mov    0x20(%rdi),%rdx
	if ( maj->first == NULL )	// Block completely unused.
ffffffff800011f2:	48 85 d2             	test   %rdx,%rdx
ffffffff800011f5:	48 8b 0d bc 11 01 00 	mov    0x111bc(%rip),%rcx        # ffffffff800123b8 <l_bestBet>
ffffffff800011fc:	74 52                	je     ffffffff80001250 <kfree+0x100>
		if ( l_bestBet != NULL )
ffffffff800011fe:	48 85 c9             	test   %rcx,%rcx
ffffffff80001201:	74 a5                	je     ffffffff800011a8 <kfree+0x58>
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001203:	8b 51 14             	mov    0x14(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff80001206:	8b 77 14             	mov    0x14(%rdi),%esi
			int bestSize = l_bestBet->size  - l_bestBet->usage;
ffffffff80001209:	2b 51 18             	sub    0x18(%rcx),%edx
			int majSize = maj->size - maj->usage;
ffffffff8000120c:	29 c6                	sub    %eax,%esi
			if ( majSize > bestSize ) l_bestBet = maj;
ffffffff8000120e:	39 f2                	cmp    %esi,%edx
ffffffff80001210:	7d 96                	jge    ffffffff800011a8 <kfree+0x58>
ffffffff80001212:	48 89 3d 9f 11 01 00 	mov    %rdi,0x1119f(%rip)        # ffffffff800123b8 <l_bestBet>
ffffffff80001219:	eb 8d                	jmp    ffffffff800011a8 <kfree+0x58>
ffffffff8000121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			l_possibleOverruns += 1;
ffffffff80001220:	48 83 05 68 11 01 00 	addq   $0x1,0x11168(%rip)        # ffffffff80012390 <l_possibleOverruns>
ffffffff80001227:	01 
		liballoc_unlock();		// release the lock
ffffffff80001228:	31 c0                	xor    %eax,%eax
}
ffffffff8000122a:	5b                   	pop    %rbx
		liballoc_unlock();		// release the lock
ffffffff8000122b:	e9 a0 fa ff ff       	jmpq   ffffffff80000cd0 <liballoc_unlock>
		l_warningCount += 1;
ffffffff80001230:	48 83 05 68 11 01 00 	addq   $0x1,0x11168(%rip)        # ffffffff800123a0 <l_warningCount>
ffffffff80001237:	01 
ffffffff80001238:	c3                   	retq   
ffffffff80001239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( min->prev == NULL ) maj->first = min->next;	
ffffffff80001240:	48 89 57 20          	mov    %rdx,0x20(%rdi)
ffffffff80001244:	eb ac                	jmp    ffffffff800011f2 <kfree+0xa2>
ffffffff80001246:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000124d:	00 00 00 
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001250:	48 39 3d 69 11 01 00 	cmp    %rdi,0x11169(%rip)        # ffffffff800123c0 <l_memRoot>
ffffffff80001257:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff8000125b:	74 3b                	je     ffffffff80001298 <kfree+0x148>
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff8000125d:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80001260:	74 46                	je     ffffffff800012a8 <kfree+0x158>
		if ( maj->prev != NULL ) maj->prev->next = maj->next;
ffffffff80001262:	48 8b 17             	mov    (%rdi),%rdx
ffffffff80001265:	48 85 d2             	test   %rdx,%rdx
ffffffff80001268:	74 08                	je     ffffffff80001272 <kfree+0x122>
ffffffff8000126a:	48 89 42 08          	mov    %rax,0x8(%rdx)
ffffffff8000126e:	48 8b 47 08          	mov    0x8(%rdi),%rax
		if ( maj->next != NULL ) maj->next->prev = maj->prev;
ffffffff80001272:	48 85 c0             	test   %rax,%rax
ffffffff80001275:	74 03                	je     ffffffff8000127a <kfree+0x12a>
ffffffff80001277:	48 89 10             	mov    %rdx,(%rax)
		liballoc_free( maj, maj->pages );
ffffffff8000127a:	8b 77 10             	mov    0x10(%rdi),%esi
		l_allocated -= maj->size;
ffffffff8000127d:	8b 47 14             	mov    0x14(%rdi),%eax
ffffffff80001280:	48 29 05 29 11 01 00 	sub    %rax,0x11129(%rip)        # ffffffff800123b0 <l_allocated>
		liballoc_free( maj, maj->pages );
ffffffff80001287:	e8 54 fa ff ff       	callq  ffffffff80000ce0 <liballoc_free>
ffffffff8000128c:	e9 17 ff ff ff       	jmpq   ffffffff800011a8 <kfree+0x58>
ffffffff80001291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_memRoot == maj ) l_memRoot = maj->next;
ffffffff80001298:	48 89 05 21 11 01 00 	mov    %rax,0x11121(%rip)        # ffffffff800123c0 <l_memRoot>
ffffffff8000129f:	eb bc                	jmp    ffffffff8000125d <kfree+0x10d>
ffffffff800012a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		if ( l_bestBet == maj ) l_bestBet = NULL;
ffffffff800012a8:	48 c7 05 05 11 01 00 	movq   $0x0,0x11105(%rip)        # ffffffff800123b8 <l_bestBet>
ffffffff800012af:	00 00 00 00 
ffffffff800012b3:	eb ad                	jmp    ffffffff80001262 <kfree+0x112>
ffffffff800012b5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800012bc:	00 00 00 00 

ffffffff800012c0 <kcalloc>:
void* PREFIX(calloc)(size_t nobj, size_t size)
{
       int real_size;
       void *p;

       real_size = nobj * size;
ffffffff800012c0:	0f af fe             	imul   %esi,%edi
{
ffffffff800012c3:	53                   	push   %rbx
       
       p = PREFIX(malloc)( real_size );
ffffffff800012c4:	48 63 df             	movslq %edi,%rbx
ffffffff800012c7:	48 89 df             	mov    %rbx,%rdi
ffffffff800012ca:	e8 21 fb ff ff       	callq  ffffffff80000df0 <kmalloc>
	for ( i = 0; i < n ; i++)
ffffffff800012cf:	48 85 db             	test   %rbx,%rbx
ffffffff800012d2:	74 1b                	je     ffffffff800012ef <kcalloc+0x2f>
ffffffff800012d4:	31 c9                	xor    %ecx,%ecx
ffffffff800012d6:	31 d2                	xor    %edx,%edx
ffffffff800012d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800012df:	00 
		((char*)s)[i] = c;
ffffffff800012e0:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
	for ( i = 0; i < n ; i++)
ffffffff800012e4:	8d 51 01             	lea    0x1(%rcx),%edx
ffffffff800012e7:	48 39 d3             	cmp    %rdx,%rbx
ffffffff800012ea:	48 89 d1             	mov    %rdx,%rcx
ffffffff800012ed:	77 f1                	ja     ffffffff800012e0 <kcalloc+0x20>

       liballoc_memset( p, 0, real_size );

       return p;
}
ffffffff800012ef:	5b                   	pop    %rbx
ffffffff800012f0:	c3                   	retq   
ffffffff800012f1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800012f8:	00 00 00 00 
ffffffff800012fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80001300 <krealloc>:



void*   PREFIX(realloc)(void *p, size_t size)
{
ffffffff80001300:	41 54                	push   %r12
ffffffff80001302:	55                   	push   %rbp
ffffffff80001303:	53                   	push   %rbx
ffffffff80001304:	48 89 fb             	mov    %rdi,%rbx
ffffffff80001307:	48 83 ec 10          	sub    $0x10,%rsp
	void *ptr;
	struct liballoc_minor *min;
	unsigned int real_size;
	
	// Honour the case of size == 0 => free old and return NULL
	if ( size == 0 )
ffffffff8000130b:	48 85 f6             	test   %rsi,%rsi
ffffffff8000130e:	0f 84 54 01 00 00    	je     ffffffff80001468 <krealloc+0x168>
		PREFIX(free)( p );
		return NULL;
	}

	// In the case of a NULL pointer, return a simple malloc.
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001314:	48 85 ff             	test   %rdi,%rdi
ffffffff80001317:	49 89 f4             	mov    %rsi,%r12
ffffffff8000131a:	0f 84 e0 00 00 00    	je     ffffffff80001400 <krealloc+0x100>

	// Unalign the pointer if required.
	ptr = p;
	UNALIGN(ptr);
ffffffff80001320:	48 0f be 47 f0       	movsbq -0x10(%rdi),%rax
ffffffff80001325:	48 89 fd             	mov    %rdi,%rbp
ffffffff80001328:	48 29 c5             	sub    %rax,%rbp
ffffffff8000132b:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff8000132f:	48 0f 43 ef          	cmovae %rdi,%rbp

	liballoc_lock();		// lockit
ffffffff80001333:	31 c0                	xor    %eax,%eax
ffffffff80001335:	e8 86 f9 ff ff       	callq  ffffffff80000cc0 <liballoc_lock>

		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));

		// Ensure it is a valid structure.
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff8000133a:	8b 45 f0             	mov    -0x10(%rbp),%eax
		min = (struct liballoc_minor*)((uintptr_t)ptr - sizeof( struct liballoc_minor ));
ffffffff8000133d:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
		if ( min->magic != LIBALLOC_MAGIC ) 
ffffffff80001341:	3d de c0 01 c0       	cmp    $0xc001c0de,%eax
ffffffff80001346:	0f 85 c4 00 00 00    	jne    ffffffff80001410 <krealloc+0x110>
		
		// Definitely a memory block.
		
		real_size = min->req_size;

		if ( real_size >= size ) 
ffffffff8000134c:	8b 6d f8             	mov    -0x8(%rbp),%ebp
ffffffff8000134f:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80001352:	0f 83 90 00 00 00    	jae    ffffffff800013e8 <krealloc+0xe8>
			min->req_size = size;
			liballoc_unlock();
			return p;
		}

	liballoc_unlock();
ffffffff80001358:	31 c0                	xor    %eax,%eax
ffffffff8000135a:	e8 71 f9 ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>

	// If we got here then we're reallocating to a block bigger than us.
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff8000135f:	4c 89 e7             	mov    %r12,%rdi
ffffffff80001362:	e8 89 fa ff ff       	callq  ffffffff80000df0 <kmalloc>
  while ( n >= sizeof(unsigned int) )
ffffffff80001367:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff8000136b:	0f 86 e7 00 00 00    	jbe    ffffffff80001458 <krealloc+0x158>
ffffffff80001371:	48 83 ed 04          	sub    $0x4,%rbp
ffffffff80001375:	31 d2                	xor    %edx,%edx
ffffffff80001377:	48 89 ef             	mov    %rbp,%rdi
ffffffff8000137a:	48 c1 ef 02          	shr    $0x2,%rdi
ffffffff8000137e:	48 8d 34 bd 04 00 00 	lea    0x4(,%rdi,4),%rsi
ffffffff80001385:	00 
ffffffff80001386:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000138d:	00 00 00 
      *ldest++ = *lsrc++;
ffffffff80001390:	8b 0c 13             	mov    (%rbx,%rdx,1),%ecx
ffffffff80001393:	89 0c 10             	mov    %ecx,(%rax,%rdx,1)
ffffffff80001396:	48 83 c2 04          	add    $0x4,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff8000139a:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8000139d:	75 f1                	jne    ffffffff80001390 <krealloc+0x90>
ffffffff8000139f:	48 f7 df             	neg    %rdi
ffffffff800013a2:	4c 8d 04 13          	lea    (%rbx,%rdx,1),%r8
ffffffff800013a6:	48 01 c2             	add    %rax,%rdx
ffffffff800013a9:	48 8d 6c bd 00       	lea    0x0(%rbp,%rdi,4),%rbp
  while ( n > 0 )
ffffffff800013ae:	48 85 ed             	test   %rbp,%rbp
ffffffff800013b1:	74 14                	je     ffffffff800013c7 <krealloc+0xc7>
ffffffff800013b3:	31 c9                	xor    %ecx,%ecx
      *cdest++ = *csrc++;
ffffffff800013b5:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff800013ba:	40 88 34 0a          	mov    %sil,(%rdx,%rcx,1)
ffffffff800013be:	48 83 c1 01          	add    $0x1,%rcx
  while ( n > 0 )
ffffffff800013c2:	48 39 e9             	cmp    %rbp,%rcx
ffffffff800013c5:	75 ee                	jne    ffffffff800013b5 <krealloc+0xb5>
	liballoc_memcpy( ptr, p, real_size );
	PREFIX(free)( p );
ffffffff800013c7:	48 89 df             	mov    %rbx,%rdi
ffffffff800013ca:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff800013cf:	e8 7c fd ff ff       	callq  ffffffff80001150 <kfree>
ffffffff800013d4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax

	return ptr;
}
ffffffff800013d9:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800013dd:	5b                   	pop    %rbx
ffffffff800013de:	5d                   	pop    %rbp
ffffffff800013df:	41 5c                	pop    %r12
ffffffff800013e1:	c3                   	retq   
ffffffff800013e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
			min->req_size = size;
ffffffff800013e8:	44 89 62 20          	mov    %r12d,0x20(%rdx)
			liballoc_unlock();
ffffffff800013ec:	31 c0                	xor    %eax,%eax
ffffffff800013ee:	e8 dd f8 ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
			return p;
ffffffff800013f3:	48 89 d8             	mov    %rbx,%rax
}
ffffffff800013f6:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800013fa:	5b                   	pop    %rbx
ffffffff800013fb:	5d                   	pop    %rbp
ffffffff800013fc:	41 5c                	pop    %r12
ffffffff800013fe:	c3                   	retq   
ffffffff800013ff:	90                   	nop
ffffffff80001400:	48 83 c4 10          	add    $0x10,%rsp
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff80001404:	48 89 f7             	mov    %rsi,%rdi
}
ffffffff80001407:	5b                   	pop    %rbx
ffffffff80001408:	5d                   	pop    %rbp
ffffffff80001409:	41 5c                	pop    %r12
	if ( p == NULL ) return PREFIX(malloc)( size );
ffffffff8000140b:	e9 e0 f9 ff ff       	jmpq   ffffffff80000df0 <kmalloc>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001410:	89 c2                	mov    %eax,%edx
			l_errorCount += 1;
ffffffff80001412:	48 83 05 7e 0f 01 00 	addq   $0x1,0x10f7e(%rip)        # ffffffff80012398 <l_errorCount>
ffffffff80001419:	01 
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff8000141a:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
			if ( 
ffffffff80001420:	81 fa de c0 01 00    	cmp    $0x1c0de,%edx
ffffffff80001426:	74 20                	je     ffffffff80001448 <krealloc+0x148>
				((min->magic & 0xFFFFFF) == (LIBALLOC_MAGIC & 0xFFFFFF)) || 
ffffffff80001428:	66 3d de c0          	cmp    $0xc0de,%ax
ffffffff8000142c:	74 1a                	je     ffffffff80001448 <krealloc+0x148>
				((min->magic & 0xFFFF) == (LIBALLOC_MAGIC & 0xFFFF)) || 
ffffffff8000142e:	3c de                	cmp    $0xde,%al
ffffffff80001430:	74 16                	je     ffffffff80001448 <krealloc+0x148>
			liballoc_unlock();		// release the lock
ffffffff80001432:	31 c0                	xor    %eax,%eax
ffffffff80001434:	e8 97 f8 ff ff       	callq  ffffffff80000cd0 <liballoc_unlock>
}
ffffffff80001439:	48 83 c4 10          	add    $0x10,%rsp
			return NULL;
ffffffff8000143d:	31 c0                	xor    %eax,%eax
}
ffffffff8000143f:	5b                   	pop    %rbx
ffffffff80001440:	5d                   	pop    %rbp
ffffffff80001441:	41 5c                	pop    %r12
ffffffff80001443:	c3                   	retq   
ffffffff80001444:	0f 1f 40 00          	nopl   0x0(%rax)
				l_possibleOverruns += 1;
ffffffff80001448:	48 83 05 40 0f 01 00 	addq   $0x1,0x10f40(%rip)        # ffffffff80012390 <l_possibleOverruns>
ffffffff8000144f:	01 
ffffffff80001450:	eb e0                	jmp    ffffffff80001432 <krealloc+0x132>
ffffffff80001452:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	ptr = PREFIX(malloc)( size );					// We need to allocate new memory
ffffffff80001458:	48 89 c2             	mov    %rax,%rdx
  while ( n >= sizeof(unsigned int) )
ffffffff8000145b:	49 89 d8             	mov    %rbx,%r8
ffffffff8000145e:	e9 4b ff ff ff       	jmpq   ffffffff800013ae <krealloc+0xae>
ffffffff80001463:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		PREFIX(free)( p );
ffffffff80001468:	e8 e3 fc ff ff       	callq  ffffffff80001150 <kfree>
		return NULL;
ffffffff8000146d:	31 c0                	xor    %eax,%eax
ffffffff8000146f:	eb 85                	jmp    ffffffff800013f6 <krealloc+0xf6>
ffffffff80001471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001478:	00 00 00 
ffffffff8000147b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001480 <pmm_init>:

//Initialize the Physical Memory Manager
void pmm_init()
{
    //memory map helper variables
    uint64_t mmap_entries = boot_info.tag_memmap->entries;
ffffffff80001480:	48 8b 05 69 92 00 00 	mov    0x9269(%rip),%rax        # ffffffff8000a6f0 <boot_info+0x10>
ffffffff80001487:	48 8b 35 d2 92 00 00 	mov    0x92d2(%rip),%rsi        # ffffffff8000a760 <pmm_info>
ffffffff8000148e:	4c 8b 58 10          	mov    0x10(%rax),%r11
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
    //uint8_t* type = NULL;

    //iterate through the memory map, find the largest memory segment, calculate total memory size
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001492:	4d 85 db             	test   %r11,%r11
ffffffff80001495:	0f 84 c5 00 00 00    	je     ffffffff80001560 <pmm_init+0xe0>
{
ffffffff8000149b:	55                   	push   %rbp
ffffffff8000149c:	53                   	push   %rbx
ffffffff8000149d:	48 83 c0 18          	add    $0x18,%rax
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014a1:	45 31 c9             	xor    %r9d,%r9d
ffffffff800014a4:	31 db                	xor    %ebx,%ebx
    uint64_t mmap_largest_segment_size = 0;     //Size of the largest segment
ffffffff800014a6:	45 31 d2             	xor    %r10d,%r10d
{
ffffffff800014a9:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t mmap_largest_segment_base = 0;     //Address of the largest segment
ffffffff800014ad:	31 c9                	xor    %ecx,%ecx
ffffffff800014af:	4c 8b 05 e2 92 00 00 	mov    0x92e2(%rip),%r8        # ffffffff8000a798 <pmm_vmm_info+0x8>
ffffffff800014b6:	48 8b 3d e3 92 00 00 	mov    0x92e3(%rip),%rdi        # ffffffff8000a7a0 <pmm_vmm_info+0x10>
ffffffff800014bd:	eb 1e                	jmp    ffffffff800014dd <pmm_init+0x5d>
ffffffff800014bf:	90                   	nop
        {
            continue;
        }

        //Capture the largest segment size
        if(current_entry->length > mmap_largest_segment_size)
ffffffff800014c0:	4c 39 d2             	cmp    %r10,%rdx
ffffffff800014c3:	76 0b                	jbe    ffffffff800014d0 <pmm_init+0x50>
ffffffff800014c5:	83 fd 01             	cmp    $0x1,%ebp
ffffffff800014c8:	75 06                	jne    ffffffff800014d0 <pmm_init+0x50>
        {
            mmap_largest_segment_base = current_entry->base;
ffffffff800014ca:	48 8b 08             	mov    (%rax),%rcx
ffffffff800014cd:	49 89 d2             	mov    %rdx,%r10
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014d0:	48 83 c3 01          	add    $0x1,%rbx
ffffffff800014d4:	48 83 c0 18          	add    $0x18,%rax
ffffffff800014d8:	49 39 db             	cmp    %rbx,%r11
ffffffff800014db:	74 2b                	je     ffffffff80001508 <pmm_init+0x88>
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800014dd:	48 8b 50 08          	mov    0x8(%rax),%rdx
        if(current_entry->type == 0x1002)
ffffffff800014e1:	8b 68 10             	mov    0x10(%rax),%ebp
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800014e4:	48 01 d6             	add    %rdx,%rsi
        if(current_entry->type == 0x1002)
ffffffff800014e7:	81 fd 02 10 00 00    	cmp    $0x1002,%ebp
ffffffff800014ed:	75 d1                	jne    ffffffff800014c0 <pmm_init+0x40>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014ef:	48 83 c3 01          	add    $0x1,%rbx
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff800014f3:	4c 8b 00             	mov    (%rax),%r8
ffffffff800014f6:	48 83 c0 18          	add    $0x18,%rax
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff800014fa:	49 39 db             	cmp    %rbx,%r11
        pmm_info.totalmem = pmm_info.totalmem + current_entry->length;
ffffffff800014fd:	48 89 d7             	mov    %rdx,%rdi
            pmm_vmm_info.fb_base = current_entry->base;
ffffffff80001500:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001506:	75 d5                	jne    ffffffff800014dd <pmm_init+0x5d>
ffffffff80001508:	45 84 c9             	test   %r9b,%r9b
ffffffff8000150b:	48 89 35 4e 92 00 00 	mov    %rsi,0x924e(%rip)        # ffffffff8000a760 <pmm_info>
ffffffff80001512:	74 0e                	je     ffffffff80001522 <pmm_init+0xa2>
ffffffff80001514:	4c 89 05 7d 92 00 00 	mov    %r8,0x927d(%rip)        # ffffffff8000a798 <pmm_vmm_info+0x8>
ffffffff8000151b:	48 89 3d 7e 92 00 00 	mov    %rdi,0x927e(%rip)        # ffffffff8000a7a0 <pmm_vmm_info+0x10>
            mmap_largest_segment_size = current_entry->length;
        }
    };

    //Populate the PMM state variables
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001522:	48 89 f0             	mov    %rsi,%rax
ffffffff80001525:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80001529:	48 89 05 40 92 00 00 	mov    %rax,0x9240(%rip)        # ffffffff8000a770 <pmm_info+0x10>
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001530:	48 89 05 31 92 00 00 	mov    %rax,0x9231(%rip)        # ffffffff8000a768 <pmm_info+0x8>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001537:	48 89 f0             	mov    %rsi,%rax
ffffffff8000153a:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000153e:	48 83 c0 01          	add    $0x1,%rax
    
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001542:	48 39 c2             	cmp    %rax,%rdx
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001545:	48 89 05 34 92 00 00 	mov    %rax,0x9234(%rip)        # ffffffff8000a780 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff8000154c:	73 4a                	jae    ffffffff80001598 <pmm_init+0x118>
        {
            printf("Bitmap too large");
ffffffff8000154e:	48 c7 c7 aa 4d 00 80 	mov    $0xffffffff80004daa,%rdi
ffffffff80001555:	31 c0                	xor    %eax,%eax
ffffffff80001557:	e8 f4 1f 00 00       	callq  ffffffff80003550 <printf_>
ffffffff8000155c:	eb fe                	jmp    ffffffff8000155c <pmm_init+0xdc>
ffffffff8000155e:	66 90                	xchg   %ax,%ax
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff80001560:	48 89 f0             	mov    %rsi,%rax
ffffffff80001563:	48 c1 e8 0c          	shr    $0xc,%rax
    pmm_info.usedpages = pmm_info.totalpages;
ffffffff80001567:	48 89 05 fa 91 00 00 	mov    %rax,0x91fa(%rip)        # ffffffff8000a768 <pmm_info+0x8>
    pmm_info.totalpages = pmm_info.totalmem / 4096;
ffffffff8000156e:	48 89 05 fb 91 00 00 	mov    %rax,0x91fb(%rip)        # ffffffff8000a770 <pmm_info+0x10>
    pmm_info.bitmap_size = (pmm_info.totalpages / 8) + 1;
ffffffff80001575:	48 89 f0             	mov    %rsi,%rax
ffffffff80001578:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000157c:	48 83 c0 01          	add    $0x1,%rax
ffffffff80001580:	48 89 05 f9 91 00 00 	mov    %rax,0x91f9(%rip)        # ffffffff8000a780 <pmm_info+0x20>
    if(pmm_info.bitmap_size > current_entry->length) 
ffffffff80001587:	48 8b 04 25 08 00 00 	mov    0x8,%rax
ffffffff8000158e:	00 
ffffffff8000158f:	0f 0b                	ud2    
ffffffff80001591:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80001598:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000159f:	80 ff ff 
            for(;;){}   //hang
        }
    
    pmm_info.bitmap = (uint8_t*)phys_to_hh_data(mmap_largest_segment_base); 

    printf("Total Memory: %d\n", (pmm_info.totalmem));
ffffffff800015a2:	48 c7 c7 bb 4d 00 80 	mov    $0xffffffff80004dbb,%rdi
ffffffff800015a9:	48 01 c1             	add    %rax,%rcx
ffffffff800015ac:	31 c0                	xor    %eax,%eax
ffffffff800015ae:	48 89 0d c3 91 00 00 	mov    %rcx,0x91c3(%rip)        # ffffffff8000a778 <pmm_info+0x18>
ffffffff800015b5:	e8 96 1f 00 00       	callq  ffffffff80003550 <printf_>
    printf("Total Pages: %d   Used Pages: %d\n", pmm_info.totalpages, pmm_info.usedpages);
ffffffff800015ba:	48 8b 15 a7 91 00 00 	mov    0x91a7(%rip),%rdx        # ffffffff8000a768 <pmm_info+0x8>
ffffffff800015c1:	48 8b 35 a8 91 00 00 	mov    0x91a8(%rip),%rsi        # ffffffff8000a770 <pmm_info+0x10>
ffffffff800015c8:	48 c7 c7 f8 4d 00 80 	mov    $0xffffffff80004df8,%rdi
ffffffff800015cf:	31 c0                	xor    %eax,%eax
ffffffff800015d1:	e8 7a 1f 00 00       	callq  ffffffff80003550 <printf_>
    printf("Bitmap Addr: %p  Bitmap Size (bytes): %d\n", pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff800015d6:	48 8b 15 a3 91 00 00 	mov    0x91a3(%rip),%rdx        # ffffffff8000a780 <pmm_info+0x20>
ffffffff800015dd:	48 8b 35 94 91 00 00 	mov    0x9194(%rip),%rsi        # ffffffff8000a778 <pmm_info+0x18>
ffffffff800015e4:	31 c0                	xor    %eax,%eax
ffffffff800015e6:	48 c7 c7 20 4e 00 80 	mov    $0xffffffff80004e20,%rdi
ffffffff800015ed:	e8 5e 1f 00 00       	callq  ffffffff80003550 <printf_>

    //Set all bitmap bits to 1
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff800015f2:	48 83 3d 86 91 00 00 	cmpq   $0x0,0x9186(%rip)        # ffffffff8000a780 <pmm_info+0x20>
ffffffff800015f9:	00 
ffffffff800015fa:	74 1c                	je     ffffffff80001618 <pmm_init+0x198>
ffffffff800015fc:	31 c0                	xor    %eax,%eax
ffffffff800015fe:	66 90                	xchg   %ax,%ax
        {
        pmm_info.bitmap[i] = 0xff;
ffffffff80001600:	48 8b 15 71 91 00 00 	mov    0x9171(%rip),%rdx        # ffffffff8000a778 <pmm_info+0x18>
ffffffff80001607:	c6 04 02 ff          	movb   $0xff,(%rdx,%rax,1)
    for (uint64_t i = 0; i < pmm_info.bitmap_size; i++)
ffffffff8000160b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000160f:	48 39 05 6a 91 00 00 	cmp    %rax,0x916a(%rip)        # ffffffff8000a780 <pmm_info+0x20>
ffffffff80001616:	77 e8                	ja     ffffffff80001600 <pmm_init+0x180>
    

    //printf("Number of MMAP Entries: %d\n", mmap_entries);

    //Iterate through the memory map again, unset bitmap for available memory
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001618:	31 f6                	xor    %esi,%esi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff8000161a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
ffffffff80001620:	eb 0f                	jmp    ffffffff80001631 <pmm_init+0x1b1>
ffffffff80001622:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001628:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000162c:	48 39 de             	cmp    %rbx,%rsi
ffffffff8000162f:	74 69                	je     ffffffff8000169a <pmm_init+0x21a>
    {
        current_entry = &boot_info.tag_memmap->memmap[i];

        if(current_entry->type == 1)
ffffffff80001631:	48 8b 15 b8 90 00 00 	mov    0x90b8(%rip),%rdx        # ffffffff8000a6f0 <boot_info+0x10>
ffffffff80001638:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
ffffffff8000163c:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
ffffffff80001640:	83 78 28 01          	cmpl   $0x1,0x28(%rax)
ffffffff80001644:	75 e2                	jne    ffffffff80001628 <pmm_init+0x1a8>
        {
            uint64_t pages = current_entry->length / 4096;
ffffffff80001646:	48 8b 50 20          	mov    0x20(%rax),%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff8000164a:	48 8b 40 18          	mov    0x18(%rax),%rax
            uint64_t pages = current_entry->length / 4096;
ffffffff8000164e:	48 c1 ea 0c          	shr    $0xc,%rdx
            uint64_t align = current_entry->base / 4096;
ffffffff80001652:	48 c1 e8 0c          	shr    $0xc,%rax
            //printf("Index: %d  Pages: %d\n", align, pages);

            for(uint64_t j = 0; j < pages; j++)
ffffffff80001656:	48 85 d2             	test   %rdx,%rdx
ffffffff80001659:	74 cd                	je     ffffffff80001628 <pmm_init+0x1a8>
ffffffff8000165b:	48 01 c2             	add    %rax,%rdx
ffffffff8000165e:	66 90                	xchg   %ax,%ax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001660:	48 89 c7             	mov    %rax,%rdi
ffffffff80001663:	89 c1                	mov    %eax,%ecx
ffffffff80001665:	45 89 c1             	mov    %r8d,%r9d
ffffffff80001668:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff8000166c:	48 03 3d 05 91 00 00 	add    0x9105(%rip),%rdi        # ffffffff8000a778 <pmm_info+0x18>
ffffffff80001673:	83 e1 07             	and    $0x7,%ecx
ffffffff80001676:	41 d3 e1             	shl    %cl,%r9d
                //uint64_t bitindex = align % 8;
                //pmm_info.bitmap[byteindex] &= ~(1 << bitindex);
                
                bitmap_unset(pmm_info.bitmap, align);

                align++;                    //increment page index
ffffffff80001679:	48 83 c0 01          	add    $0x1,%rax
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff8000167d:	44 89 c9             	mov    %r9d,%ecx
ffffffff80001680:	f7 d1                	not    %ecx
ffffffff80001682:	20 0f                	and    %cl,(%rdi)
                pmm_info.usedpages--;       //decrement used page counter
ffffffff80001684:	48 83 2d dc 90 00 00 	subq   $0x1,0x90dc(%rip)        # ffffffff8000a768 <pmm_info+0x8>
ffffffff8000168b:	01 
            for(uint64_t j = 0; j < pages; j++)
ffffffff8000168c:	48 39 d0             	cmp    %rdx,%rax
ffffffff8000168f:	75 cf                	jne    ffffffff80001660 <pmm_init+0x1e0>
    for (uint64_t i = 0; i < mmap_entries; i++)
ffffffff80001691:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001695:	48 39 de             	cmp    %rbx,%rsi
ffffffff80001698:	75 97                	jne    ffffffff80001631 <pmm_init+0x1b1>
            }
        }
    }

    //Make certain the NULL page is unavailable
    bitmap_set(pmm_info.bitmap, 0);
ffffffff8000169a:	48 8b 05 d7 90 00 00 	mov    0x90d7(%rip),%rax        # ffffffff8000a778 <pmm_info+0x18>
    pmm_info.usedpages++;

    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016a1:	48 c7 c7 cd 4d 00 80 	mov    $0xffffffff80004dcd,%rdi
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff800016a8:	80 08 01             	orb    $0x1,(%rax)
    pmm_info.usedpages++;
ffffffff800016ab:	48 8b 05 b6 90 00 00 	mov    0x90b6(%rip),%rax        # ffffffff8000a768 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016b2:	48 8b 35 b7 90 00 00 	mov    0x90b7(%rip),%rsi        # ffffffff8000a770 <pmm_info+0x10>
    pmm_info.usedpages++;
ffffffff800016b9:	48 83 c0 01          	add    $0x1,%rax
ffffffff800016bd:	48 89 05 a4 90 00 00 	mov    %rax,0x90a4(%rip)        # ffffffff8000a768 <pmm_info+0x8>
    printf("Available Pages: %d\n", (pmm_info.totalpages - pmm_info.usedpages));
ffffffff800016c4:	48 29 c6             	sub    %rax,%rsi
ffffffff800016c7:	31 c0                	xor    %eax,%eax
ffffffff800016c9:	e8 82 1e 00 00       	callq  ffffffff80003550 <printf_>
    printf("PMM Initialized\n");

}
ffffffff800016ce:	48 83 c4 08          	add    $0x8,%rsp
    printf("PMM Initialized\n");
ffffffff800016d2:	48 c7 c7 e2 4d 00 80 	mov    $0xffffffff80004de2,%rdi
ffffffff800016d9:	31 c0                	xor    %eax,%eax
}
ffffffff800016db:	5b                   	pop    %rbx
ffffffff800016dc:	5d                   	pop    %rbp
    printf("PMM Initialized\n");
ffffffff800016dd:	e9 6e 1e 00 00       	jmpq   ffffffff80003550 <printf_>
ffffffff800016e2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800016e9:	00 00 00 00 
ffffffff800016ed:	0f 1f 00             	nopl   (%rax)

ffffffff800016f0 <pmm_allocpage>:


void* pmm_allocpage()
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff800016f0:	48 8b 05 79 90 00 00 	mov    0x9079(%rip),%rax        # ffffffff8000a770 <pmm_info+0x10>
ffffffff800016f7:	48 39 05 6a 90 00 00 	cmp    %rax,0x906a(%rip)        # ffffffff8000a768 <pmm_info+0x8>
ffffffff800016fe:	0f 83 7c 00 00 00    	jae    ffffffff80001780 <pmm_allocpage+0x90>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff80001704:	48 8b 3d 75 90 00 00 	mov    0x9075(%rip),%rdi        # ffffffff8000a780 <pmm_info+0x20>
ffffffff8000170b:	48 8b 35 66 90 00 00 	mov    0x9066(%rip),%rsi        # ffffffff8000a778 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001712:	48 85 ff             	test   %rdi,%rdi
ffffffff80001715:	74 25                	je     ffffffff8000173c <pmm_allocpage+0x4c>
ffffffff80001717:	31 c9                	xor    %ecx,%ecx
        if(bitmap[i] != 0xff)
ffffffff80001719:	0f b6 14 0e          	movzbl (%rsi,%rcx,1),%edx
ffffffff8000171d:	80 fa ff             	cmp    $0xff,%dl
ffffffff80001720:	74 11                	je     ffffffff80001733 <pmm_allocpage+0x43>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001722:	31 c0                	xor    %eax,%eax
                if(!(bitmap[i] & (1 << j)))
ffffffff80001724:	0f a3 c2             	bt     %eax,%edx
ffffffff80001727:	73 27                	jae    ffffffff80001750 <pmm_allocpage+0x60>
            for(uint64_t j = 0; j < 8; j++)
ffffffff80001729:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000172d:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80001731:	75 f1                	jne    ffffffff80001724 <pmm_allocpage+0x34>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001733:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80001737:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8000173a:	75 dd                	jne    ffffffff80001719 <pmm_allocpage+0x29>
ffffffff8000173c:	ba 01 00 00 00       	mov    $0x1,%edx
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff80001741:	08 16                	or     %dl,(%rsi)
    for(uint64_t i = 0; i < size; i++)
ffffffff80001743:	31 c0                	xor    %eax,%eax
    
    bitmap_set(pmm_info.bitmap, index);

    pmm_info.usedpages++;
ffffffff80001745:	48 83 05 1b 90 00 00 	addq   $0x1,0x901b(%rip)        # ffffffff8000a768 <pmm_info+0x8>
ffffffff8000174c:	01 

    return (void*)(index * PAGE_SIZE);
ffffffff8000174d:	c3                   	retq   
ffffffff8000174e:	66 90                	xchg   %ax,%ax
                    return (i * 8) + j;
ffffffff80001750:	48 8d 0c c8          	lea    (%rax,%rcx,8),%rcx
ffffffff80001754:	48 89 ca             	mov    %rcx,%rdx
ffffffff80001757:	48 89 c8             	mov    %rcx,%rax
ffffffff8000175a:	83 e1 07             	and    $0x7,%ecx
ffffffff8000175d:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80001761:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80001765:	48 01 d6             	add    %rdx,%rsi
ffffffff80001768:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000176d:	d3 e2                	shl    %cl,%edx
    bitmap[bit / 8] |= (1 << (bit % 8));
ffffffff8000176f:	08 16                	or     %dl,(%rsi)
    pmm_info.usedpages++;
ffffffff80001771:	48 83 05 ef 8f 00 00 	addq   $0x1,0x8fef(%rip)        # ffffffff8000a768 <pmm_info+0x8>
ffffffff80001778:	01 
    return (void*)(index * PAGE_SIZE);
ffffffff80001779:	c3                   	retq   
ffffffff8000177a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return NULL;
ffffffff80001780:	31 c0                	xor    %eax,%eax
}
ffffffff80001782:	c3                   	retq   
ffffffff80001783:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000178a:	00 00 00 00 
ffffffff8000178e:	66 90                	xchg   %ax,%ax

ffffffff80001790 <pmm_freepage>:
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001790:	48 89 fa             	mov    %rdi,%rdx


void pmm_freepage(void* page)
{
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001793:	48 c1 ef 0c          	shr    $0xc,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001797:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000179c:	48 c1 ea 0f          	shr    $0xf,%rdx
ffffffff800017a0:	48 03 15 d1 8f 00 00 	add    0x8fd1(%rip),%rdx        # ffffffff8000a778 <pmm_info+0x18>
ffffffff800017a7:	89 f9                	mov    %edi,%ecx
ffffffff800017a9:	83 e1 07             	and    $0x7,%ecx
ffffffff800017ac:	d3 e0                	shl    %cl,%eax
ffffffff800017ae:	f7 d0                	not    %eax
ffffffff800017b0:	20 02                	and    %al,(%rdx)
    bitmap_unset(pmm_info.bitmap, index);
    pmm_info.usedpages--;
ffffffff800017b2:	48 83 2d ae 8f 00 00 	subq   $0x1,0x8fae(%rip)        # ffffffff8000a768 <pmm_info+0x8>
ffffffff800017b9:	01 
}
ffffffff800017ba:	c3                   	retq   
ffffffff800017bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800017c0 <pmm_allocpages>:

void* pmm_allocpages(uint64_t count)
{
    if(pmm_info.usedpages >= pmm_info.totalpages)
ffffffff800017c0:	4c 8b 15 a1 8f 00 00 	mov    0x8fa1(%rip),%r10        # ffffffff8000a768 <pmm_info+0x8>
ffffffff800017c7:	4c 3b 15 a2 8f 00 00 	cmp    0x8fa2(%rip),%r10        # ffffffff8000a770 <pmm_info+0x10>
ffffffff800017ce:	73 73                	jae    ffffffff80001843 <pmm_allocpages+0x83>
        return NULL;
    
    uint64_t index = get_first_unset(pmm_info.bitmap, pmm_info.bitmap_size);
ffffffff800017d0:	48 8b 05 a9 8f 00 00 	mov    0x8fa9(%rip),%rax        # ffffffff8000a780 <pmm_info+0x20>
ffffffff800017d7:	4c 8b 05 9a 8f 00 00 	mov    0x8f9a(%rip),%r8        # ffffffff8000a778 <pmm_info+0x18>
    for(uint64_t i = 0; i < size; i++)
ffffffff800017de:	48 85 c0             	test   %rax,%rax
ffffffff800017e1:	74 28                	je     ffffffff8000180b <pmm_allocpages+0x4b>
ffffffff800017e3:	31 f6                	xor    %esi,%esi
        if(bitmap[i] != 0xff)
ffffffff800017e5:	41 0f b6 0c 30       	movzbl (%r8,%rsi,1),%ecx
ffffffff800017ea:	80 f9 ff             	cmp    $0xff,%cl
ffffffff800017ed:	74 11                	je     ffffffff80001800 <pmm_allocpages+0x40>
            for(uint64_t j = 0; j < 8; j++)
ffffffff800017ef:	31 d2                	xor    %edx,%edx
                if(!(bitmap[i] & (1 << j)))
ffffffff800017f1:	0f a3 d1             	bt     %edx,%ecx
ffffffff800017f4:	73 5a                	jae    ffffffff80001850 <pmm_allocpages+0x90>
            for(uint64_t j = 0; j < 8; j++)
ffffffff800017f6:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800017fa:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff800017fe:	75 f1                	jne    ffffffff800017f1 <pmm_allocpages+0x31>
    for(uint64_t i = 0; i < size; i++)
ffffffff80001800:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80001804:	48 39 f0             	cmp    %rsi,%rax
ffffffff80001807:	75 dc                	jne    ffffffff800017e5 <pmm_allocpages+0x25>
    return 0;
ffffffff80001809:	31 c0                	xor    %eax,%eax
    for(uint64_t i = 0; i < count; i++)
ffffffff8000180b:	48 85 ff             	test   %rdi,%rdi
ffffffff8000180e:	74 50                	je     ffffffff80001860 <pmm_allocpages+0xa0>
ffffffff80001810:	31 d2                	xor    %edx,%edx
    {
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff80001812:	41 f6 00 01          	testb  $0x1,(%r8)
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001816:	41 b9 01 00 00 00    	mov    $0x1,%r9d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000181c:	74 25                	je     ffffffff80001843 <pmm_allocpages+0x83>
    for(uint64_t i = 0; i < count; i++)
ffffffff8000181e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80001822:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80001825:	74 39                	je     ffffffff80001860 <pmm_allocpages+0xa0>
    return bitmap[bit/8] & (1 << (bit & 8));
ffffffff80001827:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000182a:	45 89 cb             	mov    %r9d,%r11d
ffffffff8000182d:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80001831:	41 0f b6 34 08       	movzbl (%r8,%rcx,1),%esi
ffffffff80001836:	89 d1                	mov    %edx,%ecx
ffffffff80001838:	83 e1 08             	and    $0x8,%ecx
ffffffff8000183b:	41 d3 e3             	shl    %cl,%r11d
        if(bitmap_get(pmm_info.bitmap, i) == 1)
ffffffff8000183e:	44 85 de             	test   %r11d,%esi
ffffffff80001841:	75 db                	jne    ffffffff8000181e <pmm_allocpages+0x5e>
        return NULL;
ffffffff80001843:	31 c0                	xor    %eax,%eax
    }

    pmm_info.usedpages += count;

    return (void*)(index * PAGE_SIZE);
}
ffffffff80001845:	c3                   	retq   
ffffffff80001846:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000184d:	00 00 00 
                    return (i * 8) + j;
ffffffff80001850:	48 8d 04 f2          	lea    (%rdx,%rsi,8),%rax
ffffffff80001854:	eb b5                	jmp    ffffffff8000180b <pmm_allocpages+0x4b>
ffffffff80001856:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000185d:	00 00 00 
    pmm_info.usedpages += count;
ffffffff80001860:	4c 01 d7             	add    %r10,%rdi
    return (void*)(index * PAGE_SIZE);
ffffffff80001863:	48 c1 e0 0c          	shl    $0xc,%rax
    pmm_info.usedpages += count;
ffffffff80001867:	48 89 3d fa 8e 00 00 	mov    %rdi,0x8efa(%rip)        # ffffffff8000a768 <pmm_info+0x8>
    return (void*)(index * PAGE_SIZE);
ffffffff8000186e:	c3                   	retq   
ffffffff8000186f:	90                   	nop

ffffffff80001870 <pmm_freepages>:

uint64_t pmm_freepages(void* page, uint64_t count)
{
    uint64_t pg = (uint64_t)page;

    for(uint64_t i=0; i < count; i++)
ffffffff80001870:	48 85 f6             	test   %rsi,%rsi
ffffffff80001873:	74 44                	je     ffffffff800018b9 <pmm_freepages+0x49>
ffffffff80001875:	45 31 c0             	xor    %r8d,%r8d
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001878:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8000187e:	66 90                	xchg   %ax,%ax
ffffffff80001880:	48 89 f8             	mov    %rdi,%rax
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001883:	48 89 f9             	mov    %rdi,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001886:	44 89 ca             	mov    %r9d,%edx
ffffffff80001889:	48 c1 e8 0f          	shr    $0xf,%rax
ffffffff8000188d:	48 03 05 e4 8e 00 00 	add    0x8ee4(%rip),%rax        # ffffffff8000a778 <pmm_info+0x18>
    uint64_t index = (uint64_t)page / PAGE_SIZE;
ffffffff80001894:	48 c1 e9 0c          	shr    $0xc,%rcx
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff80001898:	83 e1 07             	and    $0x7,%ecx
    for(uint64_t i=0; i < count; i++)
ffffffff8000189b:	49 83 c0 01          	add    $0x1,%r8
    {
        pmm_freepage((void*)pg);
        pg += 0x1000;
ffffffff8000189f:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
    bitmap[bit / 8] &= ~(1 << (bit % 8));
ffffffff800018a6:	d3 e2                	shl    %cl,%edx
ffffffff800018a8:	f7 d2                	not    %edx
ffffffff800018aa:	20 10                	and    %dl,(%rax)
    pmm_info.usedpages--;
ffffffff800018ac:	48 83 2d b4 8e 00 00 	subq   $0x1,0x8eb4(%rip)        # ffffffff8000a768 <pmm_info+0x8>
ffffffff800018b3:	01 
    for(uint64_t i=0; i < count; i++)
ffffffff800018b4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff800018b7:	75 c7                	jne    ffffffff80001880 <pmm_freepages+0x10>
    }

    return 0;
}
ffffffff800018b9:	31 c0                	xor    %eax,%eax
ffffffff800018bb:	c3                   	retq   
ffffffff800018bc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800018c0 <pmm_get_free_memory>:

uint64_t pmm_get_free_memory()
{
    return (pmm_info.totalpages - pmm_info.usedpages) * PAGE_SIZE;
ffffffff800018c0:	48 8b 05 a9 8e 00 00 	mov    0x8ea9(%rip),%rax        # ffffffff8000a770 <pmm_info+0x10>
ffffffff800018c7:	48 2b 05 9a 8e 00 00 	sub    0x8e9a(%rip),%rax        # ffffffff8000a768 <pmm_info+0x8>
ffffffff800018ce:	48 c1 e0 0c          	shl    $0xc,%rax
}
ffffffff800018d2:	c3                   	retq   
ffffffff800018d3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800018da:	00 00 00 00 
ffffffff800018de:	66 90                	xchg   %ax,%ax

ffffffff800018e0 <pmm_get_total_memory>:

uint64_t pmm_get_total_memory()
{   
    return (pmm_info.totalpages) * PAGE_SIZE;
ffffffff800018e0:	48 8b 05 89 8e 00 00 	mov    0x8e89(%rip),%rax        # ffffffff8000a770 <pmm_info+0x10>
ffffffff800018e7:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff800018eb:	c3                   	retq   
ffffffff800018ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800018f0 <outb>:
#include <stdint.h>
#include <stddef.h>

void outb(uint16_t port, uint8_t val)
{
    asm volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff800018f0:	89 f0                	mov    %esi,%eax
ffffffff800018f2:	89 fa                	mov    %edi,%edx
ffffffff800018f4:	ee                   	out    %al,(%dx)
}
ffffffff800018f5:	c3                   	retq   
ffffffff800018f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800018fd:	00 00 00 

ffffffff80001900 <inb>:

uint8_t inb(uint16_t port)
{
    uint8_t ret;
    asm volatile ( "inb %1, %0"
ffffffff80001900:	89 fa                	mov    %edi,%edx
ffffffff80001902:	ec                   	in     (%dx),%al
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
}
ffffffff80001903:	c3                   	retq   
ffffffff80001904:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000190b:	00 00 00 00 
ffffffff8000190f:	90                   	nop

ffffffff80001910 <io_wait>:
    asm volatile ( "inb %1, %0"
ffffffff80001910:	e4 80                	in     $0x80,%al

void io_wait()
{
    inb(0x80);
ffffffff80001912:	c3                   	retq   
ffffffff80001913:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000191a:	00 00 00 
ffffffff8000191d:	0f 1f 00             	nopl   (%rax)

ffffffff80001920 <fb_init>:



void fb_init()
{
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001920:	48 8b 15 d1 8d 00 00 	mov    0x8dd1(%rip),%rdx        # ffffffff8000a6f8 <boot_info+0x18>
ffffffff80001927:	48 8b 42 10          	mov    0x10(%rdx),%rax
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff8000192b:	0f b7 4a 18          	movzwl 0x18(%rdx),%ecx
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff8000192f:	0f b7 72 1c          	movzwl 0x1c(%rdx),%esi
    fb_info.base = boot_info.tag_framebuffer->framebuffer_addr;
ffffffff80001933:	48 89 05 f6 8d 00 00 	mov    %rax,0x8df6(%rip)        # ffffffff8000a730 <fb_info>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff8000193a:	0f b7 42 1a          	movzwl 0x1a(%rdx),%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000193e:	0f b7 52 1e          	movzwl 0x1e(%rdx),%edx
    fb_info.width = boot_info.tag_framebuffer->framebuffer_width;
ffffffff80001942:	66 89 0d f1 8d 00 00 	mov    %cx,0x8df1(%rip)        # ffffffff8000a73a <fb_info+0xa>
    fb_info.pitch = boot_info.tag_framebuffer->framebuffer_pitch;
ffffffff80001949:	66 89 35 ec 8d 00 00 	mov    %si,0x8dec(%rip)        # ffffffff8000a73c <fb_info+0xc>
    fb_info.height = boot_info.tag_framebuffer->framebuffer_height;
ffffffff80001950:	66 89 05 e1 8d 00 00 	mov    %ax,0x8de1(%rip)        # ffffffff8000a738 <fb_info+0x8>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001957:	0f af c1             	imul   %ecx,%eax
    fb_info.bpp = boot_info.tag_framebuffer->framebuffer_bpp;
ffffffff8000195a:	66 89 15 dd 8d 00 00 	mov    %dx,0x8ddd(%rip)        # ffffffff8000a73e <fb_info+0xe>
    fb_info.max_pixels = fb_info.height * fb_info.width;
ffffffff80001961:	89 05 d9 8d 00 00    	mov    %eax,0x8dd9(%rip)        # ffffffff8000a740 <fb_info+0x10>
    //printf("FB Base: %p", fb_info.base);
    //printf("FB Height: %d  FB Width: %d\n", fb_info.height, fb_info.width);
    //printf("FB BPP: %d   FB Pitch: %d\n", fb_info.bpp, fb_info.pitch);

    //fb_putpixel(100,100,FB_COLOR_WHITE);
}
ffffffff80001967:	c3                   	retq   
ffffffff80001968:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000196f:	00 

ffffffff80001970 <fb_putpixel>:

void fb_putpixel(uint32_t x, uint32_t y, enum fb_color col)
{
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001970:	0f b7 0d c7 8d 00 00 	movzwl 0x8dc7(%rip),%ecx        # ffffffff8000a73e <fb_info+0xe>
ffffffff80001977:	0f b7 05 be 8d 00 00 	movzwl 0x8dbe(%rip),%eax        # ffffffff8000a73c <fb_info+0xc>
{
ffffffff8000197e:	41 89 d0             	mov    %edx,%r8d
    uint64_t index = y * (fb_info.pitch / (fb_info.bpp / 8)) + x;
ffffffff80001981:	31 d2                	xor    %edx,%edx
ffffffff80001983:	66 c1 e9 03          	shr    $0x3,%cx
ffffffff80001987:	66 f7 f1             	div    %cx
ffffffff8000198a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8000198d:	0f af c6             	imul   %esi,%eax
ffffffff80001990:	8d 14 38             	lea    (%rax,%rdi,1),%edx
    //if(index > fb_info.max_pixels) return;
    *((uint32_t*)fb_info.base + index) = col;
ffffffff80001993:	48 8b 05 96 8d 00 00 	mov    0x8d96(%rip),%rax        # ffffffff8000a730 <fb_info>
ffffffff8000199a:	44 89 04 90          	mov    %r8d,(%rax,%rdx,4)
}
ffffffff8000199e:	c3                   	retq   
ffffffff8000199f:	90                   	nop

ffffffff800019a0 <fb_clearscreen>:

void fb_clearscreen(enum fb_color col)
{
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800019a0:	0f b7 05 91 8d 00 00 	movzwl 0x8d91(%rip),%eax        # ffffffff8000a738 <fb_info+0x8>
ffffffff800019a7:	0f b7 15 8c 8d 00 00 	movzwl 0x8d8c(%rip),%edx        # ffffffff8000a73a <fb_info+0xa>
ffffffff800019ae:	0f af c2             	imul   %edx,%eax
ffffffff800019b1:	85 c0                	test   %eax,%eax
ffffffff800019b3:	48 63 c8             	movslq %eax,%rcx
ffffffff800019b6:	74 1f                	je     ffffffff800019d7 <fb_clearscreen+0x37>
    {
        *((uint32_t*)fb_info.base + i) = col;
ffffffff800019b8:	48 8b 15 71 8d 00 00 	mov    0x8d71(%rip),%rdx        # ffffffff8000a730 <fb_info>
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800019bf:	31 c0                	xor    %eax,%eax
ffffffff800019c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff800019c8:	48 83 c0 01          	add    $0x1,%rax
        *((uint32_t*)fb_info.base + i) = col;
ffffffff800019cc:	89 3a                	mov    %edi,(%rdx)
ffffffff800019ce:	48 83 c2 04          	add    $0x4,%rdx
    for (uint64_t i = 0; i < (fb_info.height*fb_info.width); i++)
ffffffff800019d2:	48 39 c8             	cmp    %rcx,%rax
ffffffff800019d5:	75 f1                	jne    ffffffff800019c8 <fb_clearscreen+0x28>
    }
}
ffffffff800019d7:	f3 c3                	repz retq 
ffffffff800019d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800019e0 <fb_drawline>:

void fb_drawline(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, enum fb_color col)
{

ffffffff800019e0:	f3 c3                	repz retq 
ffffffff800019e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800019e9:	00 00 00 
ffffffff800019ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800019f0 <console_input>:

    //write the output buffer to screen
}

void console_input(KEY_INFO_t key)
{
ffffffff800019f0:	89 f8                	mov    %edi,%eax
ffffffff800019f2:	0f b6 fc             	movzbl %ah,%edi
    con_input_buffer.index++;
ffffffff800019f5:	48 8b 05 f4 9d 00 00 	mov    0x9df4(%rip),%rax        # ffffffff8000b7f0 <con_input_buffer+0x10>
ffffffff800019fc:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001a00:	48 89 15 e9 9d 00 00 	mov    %rdx,0x9de9(%rip)        # ffffffff8000b7f0 <con_input_buffer+0x10>
    con_input_buffer.buffer[con_input_buffer.index] = key.ascii;
ffffffff80001a07:	48 8b 15 d2 9d 00 00 	mov    0x9dd2(%rip),%rdx        # ffffffff8000b7e0 <con_input_buffer>
ffffffff80001a0e:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
    

    con_output_buffer.buffer[con_output_buffer.index] = key.ascii;
ffffffff80001a13:	48 8b 05 b6 9d 00 00 	mov    0x9db6(%rip),%rax        # ffffffff8000b7d0 <con_output_buffer+0x10>
ffffffff80001a1a:	48 8b 15 9f 9d 00 00 	mov    0x9d9f(%rip),%rdx        # ffffffff8000b7c0 <con_output_buffer>
ffffffff80001a21:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
    con_output_buffer.index++;
ffffffff80001a25:	48 8b 05 a4 9d 00 00 	mov    0x9da4(%rip),%rax        # ffffffff8000b7d0 <con_output_buffer+0x10>
ffffffff80001a2c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001a30:	48 89 15 99 9d 00 00 	mov    %rdx,0x9d99(%rip)        # ffffffff8000b7d0 <con_output_buffer+0x10>
    con_output_buffer.buffer[con_output_buffer.index] = 0x00;
ffffffff80001a37:	48 8b 15 82 9d 00 00 	mov    0x9d82(%rip),%rdx        # ffffffff8000b7c0 <con_output_buffer>
ffffffff80001a3e:	c6 44 02 01 00       	movb   $0x0,0x1(%rdx,%rax,1)
    return;
ffffffff80001a43:	c3                   	retq   
ffffffff80001a44:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001a4b:	00 00 00 00 
ffffffff80001a4f:	90                   	nop

ffffffff80001a50 <putchar>:
    switch(c)
ffffffff80001a50:	40 80 ff 0a          	cmp    $0xa,%dil
ffffffff80001a54:	0f 84 28 01 00 00    	je     ffffffff80001b82 <putchar+0x132>
ffffffff80001a5a:	40 80 ff 0d          	cmp    $0xd,%dil
ffffffff80001a5e:	0f 84 ed 00 00 00    	je     ffffffff80001b51 <putchar+0x101>
ffffffff80001a64:	40 80 ff 09          	cmp    $0x9,%dil
ffffffff80001a68:	0f 84 be 00 00 00    	je     ffffffff80001b2c <putchar+0xdc>
{
ffffffff80001a6e:	41 57                	push   %r15
ffffffff80001a70:	41 56                	push   %r14
ffffffff80001a72:	89 f8                	mov    %edi,%eax
ffffffff80001a74:	41 55                	push   %r13
ffffffff80001a76:	41 54                	push   %r12
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001a78:	48 c1 e0 04          	shl    $0x4,%rax
{
ffffffff80001a7c:	55                   	push   %rbp
ffffffff80001a7d:	53                   	push   %rbx
    uint8_t* glyph = (uint8_t*)&_binary_zapl16_psf_start + 4 + (c * PSF1_FONT_HEIGHT);
ffffffff80001a7e:	25 f0 0f 00 00       	and    $0xff0,%eax
ffffffff80001a83:	4c 8d a8 24 72 00 80 	lea    -0x7fff8ddc(%rax),%r13
ffffffff80001a8a:	48 05 34 72 00 80    	add    $0xffffffff80007234,%rax
{
ffffffff80001a90:	48 83 ec 18          	sub    $0x18,%rsp
    console_drawchar(c, console_info.cursor_x, console_info.cursor_y, console_info.foreground_color, console_info.background_color);
ffffffff80001a94:	8b 0d 6e 9d 00 00    	mov    0x9d6e(%rip),%ecx        # ffffffff8000b808 <console_info+0x8>
ffffffff80001a9a:	0f b7 1d 71 9d 00 00 	movzwl 0x9d71(%rip),%ebx        # ffffffff8000b812 <console_info+0x12>
ffffffff80001aa1:	44 8b 25 64 9d 00 00 	mov    0x9d64(%rip),%r12d        # ffffffff8000b80c <console_info+0xc>
ffffffff80001aa8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80001aad:	89 0c 24             	mov    %ecx,(%rsp)
ffffffff80001ab0:	0f b7 0d 59 9d 00 00 	movzwl 0x9d59(%rip),%ecx        # ffffffff8000b810 <console_info+0x10>
ffffffff80001ab7:	8d 69 08             	lea    0x8(%rcx),%ebp
ffffffff80001aba:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
ffffffff80001abe:	66 90                	xchg   %ax,%ax
        row = glyph[i];
ffffffff80001ac0:	45 0f b6 75 00       	movzbl 0x0(%r13),%r14d
ffffffff80001ac5:	44 8b 7c 24 04       	mov    0x4(%rsp),%r15d
ffffffff80001aca:	eb 1d                	jmp    ffffffff80001ae9 <putchar+0x99>
ffffffff80001acc:	0f 1f 40 00          	nopl   0x0(%rax)
                fb_putpixel(x+j, y+i, background);
ffffffff80001ad0:	44 89 ff             	mov    %r15d,%edi
ffffffff80001ad3:	44 89 e2             	mov    %r12d,%edx
ffffffff80001ad6:	89 de                	mov    %ebx,%esi
ffffffff80001ad8:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff80001adc:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, background);
ffffffff80001adf:	e8 8c fe ff ff       	callq  ffffffff80001970 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001ae4:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001ae7:	74 1e                	je     ffffffff80001b07 <putchar+0xb7>
            if(row & 0x80)
ffffffff80001ae9:	45 84 f6             	test   %r14b,%r14b
ffffffff80001aec:	79 e2                	jns    ffffffff80001ad0 <putchar+0x80>
                fb_putpixel(x+j, y+i, foreground);
ffffffff80001aee:	8b 14 24             	mov    (%rsp),%edx
ffffffff80001af1:	44 89 ff             	mov    %r15d,%edi
ffffffff80001af4:	89 de                	mov    %ebx,%esi
ffffffff80001af6:	41 83 c7 01          	add    $0x1,%r15d
            row = row << 1;
ffffffff80001afa:	45 01 f6             	add    %r14d,%r14d
                fb_putpixel(x+j, y+i, foreground);
ffffffff80001afd:	e8 6e fe ff ff       	callq  ffffffff80001970 <fb_putpixel>
        for (uint32_t j = 0; j < 8; j++)
ffffffff80001b02:	44 39 fd             	cmp    %r15d,%ebp
ffffffff80001b05:	75 e2                	jne    ffffffff80001ae9 <putchar+0x99>
ffffffff80001b07:	49 83 c5 01          	add    $0x1,%r13
ffffffff80001b0b:	83 c3 01             	add    $0x1,%ebx
    for (uint32_t i = 0; i < 16; i++)
ffffffff80001b0e:	4c 39 6c 24 08       	cmp    %r13,0x8(%rsp)
ffffffff80001b13:	75 ab                	jne    ffffffff80001ac0 <putchar+0x70>
    console_info.cursor_x += 8;
ffffffff80001b15:	66 83 05 f3 9c 00 00 	addw   $0x8,0x9cf3(%rip)        # ffffffff8000b810 <console_info+0x10>
ffffffff80001b1c:	08 
}
ffffffff80001b1d:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80001b21:	5b                   	pop    %rbx
ffffffff80001b22:	5d                   	pop    %rbp
ffffffff80001b23:	41 5c                	pop    %r12
ffffffff80001b25:	41 5d                	pop    %r13
ffffffff80001b27:	41 5e                	pop    %r14
ffffffff80001b29:	41 5f                	pop    %r15
ffffffff80001b2b:	c3                   	retq   
            if((console_info.cursor_x += (PSF1_FONT_WIDTH * 4)) < fb_info.width)
ffffffff80001b2c:	0f b7 05 dd 9c 00 00 	movzwl 0x9cdd(%rip),%eax        # ffffffff8000b810 <console_info+0x10>
ffffffff80001b33:	0f b7 15 00 8c 00 00 	movzwl 0x8c00(%rip),%edx        # ffffffff8000a73a <fb_info+0xa>
ffffffff80001b3a:	8d 48 20             	lea    0x20(%rax),%ecx
ffffffff80001b3d:	66 39 d1             	cmp    %dx,%cx
ffffffff80001b40:	0f 83 4f 01 00 00    	jae    ffffffff80001c95 <putchar+0x245>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001b46:	83 c0 40             	add    $0x40,%eax
ffffffff80001b49:	66 89 05 c0 9c 00 00 	mov    %ax,0x9cc0(%rip)        # ffffffff8000b810 <console_info+0x10>
                return;
ffffffff80001b50:	c3                   	retq   
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b51:	0f b7 05 ba 9c 00 00 	movzwl 0x9cba(%rip),%eax        # ffffffff8000b812 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b58:	0f b7 15 d9 8b 00 00 	movzwl 0x8bd9(%rip),%edx        # ffffffff8000a738 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001b5f:	31 f6                	xor    %esi,%esi
ffffffff80001b61:	66 89 35 a8 9c 00 00 	mov    %si,0x9ca8(%rip)        # ffffffff8000b810 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b68:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b6b:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b6e:	66 89 05 9d 9c 00 00 	mov    %ax,0x9c9d(%rip)        # ffffffff8000b812 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b75:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001b78:	39 c1                	cmp    %eax,%ecx
ffffffff80001b7a:	0f 8e 9d 00 00 00    	jle    ffffffff80001c1d <putchar+0x1cd>
ffffffff80001b80:	f3 c3                	repz retq 
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b82:	0f b7 05 89 9c 00 00 	movzwl 0x9c89(%rip),%eax        # ffffffff8000b812 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b89:	0f b7 15 a8 8b 00 00 	movzwl 0x8ba8(%rip),%edx        # ffffffff8000a738 <fb_info+0x8>
    console_info.cursor_x = 0;
ffffffff80001b90:	31 ff                	xor    %edi,%edi
ffffffff80001b92:	66 89 3d 77 9c 00 00 	mov    %di,0x9c77(%rip)        # ffffffff8000b810 <console_info+0x10>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b99:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001b9c:	8d 4a f1             	lea    -0xf(%rdx),%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001b9f:	66 89 05 6c 9c 00 00 	mov    %ax,0x9c6c(%rip)        # ffffffff8000b812 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001ba6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001ba9:	39 c1                	cmp    %eax,%ecx
ffffffff80001bab:	7f d3                	jg     ffffffff80001b80 <putchar+0x130>
    start_index = fb_info.width * 16 * 4;
ffffffff80001bad:	0f b7 05 86 8b 00 00 	movzwl 0x8b86(%rip),%eax        # ffffffff8000a73a <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001bb4:	4c 8b 05 75 8b 00 00 	mov    0x8b75(%rip),%r8        # ffffffff8000a730 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001bbb:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001bbe:	89 c1                	mov    %eax,%ecx
ffffffff80001bc0:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001bc3:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001bc6:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001bc9:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001bcc:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001bcf:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001bd2:	48 89 c7             	mov    %rax,%rdi
ffffffff80001bd5:	74 20                	je     ffffffff80001bf7 <putchar+0x1a7>
ffffffff80001bd7:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001bdb:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001bdf:	4c 89 c0             	mov    %r8,%rax
ffffffff80001be2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001be8:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001beb:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001bef:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001bf2:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001bf5:	75 f1                	jne    ffffffff80001be8 <putchar+0x198>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001bf7:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001bfb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001bfe:	76 80                	jbe    ffffffff80001b80 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001c00:	8b 0d 06 9c 00 00    	mov    0x9c06(%rip),%ecx        # ffffffff8000b80c <console_info+0xc>
ffffffff80001c06:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001c0a:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001c0e:	66 90                	xchg   %ax,%ax
ffffffff80001c10:	89 08                	mov    %ecx,(%rax)
ffffffff80001c12:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c16:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001c19:	75 f5                	jne    ffffffff80001c10 <putchar+0x1c0>
ffffffff80001c1b:	f3 c3                	repz retq 
    start_index = fb_info.width * 16 * 4;
ffffffff80001c1d:	0f b7 05 16 8b 00 00 	movzwl 0x8b16(%rip),%eax        # ffffffff8000a73a <fb_info+0xa>
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001c24:	4c 8b 05 05 8b 00 00 	mov    0x8b05(%rip),%r8        # ffffffff8000a730 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001c2b:	0f af d0             	imul   %eax,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001c2e:	89 c1                	mov    %eax,%ecx
ffffffff80001c30:	c1 e1 06             	shl    $0x6,%ecx
ffffffff80001c33:	48 63 c9             	movslq %ecx,%rcx
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001c36:	48 63 c2             	movslq %edx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001c39:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c3c:	48 29 c8             	sub    %rcx,%rax
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001c3f:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c42:	48 89 c7             	mov    %rax,%rdi
ffffffff80001c45:	74 20                	je     ffffffff80001c67 <putchar+0x217>
ffffffff80001c47:	4d 8d 0c 80          	lea    (%r8,%rax,4),%r9
ffffffff80001c4b:	48 c1 e1 02          	shl    $0x2,%rcx
ffffffff80001c4f:	4c 89 c0             	mov    %r8,%rax
ffffffff80001c52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        base[i] = base[start_index + i];
ffffffff80001c58:	8b 34 08             	mov    (%rax,%rcx,1),%esi
ffffffff80001c5b:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001c5f:	89 70 fc             	mov    %esi,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001c62:	4c 39 c8             	cmp    %r9,%rax
ffffffff80001c65:	75 f1                	jne    ffffffff80001c58 <putchar+0x208>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c67:	48 8d 47 01          	lea    0x1(%rdi),%rax
ffffffff80001c6b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001c6e:	0f 86 0c ff ff ff    	jbe    ffffffff80001b80 <putchar+0x130>
        base[i] = console_info.background_color;
ffffffff80001c74:	8b 0d 92 9b 00 00    	mov    0x9b92(%rip),%ecx        # ffffffff8000b80c <console_info+0xc>
ffffffff80001c7a:	49 8d 04 80          	lea    (%r8,%rax,4),%rax
ffffffff80001c7e:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001c82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80001c88:	89 08                	mov    %ecx,(%rax)
ffffffff80001c8a:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001c8e:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001c91:	75 f5                	jne    ffffffff80001c88 <putchar+0x238>
ffffffff80001c93:	f3 c3                	repz retq 
    console_info.cursor_x = 0;
ffffffff80001c95:	31 c9                	xor    %ecx,%ecx
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001c97:	0f b7 05 74 9b 00 00 	movzwl 0x9b74(%rip),%eax        # ffffffff8000b812 <console_info+0x12>
    console_info.cursor_x = 0;
ffffffff80001c9e:	66 89 0d 6b 9b 00 00 	mov    %cx,0x9b6b(%rip)        # ffffffff8000b810 <console_info+0x10>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001ca5:	0f b7 0d 8c 8a 00 00 	movzwl 0x8a8c(%rip),%ecx        # ffffffff8000a738 <fb_info+0x8>
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001cac:	83 c0 10             	add    $0x10,%eax
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001caf:	8d 71 f1             	lea    -0xf(%rcx),%esi
    console_info.cursor_y += PSF1_FONT_HEIGHT;
ffffffff80001cb2:	66 89 05 59 9b 00 00 	mov    %ax,0x9b59(%rip)        # ffffffff8000b812 <console_info+0x12>
    if (console_info.cursor_y > fb_info.height - PSF1_FONT_HEIGHT)
ffffffff80001cb9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80001cbc:	39 c6                	cmp    %eax,%esi
ffffffff80001cbe:	7e 0d                	jle    ffffffff80001ccd <putchar+0x27d>
                console_info.cursor_x += (PSF1_FONT_WIDTH * 4);
ffffffff80001cc0:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff80001cc5:	66 89 05 44 9b 00 00 	mov    %ax,0x9b44(%rip)        # ffffffff8000b810 <console_info+0x10>
                return;
ffffffff80001ccc:	c3                   	retq   
    start_index = fb_info.width * 16 * 4;
ffffffff80001ccd:	89 d0                	mov    %edx,%eax
    uint32_t* base = (uint32_t*)fb_info.base;
ffffffff80001ccf:	48 8b 3d 5a 8a 00 00 	mov    0x8a5a(%rip),%rdi        # ffffffff8000a730 <fb_info>
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001cd6:	0f af d1             	imul   %ecx,%edx
    start_index = fb_info.width * 16 * 4;
ffffffff80001cd9:	c1 e0 06             	shl    $0x6,%eax
ffffffff80001cdc:	48 98                	cltq   
    finish_index = (fb_info.height * fb_info.width) - start_index;
ffffffff80001cde:	48 63 f2             	movslq %edx,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001ce1:	83 ea 01             	sub    $0x1,%edx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001ce4:	48 29 c6             	sub    %rax,%rsi
    end_index = fb_info.height * fb_info.width - 1;
ffffffff80001ce7:	48 63 d2             	movslq %edx,%rdx
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001cea:	74 20                	je     ffffffff80001d0c <putchar+0x2bc>
ffffffff80001cec:	4c 8d 0c b7          	lea    (%rdi,%rsi,4),%r9
ffffffff80001cf0:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
ffffffff80001cf7:	00 
ffffffff80001cf8:	48 89 f8             	mov    %rdi,%rax
        base[i] = base[start_index + i];
ffffffff80001cfb:	44 8b 04 01          	mov    (%rcx,%rax,1),%r8d
ffffffff80001cff:	48 83 c0 04          	add    $0x4,%rax
ffffffff80001d03:	44 89 40 fc          	mov    %r8d,-0x4(%rax)
    for(uint64_t i = 0; i < finish_index; i++)
ffffffff80001d07:	49 39 c1             	cmp    %rax,%r9
ffffffff80001d0a:	75 ef                	jne    ffffffff80001cfb <putchar+0x2ab>
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001d0c:	48 8d 46 01          	lea    0x1(%rsi),%rax
ffffffff80001d10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001d13:	76 ab                	jbe    ffffffff80001cc0 <putchar+0x270>
        base[i] = console_info.background_color;
ffffffff80001d15:	8b 0d f1 9a 00 00    	mov    0x9af1(%rip),%ecx        # ffffffff8000b80c <console_info+0xc>
ffffffff80001d1b:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
ffffffff80001d1f:	48 8d 14 97          	lea    (%rdi,%rdx,4),%rdx
ffffffff80001d23:	89 08                	mov    %ecx,(%rax)
ffffffff80001d25:	48 83 c0 04          	add    $0x4,%rax
    for(uint64_t i = finish_index + 1; i < end_index; i++)
ffffffff80001d29:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001d2c:	75 f5                	jne    ffffffff80001d23 <putchar+0x2d3>
ffffffff80001d2e:	eb 90                	jmp    ffffffff80001cc0 <putchar+0x270>

ffffffff80001d30 <console_init>:
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001d30:	0f b7 05 01 8a 00 00 	movzwl 0x8a01(%rip),%eax        # ffffffff8000a738 <fb_info+0x8>
    uint64_t index = y * fb_info.width;
ffffffff80001d37:	0f b7 3d fc 89 00 00 	movzwl 0x89fc(%rip),%edi        # ffffffff8000a73a <fb_info+0xa>
    console_info.font = (struct PSF1_FONT*)&_binary_zapl16_psf_start;
ffffffff80001d3e:	48 c7 05 cf 9a 00 00 	movq   $0xffffffff80007220,0x9acf(%rip)        # ffffffff8000b818 <console_info+0x18>
ffffffff80001d45:	20 72 00 80 
    console_info.foreground_color = FB_COLOR_WHITE;
ffffffff80001d49:	c7 05 b5 9a 00 00 ff 	movl   $0xffffffff,0x9ab5(%rip)        # ffffffff8000b808 <console_info+0x8>
ffffffff80001d50:	ff ff ff 
    console_info.background_color = FB_COLOR_BLACK;
ffffffff80001d53:	c7 05 af 9a 00 00 00 	movl   $0xff000000,0x9aaf(%rip)        # ffffffff8000b80c <console_info+0xc>
ffffffff80001d5a:	00 00 ff 
    console_info.cursor_x = 0;
ffffffff80001d5d:	c7 05 a9 9a 00 00 00 	movl   $0x0,0x9aa9(%rip)        # ffffffff8000b810 <console_info+0x10>
ffffffff80001d64:	00 00 00 
    con_output_buffer.buffer = console_buffer;
ffffffff80001d67:	48 c7 05 4e 9a 00 00 	movq   $0xffffffff8000a7c0,0x9a4e(%rip)        # ffffffff8000b7c0 <con_output_buffer>
ffffffff80001d6e:	c0 a7 00 80 
    con_output_buffer.buffer_size = sizeof(console_buffer);
ffffffff80001d72:	48 c7 05 4b 9a 00 00 	movq   $0x1000,0x9a4b(%rip)        # ffffffff8000b7c8 <con_output_buffer+0x8>
ffffffff80001d79:	00 10 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001d7d:	89 c2                	mov    %eax,%edx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001d7f:	66 c1 e8 02          	shr    $0x2,%ax
    con_output_buffer.index = 0;
ffffffff80001d83:	48 c7 05 42 9a 00 00 	movq   $0x0,0x9a42(%rip)        # ffffffff8000b7d0 <con_output_buffer+0x10>
ffffffff80001d8a:	00 00 00 00 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001d8e:	0f b7 c0             	movzwl %ax,%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001d91:	66 c1 ea 04          	shr    $0x4,%dx
    con_input_buffer.buffer = cmd_buffer;
ffffffff80001d95:	48 c7 05 40 9a 00 00 	movq   $0xffffffff8000b840,0x9a40(%rip)        # ffffffff8000b7e0 <con_input_buffer>
ffffffff80001d9c:	40 b8 00 80 
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001da0:	8d 04 40             	lea    (%rax,%rax,2),%eax
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001da3:	0f b7 d2             	movzwl %dx,%edx
    con_input_buffer.buffer_size = sizeof(cmd_buffer);
ffffffff80001da6:	48 c7 05 37 9a 00 00 	movq   $0x100,0x9a37(%rip)        # ffffffff8000b7e8 <con_input_buffer+0x8>
ffffffff80001dad:	00 01 00 00 
    console_info.max_lines = fb_info.height / PSF1_FONT_HEIGHT;
ffffffff80001db1:	89 15 4d 9a 00 00    	mov    %edx,0x9a4d(%rip)        # ffffffff8000b804 <console_info+0x4>
    uint64_t index = y * fb_info.width;
ffffffff80001db7:	48 89 f9             	mov    %rdi,%rcx
    console_draw_hline(console_info.start_pos, FB_COLOR_YELLOW);
ffffffff80001dba:	48 63 d0             	movslq %eax,%rdx
    console_info.start_pos = (fb_info.height / 4) * 3;
ffffffff80001dbd:	89 05 3d 9a 00 00    	mov    %eax,0x9a3d(%rip)        # ffffffff8000b800 <console_info>
    uint64_t index = y * fb_info.width;
ffffffff80001dc3:	48 0f af d7          	imul   %rdi,%rdx
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001dc7:	66 85 ff             	test   %di,%di
ffffffff80001dca:	74 53                	je     ffffffff80001e1f <console_init+0xef>
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001dcc:	48 8b 35 5d 89 00 00 	mov    0x895d(%rip),%rsi        # ffffffff8000a730 <fb_info>
ffffffff80001dd3:	83 e9 01             	sub    $0x1,%ecx
ffffffff80001dd6:	4c 8d 46 04          	lea    0x4(%rsi),%r8
ffffffff80001dda:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001dde:	48 01 ca             	add    %rcx,%rdx
ffffffff80001de1:	49 8d 14 90          	lea    (%r8,%rdx,4),%rdx
ffffffff80001de5:	0f 1f 00             	nopl   (%rax)
ffffffff80001de8:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001dee:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001df2:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001df5:	75 f1                	jne    ffffffff80001de8 <console_init+0xb8>
    console_draw_hline(console_info.start_pos + 1, FB_COLOR_YELLOW);
ffffffff80001df7:	8b 05 03 9a 00 00    	mov    0x9a03(%rip),%eax        # ffffffff8000b800 <console_info>
ffffffff80001dfd:	8d 50 01             	lea    0x1(%rax),%edx
    uint64_t index = y * fb_info.width;
ffffffff80001e00:	48 0f af d7          	imul   %rdi,%rdx
ffffffff80001e04:	48 01 d1             	add    %rdx,%rcx
ffffffff80001e07:	48 8d 04 96          	lea    (%rsi,%rdx,4),%rax
ffffffff80001e0b:	49 8d 14 88          	lea    (%r8,%rcx,4),%rdx
ffffffff80001e0f:	90                   	nop
        *((uint32_t*)fb_info.base + index + i) = color;
ffffffff80001e10:	c7 00 00 ff ff ff    	movl   $0xffffff00,(%rax)
ffffffff80001e16:	48 83 c0 04          	add    $0x4,%rax
    for(int i = 0; i < fb_info.width; i++)
ffffffff80001e1a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001e1d:	75 f1                	jne    ffffffff80001e10 <console_init+0xe0>
    kbd_set_target(console_input);
ffffffff80001e1f:	48 c7 c7 f0 19 00 80 	mov    $0xffffffff800019f0,%rdi
ffffffff80001e26:	e9 75 02 00 00       	jmpq   ffffffff800020a0 <kbd_set_target>
ffffffff80001e2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80001e30 <console_exec>:
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001e30:	0f b7 05 03 89 00 00 	movzwl 0x8903(%rip),%eax        # ffffffff8000a73a <fb_info+0xa>
ffffffff80001e37:	8b 15 c3 99 00 00    	mov    0x99c3(%rip),%edx        # ffffffff8000b800 <console_info>
ffffffff80001e3d:	8d 34 42             	lea    (%rdx,%rax,2),%esi
ffffffff80001e40:	0f b7 15 f1 88 00 00 	movzwl 0x88f1(%rip),%edx        # ffffffff8000a738 <fb_info+0x8>
ffffffff80001e47:	0f af d0             	imul   %eax,%edx
ffffffff80001e4a:	39 d6                	cmp    %edx,%esi
ffffffff80001e4c:	7d 2d                	jge    ffffffff80001e7b <console_exec+0x4b>
        *((uint32_t*)fb_info.base + i) = console_info.background_color;
ffffffff80001e4e:	48 8b 3d db 88 00 00 	mov    0x88db(%rip),%rdi        # ffffffff8000a730 <fb_info>
ffffffff80001e55:	83 ea 01             	sub    $0x1,%edx
ffffffff80001e58:	4c 63 c6             	movslq %esi,%r8
ffffffff80001e5b:	29 f2                	sub    %esi,%edx
ffffffff80001e5d:	8b 0d a9 99 00 00    	mov    0x99a9(%rip),%ecx        # ffffffff8000b80c <console_info+0xc>
ffffffff80001e63:	4c 01 c2             	add    %r8,%rdx
ffffffff80001e66:	4a 8d 04 87          	lea    (%rdi,%r8,4),%rax
ffffffff80001e6a:	48 8d 54 97 04       	lea    0x4(%rdi,%rdx,4),%rdx
ffffffff80001e6f:	90                   	nop
ffffffff80001e70:	89 08                	mov    %ecx,(%rax)
ffffffff80001e72:	48 83 c0 04          	add    $0x4,%rax
    for(int i = console_info.start_pos + (fb_info.width * 2); i < (fb_info.height * fb_info.width); i++)
ffffffff80001e76:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001e79:	75 f5                	jne    ffffffff80001e70 <console_exec+0x40>
}
ffffffff80001e7b:	f3 c3                	repz retq 
ffffffff80001e7d:	0f 1f 00             	nopl   (%rax)

ffffffff80001e80 <stty_sendcmd>:
#include <serial.h>



void stty_sendcmd(uint16_t cmd)
{
ffffffff80001e80:	48 83 ec 08          	sub    $0x8,%rsp
    serial_write(SERIAL_PORT1, 0x1B);
ffffffff80001e84:	be 1b 00 00 00       	mov    $0x1b,%esi
ffffffff80001e89:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001e8e:	e8 7d 01 00 00       	callq  ffffffff80002010 <serial_write>
    serial_write(SERIAL_PORT1, 0x5B);
ffffffff80001e93:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff80001e98:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001e9d:	e8 6e 01 00 00       	callq  ffffffff80002010 <serial_write>
    serial_write(SERIAL_PORT1, '[');
ffffffff80001ea2:	be 5b 00 00 00       	mov    $0x5b,%esi
ffffffff80001ea7:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001eac:	e8 5f 01 00 00       	callq  ffffffff80002010 <serial_write>
    serial_write(SERIAL_PORT1, 'H');
ffffffff80001eb1:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80001eb6:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001ebb:	e8 50 01 00 00       	callq  ffffffff80002010 <serial_write>
    serial_write(SERIAL_PORT1, '~');
ffffffff80001ec0:	be 7e 00 00 00       	mov    $0x7e,%esi
ffffffff80001ec5:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80001eca:	48 83 c4 08          	add    $0x8,%rsp
    serial_write(SERIAL_PORT1, '~');
ffffffff80001ece:	e9 3d 01 00 00       	jmpq   ffffffff80002010 <serial_write>
ffffffff80001ed3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80001eda:	00 00 00 
ffffffff80001edd:	0f 1f 00             	nopl   (%rax)

ffffffff80001ee0 <serial_init>:
#include <io.h>

char serial_buffer[256];

uint64_t serial_init(uint16_t port)
{
ffffffff80001ee0:	41 55                	push   %r13
ffffffff80001ee2:	41 54                	push   %r12
    outb(port + 1, 0x00);
ffffffff80001ee4:	44 8d 67 01          	lea    0x1(%rdi),%r12d
{
ffffffff80001ee8:	55                   	push   %rbp
ffffffff80001ee9:	53                   	push   %rbx
ffffffff80001eea:	89 fb                	mov    %edi,%ebx
    outb(port + 3, 0x80);
ffffffff80001eec:	8d 6b 03             	lea    0x3(%rbx),%ebp
    outb(port + 1, 0x00);
ffffffff80001eef:	45 0f b7 e4          	movzwl %r12w,%r12d
ffffffff80001ef3:	31 f6                	xor    %esi,%esi
{
ffffffff80001ef5:	48 83 ec 08          	sub    $0x8,%rsp
    outb(port + 1, 0x00);
ffffffff80001ef9:	44 89 e7             	mov    %r12d,%edi
    outb(port + 0, 0x00);
ffffffff80001efc:	44 0f b7 eb          	movzwl %bx,%r13d
    outb(port + 3, 0x80);
ffffffff80001f00:	0f b7 ed             	movzwl %bp,%ebp
    outb(port + 1, 0x00);
ffffffff80001f03:	e8 e8 f9 ff ff       	callq  ffffffff800018f0 <outb>
    outb(port + 3, 0x80);
ffffffff80001f08:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80001f0d:	89 ef                	mov    %ebp,%edi
ffffffff80001f0f:	e8 dc f9 ff ff       	callq  ffffffff800018f0 <outb>
    outb(port + 0, 0x00);
ffffffff80001f14:	31 f6                	xor    %esi,%esi
ffffffff80001f16:	44 89 ef             	mov    %r13d,%edi
ffffffff80001f19:	e8 d2 f9 ff ff       	callq  ffffffff800018f0 <outb>
    outb(port + 1, 0x00);
ffffffff80001f1e:	31 f6                	xor    %esi,%esi
ffffffff80001f20:	44 89 e7             	mov    %r12d,%edi
ffffffff80001f23:	e8 c8 f9 ff ff       	callq  ffffffff800018f0 <outb>
    outb(port + 3, 0x03);
ffffffff80001f28:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80001f2d:	89 ef                	mov    %ebp,%edi
ffffffff80001f2f:	e8 bc f9 ff ff       	callq  ffffffff800018f0 <outb>
    outb(port + 2, 0xC7);
ffffffff80001f34:	8d 7b 02             	lea    0x2(%rbx),%edi
    outb(port + 4, 0x0B);
ffffffff80001f37:	83 c3 04             	add    $0x4,%ebx
    outb(port + 2, 0xC7);
ffffffff80001f3a:	be c7 00 00 00       	mov    $0xc7,%esi
    outb(port + 4, 0x0B);
ffffffff80001f3f:	0f b7 db             	movzwl %bx,%ebx
    outb(port + 2, 0xC7);
ffffffff80001f42:	0f b7 ff             	movzwl %di,%edi
ffffffff80001f45:	e8 a6 f9 ff ff       	callq  ffffffff800018f0 <outb>
    outb(port + 4, 0x0B);
ffffffff80001f4a:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80001f4f:	89 df                	mov    %ebx,%edi
ffffffff80001f51:	e8 9a f9 ff ff       	callq  ffffffff800018f0 <outb>

    if(inb(port + 0) != 0xAE)
ffffffff80001f56:	44 89 ef             	mov    %r13d,%edi
ffffffff80001f59:	e8 a2 f9 ff ff       	callq  ffffffff80001900 <inb>
ffffffff80001f5e:	3c ae                	cmp    $0xae,%al
ffffffff80001f60:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001f65:	74 11                	je     ffffffff80001f78 <serial_init+0x98>
        return 1;
    }

    outb(port + 4, 0x0F);
    return 0;
}
ffffffff80001f67:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80001f6b:	48 89 d0             	mov    %rdx,%rax
ffffffff80001f6e:	5b                   	pop    %rbx
ffffffff80001f6f:	5d                   	pop    %rbp
ffffffff80001f70:	41 5c                	pop    %r12
ffffffff80001f72:	41 5d                	pop    %r13
ffffffff80001f74:	c3                   	retq   
ffffffff80001f75:	0f 1f 00             	nopl   (%rax)
    outb(port + 4, 0x0F);
ffffffff80001f78:	89 df                	mov    %ebx,%edi
ffffffff80001f7a:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80001f7f:	e8 6c f9 ff ff       	callq  ffffffff800018f0 <outb>
}
ffffffff80001f84:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff80001f88:	31 d2                	xor    %edx,%edx
}
ffffffff80001f8a:	5b                   	pop    %rbx
ffffffff80001f8b:	48 89 d0             	mov    %rdx,%rax
ffffffff80001f8e:	5d                   	pop    %rbp
ffffffff80001f8f:	41 5c                	pop    %r12
ffffffff80001f91:	41 5d                	pop    %r13
ffffffff80001f93:	c3                   	retq   
ffffffff80001f94:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80001f9b:	00 00 00 00 
ffffffff80001f9f:	90                   	nop

ffffffff80001fa0 <serial_received>:

uint64_t serial_received(uint16_t port)
{
    return inb(port + 5) & 1;
ffffffff80001fa0:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001fa3:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001fa7:	0f b7 ff             	movzwl %di,%edi
ffffffff80001faa:	e8 51 f9 ff ff       	callq  ffffffff80001900 <inb>
}
ffffffff80001faf:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 1;
ffffffff80001fb3:	83 e0 01             	and    $0x1,%eax
}
ffffffff80001fb6:	c3                   	retq   
ffffffff80001fb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80001fbe:	00 00 

ffffffff80001fc0 <serial_read>:

uint8_t serial_read(uint16_t port)
{
ffffffff80001fc0:	55                   	push   %rbp
ffffffff80001fc1:	53                   	push   %rbx
ffffffff80001fc2:	0f b7 ef             	movzwl %di,%ebp
ffffffff80001fc5:	83 c7 05             	add    $0x5,%edi
ffffffff80001fc8:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80001fcc:	0f b7 df             	movzwl %di,%ebx
ffffffff80001fcf:	90                   	nop
    return inb(port + 5) & 1;
ffffffff80001fd0:	89 df                	mov    %ebx,%edi
ffffffff80001fd2:	e8 29 f9 ff ff       	callq  ffffffff80001900 <inb>
    while(serial_received(port) == 0);
ffffffff80001fd7:	a8 01                	test   $0x1,%al
ffffffff80001fd9:	74 f5                	je     ffffffff80001fd0 <serial_read+0x10>

    return inb(port);
}
ffffffff80001fdb:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port);
ffffffff80001fdf:	89 ef                	mov    %ebp,%edi
}
ffffffff80001fe1:	5b                   	pop    %rbx
ffffffff80001fe2:	5d                   	pop    %rbp
    return inb(port);
ffffffff80001fe3:	e9 18 f9 ff ff       	jmpq   ffffffff80001900 <inb>
ffffffff80001fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001fef:	00 

ffffffff80001ff0 <serial_is_tx_empty>:

uint64_t serial_is_tx_empty(uint16_t port)
{
    return inb(port + 5) & 0x20;
ffffffff80001ff0:	83 c7 05             	add    $0x5,%edi
{
ffffffff80001ff3:	48 83 ec 08          	sub    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80001ff7:	0f b7 ff             	movzwl %di,%edi
ffffffff80001ffa:	e8 01 f9 ff ff       	callq  ffffffff80001900 <inb>
ffffffff80001fff:	83 e0 20             	and    $0x20,%eax
}
ffffffff80002002:	48 83 c4 08          	add    $0x8,%rsp
    return inb(port + 5) & 0x20;
ffffffff80002006:	0f b6 c0             	movzbl %al,%eax
}
ffffffff80002009:	c3                   	retq   
ffffffff8000200a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80002010 <serial_write>:

void serial_write(uint16_t port, uint8_t data)
{
ffffffff80002010:	41 54                	push   %r12
ffffffff80002012:	44 0f b7 e7          	movzwl %di,%r12d
ffffffff80002016:	83 c7 05             	add    $0x5,%edi
ffffffff80002019:	55                   	push   %rbp
ffffffff8000201a:	89 f5                	mov    %esi,%ebp
ffffffff8000201c:	53                   	push   %rbx
ffffffff8000201d:	0f b7 df             	movzwl %di,%ebx
    return inb(port + 5) & 0x20;
ffffffff80002020:	89 df                	mov    %ebx,%edi
ffffffff80002022:	e8 d9 f8 ff ff       	callq  ffffffff80001900 <inb>
    while(serial_is_tx_empty(port) == 0);
ffffffff80002027:	a8 20                	test   $0x20,%al
ffffffff80002029:	74 f5                	je     ffffffff80002020 <serial_write+0x10>
    outb(port, data);
}
ffffffff8000202b:	5b                   	pop    %rbx
    outb(port, data);
ffffffff8000202c:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80002030:	44 89 e7             	mov    %r12d,%edi
}
ffffffff80002033:	5d                   	pop    %rbp
ffffffff80002034:	41 5c                	pop    %r12
    outb(port, data);
ffffffff80002036:	e9 b5 f8 ff ff       	jmpq   ffffffff800018f0 <outb>
ffffffff8000203b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80002040 <serial_write_str>:

void serial_write_str(uint16_t port, char* data)
{
    uint8_t i = 0;
    while(data[i] != 0)
ffffffff80002040:	0f b6 06             	movzbl (%rsi),%eax
ffffffff80002043:	84 c0                	test   %al,%al
ffffffff80002045:	74 39                	je     ffffffff80002080 <serial_write_str+0x40>
{
ffffffff80002047:	41 54                	push   %r12
ffffffff80002049:	49 89 f4             	mov    %rsi,%r12
ffffffff8000204c:	55                   	push   %rbp
ffffffff8000204d:	0f b7 ef             	movzwl %di,%ebp
ffffffff80002050:	53                   	push   %rbx
    uint8_t i = 0;
ffffffff80002051:	31 db                	xor    %ebx,%ebx
ffffffff80002053:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        serial_write(port, data[i]);
ffffffff80002058:	0f b6 f0             	movzbl %al,%esi
        i++;
ffffffff8000205b:	83 c3 01             	add    $0x1,%ebx
        serial_write(port, data[i]);
ffffffff8000205e:	89 ef                	mov    %ebp,%edi
ffffffff80002060:	e8 ab ff ff ff       	callq  ffffffff80002010 <serial_write>
    while(data[i] != 0)
ffffffff80002065:	0f b6 c3             	movzbl %bl,%eax
ffffffff80002068:	41 0f b6 04 04       	movzbl (%r12,%rax,1),%eax
ffffffff8000206d:	84 c0                	test   %al,%al
ffffffff8000206f:	75 e7                	jne    ffffffff80002058 <serial_write_str+0x18>
    }
ffffffff80002071:	5b                   	pop    %rbx
ffffffff80002072:	5d                   	pop    %rbp
ffffffff80002073:	41 5c                	pop    %r12
ffffffff80002075:	c3                   	retq   
ffffffff80002076:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000207d:	00 00 00 
ffffffff80002080:	f3 c3                	repz retq 
ffffffff80002082:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002089:	00 00 00 
ffffffff8000208c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80002090 <kbd_init>:


void kbd_init()
{

}
ffffffff80002090:	f3 c3                	repz retq 
ffffffff80002092:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002099:	00 00 00 00 
ffffffff8000209d:	0f 1f 00             	nopl   (%rax)

ffffffff800020a0 <kbd_set_target>:

void kbd_set_target(void* handler)
{
    kbd_handler = handler;
ffffffff800020a0:	48 89 3d 21 03 01 00 	mov    %rdi,0x10321(%rip)        # ffffffff800123c8 <kbd_handler>
    kbd_active = 1;
ffffffff800020a7:	c6 05 22 03 01 00 01 	movb   $0x1,0x10322(%rip)        # ffffffff800123d0 <kbd_active>
}
ffffffff800020ae:	c3                   	retq   
ffffffff800020af:	90                   	nop

ffffffff800020b0 <kbd_translate>:

uint8_t kbd_translate(uint8_t scancode, uint8_t uppercase)
{
    if(scancode > 58) return 0;
ffffffff800020b0:	31 c0                	xor    %eax,%eax
ffffffff800020b2:	40 80 ff 3a          	cmp    $0x3a,%dil
ffffffff800020b6:	77 14                	ja     ffffffff800020cc <kbd_translate+0x1c>
ffffffff800020b8:	40 0f b6 ff          	movzbl %dil,%edi

    if(uppercase) return kbd_table[scancode] - 32;
ffffffff800020bc:	40 84 f6             	test   %sil,%sil
ffffffff800020bf:	0f b6 87 60 4e 00 80 	movzbl -0x7fffb1a0(%rdi),%eax
ffffffff800020c6:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff800020c9:	0f 45 c2             	cmovne %edx,%eax

    return kbd_table[scancode];
}
ffffffff800020cc:	f3 c3                	repz retq 
ffffffff800020ce:	66 90                	xchg   %ax,%ax

ffffffff800020d0 <kbd_handle>:
void kbd_handle()
{
    uint8_t data;
    KEY_INFO_t key_info;

    if(!kbd_active) return;
ffffffff800020d0:	80 3d f9 02 01 00 00 	cmpb   $0x0,0x102f9(%rip)        # ffffffff800123d0 <kbd_active>
ffffffff800020d7:	75 07                	jne    ffffffff800020e0 <kbd_handle+0x10>
ffffffff800020d9:	f3 c3                	repz retq 
ffffffff800020db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
{
ffffffff800020e0:	48 83 ec 08          	sub    $0x8,%rsp

    data = inb(0x60);
ffffffff800020e4:	bf 60 00 00 00       	mov    $0x60,%edi
ffffffff800020e9:	e8 12 f8 ff ff       	callq  ffffffff80001900 <inb>

    uint8_t buffer[20];

    switch(data)
ffffffff800020ee:	3c 36                	cmp    $0x36,%al
ffffffff800020f0:	74 36                	je     ffffffff80002128 <kbd_handle+0x58>
ffffffff800020f2:	77 1c                	ja     ffffffff80002110 <kbd_handle+0x40>
ffffffff800020f4:	3c 01                	cmp    $0x1,%al
ffffffff800020f6:	0f 84 84 00 00 00    	je     ffffffff80002180 <kbd_handle+0xb0>
ffffffff800020fc:	3c 2a                	cmp    $0x2a,%al
ffffffff800020fe:	75 48                	jne    ffffffff80002148 <kbd_handle+0x78>
    {
        case KBD_LEFT_SHIFT:
            lshift_status = 1;
ffffffff80002100:	c6 05 59 9a 00 00 01 	movb   $0x1,0x9a59(%rip)        # ffffffff8000bb60 <lshift_status>
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
    key_info.scancode = data;

    kbd_handler(key_info);

ffffffff80002107:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000210b:	c3                   	retq   
ffffffff8000210c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(data)
ffffffff80002110:	3c aa                	cmp    $0xaa,%al
ffffffff80002112:	74 24                	je     ffffffff80002138 <kbd_handle+0x68>
ffffffff80002114:	3c b6                	cmp    $0xb6,%al
ffffffff80002116:	75 30                	jne    ffffffff80002148 <kbd_handle+0x78>
            rshift_status = 0;
ffffffff80002118:	c6 05 29 99 00 00 00 	movb   $0x0,0x9929(%rip)        # ffffffff8000ba48 <rshift_status>
            return;
ffffffff8000211f:	eb e6                	jmp    ffffffff80002107 <kbd_handle+0x37>
ffffffff80002121:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            rshift_status = 1;
ffffffff80002128:	c6 05 19 99 00 00 01 	movb   $0x1,0x9919(%rip)        # ffffffff8000ba48 <rshift_status>
            return;
ffffffff8000212f:	eb d6                	jmp    ffffffff80002107 <kbd_handle+0x37>
ffffffff80002131:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            lshift_status = 0;
ffffffff80002138:	c6 05 21 9a 00 00 00 	movb   $0x0,0x9a21(%rip)        # ffffffff8000bb60 <lshift_status>
            return;
ffffffff8000213f:	eb c6                	jmp    ffffffff80002107 <kbd_handle+0x37>
ffffffff80002141:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(scancode > 58) return 0;
ffffffff80002148:	31 d2                	xor    %edx,%edx
ffffffff8000214a:	3c 3a                	cmp    $0x3a,%al
ffffffff8000214c:	77 1e                	ja     ffffffff8000216c <kbd_handle+0x9c>
ffffffff8000214e:	0f b6 d0             	movzbl %al,%edx
    if(uppercase) return kbd_table[scancode] - 32;
ffffffff80002151:	0f b6 35 08 9a 00 00 	movzbl 0x9a08(%rip),%esi        # ffffffff8000bb60 <lshift_status>
ffffffff80002158:	0f b6 92 60 4e 00 80 	movzbl -0x7fffb1a0(%rdx),%edx
ffffffff8000215f:	40 0a 35 e2 98 00 00 	or     0x98e2(%rip),%sil        # ffffffff8000ba48 <rshift_status>
ffffffff80002166:	8d 4a e0             	lea    -0x20(%rdx),%ecx
ffffffff80002169:	0f 45 d1             	cmovne %ecx,%edx
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff8000216c:	31 c9                	xor    %ecx,%ecx
ffffffff8000216e:	48 83 c4 08          	add    $0x8,%rsp
    key_info.ascii = kbd_translate(data, lshift_status | rshift_status);
ffffffff80002172:	88 d5                	mov    %dl,%ch
    key_info.scancode = data;
ffffffff80002174:	88 c1                	mov    %al,%cl
    kbd_handler(key_info);
ffffffff80002176:	89 cf                	mov    %ecx,%edi
ffffffff80002178:	ff 25 4a 02 01 00    	jmpq   *0x1024a(%rip)        # ffffffff800123c8 <kbd_handler>
ffffffff8000217e:	66 90                	xchg   %ax,%ax
            printf("%d\n", pit_ticks);
ffffffff80002180:	48 8b 35 59 03 01 00 	mov    0x10359(%rip),%rsi        # ffffffff800124e0 <pit_ticks>
ffffffff80002187:	48 c7 c7 27 4d 00 80 	mov    $0xffffffff80004d27,%rdi
ffffffff8000218e:	31 c0                	xor    %eax,%eax
ffffffff80002190:	48 83 c4 08          	add    $0x8,%rsp
            printf("%d\n", pit_ticks);
ffffffff80002194:	e9 b7 13 00 00       	jmpq   ffffffff80003550 <printf_>
ffffffff80002199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800021a0 <cpu_init>:

void cpu_init()
{
    uint64_t a,b,c,d;
    __cpuid(0,a,b,c,d);
ffffffff800021a0:	f3 c3                	repz retq 
ffffffff800021a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800021a9:	00 00 00 
ffffffff800021ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800021b0 <acpi_init>:
    struct RSDP20Descriptor* rsdp;

}ACPI_Info;

void acpi_init()
{
ffffffff800021b0:	48 83 ec 18          	sub    $0x18,%rsp
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff800021b4:	48 8b 05 4d 85 00 00 	mov    0x854d(%rip),%rax        # ffffffff8000a708 <boot_info+0x28>
    
    uint8_t test[8] = {'R', 'S', 'P', ' ', 'P', 'T', 'R', ' '};
ffffffff800021bb:	48 bf 52 53 50 20 50 	movabs $0x2052545020505352,%rdi
ffffffff800021c2:	54 52 20 
ffffffff800021c5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff800021ca:	31 d2                	xor    %edx,%edx
ffffffff800021cc:	b9 52 00 00 00       	mov    $0x52,%ecx
    ACPI_Info.rsdp = (struct RSDP20Descriptor*)boot_info.tag_rsdp->rsdp;
ffffffff800021d1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800021d5:	48 89 05 8c 99 00 00 	mov    %rax,0x998c(%rip)        # ffffffff8000bb68 <ACPI_Info>
    for(uint32_t i = 0; i < 8; i++)
    {
        if(test[i] == ACPI_Info.rsdp->header.signature[i]) 
ffffffff800021dc:	38 0c 10             	cmp    %cl,(%rax,%rdx,1)
ffffffff800021df:	74 0f                	je     ffffffff800021f0 <acpi_init+0x40>
            return;
    }

    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
    
ffffffff800021e1:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800021e5:	c3                   	retq   
ffffffff800021e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800021ed:	00 00 00 
ffffffff800021f0:	48 83 c2 01          	add    $0x1,%rdx
    for(uint32_t i = 0; i < 8; i++)
ffffffff800021f4:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff800021f8:	75 16                	jne    ffffffff80002210 <acpi_init+0x60>
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff800021fa:	0f b6 70 0f          	movzbl 0xf(%rax),%esi
ffffffff800021fe:	48 c7 c7 a0 4e 00 80 	mov    $0xffffffff80004ea0,%rdi
ffffffff80002205:	31 c0                	xor    %eax,%eax
ffffffff80002207:	48 83 c4 18          	add    $0x18,%rsp
    printf("Valid RSDP Header. Revision %d\n", ACPI_Info.rsdp->header.revision);
ffffffff8000220b:	e9 40 13 00 00       	jmpq   ffffffff80003550 <printf_>
ffffffff80002210:	0f b6 4c 14 08       	movzbl 0x8(%rsp,%rdx,1),%ecx
ffffffff80002215:	eb c5                	jmp    ffffffff800021dc <acpi_init+0x2c>
ffffffff80002217:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000221e:	00 00 

ffffffff80002220 <pic_EOI>:

uint64_t ticks;

void pic_EOI(uint8_t IRQ)
{
    if(IRQ >= 8)
ffffffff80002220:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff80002224:	77 12                	ja     ffffffff80002238 <pic_EOI+0x18>
    {
        outb(PIC2_CMD, PIC_EOI);
    }
    
    outb(PIC1_CMD, PIC_EOI);
ffffffff80002226:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000222b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002230:	e9 bb f6 ff ff       	jmpq   ffffffff800018f0 <outb>
ffffffff80002235:	0f 1f 00             	nopl   (%rax)
{
ffffffff80002238:	48 83 ec 08          	sub    $0x8,%rsp
        outb(PIC2_CMD, PIC_EOI);
ffffffff8000223c:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80002241:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80002246:	e8 a5 f6 ff ff       	callq  ffffffff800018f0 <outb>
    outb(PIC1_CMD, PIC_EOI);
ffffffff8000224b:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80002250:	bf 20 00 00 00       	mov    $0x20,%edi
}
ffffffff80002255:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_CMD, PIC_EOI);
ffffffff80002259:	e9 92 f6 ff ff       	jmpq   ffffffff800018f0 <outb>
ffffffff8000225e:	66 90                	xchg   %ax,%ax

ffffffff80002260 <pic_set_mask>:

void pic_set_mask(uint8_t IRQ)
{
ffffffff80002260:	55                   	push   %rbp
ffffffff80002261:	53                   	push   %rbx
ffffffff80002262:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff80002266:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff8000226a:	76 34                	jbe    ffffffff800022a0 <pic_set_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff8000226c:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff8000226f:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) | (1 << IRQ);
ffffffff80002274:	89 df                	mov    %ebx,%edi
ffffffff80002276:	e8 85 f6 ff ff       	callq  ffffffff80001900 <inb>
    outb(port, value);
}
ffffffff8000227b:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) | (1 << IRQ);
ffffffff8000227f:	89 e9                	mov    %ebp,%ecx
ffffffff80002281:	be 01 00 00 00       	mov    $0x1,%esi
    outb(port, value);
ffffffff80002286:	89 df                	mov    %ebx,%edi
    value = inb(port) | (1 << IRQ);
ffffffff80002288:	d3 e6                	shl    %cl,%esi
}
ffffffff8000228a:	5b                   	pop    %rbx
ffffffff8000228b:	5d                   	pop    %rbp
    value = inb(port) | (1 << IRQ);
ffffffff8000228c:	09 f0                	or     %esi,%eax
    outb(port, value);
ffffffff8000228e:	0f b6 f0             	movzbl %al,%esi
ffffffff80002291:	e9 5a f6 ff ff       	jmpq   ffffffff800018f0 <outb>
ffffffff80002296:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000229d:	00 00 00 
ffffffff800022a0:	89 fd                	mov    %edi,%ebp
ffffffff800022a2:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff800022a7:	eb cb                	jmp    ffffffff80002274 <pic_set_mask+0x14>
ffffffff800022a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800022b0 <pic_clear_mask>:

void pic_clear_mask(uint8_t IRQ)
{
ffffffff800022b0:	55                   	push   %rbp
ffffffff800022b1:	53                   	push   %rbx
ffffffff800022b2:	48 83 ec 08          	sub    $0x8,%rsp
    uint16_t port;
    uint8_t value;

    if(IRQ < 8)
ffffffff800022b6:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff800022ba:	76 34                	jbe    ffffffff800022f0 <pic_clear_mask+0x40>
        port = PIC1_DATA;
    }
    else
    {
        port = PIC2_DATA;
        IRQ -= 8;
ffffffff800022bc:	8d 6f f8             	lea    -0x8(%rdi),%ebp
ffffffff800022bf:	bb a1 00 00 00       	mov    $0xa1,%ebx
    }
    value = inb(port) & ~(1 << IRQ);
ffffffff800022c4:	89 df                	mov    %ebx,%edi
ffffffff800022c6:	e8 35 f6 ff ff       	callq  ffffffff80001900 <inb>
    outb(port, value);
}
ffffffff800022cb:	48 83 c4 08          	add    $0x8,%rsp
    value = inb(port) & ~(1 << IRQ);
ffffffff800022cf:	89 e9                	mov    %ebp,%ecx
ffffffff800022d1:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
    outb(port, value);
ffffffff800022d6:	89 df                	mov    %ebx,%edi
    value = inb(port) & ~(1 << IRQ);
ffffffff800022d8:	d3 c2                	rol    %cl,%edx
}
ffffffff800022da:	5b                   	pop    %rbx
ffffffff800022db:	5d                   	pop    %rbp
    value = inb(port) & ~(1 << IRQ);
ffffffff800022dc:	21 d0                	and    %edx,%eax
    outb(port, value);
ffffffff800022de:	0f b6 f0             	movzbl %al,%esi
ffffffff800022e1:	e9 0a f6 ff ff       	jmpq   ffffffff800018f0 <outb>
ffffffff800022e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff800022ed:	00 00 00 
ffffffff800022f0:	89 fd                	mov    %edi,%ebp
ffffffff800022f2:	bb 21 00 00 00       	mov    $0x21,%ebx
ffffffff800022f7:	eb cb                	jmp    ffffffff800022c4 <pic_clear_mask+0x14>
ffffffff800022f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80002300 <pic_disable>:

void pic_disable()
{
ffffffff80002300:	48 83 ec 08          	sub    $0x8,%rsp
    outb(PIC2_DATA, 0xff);
ffffffff80002304:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002309:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000230e:	e8 dd f5 ff ff       	callq  ffffffff800018f0 <outb>
    outb(PIC1_DATA, 0xff);
ffffffff80002313:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80002318:	bf 21 00 00 00       	mov    $0x21,%edi
}
ffffffff8000231d:	48 83 c4 08          	add    $0x8,%rsp
    outb(PIC1_DATA, 0xff);
ffffffff80002321:	e9 ca f5 ff ff       	jmpq   ffffffff800018f0 <outb>
ffffffff80002326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000232d:	00 00 00 

ffffffff80002330 <pic_remap>:

void pic_remap()
{
ffffffff80002330:	55                   	push   %rbp
ffffffff80002331:	53                   	push   %rbx
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80002332:	bf 21 00 00 00       	mov    $0x21,%edi
{
ffffffff80002337:	48 83 ec 08          	sub    $0x8,%rsp
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff8000233b:	e8 c0 f5 ff ff       	callq  ffffffff80001900 <inb>
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80002340:	bf a1 00 00 00       	mov    $0xa1,%edi
    uint8_t mask1 = inb(PIC1_DATA);
ffffffff80002345:	89 c5                	mov    %eax,%ebp
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80002347:	e8 b4 f5 ff ff       	callq  ffffffff80001900 <inb>

    outb(PIC1_CMD, 0x11);
ffffffff8000234c:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80002351:	bf 20 00 00 00       	mov    $0x20,%edi
    uint8_t mask2 = inb(PIC2_DATA);
ffffffff80002356:	89 c3                	mov    %eax,%ebx
    outb(PIC1_CMD, 0x11);
ffffffff80002358:	e8 93 f5 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff8000235d:	31 c0                	xor    %eax,%eax
ffffffff8000235f:	e8 ac f5 ff ff       	callq  ffffffff80001910 <io_wait>
    outb(PIC2_CMD, 0x11);
ffffffff80002364:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80002369:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8000236e:	e8 7d f5 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff80002373:	31 c0                	xor    %eax,%eax
ffffffff80002375:	e8 96 f5 ff ff       	callq  ffffffff80001910 <io_wait>

    outb(PIC1_DATA, 0x20);
ffffffff8000237a:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000237f:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002384:	e8 67 f5 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff80002389:	31 c0                	xor    %eax,%eax
ffffffff8000238b:	e8 80 f5 ff ff       	callq  ffffffff80001910 <io_wait>
    outb(PIC2_DATA, 0x20);
ffffffff80002390:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80002395:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000239a:	e8 51 f5 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff8000239f:	31 c0                	xor    %eax,%eax
ffffffff800023a1:	e8 6a f5 ff ff       	callq  ffffffff80001910 <io_wait>

    outb(PIC1_DATA, 0x04);
ffffffff800023a6:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff800023ab:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800023b0:	e8 3b f5 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff800023b5:	31 c0                	xor    %eax,%eax
ffffffff800023b7:	e8 54 f5 ff ff       	callq  ffffffff80001910 <io_wait>
    outb(PIC2_DATA, 0x02);
ffffffff800023bc:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff800023c1:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800023c6:	e8 25 f5 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff800023cb:	31 c0                	xor    %eax,%eax
ffffffff800023cd:	e8 3e f5 ff ff       	callq  ffffffff80001910 <io_wait>

    outb(PIC1_DATA, 0x01);
ffffffff800023d2:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800023d7:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800023dc:	e8 0f f5 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff800023e1:	31 c0                	xor    %eax,%eax
ffffffff800023e3:	e8 28 f5 ff ff       	callq  ffffffff80001910 <io_wait>
    outb(PIC2_DATA, 0x01);
ffffffff800023e8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800023ed:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800023f2:	e8 f9 f4 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff800023f7:	31 c0                	xor    %eax,%eax
ffffffff800023f9:	e8 12 f5 ff ff       	callq  ffffffff80001910 <io_wait>

    outb(PIC1_DATA, mask1);
ffffffff800023fe:	40 0f b6 f5          	movzbl %bpl,%esi
ffffffff80002402:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80002407:	e8 e4 f4 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff8000240c:	31 c0                	xor    %eax,%eax
ffffffff8000240e:	e8 fd f4 ff ff       	callq  ffffffff80001910 <io_wait>
    outb(PIC2_DATA, mask2);
ffffffff80002413:	0f b6 f3             	movzbl %bl,%esi
ffffffff80002416:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000241b:	e8 d0 f4 ff ff       	callq  ffffffff800018f0 <outb>
    io_wait();
ffffffff80002420:	31 c0                	xor    %eax,%eax
}
ffffffff80002422:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80002426:	5b                   	pop    %rbx
ffffffff80002427:	5d                   	pop    %rbp
    io_wait();
ffffffff80002428:	e9 e3 f4 ff ff       	jmpq   ffffffff80001910 <io_wait>
ffffffff8000242d:	0f 1f 00             	nopl   (%rax)

ffffffff80002430 <pit_init>:



void pit_init(uint64_t freq)
{
ffffffff80002430:	53                   	push   %rbx
    if(freq > 1193181)
        working_freq = 1193181;

    uint32_t divisor = 1193180 / working_freq;

    outb(0x43, 0x36);
ffffffff80002431:	be 36 00 00 00       	mov    $0x36,%esi
{
ffffffff80002436:	48 89 fb             	mov    %rdi,%rbx
    outb(0x43, 0x36);
ffffffff80002439:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8000243e:	e8 ad f4 ff ff       	callq  ffffffff800018f0 <outb>
    uint32_t divisor = 1193180 / working_freq;
ffffffff80002443:	48 81 fb dd 34 12 00 	cmp    $0x1234dd,%rbx
ffffffff8000244a:	bf dd 34 12 00       	mov    $0x1234dd,%edi
ffffffff8000244f:	b8 10 27 00 00       	mov    $0x2710,%eax
ffffffff80002454:	48 0f 46 fb          	cmovbe %rbx,%rdi
ffffffff80002458:	48 81 ff 10 27 00 00 	cmp    $0x2710,%rdi
ffffffff8000245f:	48 0f 42 f8          	cmovb  %rax,%rdi
ffffffff80002463:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
ffffffff80002468:	31 d2                	xor    %edx,%edx
ffffffff8000246a:	48 f7 f7             	div    %rdi
    outb(0x40, divisor & 0xff);
ffffffff8000246d:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80002472:	89 c6                	mov    %eax,%esi
ffffffff80002474:	e8 77 f4 ff ff       	callq  ffffffff800018f0 <outb>
    outb(0x40, divisor >> 8);
ffffffff80002479:	5b                   	pop    %rbx
    outb(0x40, divisor >> 8);
ffffffff8000247a:	31 f6                	xor    %esi,%esi
ffffffff8000247c:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80002481:	e9 6a f4 ff ff       	jmpq   ffffffff800018f0 <outb>
ffffffff80002486:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000248d:	00 00 00 

ffffffff80002490 <vfs_init>:
void vfs_init()
{
    //create file descriptors for STDIN, STDOUT, and STDERR
    

};
ffffffff80002490:	f3 c3                	repz retq 
ffffffff80002492:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002499:	00 00 00 
ffffffff8000249c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800024a0 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
ffffffff800024a0:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800024a3:	73 04                	jae    ffffffff800024a9 <_out_buffer+0x9>
    ((char*)buffer)[idx] = character;
ffffffff800024a5:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  }
}
ffffffff800024a9:	f3 c3                	repz retq 
ffffffff800024ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800024b0 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
ffffffff800024b0:	f3 c3                	repz retq 
ffffffff800024b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff800024b9:	00 00 00 00 
ffffffff800024bd:	0f 1f 00             	nopl   (%rax)

ffffffff800024c0 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
ffffffff800024c0:	40 84 ff             	test   %dil,%dil
{
ffffffff800024c3:	48 89 f0             	mov    %rsi,%rax
  if (character) {
ffffffff800024c6:	74 10                	je     ffffffff800024d8 <_out_fct+0x18>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
ffffffff800024c8:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffffff800024cc:	40 0f be ff          	movsbl %dil,%edi
ffffffff800024d0:	ff 20                	jmpq   *(%rax)
ffffffff800024d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  }
}
ffffffff800024d8:	f3 c3                	repz retq 
ffffffff800024da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff800024e0 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff800024e0:	41 57                	push   %r15
ffffffff800024e2:	41 56                	push   %r14
ffffffff800024e4:	41 55                	push   %r13
ffffffff800024e6:	41 54                	push   %r12
ffffffff800024e8:	49 89 cd             	mov    %rcx,%r13
ffffffff800024eb:	55                   	push   %rbp
ffffffff800024ec:	53                   	push   %rbx
ffffffff800024ed:	48 89 fd             	mov    %rdi,%rbp
ffffffff800024f0:	4c 89 c3             	mov    %r8,%rbx
ffffffff800024f3:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff800024f7:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
ffffffff800024fe:	48 89 34 24          	mov    %rsi,(%rsp)
ffffffff80002502:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff80002507:	8b 7c 24 60          	mov    0x60(%rsp),%edi
ffffffff8000250b:	89 c6                	mov    %eax,%esi
ffffffff8000250d:	89 c1                	mov    %eax,%ecx
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
ffffffff8000250f:	89 c2                	mov    %eax,%edx
ffffffff80002511:	83 e6 10             	and    $0x10,%esi
ffffffff80002514:	83 e1 03             	and    $0x3,%ecx
ffffffff80002517:	83 e2 02             	and    $0x2,%edx
ffffffff8000251a:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
ffffffff8000251e:	75 79                	jne    ffffffff80002599 <_ntoa_format+0xb9>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002520:	44 8b 54 24 78       	mov    0x78(%rsp),%r10d
ffffffff80002525:	41 89 c0             	mov    %eax,%r8d
ffffffff80002528:	8b 54 24 70          	mov    0x70(%rsp),%edx
ffffffff8000252c:	41 83 e0 01          	and    $0x1,%r8d
ffffffff80002530:	45 85 d2             	test   %r10d,%r10d
ffffffff80002533:	0f 85 d7 00 00 00    	jne    ffffffff80002610 <_ntoa_format+0x130>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002539:	49 39 d1             	cmp    %rdx,%r9
ffffffff8000253c:	73 27                	jae    ffffffff80002565 <_ntoa_format+0x85>
ffffffff8000253e:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002542:	75 12                	jne    ffffffff80002556 <_ntoa_format+0x76>
ffffffff80002544:	e9 b7 02 00 00       	jmpq   ffffffff80002800 <_ntoa_format+0x320>
ffffffff80002549:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80002550:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002554:	74 0f                	je     ffffffff80002565 <_ntoa_format+0x85>
      buf[len++] = '0';
ffffffff80002556:	49 83 c1 01          	add    $0x1,%r9
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000255a:	49 39 d1             	cmp    %rdx,%r9
      buf[len++] = '0';
ffffffff8000255d:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002563:	72 eb                	jb     ffffffff80002550 <_ntoa_format+0x70>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002565:	45 85 c0             	test   %r8d,%r8d
ffffffff80002568:	74 2f                	je     ffffffff80002599 <_ntoa_format+0xb9>
ffffffff8000256a:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff8000256f:	4d 39 ce             	cmp    %r9,%r14
ffffffff80002572:	76 25                	jbe    ffffffff80002599 <_ntoa_format+0xb9>
ffffffff80002574:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002578:	75 10                	jne    ffffffff8000258a <_ntoa_format+0xaa>
ffffffff8000257a:	e9 8b 03 00 00       	jmpq   ffffffff8000290a <_ntoa_format+0x42a>
ffffffff8000257f:	90                   	nop
ffffffff80002580:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff80002584:	0f 84 76 02 00 00    	je     ffffffff80002800 <_ntoa_format+0x320>
      buf[len++] = '0';
ffffffff8000258a:	49 83 c1 01          	add    $0x1,%r9
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff8000258e:	4d 39 f1             	cmp    %r14,%r9
      buf[len++] = '0';
ffffffff80002591:	42 c6 44 0b ff 30    	movb   $0x30,-0x1(%rbx,%r9,1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002597:	75 e7                	jne    ffffffff80002580 <_ntoa_format+0xa0>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
ffffffff80002599:	85 f6                	test   %esi,%esi
ffffffff8000259b:	74 41                	je     ffffffff800025de <_ntoa_format+0xfe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff8000259d:	f6 c4 04             	test   $0x4,%ah
ffffffff800025a0:	0f 85 5a 01 00 00    	jne    ffffffff80002700 <_ntoa_format+0x220>
ffffffff800025a6:	4d 85 c9             	test   %r9,%r9
ffffffff800025a9:	0f 85 31 01 00 00    	jne    ffffffff800026e0 <_ntoa_format+0x200>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025af:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff800025b4:	0f 84 2f 03 00 00    	je     ffffffff800028e9 <_ntoa_format+0x409>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800025ba:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff800025bf:	0f 85 37 03 00 00    	jne    ffffffff800028fc <_ntoa_format+0x41c>
      buf[len++] = 'b';
ffffffff800025c5:	c6 03 62             	movb   $0x62,(%rbx)
ffffffff800025c8:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
ffffffff800025cf:	00 00 
ffffffff800025d1:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff800025d6:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
ffffffff800025da:	c6 04 33 30          	movb   $0x30,(%rbx,%rsi,1)
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff800025de:	49 83 f9 20          	cmp    $0x20,%r9
ffffffff800025e2:	0f 84 38 02 00 00    	je     ffffffff80002820 <_ntoa_format+0x340>
    if (negative) {
ffffffff800025e8:	40 84 ff             	test   %dil,%dil
ffffffff800025eb:	75 4b                	jne    ffffffff80002638 <_ntoa_format+0x158>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
ffffffff800025ed:	a8 04                	test   $0x4,%al
ffffffff800025ef:	0f 85 a3 01 00 00    	jne    ffffffff80002798 <_ntoa_format+0x2b8>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
ffffffff800025f5:	a8 08                	test   $0x8,%al
ffffffff800025f7:	0f 84 9b 02 00 00    	je     ffffffff80002898 <_ntoa_format+0x3b8>
      buf[len++] = ' ';
ffffffff800025fd:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff80002601:	42 c6 04 0b 20       	movb   $0x20,(%rbx,%r9,1)
ffffffff80002606:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff8000260b:	eb 39                	jmp    ffffffff80002646 <_ntoa_format+0x166>
ffffffff8000260d:	0f 1f 00             	nopl   (%rax)
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
ffffffff80002610:	45 85 c0             	test   %r8d,%r8d
ffffffff80002613:	0f 84 97 01 00 00    	je     ffffffff800027b0 <_ntoa_format+0x2d0>
ffffffff80002619:	40 84 ff             	test   %dil,%dil
ffffffff8000261c:	75 04                	jne    ffffffff80002622 <_ntoa_format+0x142>
ffffffff8000261e:	a8 0c                	test   $0xc,%al
ffffffff80002620:	74 05                	je     ffffffff80002627 <_ntoa_format+0x147>
      width--;
ffffffff80002622:	83 6c 24 78 01       	subl   $0x1,0x78(%rsp)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002627:	49 39 d1             	cmp    %rdx,%r9
ffffffff8000262a:	0f 82 0e ff ff ff    	jb     ffffffff8000253e <_ntoa_format+0x5e>
ffffffff80002630:	e9 35 ff ff ff       	jmpq   ffffffff8000256a <_ntoa_format+0x8a>
ffffffff80002635:	0f 1f 00             	nopl   (%rax)
      buf[len++] = '-';
ffffffff80002638:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff8000263c:	42 c6 04 0b 2d       	movb   $0x2d,(%rbx,%r9,1)
ffffffff80002641:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002646:	85 c9                	test   %ecx,%ecx
ffffffff80002648:	0f 84 fa 00 00 00    	je     ffffffff80002748 <_ntoa_format+0x268>
ffffffff8000264e:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    for (size_t i = len; i < width; i++) {
ffffffff80002653:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
ffffffff80002658:	4c 89 fa             	mov    %r15,%rdx
ffffffff8000265b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80002660:	49 83 ec 01          	sub    $0x1,%r12
ffffffff80002664:	4c 8d 72 01          	lea    0x1(%rdx),%r14
ffffffff80002668:	4c 89 e9             	mov    %r13,%rcx
ffffffff8000266b:	42 0f be 3c 23       	movsbl (%rbx,%r12,1),%edi
ffffffff80002670:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002674:	ff d5                	callq  *%rbp
  while (len) {
ffffffff80002676:	4d 85 e4             	test   %r12,%r12
    out(buf[--len], buffer, idx++, maxlen);
ffffffff80002679:	4c 89 f2             	mov    %r14,%rdx
  while (len) {
ffffffff8000267c:	75 e2                	jne    ffffffff80002660 <_ntoa_format+0x180>
ffffffff8000267e:	4c 03 7c 24 10       	add    0x10(%rsp),%r15
  if (flags & FLAGS_LEFT) {
ffffffff80002683:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
ffffffff80002687:	85 c0                	test   %eax,%eax
ffffffff80002689:	74 3a                	je     ffffffff800026c5 <_ntoa_format+0x1e5>
    while (idx - start_idx < width) {
ffffffff8000268b:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
ffffffff80002690:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002693:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
ffffffff80002698:	49 39 d6             	cmp    %rdx,%r14
ffffffff8000269b:	76 28                	jbe    ffffffff800026c5 <_ntoa_format+0x1e5>
ffffffff8000269d:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff800026a0:	49 8d 5f 01          	lea    0x1(%r15),%rbx
ffffffff800026a4:	4c 89 fa             	mov    %r15,%rdx
ffffffff800026a7:	4c 89 e9             	mov    %r13,%rcx
ffffffff800026aa:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800026ae:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800026b3:	ff d5                	callq  *%rbp
    while (idx - start_idx < width) {
ffffffff800026b5:	48 89 da             	mov    %rbx,%rdx
ffffffff800026b8:	48 2b 54 24 08       	sub    0x8(%rsp),%rdx
      out(' ', buffer, idx++, maxlen);
ffffffff800026bd:	49 89 df             	mov    %rbx,%r15
    while (idx - start_idx < width) {
ffffffff800026c0:	4c 39 f2             	cmp    %r14,%rdx
ffffffff800026c3:	72 db                	jb     ffffffff800026a0 <_ntoa_format+0x1c0>
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
ffffffff800026c5:	48 83 c4 28          	add    $0x28,%rsp
ffffffff800026c9:	4c 89 f8             	mov    %r15,%rax
ffffffff800026cc:	5b                   	pop    %rbx
ffffffff800026cd:	5d                   	pop    %rbp
ffffffff800026ce:	41 5c                	pop    %r12
ffffffff800026d0:	41 5d                	pop    %r13
ffffffff800026d2:	41 5e                	pop    %r14
ffffffff800026d4:	41 5f                	pop    %r15
ffffffff800026d6:	c3                   	retq   
ffffffff800026d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800026de:	00 00 
ffffffff800026e0:	8b 54 24 70          	mov    0x70(%rsp),%edx
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff800026e4:	4c 39 ca             	cmp    %r9,%rdx
ffffffff800026e7:	0f 84 e3 00 00 00    	je     ffffffff800027d0 <_ntoa_format+0x2f0>
ffffffff800026ed:	8b 54 24 78          	mov    0x78(%rsp),%edx
ffffffff800026f1:	4c 39 ca             	cmp    %r9,%rdx
ffffffff800026f4:	0f 84 d6 00 00 00    	je     ffffffff800027d0 <_ntoa_format+0x2f0>
ffffffff800026fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002700:	49 83 f9 1f          	cmp    $0x1f,%r9
ffffffff80002704:	0f 96 c2             	setbe  %dl
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002707:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff8000270c:	0f 84 1e 01 00 00    	je     ffffffff80002830 <_ntoa_format+0x350>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002712:	83 7c 24 68 02       	cmpl   $0x2,0x68(%rsp)
ffffffff80002717:	0f 85 a3 00 00 00    	jne    ffffffff800027c0 <_ntoa_format+0x2e0>
ffffffff8000271d:	84 d2                	test   %dl,%dl
ffffffff8000271f:	0f 84 9b 00 00 00    	je     ffffffff800027c0 <_ntoa_format+0x2e0>
ffffffff80002725:	49 8d 71 01          	lea    0x1(%r9),%rsi
      buf[len++] = 'b';
ffffffff80002729:	42 c6 04 0b 62       	movb   $0x62,(%rbx,%r9,1)
ffffffff8000272e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
ffffffff80002733:	48 83 7c 24 10 1f    	cmpq   $0x1f,0x10(%rsp)
ffffffff80002739:	0f 86 92 fe ff ff    	jbe    ffffffff800025d1 <_ntoa_format+0xf1>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff8000273f:	85 c9                	test   %ecx,%ecx
ffffffff80002741:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80002746:	75 3a                	jne    ffffffff80002782 <_ntoa_format+0x2a2>
ffffffff80002748:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff8000274d:	4c 3b 74 24 10       	cmp    0x10(%rsp),%r14
ffffffff80002752:	0f 86 50 01 00 00    	jbe    ffffffff800028a8 <_ntoa_format+0x3c8>
ffffffff80002758:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff8000275d:	49 01 d6             	add    %rdx,%r14
ffffffff80002760:	4c 2b 74 24 10       	sub    0x10(%rsp),%r14
ffffffff80002765:	0f 1f 00             	nopl   (%rax)
      out(' ', buffer, idx++, maxlen);
ffffffff80002768:	4c 8d 7a 01          	lea    0x1(%rdx),%r15
ffffffff8000276c:	4c 89 e9             	mov    %r13,%rcx
ffffffff8000276f:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002773:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002778:	ff d5                	callq  *%rbp
    for (size_t i = len; i < width; i++) {
ffffffff8000277a:	4d 39 f7             	cmp    %r14,%r15
ffffffff8000277d:	4c 89 fa             	mov    %r15,%rdx
ffffffff80002780:	75 e6                	jne    ffffffff80002768 <_ntoa_format+0x288>
  while (len) {
ffffffff80002782:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
ffffffff80002788:	0f 85 c5 fe ff ff    	jne    ffffffff80002653 <_ntoa_format+0x173>
ffffffff8000278e:	e9 f0 fe ff ff       	jmpq   ffffffff80002683 <_ntoa_format+0x1a3>
ffffffff80002793:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      buf[len++] = '+';  // ignore the space if the '+' exists
ffffffff80002798:	49 8d 41 01          	lea    0x1(%r9),%rax
ffffffff8000279c:	42 c6 04 0b 2b       	movb   $0x2b,(%rbx,%r9,1)
ffffffff800027a1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800027a6:	e9 9b fe ff ff       	jmpq   ffffffff80002646 <_ntoa_format+0x166>
ffffffff800027ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800027b0:	49 39 d1             	cmp    %rdx,%r9
ffffffff800027b3:	0f 82 85 fd ff ff    	jb     ffffffff8000253e <_ntoa_format+0x5e>
ffffffff800027b9:	e9 db fd ff ff       	jmpq   ffffffff80002599 <_ntoa_format+0xb9>
ffffffff800027be:	66 90                	xchg   %ax,%ax
ffffffff800027c0:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff800027c5:	e9 69 ff ff ff       	jmpq   ffffffff80002733 <_ntoa_format+0x253>
ffffffff800027ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if (len && (base == 16U)) {
ffffffff800027d0:	4d 89 c8             	mov    %r9,%r8
ffffffff800027d3:	49 83 e8 01          	sub    $0x1,%r8
ffffffff800027d7:	0f 95 c2             	setne  %dl
ffffffff800027da:	83 7c 24 68 10       	cmpl   $0x10,0x68(%rsp)
ffffffff800027df:	40 0f 94 c6          	sete   %sil
ffffffff800027e3:	40 20 f2             	and    %sil,%dl
ffffffff800027e6:	0f 84 d9 00 00 00    	je     ffffffff800028c5 <_ntoa_format+0x3e5>
        len--;
ffffffff800027ec:	49 8d 71 fe          	lea    -0x2(%r9),%rsi
ffffffff800027f0:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff800027f5:	eb 3e                	jmp    ffffffff80002835 <_ntoa_format+0x355>
ffffffff800027f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff800027fe:	00 00 
  if (flags & FLAGS_HASH) {
ffffffff80002800:	85 f6                	test   %esi,%esi
ffffffff80002802:	74 6c                	je     ffffffff80002870 <_ntoa_format+0x390>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff80002804:	f6 c4 04             	test   $0x4,%ah
ffffffff80002807:	41 b9 20 00 00 00    	mov    $0x20,%r9d
ffffffff8000280d:	0f 84 d1 fe ff ff    	je     ffffffff800026e4 <_ntoa_format+0x204>
ffffffff80002813:	e9 e8 fe ff ff       	jmpq   ffffffff80002700 <_ntoa_format+0x220>
ffffffff80002818:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000281f:	00 
ffffffff80002820:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80002827:	00 00 
ffffffff80002829:	e9 18 fe ff ff       	jmpq   ffffffff80002646 <_ntoa_format+0x166>
ffffffff8000282e:	66 90                	xchg   %ax,%ax
ffffffff80002830:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002835:	89 c6                	mov    %eax,%esi
ffffffff80002837:	83 e6 20             	and    $0x20,%esi
ffffffff8000283a:	75 08                	jne    ffffffff80002844 <_ntoa_format+0x364>
ffffffff8000283c:	84 d2                	test   %dl,%dl
ffffffff8000283e:	0f 85 8e 00 00 00    	jne    ffffffff800028d2 <_ntoa_format+0x3f2>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff80002844:	85 f6                	test   %esi,%esi
ffffffff80002846:	0f 84 e7 fe ff ff    	je     ffffffff80002733 <_ntoa_format+0x253>
ffffffff8000284c:	84 d2                	test   %dl,%dl
ffffffff8000284e:	0f 84 df fe ff ff    	je     ffffffff80002733 <_ntoa_format+0x253>
      buf[len++] = 'X';
ffffffff80002854:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80002859:	c6 04 33 58          	movb   $0x58,(%rbx,%rsi,1)
ffffffff8000285d:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80002861:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80002866:	e9 c8 fe ff ff       	jmpq   ffffffff80002733 <_ntoa_format+0x253>
ffffffff8000286b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002870:	85 c9                	test   %ecx,%ecx
ffffffff80002872:	75 3e                	jne    ffffffff800028b2 <_ntoa_format+0x3d2>
ffffffff80002874:	44 8b 74 24 78       	mov    0x78(%rsp),%r14d
    for (size_t i = len; i < width; i++) {
ffffffff80002879:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff80002880:	00 00 
ffffffff80002882:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff80002886:	0f 87 cc fe ff ff    	ja     ffffffff80002758 <_ntoa_format+0x278>
ffffffff8000288c:	e9 bd fd ff ff       	jmpq   ffffffff8000264e <_ntoa_format+0x16e>
ffffffff80002891:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80002898:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff8000289d:	e9 9d fe ff ff       	jmpq   ffffffff8000273f <_ntoa_format+0x25f>
ffffffff800028a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff800028a8:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff800028ad:	e9 d0 fe ff ff       	jmpq   ffffffff80002782 <_ntoa_format+0x2a2>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff800028b2:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff800028b7:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff800028be:	00 00 
ffffffff800028c0:	e9 8e fd ff ff       	jmpq   ffffffff80002653 <_ntoa_format+0x173>
      len--;
ffffffff800028c5:	4d 89 c1             	mov    %r8,%r9
ffffffff800028c8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800028cd:	e9 35 fe ff ff       	jmpq   ffffffff80002707 <_ntoa_format+0x227>
      buf[len++] = 'x';
ffffffff800028d2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff800028d7:	c6 04 33 78          	movb   $0x78,(%rbx,%rsi,1)
ffffffff800028db:	48 83 c6 01          	add    $0x1,%rsi
ffffffff800028df:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff800028e4:	e9 4a fe ff ff       	jmpq   ffffffff80002733 <_ntoa_format+0x253>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
ffffffff800028e9:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
ffffffff800028f0:	00 00 
ffffffff800028f2:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800028f7:	e9 39 ff ff ff       	jmpq   ffffffff80002835 <_ntoa_format+0x355>
      buf[len++] = '0';
ffffffff800028fc:	c6 03 30             	movb   $0x30,(%rbx)
ffffffff800028ff:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80002905:	e9 de fc ff ff       	jmpq   ffffffff800025e8 <_ntoa_format+0x108>
  if (flags & FLAGS_HASH) {
ffffffff8000290a:	85 f6                	test   %esi,%esi
ffffffff8000290c:	74 17                	je     ffffffff80002925 <_ntoa_format+0x445>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
ffffffff8000290e:	f6 c4 04             	test   $0x4,%ah
ffffffff80002911:	0f 84 cd fd ff ff    	je     ffffffff800026e4 <_ntoa_format+0x204>
ffffffff80002917:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000291e:	00 00 
ffffffff80002920:	e9 1a fe ff ff       	jmpq   ffffffff8000273f <_ntoa_format+0x25f>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002925:	85 c9                	test   %ecx,%ecx
    for (size_t i = len; i < width; i++) {
ffffffff80002927:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
ffffffff8000292e:	00 00 
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
ffffffff80002930:	0f 85 18 fd ff ff    	jne    ffffffff8000264e <_ntoa_format+0x16e>
    for (size_t i = len; i < width; i++) {
ffffffff80002936:	49 83 fe 20          	cmp    $0x20,%r14
ffffffff8000293a:	0f 87 18 fe ff ff    	ja     ffffffff80002758 <_ntoa_format+0x278>
ffffffff80002940:	e9 09 fd ff ff       	jmpq   ffffffff8000264e <_ntoa_format+0x16e>
ffffffff80002945:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000294c:	00 00 00 00 

ffffffff80002950 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002950:	41 55                	push   %r13
ffffffff80002952:	41 54                	push   %r12
ffffffff80002954:	4c 89 c0             	mov    %r8,%rax
ffffffff80002957:	55                   	push   %rbp
ffffffff80002958:	53                   	push   %rbx
ffffffff80002959:	48 89 d3             	mov    %rdx,%rbx
ffffffff8000295c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80002960:	4d 85 c0             	test   %r8,%r8
{
ffffffff80002963:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80002968:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff8000296c:	75 13                	jne    ffffffff80002981 <_ntoa_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff8000296e:	89 ea                	mov    %ebp,%edx
ffffffff80002970:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002973:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80002979:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff8000297b:	0f 85 7f 00 00 00    	jne    ffffffff80002a00 <_ntoa_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002981:	89 ea                	mov    %ebp,%edx
ffffffff80002983:	83 e2 20             	and    $0x20,%edx
ffffffff80002986:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002989:	45 19 db             	sbb    %r11d,%r11d
ffffffff8000298c:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000298f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002993:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002997:	eb 0d                	jmp    ffffffff800029a6 <_ntoa_long+0x56>
ffffffff80002999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800029a0:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff800029a4:	77 26                	ja     ffffffff800029cc <_ntoa_long+0x7c>
ffffffff800029a6:	31 d2                	xor    %edx,%edx
ffffffff800029a8:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800029ab:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff800029af:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff800029b3:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff800029b7:	44 89 ea             	mov    %r13d,%edx
ffffffff800029ba:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff800029be:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800029c2:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff800029c5:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff800029ca:	75 d4                	jne    ffffffff800029a0 <_ntoa_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff800029cc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800029d0:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff800029d4:	48 89 da             	mov    %rbx,%rdx
ffffffff800029d7:	55                   	push   %rbp
ffffffff800029d8:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff800029dc:	50                   	push   %rax
ffffffff800029dd:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff800029e1:	50                   	push   %rax
ffffffff800029e2:	41 52                	push   %r10
ffffffff800029e4:	41 51                	push   %r9
ffffffff800029e6:	4d 89 c1             	mov    %r8,%r9
ffffffff800029e9:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff800029ee:	e8 ed fa ff ff       	callq  ffffffff800024e0 <_ntoa_format>
}
ffffffff800029f3:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800029f7:	5b                   	pop    %rbx
ffffffff800029f8:	5d                   	pop    %rbp
ffffffff800029f9:	41 5c                	pop    %r12
ffffffff800029fb:	41 5d                	pop    %r13
ffffffff800029fd:	c3                   	retq   
ffffffff800029fe:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002a00:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002a03:	eb c7                	jmp    ffffffff800029cc <_ntoa_long+0x7c>
ffffffff80002a05:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002a0c:	00 00 00 00 

ffffffff80002a10 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
ffffffff80002a10:	41 55                	push   %r13
ffffffff80002a12:	41 54                	push   %r12
ffffffff80002a14:	4c 89 c0             	mov    %r8,%rax
ffffffff80002a17:	55                   	push   %rbp
ffffffff80002a18:	53                   	push   %rbx
ffffffff80002a19:	48 89 d3             	mov    %rdx,%rbx
ffffffff80002a1c:	48 83 ec 28          	sub    $0x28,%rsp
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
ffffffff80002a20:	4d 85 c0             	test   %r8,%r8
{
ffffffff80002a23:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
ffffffff80002a28:	8b 6c 24 68          	mov    0x68(%rsp),%ebp
  if (!value) {
ffffffff80002a2c:	75 13                	jne    ffffffff80002a41 <_ntoa_long_long+0x31>
    flags &= ~FLAGS_HASH;
ffffffff80002a2e:	89 ea                	mov    %ebp,%edx
ffffffff80002a30:	83 e2 ef             	and    $0xffffffef,%edx
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002a33:	81 e5 00 04 00 00    	and    $0x400,%ebp
    flags &= ~FLAGS_HASH;
ffffffff80002a39:	89 d5                	mov    %edx,%ebp
  if (!(flags & FLAGS_PRECISION) || value) {
ffffffff80002a3b:	0f 85 7f 00 00 00    	jne    ffffffff80002ac0 <_ntoa_long_long+0xb0>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002a41:	89 ea                	mov    %ebp,%edx
ffffffff80002a43:	83 e2 20             	and    $0x20,%edx
ffffffff80002a46:	83 fa 01             	cmp    $0x1,%edx
ffffffff80002a49:	45 19 db             	sbb    %r11d,%r11d
ffffffff80002a4c:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002a4f:	41 83 e3 20          	and    $0x20,%r11d
ffffffff80002a53:	41 83 c3 37          	add    $0x37,%r11d
ffffffff80002a57:	eb 0d                	jmp    ffffffff80002a66 <_ntoa_long_long+0x56>
ffffffff80002a59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002a60:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80002a64:	77 26                	ja     ffffffff80002a8c <_ntoa_long_long+0x7c>
ffffffff80002a66:	31 d2                	xor    %edx,%edx
ffffffff80002a68:	49 f7 f2             	div    %r10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002a6b:	44 8d 6a 30          	lea    0x30(%rdx),%r13d
ffffffff80002a6f:	45 8d 24 13          	lea    (%r11,%rdx,1),%r12d
ffffffff80002a73:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80002a77:	44 89 ea             	mov    %r13d,%edx
ffffffff80002a7a:	41 0f 47 d4          	cmova  %r12d,%edx
ffffffff80002a7e:	49 83 c0 01          	add    $0x1,%r8
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002a82:	48 85 c0             	test   %rax,%rax
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
ffffffff80002a85:	42 88 54 04 ff       	mov    %dl,-0x1(%rsp,%r8,1)
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ffffffff80002a8a:	75 d4                	jne    ffffffff80002a60 <_ntoa_long_long+0x50>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
ffffffff80002a8c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80002a90:	45 0f b6 c9          	movzbl %r9b,%r9d
ffffffff80002a94:	48 89 da             	mov    %rbx,%rdx
ffffffff80002a97:	55                   	push   %rbp
ffffffff80002a98:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002a9c:	50                   	push   %rax
ffffffff80002a9d:	8b 44 24 70          	mov    0x70(%rsp),%eax
ffffffff80002aa1:	50                   	push   %rax
ffffffff80002aa2:	41 52                	push   %r10
ffffffff80002aa4:	41 51                	push   %r9
ffffffff80002aa6:	4d 89 c1             	mov    %r8,%r9
ffffffff80002aa9:	4c 8d 44 24 30       	lea    0x30(%rsp),%r8
ffffffff80002aae:	e8 2d fa ff ff       	callq  ffffffff800024e0 <_ntoa_format>
}
ffffffff80002ab3:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80002ab7:	5b                   	pop    %rbx
ffffffff80002ab8:	5d                   	pop    %rbp
ffffffff80002ab9:	41 5c                	pop    %r12
ffffffff80002abb:	41 5d                	pop    %r13
ffffffff80002abd:	c3                   	retq   
ffffffff80002abe:	66 90                	xchg   %ax,%ax
  size_t len = 0U;
ffffffff80002ac0:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002ac3:	eb c7                	jmp    ffffffff80002a8c <_ntoa_long_long+0x7c>
ffffffff80002ac5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80002acc:	00 00 00 00 

ffffffff80002ad0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
ffffffff80002ad0:	41 57                	push   %r15
ffffffff80002ad2:	41 56                	push   %r14
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
ffffffff80002ad4:	48 c7 c0 b0 24 00 80 	mov    $0xffffffff800024b0,%rax
{
ffffffff80002adb:	41 55                	push   %r13
ffffffff80002add:	41 54                	push   %r12
ffffffff80002adf:	49 89 f7             	mov    %rsi,%r15
ffffffff80002ae2:	55                   	push   %rbp
ffffffff80002ae3:	53                   	push   %rbx
ffffffff80002ae4:	48 89 fd             	mov    %rdi,%rbp
ffffffff80002ae7:	49 89 d6             	mov    %rdx,%r14
ffffffff80002aea:	49 89 cd             	mov    %rcx,%r13
ffffffff80002aed:	48 83 ec 38          	sub    $0x38,%rsp
    out = _out_null;
ffffffff80002af1:	48 85 f6             	test   %rsi,%rsi
ffffffff80002af4:	48 0f 44 e8          	cmove  %rax,%rbp
{
ffffffff80002af8:	4c 89 04 24          	mov    %r8,(%rsp)
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
ffffffff80002afc:	31 db                	xor    %ebx,%ebx
  while (*format)
ffffffff80002afe:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff80002b03:	40 84 ff             	test   %dil,%dil
ffffffff80002b06:	74 26                	je     ffffffff80002b2e <_vsnprintf+0x5e>
ffffffff80002b08:	49 83 c5 01          	add    $0x1,%r13
    if (*format != '%') {
ffffffff80002b0c:	40 80 ff 25          	cmp    $0x25,%dil
ffffffff80002b10:	74 46                	je     ffffffff80002b58 <_vsnprintf+0x88>
      out(*format, buffer, idx++, maxlen);
ffffffff80002b12:	4c 8d 63 01          	lea    0x1(%rbx),%r12
        out(*format, buffer, idx++, maxlen);
ffffffff80002b16:	48 89 da             	mov    %rbx,%rdx
ffffffff80002b19:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002b1c:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002b1f:	ff d5                	callq  *%rbp
  while (*format)
ffffffff80002b21:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
        out(*format, buffer, idx++, maxlen);
ffffffff80002b26:	4c 89 e3             	mov    %r12,%rbx
  while (*format)
ffffffff80002b29:	40 84 ff             	test   %dil,%dil
ffffffff80002b2c:	75 da                	jne    ffffffff80002b08 <_vsnprintf+0x38>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
ffffffff80002b2e:	49 8d 56 ff          	lea    -0x1(%r14),%rdx
ffffffff80002b32:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80002b35:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002b38:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002b3b:	48 0f 42 d3          	cmovb  %rbx,%rdx
ffffffff80002b3f:	31 ff                	xor    %edi,%edi
ffffffff80002b41:	ff d5                	callq  *%rbp

  // return written chars without terminating \0
  return (int)idx;
}
ffffffff80002b43:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80002b47:	89 d8                	mov    %ebx,%eax
ffffffff80002b49:	5b                   	pop    %rbx
ffffffff80002b4a:	5d                   	pop    %rbp
ffffffff80002b4b:	41 5c                	pop    %r12
ffffffff80002b4d:	41 5d                	pop    %r13
ffffffff80002b4f:	41 5e                	pop    %r14
ffffffff80002b51:	41 5f                	pop    %r15
ffffffff80002b53:	c3                   	retq   
ffffffff80002b54:	0f 1f 40 00          	nopl   0x0(%rax)
    flags = 0U;
ffffffff80002b58:	31 c9                	xor    %ecx,%ecx
ffffffff80002b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      switch (*format) {
ffffffff80002b60:	41 0f be 45 00       	movsbl 0x0(%r13),%eax
ffffffff80002b65:	49 8d 75 01          	lea    0x1(%r13),%rsi
ffffffff80002b69:	48 89 f7             	mov    %rsi,%rdi
ffffffff80002b6c:	8d 50 e0             	lea    -0x20(%rax),%edx
ffffffff80002b6f:	80 fa 10             	cmp    $0x10,%dl
ffffffff80002b72:	77 3c                	ja     ffffffff80002bb0 <_vsnprintf+0xe0>
ffffffff80002b74:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002b77:	ff 24 d5 40 4f 00 80 	jmpq   *-0x7fffb0c0(,%rdx,8)
ffffffff80002b7e:	66 90                	xchg   %ax,%ax
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
ffffffff80002b80:	83 c9 01             	or     $0x1,%ecx
ffffffff80002b83:	49 89 f5             	mov    %rsi,%r13
ffffffff80002b86:	eb d8                	jmp    ffffffff80002b60 <_vsnprintf+0x90>
ffffffff80002b88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80002b8f:	00 
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ffffffff80002b90:	83 c9 04             	or     $0x4,%ecx
ffffffff80002b93:	eb ee                	jmp    ffffffff80002b83 <_vsnprintf+0xb3>
ffffffff80002b95:	0f 1f 00             	nopl   (%rax)
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ffffffff80002b98:	83 c9 02             	or     $0x2,%ecx
ffffffff80002b9b:	eb e6                	jmp    ffffffff80002b83 <_vsnprintf+0xb3>
ffffffff80002b9d:	0f 1f 00             	nopl   (%rax)
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ffffffff80002ba0:	83 c9 10             	or     $0x10,%ecx
ffffffff80002ba3:	eb de                	jmp    ffffffff80002b83 <_vsnprintf+0xb3>
ffffffff80002ba5:	0f 1f 00             	nopl   (%rax)
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ffffffff80002ba8:	83 c9 08             	or     $0x8,%ecx
ffffffff80002bab:	eb d6                	jmp    ffffffff80002b83 <_vsnprintf+0xb3>
ffffffff80002bad:	0f 1f 00             	nopl   (%rax)
  return (ch >= '0') && (ch <= '9');
ffffffff80002bb0:	8d 50 d0             	lea    -0x30(%rax),%edx
    if (_is_digit(*format)) {
ffffffff80002bb3:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002bb6:	0f 86 54 02 00 00    	jbe    ffffffff80002e10 <_vsnprintf+0x340>
    width = 0U;
ffffffff80002bbc:	45 31 e4             	xor    %r12d,%r12d
    else if (*format == '*') {
ffffffff80002bbf:	3c 2a                	cmp    $0x2a,%al
ffffffff80002bc1:	0f 84 75 07 00 00    	je     ffffffff8000333c <_vsnprintf+0x86c>
    precision = 0U;
ffffffff80002bc7:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002bca:	3c 2e                	cmp    $0x2e,%al
ffffffff80002bcc:	0f 84 73 02 00 00    	je     ffffffff80002e45 <_vsnprintf+0x375>
    switch (*format) {
ffffffff80002bd2:	3c 6a                	cmp    $0x6a,%al
ffffffff80002bd4:	74 12                	je     ffffffff80002be8 <_vsnprintf+0x118>
ffffffff80002bd6:	0f 8e bc 02 00 00    	jle    ffffffff80002e98 <_vsnprintf+0x3c8>
ffffffff80002bdc:	3c 6c                	cmp    $0x6c,%al
ffffffff80002bde:	74 30                	je     ffffffff80002c10 <_vsnprintf+0x140>
ffffffff80002be0:	3c 7a                	cmp    $0x7a,%al
ffffffff80002be2:	0f 85 d0 02 00 00    	jne    ffffffff80002eb8 <_vsnprintf+0x3e8>
ffffffff80002be8:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002bed:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ffffffff80002bf1:	80 cd 01             	or     $0x1,%ch
    switch (*format) {
ffffffff80002bf4:	8d 50 db             	lea    -0x25(%rax),%edx
ffffffff80002bf7:	80 fa 53             	cmp    $0x53,%dl
ffffffff80002bfa:	0f 87 00 02 00 00    	ja     ffffffff80002e00 <_vsnprintf+0x330>
ffffffff80002c00:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002c03:	ff 24 d5 c8 4f 00 80 	jmpq   *-0x7fffb038(,%rdx,8)
ffffffff80002c0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if (*format == 'l') {
ffffffff80002c10:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002c15:	3c 6c                	cmp    $0x6c,%al
ffffffff80002c17:	0f 84 98 04 00 00    	je     ffffffff800030b5 <_vsnprintf+0x5e5>
        flags |= FLAGS_LONG;
ffffffff80002c1d:	80 cd 01             	or     $0x1,%ch
ffffffff80002c20:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002c24:	eb ce                	jmp    ffffffff80002bf4 <_vsnprintf+0x124>
ffffffff80002c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002c2d:	00 00 00 
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002c30:	48 8b 34 24          	mov    (%rsp),%rsi
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
ffffffff80002c34:	83 c9 21             	or     $0x21,%ecx
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80002c37:	8b 06                	mov    (%rsi),%eax
ffffffff80002c39:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80002c3c:	0f 87 45 08 00 00    	ja     ffffffff80003487 <_vsnprintf+0x9b7>
ffffffff80002c42:	89 c2                	mov    %eax,%edx
ffffffff80002c44:	48 03 56 10          	add    0x10(%rsi),%rdx
ffffffff80002c48:	83 c0 08             	add    $0x8,%eax
ffffffff80002c4b:	89 06                	mov    %eax,(%rsi)
ffffffff80002c4d:	51                   	push   %rcx
ffffffff80002c4e:	6a 10                	pushq  $0x10
ffffffff80002c50:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002c53:	41 52                	push   %r10
ffffffff80002c55:	6a 10                	pushq  $0x10
ffffffff80002c57:	4c 8b 02             	mov    (%rdx),%r8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80002c5a:	48 89 da             	mov    %rbx,%rdx
ffffffff80002c5d:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002c60:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002c63:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002c66:	e8 a5 fd ff ff       	callq  ffffffff80002a10 <_ntoa_long_long>
ffffffff80002c6b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002c6f:	48 89 c3             	mov    %rax,%rbx
ffffffff80002c72:	e9 87 fe ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
ffffffff80002c77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002c7e:	00 00 
ffffffff80002c80:	4c 8d 43 01          	lea    0x1(%rbx),%r8
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002c84:	83 e1 02             	and    $0x2,%ecx
ffffffff80002c87:	4c 89 c0             	mov    %r8,%rax
ffffffff80002c8a:	0f 84 47 04 00 00    	je     ffffffff800030d7 <_vsnprintf+0x607>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002c90:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002c94:	8b 16                	mov    (%rsi),%edx
ffffffff80002c96:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002c99:	0f 87 34 06 00 00    	ja     ffffffff800032d3 <_vsnprintf+0x803>
ffffffff80002c9f:	89 d1                	mov    %edx,%ecx
ffffffff80002ca1:	48 03 4e 10          	add    0x10(%rsi),%rcx
ffffffff80002ca5:	83 c2 08             	add    $0x8,%edx
ffffffff80002ca8:	89 16                	mov    %edx,(%rsi)
ffffffff80002caa:	0f be 39             	movsbl (%rcx),%edi
ffffffff80002cad:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffffff80002cb2:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002cb5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80002cba:	48 89 da             	mov    %rbx,%rdx
ffffffff80002cbd:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002cc0:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002cc2:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff80002cc6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80002ccb:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
ffffffff80002cd0:	0f 86 e8 02 00 00    	jbe    ffffffff80002fbe <_vsnprintf+0x4ee>
ffffffff80002cd6:	41 8d 4c 24 fe       	lea    -0x2(%r12),%ecx
ffffffff80002cdb:	48 83 c3 02          	add    $0x2,%rbx
ffffffff80002cdf:	48 89 c2             	mov    %rax,%rdx
ffffffff80002ce2:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
ffffffff80002ce7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80002cec:	48 01 cb             	add    %rcx,%rbx
            out(' ', buffer, idx++, maxlen);
ffffffff80002cef:	4c 8d 62 01          	lea    0x1(%rdx),%r12
ffffffff80002cf3:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002cf6:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002cf9:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80002cfe:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80002d00:	49 39 dc             	cmp    %rbx,%r12
ffffffff80002d03:	4c 89 e2             	mov    %r12,%rdx
ffffffff80002d06:	75 e7                	jne    ffffffff80002cef <_vsnprintf+0x21f>
ffffffff80002d08:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
ffffffff80002d0d:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
        break;
ffffffff80002d12:	e9 e7 fd ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
ffffffff80002d17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002d1e:	00 00 
        out('%', buffer, idx++, maxlen);
ffffffff80002d20:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80002d24:	48 89 da             	mov    %rbx,%rdx
ffffffff80002d27:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002d2a:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002d2d:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff80002d32:	4c 89 e3             	mov    %r12,%rbx
ffffffff80002d35:	ff d5                	callq  *%rbp
        break;
ffffffff80002d37:	e9 c2 fd ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
ffffffff80002d3c:	0f 1f 40 00          	nopl   0x0(%rax)
        if (*format == 'x' || *format == 'X') {
ffffffff80002d40:	89 c2                	mov    %eax,%edx
ffffffff80002d42:	83 e2 df             	and    $0xffffffdf,%edx
ffffffff80002d45:	80 fa 58             	cmp    $0x58,%dl
ffffffff80002d48:	0f 84 66 02 00 00    	je     ffffffff80002fb4 <_vsnprintf+0x4e4>
        else if (*format == 'o') {
ffffffff80002d4e:	3c 6f                	cmp    $0x6f,%al
ffffffff80002d50:	0f 84 b6 04 00 00    	je     ffffffff8000320c <_vsnprintf+0x73c>
        else if (*format == 'b') {
ffffffff80002d56:	3c 62                	cmp    $0x62,%al
ffffffff80002d58:	0f 84 20 05 00 00    	je     ffffffff8000327e <_vsnprintf+0x7ae>
          flags &= ~FLAGS_HASH;   // no hash for dec format
ffffffff80002d5e:	83 e1 ef             	and    $0xffffffef,%ecx
ffffffff80002d61:	bf 0a 00 00 00       	mov    $0xa,%edi
        if (*format == 'X') {
ffffffff80002d66:	3c 58                	cmp    $0x58,%al
ffffffff80002d68:	0f 84 3c 03 00 00    	je     ffffffff800030aa <_vsnprintf+0x5da>
        if ((*format != 'i') && (*format != 'd')) {
ffffffff80002d6e:	3c 69                	cmp    $0x69,%al
ffffffff80002d70:	74 08                	je     ffffffff80002d7a <_vsnprintf+0x2aa>
ffffffff80002d72:	3c 64                	cmp    $0x64,%al
ffffffff80002d74:	0f 85 33 03 00 00    	jne    ffffffff800030ad <_vsnprintf+0x5dd>
          flags &= ~FLAGS_ZEROPAD;
ffffffff80002d7a:	89 ca                	mov    %ecx,%edx
ffffffff80002d7c:	83 e2 fe             	and    $0xfffffffe,%edx
ffffffff80002d7f:	f6 c5 04             	test   $0x4,%ch
ffffffff80002d82:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80002d85:	48 8b 14 24          	mov    (%rsp),%rdx
ffffffff80002d89:	89 ce                	mov    %ecx,%esi
ffffffff80002d8b:	81 e6 00 02 00 00    	and    $0x200,%esi
        if ((*format == 'i') || (*format == 'd')) {
ffffffff80002d91:	3c 69                	cmp    $0x69,%al
ffffffff80002d93:	8b 12                	mov    (%rdx),%edx
ffffffff80002d95:	0f 84 b8 02 00 00    	je     ffffffff80003053 <_vsnprintf+0x583>
ffffffff80002d9b:	3c 64                	cmp    $0x64,%al
ffffffff80002d9d:	0f 84 b0 02 00 00    	je     ffffffff80003053 <_vsnprintf+0x583>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80002da3:	85 f6                	test   %esi,%esi
ffffffff80002da5:	0f 85 38 04 00 00    	jne    ffffffff800031e3 <_vsnprintf+0x713>
          else if (flags & FLAGS_LONG) {
ffffffff80002dab:	f6 c5 01             	test   $0x1,%ch
ffffffff80002dae:	0f 85 a1 04 00 00    	jne    ffffffff80003255 <_vsnprintf+0x785>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80002db4:	f6 c1 40             	test   $0x40,%cl
ffffffff80002db7:	0f 84 6e 04 00 00    	je     ffffffff8000322b <_vsnprintf+0x75b>
ffffffff80002dbd:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002dc0:	0f 87 d2 05 00 00    	ja     ffffffff80003398 <_vsnprintf+0x8c8>
ffffffff80002dc6:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002dca:	89 d0                	mov    %edx,%eax
ffffffff80002dcc:	83 c2 08             	add    $0x8,%edx
ffffffff80002dcf:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002dd3:	89 16                	mov    %edx,(%rsi)
ffffffff80002dd5:	44 0f b6 00          	movzbl (%rax),%r8d
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
ffffffff80002dd9:	51                   	push   %rcx
ffffffff80002dda:	41 54                	push   %r12
ffffffff80002ddc:	45 31 c9             	xor    %r9d,%r9d
ffffffff80002ddf:	41 52                	push   %r10
ffffffff80002de1:	57                   	push   %rdi
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80002de2:	48 89 da             	mov    %rbx,%rdx
ffffffff80002de5:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002de8:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002deb:	48 89 ef             	mov    %rbp,%rdi
ffffffff80002dee:	e8 5d fb ff ff       	callq  ffffffff80002950 <_ntoa_long>
ffffffff80002df3:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002df7:	48 89 c3             	mov    %rax,%rbx
ffffffff80002dfa:	e9 ff fc ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
ffffffff80002dff:	90                   	nop
        out(*format, buffer, idx++, maxlen);
ffffffff80002e00:	4c 8d 63 01          	lea    0x1(%rbx),%r12
    switch (*format) {
ffffffff80002e04:	0f be f8             	movsbl %al,%edi
ffffffff80002e07:	e9 0a fd ff ff       	jmpq   ffffffff80002b16 <_vsnprintf+0x46>
ffffffff80002e0c:	0f 1f 40 00          	nopl   0x0(%rax)
  unsigned int i = 0U;
ffffffff80002e10:	45 31 e4             	xor    %r12d,%r12d
ffffffff80002e13:	eb 0a                	jmp    ffffffff80002e1f <_vsnprintf+0x34f>
ffffffff80002e15:	0f 1f 00             	nopl   (%rax)
  while (_is_digit(**str)) {
ffffffff80002e18:	49 89 f5             	mov    %rsi,%r13
ffffffff80002e1b:	48 83 c6 01          	add    $0x1,%rsi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002e1f:	43 8d 14 a4          	lea    (%r12,%r12,4),%edx
ffffffff80002e23:	44 8d 64 50 d0       	lea    -0x30(%rax,%rdx,2),%r12d
  while (_is_digit(**str)) {
ffffffff80002e28:	0f be 06             	movsbl (%rsi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002e2b:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002e2e:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002e31:	76 e5                	jbe    ffffffff80002e18 <_vsnprintf+0x348>
ffffffff80002e33:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80002e37:	49 89 f5             	mov    %rsi,%r13
    precision = 0U;
ffffffff80002e3a:	45 31 d2             	xor    %r10d,%r10d
    if (*format == '.') {
ffffffff80002e3d:	3c 2e                	cmp    $0x2e,%al
ffffffff80002e3f:	0f 85 8d fd ff ff    	jne    ffffffff80002bd2 <_vsnprintf+0x102>
      if (_is_digit(*format)) {
ffffffff80002e45:	41 0f be 45 01       	movsbl 0x1(%r13),%eax
      flags |= FLAGS_PRECISION;
ffffffff80002e4a:	80 cd 04             	or     $0x4,%ch
  return (ch >= '0') && (ch <= '9');
ffffffff80002e4d:	8d 50 d0             	lea    -0x30(%rax),%edx
      if (_is_digit(*format)) {
ffffffff80002e50:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002e53:	76 1e                	jbe    ffffffff80002e73 <_vsnprintf+0x3a3>
      else if (*format == '*') {
ffffffff80002e55:	3c 2a                	cmp    $0x2a,%al
ffffffff80002e57:	0f 84 3f 06 00 00    	je     ffffffff8000349c <_vsnprintf+0x9cc>
      format++;
ffffffff80002e5d:	49 89 fd             	mov    %rdi,%r13
      else if (*format == '*') {
ffffffff80002e60:	48 83 c7 01          	add    $0x1,%rdi
ffffffff80002e64:	e9 69 fd ff ff       	jmpq   ffffffff80002bd2 <_vsnprintf+0x102>
ffffffff80002e69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  while (_is_digit(**str)) {
ffffffff80002e70:	4c 89 ef             	mov    %r13,%rdi
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
ffffffff80002e73:	43 8d 14 92          	lea    (%r10,%r10,4),%edx
ffffffff80002e77:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002e7b:	44 8d 54 50 d0       	lea    -0x30(%rax,%rdx,2),%r10d
  while (_is_digit(**str)) {
ffffffff80002e80:	0f be 47 01          	movsbl 0x1(%rdi),%eax
  return (ch >= '0') && (ch <= '9');
ffffffff80002e84:	8d 50 d0             	lea    -0x30(%rax),%edx
  while (_is_digit(**str)) {
ffffffff80002e87:	80 fa 09             	cmp    $0x9,%dl
ffffffff80002e8a:	76 e4                	jbe    ffffffff80002e70 <_vsnprintf+0x3a0>
ffffffff80002e8c:	48 83 c7 02          	add    $0x2,%rdi
ffffffff80002e90:	e9 3d fd ff ff       	jmpq   ffffffff80002bd2 <_vsnprintf+0x102>
ffffffff80002e95:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002e98:	3c 68                	cmp    $0x68,%al
ffffffff80002e9a:	75 1c                	jne    ffffffff80002eb8 <_vsnprintf+0x3e8>
        if (*format == 'h') {
ffffffff80002e9c:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80002ea1:	3c 68                	cmp    $0x68,%al
ffffffff80002ea3:	0f 84 1d 02 00 00    	je     ffffffff800030c6 <_vsnprintf+0x5f6>
        flags |= FLAGS_SHORT;
ffffffff80002ea9:	80 c9 80             	or     $0x80,%cl
ffffffff80002eac:	4c 8d 6f 01          	lea    0x1(%rdi),%r13
ffffffff80002eb0:	e9 3f fd ff ff       	jmpq   ffffffff80002bf4 <_vsnprintf+0x124>
ffffffff80002eb5:	0f 1f 00             	nopl   (%rax)
    switch (*format) {
ffffffff80002eb8:	49 89 fd             	mov    %rdi,%r13
ffffffff80002ebb:	e9 34 fd ff ff       	jmpq   ffffffff80002bf4 <_vsnprintf+0x124>
        const char* p = va_arg(va, char*);
ffffffff80002ec0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80002ec4:	8b 16                	mov    (%rsi),%edx
ffffffff80002ec6:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80002ec9:	0f 87 2e 04 00 00    	ja     ffffffff800032fd <_vsnprintf+0x82d>
ffffffff80002ecf:	89 d0                	mov    %edx,%eax
ffffffff80002ed1:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80002ed5:	83 c2 08             	add    $0x8,%edx
ffffffff80002ed8:	89 16                	mov    %edx,(%rsi)
ffffffff80002eda:	4c 8b 08             	mov    (%rax),%r9
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80002edd:	45 85 d2             	test   %r10d,%r10d
ffffffff80002ee0:	41 0f be 39          	movsbl (%r9),%edi
ffffffff80002ee4:	0f 85 54 01 00 00    	jne    ffffffff8000303e <_vsnprintf+0x56e>
  for (s = str; *s && maxsize--; ++s);
ffffffff80002eea:	40 84 ff             	test   %dil,%dil
ffffffff80002eed:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80002ef4:	0f 84 b8 03 00 00    	je     ffffffff800032b2 <_vsnprintf+0x7e2>
ffffffff80002efa:	4c 89 c8             	mov    %r9,%rax
ffffffff80002efd:	eb 11                	jmp    ffffffff80002f10 <_vsnprintf+0x440>
ffffffff80002eff:	90                   	nop
ffffffff80002f00:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002f05:	48 29 c2             	sub    %rax,%rdx
ffffffff80002f08:	4c 01 ca             	add    %r9,%rdx
ffffffff80002f0b:	48 01 f2             	add    %rsi,%rdx
ffffffff80002f0e:	74 09                	je     ffffffff80002f19 <_vsnprintf+0x449>
ffffffff80002f10:	48 83 c0 01          	add    $0x1,%rax
ffffffff80002f14:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff80002f17:	75 e7                	jne    ffffffff80002f00 <_vsnprintf+0x430>
ffffffff80002f19:	44 29 c8             	sub    %r9d,%eax
ffffffff80002f1c:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (flags & FLAGS_PRECISION) {
ffffffff80002f20:	89 c8                	mov    %ecx,%eax
ffffffff80002f22:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80002f27:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff80002f2b:	74 0f                	je     ffffffff80002f3c <_vsnprintf+0x46c>
          l = (l < precision ? l : precision);
ffffffff80002f2d:	8b 44 24 20          	mov    0x20(%rsp),%eax
ffffffff80002f31:	44 39 d0             	cmp    %r10d,%eax
ffffffff80002f34:	41 0f 47 c2          	cmova  %r10d,%eax
ffffffff80002f38:	89 44 24 20          	mov    %eax,0x20(%rsp)
        if (!(flags & FLAGS_LEFT)) {
ffffffff80002f3c:	83 e1 02             	and    $0x2,%ecx
ffffffff80002f3f:	89 4c 24 24          	mov    %ecx,0x24(%rsp)
ffffffff80002f43:	0f 84 0e 02 00 00    	je     ffffffff80003157 <_vsnprintf+0x687>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002f49:	40 84 ff             	test   %dil,%dil
ffffffff80002f4c:	0f 84 94 00 00 00    	je     ffffffff80002fe6 <_vsnprintf+0x516>
ffffffff80002f52:	49 29 d9             	sub    %rbx,%r9
ffffffff80002f55:	44 89 64 24 28       	mov    %r12d,0x28(%rsp)
ffffffff80002f5a:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff80002f5f:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
ffffffff80002f64:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80002f69:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
ffffffff80002f6e:	49 89 dd             	mov    %rbx,%r13
ffffffff80002f71:	eb 27                	jmp    ffffffff80002f9a <_vsnprintf+0x4ca>
ffffffff80002f73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002f78:	4c 89 f1             	mov    %r14,%rcx
ffffffff80002f7b:	4c 89 ea             	mov    %r13,%rdx
ffffffff80002f7e:	4c 89 fe             	mov    %r15,%rsi
ffffffff80002f81:	ff d5                	callq  *%rbp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002f83:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002f88:	49 8d 5d 01          	lea    0x1(%r13),%rbx
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002f8c:	41 0f be 7c 05 01    	movsbl 0x1(%r13,%rax,1),%edi
ffffffff80002f92:	40 84 ff             	test   %dil,%dil
ffffffff80002f95:	74 39                	je     ffffffff80002fd0 <_vsnprintf+0x500>
          out(*(p++), buffer, idx++, maxlen);
ffffffff80002f97:	49 89 dd             	mov    %rbx,%r13
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff80002f9a:	45 85 e4             	test   %r12d,%r12d
ffffffff80002f9d:	74 d9                	je     ffffffff80002f78 <_vsnprintf+0x4a8>
ffffffff80002f9f:	8b 44 24 10          	mov    0x10(%rsp),%eax
ffffffff80002fa3:	85 c0                	test   %eax,%eax
ffffffff80002fa5:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002fa8:	0f 84 68 02 00 00    	je     ffffffff80003216 <_vsnprintf+0x746>
ffffffff80002fae:	89 54 24 10          	mov    %edx,0x10(%rsp)
ffffffff80002fb2:	eb c4                	jmp    ffffffff80002f78 <_vsnprintf+0x4a8>
ffffffff80002fb4:	bf 10 00 00 00       	mov    $0x10,%edi
ffffffff80002fb9:	e9 a8 fd ff ff       	jmpq   ffffffff80002d66 <_vsnprintf+0x296>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80002fbe:	4c 89 c3             	mov    %r8,%rbx
ffffffff80002fc1:	e9 38 fb ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
ffffffff80002fc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80002fcd:	00 00 00 
ffffffff80002fd0:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff80002fd5:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
        if (flags & FLAGS_LEFT) {
ffffffff80002fda:	8b 44 24 24          	mov    0x24(%rsp),%eax
ffffffff80002fde:	85 c0                	test   %eax,%eax
ffffffff80002fe0:	0f 84 18 fb ff ff    	je     ffffffff80002afe <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80002fe6:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff80002fea:	41 39 cc             	cmp    %ecx,%r12d
ffffffff80002fed:	0f 86 0b fb ff ff    	jbe    ffffffff80002afe <_vsnprintf+0x2e>
ffffffff80002ff3:	41 83 ec 01          	sub    $0x1,%r12d
ffffffff80002ff7:	48 89 da             	mov    %rbx,%rdx
ffffffff80002ffa:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
ffffffff80002fff:	44 89 e0             	mov    %r12d,%eax
ffffffff80003002:	4c 8d 63 01          	lea    0x1(%rbx),%r12
ffffffff80003006:	29 c8                	sub    %ecx,%eax
ffffffff80003008:	4c 01 e0             	add    %r12,%rax
ffffffff8000300b:	4d 89 e5             	mov    %r12,%r13
ffffffff8000300e:	48 89 c3             	mov    %rax,%rbx
ffffffff80003011:	eb 09                	jmp    ffffffff8000301c <_vsnprintf+0x54c>
ffffffff80003013:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80003018:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000301c:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000301f:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003022:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003027:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff80003029:	49 39 dd             	cmp    %rbx,%r13
ffffffff8000302c:	4c 89 ea             	mov    %r13,%rdx
ffffffff8000302f:	75 e7                	jne    ffffffff80003018 <_vsnprintf+0x548>
ffffffff80003031:	4c 89 eb             	mov    %r13,%rbx
ffffffff80003034:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
        break;
ffffffff80003039:	e9 c0 fa ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
  for (s = str; *s && maxsize--; ++s);
ffffffff8000303e:	40 84 ff             	test   %dil,%dil
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
ffffffff80003041:	44 89 d6             	mov    %r10d,%esi
  for (s = str; *s && maxsize--; ++s);
ffffffff80003044:	0f 84 68 02 00 00    	je     ffffffff800032b2 <_vsnprintf+0x7e2>
ffffffff8000304a:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff8000304e:	e9 a7 fe ff ff       	jmpq   ffffffff80002efa <_vsnprintf+0x42a>
          if (flags & FLAGS_LONG_LONG) {
ffffffff80003053:	85 f6                	test   %esi,%esi
ffffffff80003055:	0f 85 bd 03 00 00    	jne    ffffffff80003418 <_vsnprintf+0x948>
          else if (flags & FLAGS_LONG) {
ffffffff8000305b:	f6 c5 01             	test   $0x1,%ch
ffffffff8000305e:	0f 85 7e 03 00 00    	jne    ffffffff800033e2 <_vsnprintf+0x912>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003064:	f6 c1 40             	test   $0x40,%cl
ffffffff80003067:	0f 84 1b 02 00 00    	je     ffffffff80003288 <_vsnprintf+0x7b8>
ffffffff8000306d:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003070:	0f 87 b1 02 00 00    	ja     ffffffff80003327 <_vsnprintf+0x857>
ffffffff80003076:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000307a:	89 d0                	mov    %edx,%eax
ffffffff8000307c:	83 c2 08             	add    $0x8,%edx
ffffffff8000307f:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff80003083:	89 16                	mov    %edx,(%rsi)
ffffffff80003085:	44 0f be 08          	movsbl (%rax),%r9d
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff80003089:	44 89 c8             	mov    %r9d,%eax
ffffffff8000308c:	51                   	push   %rcx
ffffffff8000308d:	41 54                	push   %r12
ffffffff8000308f:	c1 f8 1f             	sar    $0x1f,%eax
ffffffff80003092:	41 52                	push   %r10
ffffffff80003094:	57                   	push   %rdi
ffffffff80003095:	41 89 c0             	mov    %eax,%r8d
ffffffff80003098:	45 31 c8             	xor    %r9d,%r8d
ffffffff8000309b:	41 c1 e9 1f          	shr    $0x1f,%r9d
ffffffff8000309f:	41 29 c0             	sub    %eax,%r8d
ffffffff800030a2:	4d 63 c0             	movslq %r8d,%r8
ffffffff800030a5:	e9 38 fd ff ff       	jmpq   ffffffff80002de2 <_vsnprintf+0x312>
          flags |= FLAGS_UPPERCASE;
ffffffff800030aa:	83 c9 20             	or     $0x20,%ecx
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ffffffff800030ad:	83 e1 f3             	and    $0xfffffff3,%ecx
ffffffff800030b0:	e9 c5 fc ff ff       	jmpq   ffffffff80002d7a <_vsnprintf+0x2aa>
ffffffff800030b5:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_LONG_LONG;
ffffffff800030ba:	80 cd 03             	or     $0x3,%ch
ffffffff800030bd:	49 83 c5 03          	add    $0x3,%r13
ffffffff800030c1:	e9 2e fb ff ff       	jmpq   ffffffff80002bf4 <_vsnprintf+0x124>
ffffffff800030c6:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
          flags |= FLAGS_CHAR;
ffffffff800030cb:	80 c9 c0             	or     $0xc0,%cl
ffffffff800030ce:	49 83 c5 03          	add    $0x3,%r13
ffffffff800030d2:	e9 1d fb ff ff       	jmpq   ffffffff80002bf4 <_vsnprintf+0x124>
          while (l++ < width) {
ffffffff800030d7:	41 83 fc 01          	cmp    $0x1,%r12d
ffffffff800030db:	0f 86 de 01 00 00    	jbe    ffffffff800032bf <_vsnprintf+0x7ef>
ffffffff800030e1:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
ffffffff800030e6:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
ffffffff800030eb:	4d 89 c5             	mov    %r8,%r13
ffffffff800030ee:	4c 01 c0             	add    %r8,%rax
ffffffff800030f1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff800030f6:	eb 0f                	jmp    ffffffff80003107 <_vsnprintf+0x637>
ffffffff800030f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800030ff:	00 
ffffffff80003100:	4c 89 eb             	mov    %r13,%rbx
ffffffff80003103:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff80003107:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000310a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000310d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003110:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80003115:	4d 89 ec             	mov    %r13,%r12
ffffffff80003118:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff8000311a:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
ffffffff8000311f:	75 df                	jne    ffffffff80003100 <_vsnprintf+0x630>
ffffffff80003121:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
ffffffff80003126:	48 83 c3 02          	add    $0x2,%rbx
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff8000312a:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff8000312e:	8b 01                	mov    (%rcx),%eax
ffffffff80003130:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80003133:	0f 87 d9 01 00 00    	ja     ffffffff80003312 <_vsnprintf+0x842>
ffffffff80003139:	89 c2                	mov    %eax,%edx
ffffffff8000313b:	48 03 51 10          	add    0x10(%rcx),%rdx
ffffffff8000313f:	83 c0 08             	add    $0x8,%eax
ffffffff80003142:	89 01                	mov    %eax,(%rcx)
ffffffff80003144:	0f be 3a             	movsbl (%rdx),%edi
ffffffff80003147:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000314a:	4c 89 e2             	mov    %r12,%rdx
ffffffff8000314d:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003150:	ff d5                	callq  *%rbp
ffffffff80003152:	e9 a7 f9 ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
          while (l++ < width) {
ffffffff80003157:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
ffffffff8000315b:	41 39 cc             	cmp    %ecx,%r12d
ffffffff8000315e:	8d 41 01             	lea    0x1(%rcx),%eax
ffffffff80003161:	0f 86 63 01 00 00    	jbe    ffffffff800032ca <_vsnprintf+0x7fa>
ffffffff80003167:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
ffffffff8000316c:	4c 8d 43 01          	lea    0x1(%rbx),%r8
ffffffff80003170:	44 89 64 24 20       	mov    %r12d,0x20(%rsp)
ffffffff80003175:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
ffffffff8000317a:	48 89 da             	mov    %rbx,%rdx
ffffffff8000317d:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff80003182:	29 c8                	sub    %ecx,%eax
ffffffff80003184:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
ffffffff80003189:	4d 89 c5             	mov    %r8,%r13
ffffffff8000318c:	4c 01 c0             	add    %r8,%rax
ffffffff8000318f:	49 89 c4             	mov    %rax,%r12
ffffffff80003192:	eb 08                	jmp    ffffffff8000319c <_vsnprintf+0x6cc>
ffffffff80003194:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80003198:	49 83 c5 01          	add    $0x1,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff8000319c:	4c 89 f1             	mov    %r14,%rcx
ffffffff8000319f:	4c 89 fe             	mov    %r15,%rsi
ffffffff800031a2:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800031a7:	ff d5                	callq  *%rbp
          while (l++ < width) {
ffffffff800031a9:	4d 39 e5             	cmp    %r12,%r13
            out(' ', buffer, idx++, maxlen);
ffffffff800031ac:	4c 89 eb             	mov    %r13,%rbx
ffffffff800031af:	4c 89 ea             	mov    %r13,%rdx
          while (l++ < width) {
ffffffff800031b2:	75 e4                	jne    ffffffff80003198 <_vsnprintf+0x6c8>
ffffffff800031b4:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
ffffffff800031b9:	44 8b 64 24 20       	mov    0x20(%rsp),%r12d
ffffffff800031be:	44 8b 54 24 08       	mov    0x8(%rsp),%r10d
ffffffff800031c3:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffffff800031c8:	41 0f be 39          	movsbl (%r9),%edi
ffffffff800031cc:	41 8d 44 24 01       	lea    0x1(%r12),%eax
ffffffff800031d1:	89 44 24 20          	mov    %eax,0x20(%rsp)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
ffffffff800031d5:	40 84 ff             	test   %dil,%dil
ffffffff800031d8:	0f 85 74 fd ff ff    	jne    ffffffff80002f52 <_vsnprintf+0x482>
ffffffff800031de:	e9 1b f9 ff ff       	jmpq   ffffffff80002afe <_vsnprintf+0x2e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff800031e3:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800031e6:	0f 87 97 01 00 00    	ja     ffffffff80003383 <_vsnprintf+0x8b3>
ffffffff800031ec:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800031f0:	89 d0                	mov    %edx,%eax
ffffffff800031f2:	83 c2 08             	add    $0x8,%edx
ffffffff800031f5:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800031f9:	89 16                	mov    %edx,(%rsi)
ffffffff800031fb:	51                   	push   %rcx
ffffffff800031fc:	45 31 c9             	xor    %r9d,%r9d
ffffffff800031ff:	41 54                	push   %r12
ffffffff80003201:	41 52                	push   %r10
ffffffff80003203:	57                   	push   %rdi
ffffffff80003204:	4c 8b 00             	mov    (%rax),%r8
ffffffff80003207:	e9 4e fa ff ff       	jmpq   ffffffff80002c5a <_vsnprintf+0x18a>
ffffffff8000320c:	bf 08 00 00 00       	mov    $0x8,%edi
ffffffff80003211:	e9 97 fe ff ff       	jmpq   ffffffff800030ad <_vsnprintf+0x5dd>
ffffffff80003216:	4c 89 e8             	mov    %r13,%rax
ffffffff80003219:	44 8b 64 24 28       	mov    0x28(%rsp),%r12d
ffffffff8000321e:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
ffffffff80003223:	48 89 c3             	mov    %rax,%rbx
ffffffff80003226:	e9 af fd ff ff       	jmpq   ffffffff80002fda <_vsnprintf+0x50a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000322b:	f6 c1 80             	test   $0x80,%cl
ffffffff8000322e:	0f 84 8e 01 00 00    	je     ffffffff800033c2 <_vsnprintf+0x8f2>
ffffffff80003234:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003237:	0f 87 70 01 00 00    	ja     ffffffff800033ad <_vsnprintf+0x8dd>
ffffffff8000323d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003241:	89 d0                	mov    %edx,%eax
ffffffff80003243:	83 c2 08             	add    $0x8,%edx
ffffffff80003246:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000324a:	89 16                	mov    %edx,(%rsi)
ffffffff8000324c:	44 0f b7 00          	movzwl (%rax),%r8d
ffffffff80003250:	e9 84 fb ff ff       	jmpq   ffffffff80002dd9 <_vsnprintf+0x309>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff80003255:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003258:	0f 87 8a 00 00 00    	ja     ffffffff800032e8 <_vsnprintf+0x818>
ffffffff8000325e:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003262:	89 d0                	mov    %edx,%eax
ffffffff80003264:	83 c2 08             	add    $0x8,%edx
ffffffff80003267:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000326b:	89 16                	mov    %edx,(%rsi)
ffffffff8000326d:	51                   	push   %rcx
ffffffff8000326e:	45 31 c9             	xor    %r9d,%r9d
ffffffff80003271:	41 54                	push   %r12
ffffffff80003273:	41 52                	push   %r10
ffffffff80003275:	57                   	push   %rdi
ffffffff80003276:	4c 8b 00             	mov    (%rax),%r8
ffffffff80003279:	e9 64 fb ff ff       	jmpq   ffffffff80002de2 <_vsnprintf+0x312>
ffffffff8000327e:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80003283:	e9 25 fe ff ff       	jmpq   ffffffff800030ad <_vsnprintf+0x5dd>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003288:	f6 c1 80             	test   $0x80,%cl
ffffffff8000328b:	0f 84 56 02 00 00    	je     ffffffff800034e7 <_vsnprintf+0xa17>
ffffffff80003291:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003294:	0f 87 38 02 00 00    	ja     ffffffff800034d2 <_vsnprintf+0xa02>
ffffffff8000329a:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000329e:	89 d0                	mov    %edx,%eax
ffffffff800032a0:	83 c2 08             	add    $0x8,%edx
ffffffff800032a3:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800032a7:	89 16                	mov    %edx,(%rsi)
ffffffff800032a9:	44 0f bf 08          	movswl (%rax),%r9d
ffffffff800032ad:	e9 d7 fd ff ff       	jmpq   ffffffff80003089 <_vsnprintf+0x5b9>
  for (s = str; *s && maxsize--; ++s);
ffffffff800032b2:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
ffffffff800032b9:	00 
ffffffff800032ba:	e9 61 fc ff ff       	jmpq   ffffffff80002f20 <_vsnprintf+0x450>
          while (l++ < width) {
ffffffff800032bf:	49 89 dc             	mov    %rbx,%r12
ffffffff800032c2:	4c 89 c3             	mov    %r8,%rbx
ffffffff800032c5:	e9 60 fe ff ff       	jmpq   ffffffff8000312a <_vsnprintf+0x65a>
          while (l++ < width) {
ffffffff800032ca:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff800032ce:	e9 02 ff ff ff       	jmpq   ffffffff800031d5 <_vsnprintf+0x705>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff800032d3:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032d7:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff800032db:	48 8d 51 08          	lea    0x8(%rcx),%rdx
ffffffff800032df:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800032e3:	e9 c2 f9 ff ff       	jmpq   ffffffff80002caa <_vsnprintf+0x1da>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
ffffffff800032e8:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800032ec:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800032f0:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800032f4:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800032f8:	e9 70 ff ff ff       	jmpq   ffffffff8000326d <_vsnprintf+0x79d>
        const char* p = va_arg(va, char*);
ffffffff800032fd:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003301:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003305:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003309:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000330d:	e9 c8 fb ff ff       	jmpq   ffffffff80002eda <_vsnprintf+0x40a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
ffffffff80003312:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff80003316:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff8000331a:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff8000331e:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80003322:	e9 1d fe ff ff       	jmpq   ffffffff80003144 <_vsnprintf+0x674>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003327:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000332b:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000332f:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003333:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003337:	e9 49 fd ff ff       	jmpq   ffffffff80003085 <_vsnprintf+0x5b5>
      const int w = va_arg(va, int);
ffffffff8000333c:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80003340:	8b 17                	mov    (%rdi),%edx
ffffffff80003342:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff80003345:	77 2a                	ja     ffffffff80003371 <_vsnprintf+0x8a1>
ffffffff80003347:	89 d0                	mov    %edx,%eax
ffffffff80003349:	48 03 47 10          	add    0x10(%rdi),%rax
ffffffff8000334d:	83 c2 08             	add    $0x8,%edx
ffffffff80003350:	89 17                	mov    %edx,(%rdi)
ffffffff80003352:	44 8b 20             	mov    (%rax),%r12d
      if (w < 0) {
ffffffff80003355:	45 85 e4             	test   %r12d,%r12d
ffffffff80003358:	79 06                	jns    ffffffff80003360 <_vsnprintf+0x890>
        flags |= FLAGS_LEFT;    // reverse padding
ffffffff8000335a:	83 c9 02             	or     $0x2,%ecx
        width = (unsigned int)-w;
ffffffff8000335d:	41 f7 dc             	neg    %r12d
ffffffff80003360:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
ffffffff80003365:	49 8d 7d 02          	lea    0x2(%r13),%rdi
    width = 0U;
ffffffff80003369:	49 89 f5             	mov    %rsi,%r13
ffffffff8000336c:	e9 c9 fa ff ff       	jmpq   ffffffff80002e3a <_vsnprintf+0x36a>
      const int w = va_arg(va, int);
ffffffff80003371:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80003375:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff80003379:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000337d:	48 89 57 08          	mov    %rdx,0x8(%rdi)
ffffffff80003381:	eb cf                	jmp    ffffffff80003352 <_vsnprintf+0x882>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
ffffffff80003383:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003387:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000338b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000338f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003393:	e9 63 fe ff ff       	jmpq   ffffffff800031fb <_vsnprintf+0x72b>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff80003398:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000339c:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033a0:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033a4:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800033a8:	e9 28 fa ff ff       	jmpq   ffffffff80002dd5 <_vsnprintf+0x305>
ffffffff800033ad:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033b1:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800033b5:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800033b9:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800033bd:	e9 8a fe ff ff       	jmpq   ffffffff8000324c <_vsnprintf+0x77c>
ffffffff800033c2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800033c5:	0f 87 83 00 00 00    	ja     ffffffff8000344e <_vsnprintf+0x97e>
ffffffff800033cb:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033cf:	89 d0                	mov    %edx,%eax
ffffffff800033d1:	83 c2 08             	add    $0x8,%edx
ffffffff800033d4:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800033d8:	89 16                	mov    %edx,(%rsi)
ffffffff800033da:	44 8b 00             	mov    (%rax),%r8d
ffffffff800033dd:	e9 f7 f9 ff ff       	jmpq   ffffffff80002dd9 <_vsnprintf+0x309>
            const long value = va_arg(va, long);
ffffffff800033e2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800033e5:	77 7c                	ja     ffffffff80003463 <_vsnprintf+0x993>
ffffffff800033e7:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800033eb:	89 d0                	mov    %edx,%eax
ffffffff800033ed:	83 c2 08             	add    $0x8,%edx
ffffffff800033f0:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800033f4:	89 16                	mov    %edx,(%rsi)
ffffffff800033f6:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff800033f9:	51                   	push   %rcx
ffffffff800033fa:	41 54                	push   %r12
ffffffff800033fc:	41 52                	push   %r10
ffffffff800033fe:	57                   	push   %rdi
ffffffff800033ff:	4c 89 c8             	mov    %r9,%rax
ffffffff80003402:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff80003406:	49 89 c0             	mov    %rax,%r8
ffffffff80003409:	4d 31 c8             	xor    %r9,%r8
ffffffff8000340c:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003410:	49 29 c0             	sub    %rax,%r8
ffffffff80003413:	e9 ca f9 ff ff       	jmpq   ffffffff80002de2 <_vsnprintf+0x312>
            const long long value = va_arg(va, long long);
ffffffff80003418:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff8000341b:	77 58                	ja     ffffffff80003475 <_vsnprintf+0x9a5>
ffffffff8000341d:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003421:	89 d0                	mov    %edx,%eax
ffffffff80003423:	83 c2 08             	add    $0x8,%edx
ffffffff80003426:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff8000342a:	89 16                	mov    %edx,(%rsi)
ffffffff8000342c:	4c 8b 08             	mov    (%rax),%r9
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
ffffffff8000342f:	51                   	push   %rcx
ffffffff80003430:	41 54                	push   %r12
ffffffff80003432:	41 52                	push   %r10
ffffffff80003434:	57                   	push   %rdi
ffffffff80003435:	4c 89 c8             	mov    %r9,%rax
ffffffff80003438:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8000343c:	49 89 c0             	mov    %rax,%r8
ffffffff8000343f:	4d 31 c8             	xor    %r9,%r8
ffffffff80003442:	49 c1 e9 3f          	shr    $0x3f,%r9
ffffffff80003446:	49 29 c0             	sub    %rax,%r8
ffffffff80003449:	e9 0c f8 ff ff       	jmpq   ffffffff80002c5a <_vsnprintf+0x18a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
ffffffff8000344e:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003452:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80003456:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000345a:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8000345e:	e9 77 ff ff ff       	jmpq   ffffffff800033da <_vsnprintf+0x90a>
            const long value = va_arg(va, long);
ffffffff80003463:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003467:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000346b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000346f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003473:	eb 81                	jmp    ffffffff800033f6 <_vsnprintf+0x926>
            const long long value = va_arg(va, long long);
ffffffff80003475:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003479:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000347d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003481:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003485:	eb a5                	jmp    ffffffff8000342c <_vsnprintf+0x95c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
ffffffff80003487:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff8000348b:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff8000348f:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80003493:	48 89 46 08          	mov    %rax,0x8(%rsi)
ffffffff80003497:	e9 b1 f7 ff ff       	jmpq   ffffffff80002c4d <_vsnprintf+0x17d>
        const int prec = (int)va_arg(va, int);
ffffffff8000349c:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800034a0:	8b 16                	mov    (%rsi),%edx
ffffffff800034a2:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800034a5:	77 5c                	ja     ffffffff80003503 <_vsnprintf+0xa33>
ffffffff800034a7:	89 d0                	mov    %edx,%eax
ffffffff800034a9:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800034ad:	83 c2 08             	add    $0x8,%edx
ffffffff800034b0:	89 16                	mov    %edx,(%rsi)
        precision = prec > 0 ? (unsigned int)prec : 0U;
ffffffff800034b2:	8b 10                	mov    (%rax),%edx
ffffffff800034b4:	41 ba 00 00 00 00    	mov    $0x0,%r10d
ffffffff800034ba:	49 8d 7d 03          	lea    0x3(%r13),%rdi
ffffffff800034be:	85 d2                	test   %edx,%edx
ffffffff800034c0:	44 0f 49 10          	cmovns (%rax),%r10d
ffffffff800034c4:	41 0f b6 45 02       	movzbl 0x2(%r13),%eax
        format++;
ffffffff800034c9:	49 83 c5 02          	add    $0x2,%r13
ffffffff800034cd:	e9 00 f7 ff ff       	jmpq   ffffffff80002bd2 <_vsnprintf+0x102>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff800034d2:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800034d6:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff800034da:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800034de:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff800034e2:	e9 c2 fd ff ff       	jmpq   ffffffff800032a9 <_vsnprintf+0x7d9>
ffffffff800034e7:	83 fa 2f             	cmp    $0x2f,%edx
ffffffff800034ea:	77 29                	ja     ffffffff80003515 <_vsnprintf+0xa45>
ffffffff800034ec:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff800034f0:	89 d0                	mov    %edx,%eax
ffffffff800034f2:	83 c2 08             	add    $0x8,%edx
ffffffff800034f5:	48 03 46 10          	add    0x10(%rsi),%rax
ffffffff800034f9:	89 16                	mov    %edx,(%rsi)
ffffffff800034fb:	44 8b 08             	mov    (%rax),%r9d
ffffffff800034fe:	e9 86 fb ff ff       	jmpq   ffffffff80003089 <_vsnprintf+0x5b9>
        const int prec = (int)va_arg(va, int);
ffffffff80003503:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003507:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000350b:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8000350f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003513:	eb 9d                	jmp    ffffffff800034b2 <_vsnprintf+0x9e2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
ffffffff80003515:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff80003519:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8000351d:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80003521:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff80003525:	eb d4                	jmp    ffffffff800034fb <_vsnprintf+0xa2b>
ffffffff80003527:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000352e:	00 00 

ffffffff80003530 <_out_char>:
  if (character) {
ffffffff80003530:	40 84 ff             	test   %dil,%dil
ffffffff80003533:	75 0b                	jne    ffffffff80003540 <_out_char+0x10>
}
ffffffff80003535:	f3 c3                	repz retq 
ffffffff80003537:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000353e:	00 00 
    _putchar(character);
ffffffff80003540:	40 0f be ff          	movsbl %dil,%edi
ffffffff80003544:	e9 c7 01 00 00       	jmpq   ffffffff80003710 <_putchar>
ffffffff80003549:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003550 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
ffffffff80003550:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003554:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003559:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
ffffffff8000355e:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80003563:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
ffffffff80003568:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff8000356d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  va_start(va, format);
ffffffff80003572:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003577:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
{
ffffffff8000357c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff80003581:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80003588:	48 89 f9             	mov    %rdi,%rcx
ffffffff8000358b:	48 c7 c7 30 35 00 80 	mov    $0xffffffff80003530,%rdi
{
ffffffff80003592:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003597:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
ffffffff8000359e:	00 
ffffffff8000359f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff800035a4:	e8 27 f5 ff ff       	callq  ffffffff80002ad0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff800035a9:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800035ad:	c3                   	retq   
ffffffff800035ae:	66 90                	xchg   %ax,%ax

ffffffff800035b0 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
ffffffff800035b0:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff800035b4:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff800035b9:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800035be:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff800035c3:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffffff800035c8:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800035cd:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  va_start(va, format);
ffffffff800035d4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff800035d9:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800035de:	48 89 f1             	mov    %rsi,%rcx
ffffffff800035e1:	48 89 fe             	mov    %rdi,%rsi
ffffffff800035e4:	48 c7 c7 a0 24 00 80 	mov    $0xffffffff800024a0,%rdi
{
ffffffff800035eb:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff800035f0:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff800035f7:	00 
ffffffff800035f8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
ffffffff800035fd:	e8 ce f4 ff ff       	callq  ffffffff80002ad0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80003602:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80003606:	c3                   	retq   
ffffffff80003607:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000360e:	00 00 

ffffffff80003610 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
ffffffff80003610:	48 83 ec 58          	sub    $0x58,%rsp
  va_list va;
  va_start(va, format);
ffffffff80003614:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
{
ffffffff80003619:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff8000361e:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
{
ffffffff80003623:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003628:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000362b:	48 89 f2             	mov    %rsi,%rdx
  va_start(va, format);
ffffffff8000362e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003633:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003638:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000363b:	48 c7 c7 a0 24 00 80 	mov    $0xffffffff800024a0,%rdi
{
ffffffff80003642:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  va_start(va, format);
ffffffff80003647:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%rsp)
ffffffff8000364e:	00 
ffffffff8000364f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003654:	e8 77 f4 ff ff       	callq  ffffffff80002ad0 <_vsnprintf>
  va_end(va);
  return ret;
}
ffffffff80003659:	48 83 c4 58          	add    $0x58,%rsp
ffffffff8000365d:	c3                   	retq   
ffffffff8000365e:	66 90                	xchg   %ax,%ax

ffffffff80003660 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
ffffffff80003660:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80003664:	49 89 f0             	mov    %rsi,%r8
ffffffff80003667:	48 89 f9             	mov    %rdi,%rcx
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
ffffffff8000366a:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
ffffffff8000366f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80003676:	48 c7 c7 30 35 00 80 	mov    $0xffffffff80003530,%rdi
ffffffff8000367d:	e8 4e f4 ff ff       	callq  ffffffff80002ad0 <_vsnprintf>
}
ffffffff80003682:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80003686:	c3                   	retq   
ffffffff80003687:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000368e:	00 00 

ffffffff80003690 <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
ffffffff80003690:	49 89 c8             	mov    %rcx,%r8
  return _vsnprintf(_out_buffer, buffer, count, format, va);
ffffffff80003693:	48 89 d1             	mov    %rdx,%rcx
ffffffff80003696:	48 89 f2             	mov    %rsi,%rdx
ffffffff80003699:	48 89 fe             	mov    %rdi,%rsi
ffffffff8000369c:	48 c7 c7 a0 24 00 80 	mov    $0xffffffff800024a0,%rdi
ffffffff800036a3:	e9 28 f4 ff ff       	jmpq   ffffffff80002ad0 <_vsnprintf>
ffffffff800036a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800036af:	00 

ffffffff800036b0 <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
ffffffff800036b0:	48 83 ec 68          	sub    $0x68,%rsp
  va_list va;
  va_start(va, format);
ffffffff800036b4:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
{
ffffffff800036b9:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff800036be:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800036c3:	4c 8d 44 24 18       	lea    0x18(%rsp),%r8
ffffffff800036c8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
{
ffffffff800036cd:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  va_start(va, format);
ffffffff800036d2:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff800036d7:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  const out_fct_wrap_type out_fct_wrap = { out, arg };
ffffffff800036dc:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff800036e1:	48 89 d1             	mov    %rdx,%rcx
ffffffff800036e4:	48 c7 c7 c0 24 00 80 	mov    $0xffffffff800024c0,%rdi
ffffffff800036eb:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff800036f2:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
  va_start(va, format);
ffffffff800036f7:	c7 44 24 18 18 00 00 	movl   $0x18,0x18(%rsp)
ffffffff800036fe:	00 
ffffffff800036ff:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
ffffffff80003704:	e8 c7 f3 ff ff       	callq  ffffffff80002ad0 <_vsnprintf>
  va_end(va);
  return ret;
ffffffff80003709:	48 83 c4 68          	add    $0x68,%rsp
ffffffff8000370d:	c3                   	retq   
ffffffff8000370e:	66 90                	xchg   %ax,%ax

ffffffff80003710 <_putchar>:
#include "../device/console/console.h"

void _putchar(char character)
{
    
    putchar(character);
ffffffff80003710:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80003714:	e9 37 e3 ff ff       	jmpq   ffffffff80001a50 <putchar>
ffffffff80003719:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80003720 <serial_printf>:
    
    //serial_write(0x3F8, character);
}

void serial_printf(uint16_t port, const char* format, ...)
{
ffffffff80003720:	53                   	push   %rbx
ffffffff80003721:	89 fb                	mov    %edi,%ebx
ffffffff80003723:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    char buffer[64];

    va_list argptr;
    va_start(argptr, format);
ffffffff8000372a:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
ffffffff80003731:	00 
{
ffffffff80003732:	48 89 4c 24 78       	mov    %rcx,0x78(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003737:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
ffffffff8000373c:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
{
ffffffff80003741:	48 89 54 24 70       	mov    %rdx,0x70(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003746:	48 89 f2             	mov    %rsi,%rdx
    va_start(argptr, format);
ffffffff80003749:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff8000374e:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003753:	be 40 00 00 00       	mov    $0x40,%esi
{
ffffffff80003758:	4c 89 84 24 80 00 00 	mov    %r8,0x80(%rsp)
ffffffff8000375f:	00 
ffffffff80003760:	4c 89 8c 24 88 00 00 	mov    %r9,0x88(%rsp)
ffffffff80003767:	00 
    va_start(argptr, format);
ffffffff80003768:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%rsp)
ffffffff8000376f:	00 
ffffffff80003770:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    vsnprintf(buffer, 64, format, argptr);
ffffffff80003775:	e8 16 ff ff ff       	callq  ffffffff80003690 <vsnprintf_>
    va_end(argptr);

    serial_write_str(port, buffer);
ffffffff8000377a:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff8000377f:	0f b7 fb             	movzwl %bx,%edi
ffffffff80003782:	e8 b9 e8 ff ff       	callq  ffffffff80002040 <serial_write_str>
ffffffff80003787:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
ffffffff8000378e:	5b                   	pop    %rbx
ffffffff8000378f:	c3                   	retq   

ffffffff80003790 <print_gdt>:
uint8_t ist2[4096];

void print_gdt()
{

}
ffffffff80003790:	f3 c3                	repz retq 
ffffffff80003792:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff80003799:	00 00 00 00 
ffffffff8000379d:	0f 1f 00             	nopl   (%rax)

ffffffff800037a0 <gdt_init>:

void gdt_init()
{
    gdt.null0.raw = 0x00;
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff800037a0:	48 b8 ff ff 00 00 00 	movabs $0xaf9a000000ffff,%rax
ffffffff800037a7:	9a af 00 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);

    gdtr.base = (uint64_t)&gdt;
    gdtr.limit = sizeof(gdt);

    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff800037aa:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff800037af:	48 c7 c7 e0 23 01 80 	mov    $0xffffffff800123e0,%rdi
    gdt.kcode.raw = 0x00AF9A000000FFFF;
ffffffff800037b6:	48 89 05 cb ec 00 00 	mov    %rax,0xeccb(%rip)        # ffffffff80012488 <gdt+0x8>
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff800037bd:	48 b8 ff ff 00 00 00 	movabs $0xaf92000000ffff,%rax
ffffffff800037c4:	92 af 00 
    gdt.null0.raw = 0x00;
ffffffff800037c7:	48 c7 05 ae ec 00 00 	movq   $0x0,0xecae(%rip)        # ffffffff80012480 <gdt>
ffffffff800037ce:	00 00 00 00 
    gdt.kdata.raw = 0x00AF92000000FFFF;
ffffffff800037d2:	48 89 05 b7 ec 00 00 	mov    %rax,0xecb7(%rip)        # ffffffff80012490 <gdt+0x10>
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff800037d9:	48 b8 ff ff 00 00 00 	movabs $0xaffa000000ffff,%rax
ffffffff800037e0:	fa af 00 
    gdt.null1.raw = 0x00;
ffffffff800037e3:	48 c7 05 aa ec 00 00 	movq   $0x0,0xecaa(%rip)        # ffffffff80012498 <gdt+0x18>
ffffffff800037ea:	00 00 00 00 
    gdt.ucode.raw = 0x00AFFA000000FFFF;
ffffffff800037ee:	48 89 05 ab ec 00 00 	mov    %rax,0xecab(%rip)        # ffffffff800124a0 <gdt+0x20>
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff800037f5:	48 b8 ff ff 00 00 00 	movabs $0xaff2000000ffff,%rax
ffffffff800037fc:	f2 af 00 
    gdt.null2.raw = 0x00;
ffffffff800037ff:	48 c7 05 a6 ec 00 00 	movq   $0x0,0xeca6(%rip)        # ffffffff800124b0 <gdt+0x30>
ffffffff80003806:	00 00 00 00 
    gdt.udata.raw = 0x00AFF2000000FFFF;
ffffffff8000380a:	48 89 05 97 ec 00 00 	mov    %rax,0xec97(%rip)        # ffffffff800124a8 <gdt+0x28>
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003811:	48 c7 c0 00 24 01 80 	mov    $0xffffffff80012400,%rax
    gdt.null3.raw = 0x00;
ffffffff80003818:	48 c7 05 95 ec 00 00 	movq   $0x0,0xec95(%rip)        # ffffffff800124b8 <gdt+0x38>
ffffffff8000381f:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003823:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base0 = (uint64_t)&tss & 0xFFFF;
ffffffff80003826:	66 89 05 a5 ec 00 00 	mov    %ax,0xeca5(%rip)        # ffffffff800124d2 <gdt+0x52>
    gdt.null4.raw = 0x00;
ffffffff8000382d:	48 c7 05 88 ec 00 00 	movq   $0x0,0xec88(%rip)        # ffffffff800124c0 <gdt+0x40>
ffffffff80003834:	00 00 00 00 
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff80003838:	48 c1 ea 10          	shr    $0x10,%rdx
    gdt.null5.raw = 0x00;
ffffffff8000383c:	48 c7 05 81 ec 00 00 	movq   $0x0,0xec81(%rip)        # ffffffff800124c8 <gdt+0x48>
ffffffff80003843:	00 00 00 00 
    gdt.tss_entry.segment_type = 0x09;      //64 bit TSS
ffffffff80003847:	c6 05 87 ec 00 00 89 	movb   $0x89,0xec87(%rip)        # ffffffff800124d5 <gdt+0x55>
    gdt.tss_entry.base16 = ((uint64_t)&tss >> 16) & 0xFF;
ffffffff8000384e:	88 15 80 ec 00 00    	mov    %dl,0xec80(%rip)        # ffffffff800124d4 <gdt+0x54>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003854:	48 89 c2             	mov    %rax,%rdx
    gdt.tss_entry.base32 = ((uint64_t)&tss >> 32) & 0xFFFFFFFF;
ffffffff80003857:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8000385b:	89 05 77 ec 00 00    	mov    %eax,0xec77(%rip)        # ffffffff800124d8 <gdt+0x58>
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff80003861:	b8 68 00 00 00       	mov    $0x68,%eax
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003866:	48 c1 ea 18          	shr    $0x18,%rdx
    gdt.tss_entry.limit0 = sizeof(tss);
ffffffff8000386a:	66 89 05 5f ec 00 00 	mov    %ax,0xec5f(%rip)        # ffffffff800124d0 <gdt+0x50>
    gdt.tss_entry.reserved0 = 0;
ffffffff80003871:	0f b6 05 5e ec 00 00 	movzbl 0xec5e(%rip),%eax        # ffffffff800124d6 <gdt+0x56>
    gdt.tss_entry.base24 = ((uint64_t)&tss >> 24) & 0xFF;
ffffffff80003878:	88 15 59 ec 00 00    	mov    %dl,0xec59(%rip)        # ffffffff800124d7 <gdt+0x57>
    gdtr.limit = sizeof(gdt);
ffffffff8000387e:	ba 60 00 00 00       	mov    $0x60,%edx
    gdt.tss_entry.reserved1 = 0;
ffffffff80003883:	c7 05 4f ec 00 00 00 	movl   $0x0,0xec4f(%rip)        # ffffffff800124dc <gdt+0x5c>
ffffffff8000388a:	00 00 00 
    tss.reserved0 = 0x00;
ffffffff8000388d:	c7 05 69 eb 00 00 00 	movl   $0x0,0xeb69(%rip)        # ffffffff80012400 <tss>
ffffffff80003894:	00 00 00 
    tss.RSP0 = (uint64_t)stack + sizeof(stack);
ffffffff80003897:	48 c7 05 62 eb 00 00 	movq   $0xffffffff8000a6e0,0xeb62(%rip)        # ffffffff80012404 <tss+0x4>
ffffffff8000389e:	e0 a6 00 80 
    tss.RSP2 = (uint64_t)rsp2stack + sizeof(rsp2stack);
ffffffff800038a2:	48 c7 05 67 eb 00 00 	movq   $0xffffffff8000e380,0xeb67(%rip)        # ffffffff80012414 <tss+0x14>
ffffffff800038a9:	80 e3 00 80 
    tss.ist1 = (uint64_t)ist1 + sizeof(ist1);
ffffffff800038ad:	48 c7 05 6c eb 00 00 	movq   $0xffffffff80010380,0xeb6c(%rip)        # ffffffff80012424 <tss+0x24>
ffffffff800038b4:	80 03 01 80 
    gdt.tss_entry.reserved0 = 0;
ffffffff800038b8:	83 e0 40             	and    $0x40,%eax
    gdtr.base = (uint64_t)&gdt;
ffffffff800038bb:	48 c7 05 1c eb 00 00 	movq   $0xffffffff80012480,0xeb1c(%rip)        # ffffffff800123e2 <gdtr+0x2>
ffffffff800038c2:	80 24 01 80 
    gdtr.limit = sizeof(gdt);
ffffffff800038c6:	66 89 15 13 eb 00 00 	mov    %dx,0xeb13(%rip)        # ffffffff800123e0 <gdtr>
    gdt.tss_entry.reserved0 = 0;
ffffffff800038cd:	88 05 03 ec 00 00    	mov    %al,0xec03(%rip)        # ffffffff800124d6 <gdt+0x56>
    gdt_load((uint64_t*)&gdtr, 0x50);
ffffffff800038d3:	e9 88 c7 ff ff       	jmpq   ffffffff80000060 <gdt_load>
ffffffff800038d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800038df:	00 

ffffffff800038e0 <oct2bin>:

uint64_t oct2bin(uint8_t* str, uint16_t size)
{
    uint64_t n = 0;
    uint8_t* c = str;
    while (size-- > 0)
ffffffff800038e0:	66 85 f6             	test   %si,%si
ffffffff800038e3:	8d 46 ff             	lea    -0x1(%rsi),%eax
ffffffff800038e6:	74 28                	je     ffffffff80003910 <oct2bin+0x30>
ffffffff800038e8:	0f b7 c0             	movzwl %ax,%eax
ffffffff800038eb:	48 8d 4c 07 01       	lea    0x1(%rdi,%rax,1),%rcx
    uint64_t n = 0;
ffffffff800038f0:	31 c0                	xor    %eax,%eax
ffffffff800038f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    {
        n *= 8;
        n += *c - '0';
ffffffff800038f8:	0f b6 17             	movzbl (%rdi),%edx
        c++;
ffffffff800038fb:	48 83 c7 01          	add    $0x1,%rdi
        n += *c - '0';
ffffffff800038ff:	83 ea 30             	sub    $0x30,%edx
    while (size-- > 0)
ffffffff80003902:	48 39 cf             	cmp    %rcx,%rdi
        n += *c - '0';
ffffffff80003905:	48 63 d2             	movslq %edx,%rdx
ffffffff80003908:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
    while (size-- > 0)
ffffffff8000390c:	75 ea                	jne    ffffffff800038f8 <oct2bin+0x18>
ffffffff8000390e:	f3 c3                	repz retq 
    uint64_t n = 0;
ffffffff80003910:	31 c0                	xor    %eax,%eax
    }
    return n;
}
ffffffff80003912:	c3                   	retq   
ffffffff80003913:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8000391a:	00 00 00 
ffffffff8000391d:	0f 1f 00             	nopl   (%rax)

ffffffff80003920 <user_function>:
#include "./usermode/usermode.h"

uint64_t user_stack [1024];

void user_function()
{
ffffffff80003920:	48 83 ec 08          	sub    $0x8,%rsp
    printf("User Mode!\n");
ffffffff80003924:	48 c7 c7 68 52 00 80 	mov    $0xffffffff80005268,%rdi
ffffffff8000392b:	31 c0                	xor    %eax,%eax
ffffffff8000392d:	e8 1e fc ff ff       	callq  ffffffff80003550 <printf_>
ffffffff80003932:	eb fe                	jmp    ffffffff80003932 <user_function+0x12>
ffffffff80003934:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
ffffffff8000393b:	00 00 00 00 
ffffffff8000393f:	90                   	nop

ffffffff80003940 <kernel>:

void kernel()
{

    //printf("Kernel Now\n");
    serial_init(0x3F8);     //COM1
ffffffff80003940:	bf f8 03 00 00       	mov    $0x3f8,%edi
{
ffffffff80003945:	48 83 ec 08          	sub    $0x8,%rsp
    serial_init(0x3F8);     //COM1
ffffffff80003949:	e8 92 e5 ff ff       	callq  ffffffff80001ee0 <serial_init>
    gdt_init();
ffffffff8000394e:	31 c0                	xor    %eax,%eax
ffffffff80003950:	e8 4b fe ff ff       	callq  ffffffff800037a0 <gdt_init>
    idt_init();
ffffffff80003955:	31 c0                	xor    %eax,%eax
ffffffff80003957:	e8 84 00 00 00       	callq  ffffffff800039e0 <idt_init>
    fb_init();
ffffffff8000395c:	31 c0                	xor    %eax,%eax
ffffffff8000395e:	e8 bd df ff ff       	callq  ffffffff80001920 <fb_init>
    console_init();
ffffffff80003963:	31 c0                	xor    %eax,%eax
ffffffff80003965:	e8 c6 e3 ff ff       	callq  ffffffff80001d30 <console_init>

    //serial_write(0x3F8, 'm');

    pmm_init();
ffffffff8000396a:	31 c0                	xor    %eax,%eax
ffffffff8000396c:	e8 0f db ff ff       	callq  ffffffff80001480 <pmm_init>
    vmm_init();
ffffffff80003971:	31 c0                	xor    %eax,%eax
ffffffff80003973:	e8 f8 d1 ff ff       	callq  ffffffff80000b70 <vmm_init>
    //fb_clearscreen(FB_COLOR_BLUE);

    //int_test();

    //stty_sendcmd(0);
    printf("Kernel Done!\n"); 
ffffffff80003978:	48 c7 c7 74 52 00 80 	mov    $0xffffffff80005274,%rdi
ffffffff8000397f:	31 c0                	xor    %eax,%eax
ffffffff80003981:	e8 ca fb ff ff       	callq  ffffffff80003550 <printf_>
ffffffff80003986:	eb fe                	jmp    ffffffff80003986 <kernel+0x46>
ffffffff80003988:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000398f:	00 

ffffffff80003990 <create_descriptor>:

void create_descriptor(uint16_t index, void* isr, uint8_t ist, uint8_t cs, uint8_t attr)
{
    struct idt_entry* entry = &idt[index];

    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003990:	0f b7 ff             	movzwl %di,%edi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003993:	48 89 f0             	mov    %rsi,%rax
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
    entry->ist = ist;
    entry->kernel_cs = cs;
ffffffff80003996:	0f b6 c9             	movzbl %cl,%ecx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003999:	48 c1 e7 04          	shl    $0x4,%rdi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff8000399d:	48 c1 e8 10          	shr    $0x10,%rax
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff800039a1:	66 89 b7 00 25 01 80 	mov    %si,-0x7ffedb00(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800039a8:	48 c1 ee 20          	shr    $0x20,%rsi
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff800039ac:	66 89 87 06 25 01 80 	mov    %ax,-0x7ffedafa(%rdi)
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff800039b3:	89 b7 08 25 01 80    	mov    %esi,-0x7ffedaf8(%rdi)
    entry->ist = ist;
ffffffff800039b9:	88 97 04 25 01 80    	mov    %dl,-0x7ffedafc(%rdi)
    entry->kernel_cs = cs;
ffffffff800039bf:	66 89 8f 02 25 01 80 	mov    %cx,-0x7ffedafe(%rdi)
    entry->attributes = attr;
ffffffff800039c6:	44 88 87 05 25 01 80 	mov    %r8b,-0x7ffedafb(%rdi)
    entry->reserved = 0;
ffffffff800039cd:	c7 87 0c 25 01 80 00 	movl   $0x0,-0x7ffedaf4(%rdi)
ffffffff800039d4:	00 00 00 
}
ffffffff800039d7:	c3                   	retq   
ffffffff800039d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800039df:	00 

ffffffff800039e0 <idt_init>:

void idt_init()
{
    //uint64_t idt_ptr = hh_code_to_phys((uint64_t)&idt[0]);
    idtr.base = (uint64_t)&idt[0];
ffffffff800039e0:	48 c7 c0 00 25 01 80 	mov    $0xffffffff80012500,%rax
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff800039e7:	b9 ff 0f 00 00       	mov    $0xfff,%ecx
{
ffffffff800039ec:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800039f0:	48 8d b8 f0 02 00 00 	lea    0x2f0(%rax),%rdi
    idtr.limit = (uint16_t)(sizeof(idt) - 1);
ffffffff800039f7:	66 89 0d ea ea 00 00 	mov    %cx,0xeaea(%rip)        # ffffffff800124e8 <idtr>
    idtr.base = (uint64_t)&idt[0];
ffffffff800039fe:	48 89 05 e5 ea 00 00 	mov    %rax,0xeae5(%rip)        # ffffffff800124ea <idtr+0x2>
ffffffff80003a05:	48 c7 c1 68 02 00 80 	mov    $0xffffffff80000268,%rcx
ffffffff80003a0c:	0f 1f 40 00          	nopl   0x0(%rax)

    for(uint8_t index = 0; index < 47; index++)
    {
        create_descriptor(index, isr_stub_table[index], 0x00, 0x08, 0x8E);
ffffffff80003a10:	48 8b 11             	mov    (%rcx),%rdx
    entry->ist = ist;
ffffffff80003a13:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80003a17:	48 83 c0 10          	add    $0x10,%rax
    entry->attributes = attr;
ffffffff80003a1b:	c6 40 f5 8e          	movb   $0x8e,-0xb(%rax)
    entry->reserved = 0;
ffffffff80003a1f:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
ffffffff80003a26:	48 83 c1 08          	add    $0x8,%rcx
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003a2a:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a2e:	48 89 d6             	mov    %rdx,%rsi
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003a31:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80003a35:	89 50 f8             	mov    %edx,-0x8(%rax)
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a38:	48 c1 ee 10          	shr    $0x10,%rsi
    entry->kernel_cs = cs;
ffffffff80003a3c:	ba 08 00 00 00       	mov    $0x8,%edx
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a41:	66 89 70 f6          	mov    %si,-0xa(%rax)
    entry->kernel_cs = cs;
ffffffff80003a45:	66 89 50 f2          	mov    %dx,-0xe(%rax)
    for(uint8_t index = 0; index < 47; index++)
ffffffff80003a49:	48 39 f8             	cmp    %rdi,%rax
ffffffff80003a4c:	75 c2                	jne    ffffffff80003a10 <idt_init+0x30>
    }

    create_descriptor(127, isr_stub_table[48], 0x00, 0x08, 0x8E);
ffffffff80003a4e:	48 8b 05 93 c9 ff ff 	mov    -0x366d(%rip),%rax        # ffffffff800003e8 <isr_stub_table+0x180>
    entry->kernel_cs = cs;
ffffffff80003a55:	c7 05 93 f2 00 00 08 	movl   $0x8e000008,0xf293(%rip)        # ffffffff80012cf2 <idt+0x7f2>
ffffffff80003a5c:	00 00 8e 
    entry->reserved = 0;
ffffffff80003a5f:	c7 05 93 f2 00 00 00 	movl   $0x0,0xf293(%rip)        # ffffffff80012cfc <idt+0x7fc>
ffffffff80003a66:	00 00 00 
    entry->kernel_cs = cs;
ffffffff80003a69:	c7 05 8f f2 00 00 08 	movl   $0x8e000008,0xf28f(%rip)        # ffffffff80012d02 <idt+0x802>
ffffffff80003a70:	00 00 8e 
    entry->reserved = 0;
ffffffff80003a73:	c7 05 8f f2 00 00 00 	movl   $0x0,0xf28f(%rip)        # ffffffff80012d0c <idt+0x80c>
ffffffff80003a7a:	00 00 00 
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003a7d:	66 89 05 6c f2 00 00 	mov    %ax,0xf26c(%rip)        # ffffffff80012cf0 <idt+0x7f0>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a84:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003a87:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80003a8b:	89 05 67 f2 00 00    	mov    %eax,0xf267(%rip)        # ffffffff80012cf8 <idt+0x7f8>
    create_descriptor(128, isr_stub_table[49], 0x00, 0x08, 0x8E);
ffffffff80003a91:	48 8b 05 58 c9 ff ff 	mov    -0x36a8(%rip),%rax        # ffffffff800003f0 <isr_stub_table+0x188>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003a98:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80003a9c:	66 89 15 53 f2 00 00 	mov    %dx,0xf253(%rip)        # ffffffff80012cf6 <idt+0x7f6>
    entry->base15_0 = (uint64_t)isr & 0xFFFF;
ffffffff80003aa3:	66 89 05 56 f2 00 00 	mov    %ax,0xf256(%rip)        # ffffffff80012d00 <idt+0x800>
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003aaa:	48 89 c2             	mov    %rax,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003aad:	48 c1 e8 20          	shr    $0x20,%rax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003ab1:	48 c1 ea 10          	shr    $0x10,%rdx
    entry->base63_32 = ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003ab5:	89 05 4d f2 00 00    	mov    %eax,0xf24d(%rip)        # ffffffff80012d08 <idt+0x808>

    pic_remap();
ffffffff80003abb:	31 c0                	xor    %eax,%eax
    entry->base31_16 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003abd:	66 89 15 42 f2 00 00 	mov    %dx,0xf242(%rip)        # ffffffff80012d06 <idt+0x806>
    pic_remap();
ffffffff80003ac4:	e8 67 e8 ff ff       	callq  ffffffff80002330 <pic_remap>
    pic_disable();
ffffffff80003ac9:	31 c0                	xor    %eax,%eax
ffffffff80003acb:	e8 30 e8 ff ff       	callq  ffffffff80002300 <pic_disable>

    

    idt_load(&idtr);
ffffffff80003ad0:	48 c7 c7 e8 24 01 80 	mov    $0xffffffff800124e8,%rdi
ffffffff80003ad7:	e8 1c c9 ff ff       	callq  ffffffff800003f8 <idt_load>

    pit_init(10000);
ffffffff80003adc:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff80003ae1:	e8 4a e9 ff ff       	callq  ffffffff80002430 <pit_init>

    pic_clear_mask(1);
ffffffff80003ae6:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80003aeb:	e8 c0 e7 ff ff       	callq  ffffffff800022b0 <pic_clear_mask>
    pic_clear_mask(0);
ffffffff80003af0:	31 ff                	xor    %edi,%edi


    //__asm__ volatile ("lidt %0" : : "m"(idtr));
    //__asm__ volatile ("sti");
}
ffffffff80003af2:	48 83 c4 08          	add    $0x8,%rsp
    pic_clear_mask(0);
ffffffff80003af6:	e9 b5 e7 ff ff       	jmpq   ffffffff800022b0 <pic_clear_mask>
ffffffff80003afb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80003b00 <interrupt_handler>:

uint64_t interrupt_handler(uint64_t rsp)
{
ffffffff80003b00:	55                   	push   %rbp
ffffffff80003b01:	53                   	push   %rbx
ffffffff80003b02:	48 89 fb             	mov    %rdi,%rbx
ffffffff80003b05:	48 83 ec 08          	sub    $0x8,%rsp
    struct interrupt_stack_frame* frame = (struct interrupt_stack_frame*)rsp;
    
    if(frame->int_no < 32)
ffffffff80003b09:	48 8b 77 78          	mov    0x78(%rdi),%rsi
ffffffff80003b0d:	48 83 fe 1f          	cmp    $0x1f,%rsi
ffffffff80003b11:	77 1d                	ja     ffffffff80003b30 <interrupt_handler+0x30>
    {
        if(frame->cs == 0x08)
ffffffff80003b13:	48 83 bf 90 00 00 00 	cmpq   $0x8,0x90(%rdi)
ffffffff80003b1a:	08 
ffffffff80003b1b:	74 63                	je     ffffffff80003b80 <interrupt_handler+0x80>
    {
        printf("Syscall 127\n");
        return rsp;
    }
    return rsp;
ffffffff80003b1d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003b21:	48 89 d8             	mov    %rbx,%rax
ffffffff80003b24:	5b                   	pop    %rbx
ffffffff80003b25:	5d                   	pop    %rbp
ffffffff80003b26:	c3                   	retq   
ffffffff80003b27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003b2e:	00 00 
    else if (frame->int_no < 48)
ffffffff80003b30:	48 83 fe 2f          	cmp    $0x2f,%rsi
ffffffff80003b34:	77 32                	ja     ffffffff80003b68 <interrupt_handler+0x68>
        uint64_t irq = frame->int_no - 32;
ffffffff80003b36:	48 8d 6e e0          	lea    -0x20(%rsi),%rbp
        if(irq > 1)
ffffffff80003b3a:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff80003b3e:	0f 87 fc 00 00 00    	ja     ffffffff80003c40 <interrupt_handler+0x140>
        switch(irq)
ffffffff80003b44:	0f 84 e6 00 00 00    	je     ffffffff80003c30 <interrupt_handler+0x130>
                pit_ticks++;
ffffffff80003b4a:	48 83 05 8e e9 00 00 	addq   $0x1,0xe98e(%rip)        # ffffffff800124e0 <pit_ticks>
ffffffff80003b51:	01 
        pic_EOI(irq);
ffffffff80003b52:	89 ef                	mov    %ebp,%edi
ffffffff80003b54:	e8 c7 e6 ff ff       	callq  ffffffff80002220 <pic_EOI>
ffffffff80003b59:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003b5d:	48 89 d8             	mov    %rbx,%rax
ffffffff80003b60:	5b                   	pop    %rbx
ffffffff80003b61:	5d                   	pop    %rbp
ffffffff80003b62:	c3                   	retq   
ffffffff80003b63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    else if (frame->int_no == 127)
ffffffff80003b68:	48 83 fe 7f          	cmp    $0x7f,%rsi
ffffffff80003b6c:	75 af                	jne    ffffffff80003b1d <interrupt_handler+0x1d>
        printf("Syscall 127\n");
ffffffff80003b6e:	48 c7 c7 0b 53 00 80 	mov    $0xffffffff8000530b,%rdi
ffffffff80003b75:	31 c0                	xor    %eax,%eax
ffffffff80003b77:	e8 d4 f9 ff ff       	callq  ffffffff80003550 <printf_>
        return rsp;
ffffffff80003b7c:	eb 9f                	jmp    ffffffff80003b1d <interrupt_handler+0x1d>
ffffffff80003b7e:	66 90                	xchg   %ax,%ax
            uint64_t cr2 = read_cr2();
ffffffff80003b80:	31 c0                	xor    %eax,%eax
ffffffff80003b82:	e8 09 c5 ff ff       	callq  ffffffff80000090 <read_cr2>
ffffffff80003b87:	48 89 c5             	mov    %rax,%rbp
            serial_write(0x3F8, frame->int_no + 65);
ffffffff80003b8a:	0f b6 43 78          	movzbl 0x78(%rbx),%eax
ffffffff80003b8e:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80003b93:	8d 70 41             	lea    0x41(%rax),%esi
ffffffff80003b96:	40 0f b6 f6          	movzbl %sil,%esi
ffffffff80003b9a:	e8 71 e4 ff ff       	callq  ffffffff80002010 <serial_write>
            printf("\nCPU Exception! INT %d   ERR %x  CR2 %p\n", frame->int_no, frame->err_no, cr2);
ffffffff80003b9f:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff80003ba6:	48 8b 73 78          	mov    0x78(%rbx),%rsi
ffffffff80003baa:	48 89 e9             	mov    %rbp,%rcx
ffffffff80003bad:	48 c7 c7 88 52 00 80 	mov    $0xffffffff80005288,%rdi
ffffffff80003bb4:	31 c0                	xor    %eax,%eax
ffffffff80003bb6:	e8 95 f9 ff ff       	callq  ffffffff80003550 <printf_>
            printf(_exception_messages[frame->int_no]);
ffffffff80003bbb:	48 8b 43 78          	mov    0x78(%rbx),%rax
ffffffff80003bbf:	48 8b 3c c5 40 54 00 	mov    -0x7fffabc0(,%rax,8),%rdi
ffffffff80003bc6:	80 
ffffffff80003bc7:	31 c0                	xor    %eax,%eax
ffffffff80003bc9:	e8 82 f9 ff ff       	callq  ffffffff80003550 <printf_>
            printf("\n");
ffffffff80003bce:	48 c7 c7 06 4d 00 80 	mov    $0xffffffff80004d06,%rdi
ffffffff80003bd5:	31 c0                	xor    %eax,%eax
ffffffff80003bd7:	e8 74 f9 ff ff       	callq  ffffffff80003550 <printf_>
            printf("SS: %x  RSP: %x  RFLAGS: %x  CS: %x  RIP: %x\n", frame->ss, frame->rsp, frame->rflags, frame->cs, frame->rip);
ffffffff80003bdc:	48 8b 8b 98 00 00 00 	mov    0x98(%rbx),%rcx
ffffffff80003be3:	48 8b 93 a0 00 00 00 	mov    0xa0(%rbx),%rdx
ffffffff80003bea:	48 c7 c7 b8 52 00 80 	mov    $0xffffffff800052b8,%rdi
ffffffff80003bf1:	48 8b b3 a8 00 00 00 	mov    0xa8(%rbx),%rsi
ffffffff80003bf8:	4c 8b 8b 88 00 00 00 	mov    0x88(%rbx),%r9
ffffffff80003bff:	31 c0                	xor    %eax,%eax
ffffffff80003c01:	4c 8b 83 90 00 00 00 	mov    0x90(%rbx),%r8
ffffffff80003c08:	e8 43 f9 ff ff       	callq  ffffffff80003550 <printf_>
            printf("rax: %x  rdi: %x", frame->rax, frame->rdi);
ffffffff80003c0d:	48 8b 53 48          	mov    0x48(%rbx),%rdx
ffffffff80003c11:	48 8b 73 70          	mov    0x70(%rbx),%rsi
ffffffff80003c15:	48 c7 c7 e6 52 00 80 	mov    $0xffffffff800052e6,%rdi
ffffffff80003c1c:	31 c0                	xor    %eax,%eax
ffffffff80003c1e:	e8 2d f9 ff ff       	callq  ffffffff80003550 <printf_>
            asm("cli");
ffffffff80003c23:	fa                   	cli    
            asm("hlt");
ffffffff80003c24:	f4                   	hlt    
ffffffff80003c25:	eb fe                	jmp    ffffffff80003c25 <interrupt_handler+0x125>
ffffffff80003c27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003c2e:	00 00 
                kbd_handle();
ffffffff80003c30:	31 c0                	xor    %eax,%eax
ffffffff80003c32:	e8 99 e4 ff ff       	callq  ffffffff800020d0 <kbd_handle>
                break;
ffffffff80003c37:	e9 16 ff ff ff       	jmpq   ffffffff80003b52 <interrupt_handler+0x52>
ffffffff80003c3c:	0f 1f 40 00          	nopl   0x0(%rax)
            printf("INT: %d  IRQ: %d  \n", frame->int_no, irq);
ffffffff80003c40:	48 89 ea             	mov    %rbp,%rdx
ffffffff80003c43:	48 c7 c7 f7 52 00 80 	mov    $0xffffffff800052f7,%rdi
ffffffff80003c4a:	31 c0                	xor    %eax,%eax
ffffffff80003c4c:	e8 ff f8 ff ff       	callq  ffffffff80003550 <printf_>
ffffffff80003c51:	e9 fc fe ff ff       	jmpq   ffffffff80003b52 <interrupt_handler+0x52>
